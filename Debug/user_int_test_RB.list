
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009378  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  08009488  08009488  00019488  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000017c  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001f0  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  08009f44  08009f44  00019f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08009f60  08009f60  00019f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08009f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000268  20000084  08009fe8  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002ec  08009fe8  000202ec  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   000190e4  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004549  00000000  00000000  00039191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ef8  00000000  00000000  0003d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001138  00000000  00000000  0003e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009111  00000000  00000000  0003f710  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005d81  00000000  00000000  00048821  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e5a2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004734  00000000  00000000  0004e620  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007f6f  00000000  00000000  00052d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08009470 	.word	0x08009470

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08009470 	.word	0x08009470

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	d1ed      	bne.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmpun>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x14>
 800111a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111e:	d108      	bne.n	8001132 <__aeabi_fcmpun+0x26>
 8001120:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001124:	d102      	bne.n	800112c <__aeabi_fcmpun+0x20>
 8001126:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112a:	d102      	bne.n	8001132 <__aeabi_fcmpun+0x26>
 800112c:	f04f 0000 	mov.w	r0, #0
 8001130:	4770      	bx	lr
 8001132:	f04f 0001 	mov.w	r0, #1
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2iz>:
 8001138:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30f      	bcc.n	8001162 <__aeabi_f2iz+0x2a>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d90d      	bls.n	8001168 <__aeabi_f2iz+0x30>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	bf18      	it	ne
 800115e:	4240      	negne	r0, r0
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2iz+0x3a>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d105      	bne.n	800117e <__aeabi_f2iz+0x46>
 8001172:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001176:	bf08      	it	eq
 8001178:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr

08001184 <__aeabi_f2uiz>:
 8001184:	0042      	lsls	r2, r0, #1
 8001186:	d20e      	bcs.n	80011a6 <__aeabi_f2uiz+0x22>
 8001188:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800118c:	d30b      	bcc.n	80011a6 <__aeabi_f2uiz+0x22>
 800118e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001192:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001196:	d409      	bmi.n	80011ac <__aeabi_f2uiz+0x28>
 8001198:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800119c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a0:	fa23 f002 	lsr.w	r0, r3, r2
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr
 80011ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b0:	d101      	bne.n	80011b6 <__aeabi_f2uiz+0x32>
 80011b2:	0242      	lsls	r2, r0, #9
 80011b4:	d102      	bne.n	80011bc <__aeabi_f2uiz+0x38>
 80011b6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ba:	4770      	bx	lr
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <selfrel_offset31>:
 80011c4:	6803      	ldr	r3, [r0, #0]
 80011c6:	005a      	lsls	r2, r3, #1
 80011c8:	bf4c      	ite	mi
 80011ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80011d2:	4418      	add	r0, r3
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop

080011d8 <search_EIT_table>:
 80011d8:	b361      	cbz	r1, 8001234 <search_EIT_table+0x5c>
 80011da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011de:	f101 3aff 	add.w	sl, r1, #4294967295
 80011e2:	4690      	mov	r8, r2
 80011e4:	4606      	mov	r6, r0
 80011e6:	46d1      	mov	r9, sl
 80011e8:	2700      	movs	r7, #0
 80011ea:	eb07 0409 	add.w	r4, r7, r9
 80011ee:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80011f2:	1064      	asrs	r4, r4, #1
 80011f4:	00e5      	lsls	r5, r4, #3
 80011f6:	1971      	adds	r1, r6, r5
 80011f8:	4608      	mov	r0, r1
 80011fa:	f7ff ffe3 	bl	80011c4 <selfrel_offset31>
 80011fe:	45a2      	cmp	sl, r4
 8001200:	4683      	mov	fp, r0
 8001202:	f105 0008 	add.w	r0, r5, #8
 8001206:	4430      	add	r0, r6
 8001208:	d009      	beq.n	800121e <search_EIT_table+0x46>
 800120a:	f7ff ffdb 	bl	80011c4 <selfrel_offset31>
 800120e:	45c3      	cmp	fp, r8
 8001210:	f100 30ff 	add.w	r0, r0, #4294967295
 8001214:	d805      	bhi.n	8001222 <search_EIT_table+0x4a>
 8001216:	4540      	cmp	r0, r8
 8001218:	d209      	bcs.n	800122e <search_EIT_table+0x56>
 800121a:	1c67      	adds	r7, r4, #1
 800121c:	e7e5      	b.n	80011ea <search_EIT_table+0x12>
 800121e:	45c3      	cmp	fp, r8
 8001220:	d905      	bls.n	800122e <search_EIT_table+0x56>
 8001222:	42a7      	cmp	r7, r4
 8001224:	d002      	beq.n	800122c <search_EIT_table+0x54>
 8001226:	f104 39ff 	add.w	r9, r4, #4294967295
 800122a:	e7de      	b.n	80011ea <search_EIT_table+0x12>
 800122c:	2100      	movs	r1, #0
 800122e:	4608      	mov	r0, r1
 8001230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001234:	4608      	mov	r0, r1
 8001236:	4770      	bx	lr

08001238 <__gnu_unwind_get_pr_addr>:
 8001238:	2801      	cmp	r0, #1
 800123a:	d007      	beq.n	800124c <__gnu_unwind_get_pr_addr+0x14>
 800123c:	2802      	cmp	r0, #2
 800123e:	d007      	beq.n	8001250 <__gnu_unwind_get_pr_addr+0x18>
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__gnu_unwind_get_pr_addr+0x1c>)
 8001242:	2800      	cmp	r0, #0
 8001244:	bf0c      	ite	eq
 8001246:	4618      	moveq	r0, r3
 8001248:	2000      	movne	r0, #0
 800124a:	4770      	bx	lr
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <__gnu_unwind_get_pr_addr+0x20>)
 800124e:	4770      	bx	lr
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <__gnu_unwind_get_pr_addr+0x24>)
 8001252:	4770      	bx	lr
 8001254:	08001949 	.word	0x08001949
 8001258:	0800194d 	.word	0x0800194d
 800125c:	08001951 	.word	0x08001951

08001260 <get_eit_entry>:
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <get_eit_entry+0x98>)
 8001264:	b083      	sub	sp, #12
 8001266:	4604      	mov	r4, r0
 8001268:	1e8d      	subs	r5, r1, #2
 800126a:	b373      	cbz	r3, 80012ca <get_eit_entry+0x6a>
 800126c:	a901      	add	r1, sp, #4
 800126e:	4628      	mov	r0, r5
 8001270:	f3af 8000 	nop.w
 8001274:	b318      	cbz	r0, 80012be <get_eit_entry+0x5e>
 8001276:	9901      	ldr	r1, [sp, #4]
 8001278:	462a      	mov	r2, r5
 800127a:	f7ff ffad 	bl	80011d8 <search_EIT_table>
 800127e:	4601      	mov	r1, r0
 8001280:	b1e8      	cbz	r0, 80012be <get_eit_entry+0x5e>
 8001282:	f7ff ff9f 	bl	80011c4 <selfrel_offset31>
 8001286:	684b      	ldr	r3, [r1, #4]
 8001288:	64a0      	str	r0, [r4, #72]	; 0x48
 800128a:	2b01      	cmp	r3, #1
 800128c:	d011      	beq.n	80012b2 <get_eit_entry+0x52>
 800128e:	2b00      	cmp	r3, #0
 8001290:	db22      	blt.n	80012d8 <get_eit_entry+0x78>
 8001292:	1d08      	adds	r0, r1, #4
 8001294:	f7ff ff96 	bl	80011c4 <selfrel_offset31>
 8001298:	2300      	movs	r3, #0
 800129a:	64e0      	str	r0, [r4, #76]	; 0x4c
 800129c:	6523      	str	r3, [r4, #80]	; 0x50
 800129e:	6803      	ldr	r3, [r0, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db1e      	blt.n	80012e2 <get_eit_entry+0x82>
 80012a4:	f7ff ff8e 	bl	80011c4 <selfrel_offset31>
 80012a8:	2300      	movs	r3, #0
 80012aa:	6120      	str	r0, [r4, #16]
 80012ac:	4618      	mov	r0, r3
 80012ae:	b003      	add	sp, #12
 80012b0:	bd30      	pop	{r4, r5, pc}
 80012b2:	2305      	movs	r3, #5
 80012b4:	2200      	movs	r2, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	6122      	str	r2, [r4, #16]
 80012ba:	b003      	add	sp, #12
 80012bc:	bd30      	pop	{r4, r5, pc}
 80012be:	2309      	movs	r3, #9
 80012c0:	2200      	movs	r2, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	6122      	str	r2, [r4, #16]
 80012c6:	b003      	add	sp, #12
 80012c8:	bd30      	pop	{r4, r5, pc}
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <get_eit_entry+0x9c>)
 80012cc:	490c      	ldr	r1, [pc, #48]	; (8001300 <get_eit_entry+0xa0>)
 80012ce:	4618      	mov	r0, r3
 80012d0:	1ac9      	subs	r1, r1, r3
 80012d2:	10c9      	asrs	r1, r1, #3
 80012d4:	9101      	str	r1, [sp, #4]
 80012d6:	e7cf      	b.n	8001278 <get_eit_entry+0x18>
 80012d8:	2301      	movs	r3, #1
 80012da:	1d08      	adds	r0, r1, #4
 80012dc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80012de:	6523      	str	r3, [r4, #80]	; 0x50
 80012e0:	e7dd      	b.n	800129e <get_eit_entry+0x3e>
 80012e2:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80012e6:	f7ff ffa7 	bl	8001238 <__gnu_unwind_get_pr_addr>
 80012ea:	2800      	cmp	r0, #0
 80012ec:	6120      	str	r0, [r4, #16]
 80012ee:	bf14      	ite	ne
 80012f0:	2300      	movne	r3, #0
 80012f2:	2309      	moveq	r3, #9
 80012f4:	e7da      	b.n	80012ac <get_eit_entry+0x4c>
 80012f6:	bf00      	nop
 80012f8:	00000000 	.word	0x00000000
 80012fc:	08009d54 	.word	0x08009d54
 8001300:	08009f44 	.word	0x08009f44

08001304 <restore_non_core_regs>:
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	b510      	push	{r4, lr}
 8001308:	07da      	lsls	r2, r3, #31
 800130a:	4604      	mov	r4, r0
 800130c:	d406      	bmi.n	800131c <restore_non_core_regs+0x18>
 800130e:	079b      	lsls	r3, r3, #30
 8001310:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001314:	d509      	bpl.n	800132a <restore_non_core_regs+0x26>
 8001316:	f000 fc57 	bl	8001bc8 <__gnu_Unwind_Restore_VFP_D>
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	0759      	lsls	r1, r3, #29
 800131e:	d509      	bpl.n	8001334 <restore_non_core_regs+0x30>
 8001320:	071a      	lsls	r2, r3, #28
 8001322:	d50e      	bpl.n	8001342 <restore_non_core_regs+0x3e>
 8001324:	06db      	lsls	r3, r3, #27
 8001326:	d513      	bpl.n	8001350 <restore_non_core_regs+0x4c>
 8001328:	bd10      	pop	{r4, pc}
 800132a:	f000 fc45 	bl	8001bb8 <__gnu_Unwind_Restore_VFP>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	0759      	lsls	r1, r3, #29
 8001332:	d4f5      	bmi.n	8001320 <restore_non_core_regs+0x1c>
 8001334:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001338:	f000 fc4e 	bl	8001bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	071a      	lsls	r2, r3, #28
 8001340:	d4f0      	bmi.n	8001324 <restore_non_core_regs+0x20>
 8001342:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001346:	f000 fc4f 	bl	8001be8 <__gnu_Unwind_Restore_WMMXD>
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	06db      	lsls	r3, r3, #27
 800134e:	d4eb      	bmi.n	8001328 <restore_non_core_regs+0x24>
 8001350:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001358:	f000 bc8a 	b.w	8001c70 <__gnu_Unwind_Restore_WMMXC>

0800135c <_Unwind_decode_typeinfo_ptr.isra.0>:
 800135c:	6803      	ldr	r3, [r0, #0]
 800135e:	b103      	cbz	r3, 8001362 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001360:	4403      	add	r3, r0
 8001362:	4618      	mov	r0, r3
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <__gnu_unwind_24bit.isra.1>:
 8001368:	2009      	movs	r0, #9
 800136a:	4770      	bx	lr

0800136c <_Unwind_DebugHook>:
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop

08001370 <unwind_phase2>:
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	4604      	mov	r4, r0
 8001374:	460d      	mov	r5, r1
 8001376:	e008      	b.n	800138a <unwind_phase2+0x1a>
 8001378:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800137a:	6923      	ldr	r3, [r4, #16]
 800137c:	6162      	str	r2, [r4, #20]
 800137e:	4621      	mov	r1, r4
 8001380:	462a      	mov	r2, r5
 8001382:	2001      	movs	r0, #1
 8001384:	4798      	blx	r3
 8001386:	2808      	cmp	r0, #8
 8001388:	d108      	bne.n	800139c <unwind_phase2+0x2c>
 800138a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff ff67 	bl	8001260 <get_eit_entry>
 8001392:	4606      	mov	r6, r0
 8001394:	2800      	cmp	r0, #0
 8001396:	d0ef      	beq.n	8001378 <unwind_phase2+0x8>
 8001398:	f007 fef1 	bl	800917e <abort>
 800139c:	2807      	cmp	r0, #7
 800139e:	d1fb      	bne.n	8001398 <unwind_phase2+0x28>
 80013a0:	4630      	mov	r0, r6
 80013a2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80013a4:	f7ff ffe2 	bl	800136c <_Unwind_DebugHook>
 80013a8:	1d28      	adds	r0, r5, #4
 80013aa:	f000 fbf9 	bl	8001ba0 <__restore_core_regs>
 80013ae:	bf00      	nop

080013b0 <unwind_phase2_forced>:
 80013b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013b4:	4605      	mov	r5, r0
 80013b6:	2700      	movs	r7, #0
 80013b8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80013bc:	ac03      	add	r4, sp, #12
 80013be:	1d0e      	adds	r6, r1, #4
 80013c0:	4692      	mov	sl, r2
 80013c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013d2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80013d6:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80013da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80013de:	ac02      	add	r4, sp, #8
 80013e0:	4628      	mov	r0, r5
 80013e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013e4:	6027      	str	r7, [r4, #0]
 80013e6:	f7ff ff3b 	bl	8001260 <get_eit_entry>
 80013ea:	f1ba 0f00 	cmp.w	sl, #0
 80013ee:	4607      	mov	r7, r0
 80013f0:	bf14      	ite	ne
 80013f2:	260a      	movne	r6, #10
 80013f4:	2609      	moveq	r6, #9
 80013f6:	b17f      	cbz	r7, 8001418 <unwind_phase2_forced+0x68>
 80013f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80013fa:	f046 0110 	orr.w	r1, r6, #16
 80013fe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001402:	462a      	mov	r2, r5
 8001404:	6463      	str	r3, [r4, #68]	; 0x44
 8001406:	2001      	movs	r0, #1
 8001408:	462b      	mov	r3, r5
 800140a:	47c0      	blx	r8
 800140c:	bb78      	cbnz	r0, 800146e <unwind_phase2_forced+0xbe>
 800140e:	4638      	mov	r0, r7
 8001410:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800141a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800141e:	616b      	str	r3, [r5, #20]
 8001420:	4621      	mov	r1, r4
 8001422:	a87a      	add	r0, sp, #488	; 0x1e8
 8001424:	f008 f818 	bl	8009458 <memcpy>
 8001428:	692b      	ldr	r3, [r5, #16]
 800142a:	aa7a      	add	r2, sp, #488	; 0x1e8
 800142c:	4629      	mov	r1, r5
 800142e:	4630      	mov	r0, r6
 8001430:	4798      	blx	r3
 8001432:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8001434:	4682      	mov	sl, r0
 8001436:	e88d 0210 	stmia.w	sp, {r4, r9}
 800143a:	4631      	mov	r1, r6
 800143c:	6463      	str	r3, [r4, #68]	; 0x44
 800143e:	462a      	mov	r2, r5
 8001440:	462b      	mov	r3, r5
 8001442:	2001      	movs	r0, #1
 8001444:	47c0      	blx	r8
 8001446:	b990      	cbnz	r0, 800146e <unwind_phase2_forced+0xbe>
 8001448:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800144c:	a97a      	add	r1, sp, #488	; 0x1e8
 800144e:	4620      	mov	r0, r4
 8001450:	f008 f802 	bl	8009458 <memcpy>
 8001454:	f1ba 0f08 	cmp.w	sl, #8
 8001458:	d106      	bne.n	8001468 <unwind_phase2_forced+0xb8>
 800145a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800145c:	4628      	mov	r0, r5
 800145e:	f7ff feff 	bl	8001260 <get_eit_entry>
 8001462:	2609      	movs	r6, #9
 8001464:	4607      	mov	r7, r0
 8001466:	e7c6      	b.n	80013f6 <unwind_phase2_forced+0x46>
 8001468:	f1ba 0f07 	cmp.w	sl, #7
 800146c:	d005      	beq.n	800147a <unwind_phase2_forced+0xca>
 800146e:	2709      	movs	r7, #9
 8001470:	4638      	mov	r0, r7
 8001472:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8001476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800147a:	4638      	mov	r0, r7
 800147c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800147e:	f7ff ff75 	bl	800136c <_Unwind_DebugHook>
 8001482:	a803      	add	r0, sp, #12
 8001484:	f000 fb8c 	bl	8001ba0 <__restore_core_regs>

08001488 <_Unwind_GetCFA>:
 8001488:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800148a:	4770      	bx	lr

0800148c <__gnu_Unwind_RaiseException>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	f04f 3eff 	mov.w	lr, #4294967295
 8001492:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001494:	b0f9      	sub	sp, #484	; 0x1e4
 8001496:	640b      	str	r3, [r1, #64]	; 0x40
 8001498:	1d0e      	adds	r6, r1, #4
 800149a:	ad01      	add	r5, sp, #4
 800149c:	460f      	mov	r7, r1
 800149e:	4604      	mov	r4, r0
 80014a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80014b4:	f8cd e000 	str.w	lr, [sp]
 80014b8:	e006      	b.n	80014c8 <__gnu_Unwind_RaiseException+0x3c>
 80014ba:	6923      	ldr	r3, [r4, #16]
 80014bc:	466a      	mov	r2, sp
 80014be:	4621      	mov	r1, r4
 80014c0:	4798      	blx	r3
 80014c2:	2808      	cmp	r0, #8
 80014c4:	4605      	mov	r5, r0
 80014c6:	d108      	bne.n	80014da <__gnu_Unwind_RaiseException+0x4e>
 80014c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80014ca:	4620      	mov	r0, r4
 80014cc:	f7ff fec8 	bl	8001260 <get_eit_entry>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d0f2      	beq.n	80014ba <__gnu_Unwind_RaiseException+0x2e>
 80014d4:	2009      	movs	r0, #9
 80014d6:	b079      	add	sp, #484	; 0x1e4
 80014d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014da:	4668      	mov	r0, sp
 80014dc:	f7ff ff12 	bl	8001304 <restore_non_core_regs>
 80014e0:	2d06      	cmp	r5, #6
 80014e2:	d1f7      	bne.n	80014d4 <__gnu_Unwind_RaiseException+0x48>
 80014e4:	4639      	mov	r1, r7
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ff42 	bl	8001370 <unwind_phase2>

080014ec <__gnu_Unwind_ForcedUnwind>:
 80014ec:	b430      	push	{r4, r5}
 80014ee:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80014f0:	60c1      	str	r1, [r0, #12]
 80014f2:	6182      	str	r2, [r0, #24]
 80014f4:	4619      	mov	r1, r3
 80014f6:	641d      	str	r5, [r3, #64]	; 0x40
 80014f8:	2200      	movs	r2, #0
 80014fa:	bc30      	pop	{r4, r5}
 80014fc:	e758      	b.n	80013b0 <unwind_phase2_forced>
 80014fe:	bf00      	nop

08001500 <__gnu_Unwind_Resume>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	6943      	ldr	r3, [r0, #20]
 8001504:	68c6      	ldr	r6, [r0, #12]
 8001506:	640b      	str	r3, [r1, #64]	; 0x40
 8001508:	b126      	cbz	r6, 8001514 <__gnu_Unwind_Resume+0x14>
 800150a:	2201      	movs	r2, #1
 800150c:	f7ff ff50 	bl	80013b0 <unwind_phase2_forced>
 8001510:	f007 fe35 	bl	800917e <abort>
 8001514:	6903      	ldr	r3, [r0, #16]
 8001516:	460a      	mov	r2, r1
 8001518:	4604      	mov	r4, r0
 800151a:	460d      	mov	r5, r1
 800151c:	4601      	mov	r1, r0
 800151e:	2002      	movs	r0, #2
 8001520:	4798      	blx	r3
 8001522:	2807      	cmp	r0, #7
 8001524:	d007      	beq.n	8001536 <__gnu_Unwind_Resume+0x36>
 8001526:	2808      	cmp	r0, #8
 8001528:	d103      	bne.n	8001532 <__gnu_Unwind_Resume+0x32>
 800152a:	4629      	mov	r1, r5
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff1f 	bl	8001370 <unwind_phase2>
 8001532:	f007 fe24 	bl	800917e <abort>
 8001536:	4630      	mov	r0, r6
 8001538:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800153a:	f7ff ff17 	bl	800136c <_Unwind_DebugHook>
 800153e:	1d28      	adds	r0, r5, #4
 8001540:	f000 fb2e 	bl	8001ba0 <__restore_core_regs>

08001544 <__gnu_Unwind_Resume_or_Rethrow>:
 8001544:	68c2      	ldr	r2, [r0, #12]
 8001546:	b12a      	cbz	r2, 8001554 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001548:	b410      	push	{r4}
 800154a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 800154c:	2200      	movs	r2, #0
 800154e:	640c      	str	r4, [r1, #64]	; 0x40
 8001550:	bc10      	pop	{r4}
 8001552:	e72d      	b.n	80013b0 <unwind_phase2_forced>
 8001554:	e79a      	b.n	800148c <__gnu_Unwind_RaiseException>
 8001556:	bf00      	nop

08001558 <_Unwind_Complete>:
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <_Unwind_DeleteException>:
 800155c:	6883      	ldr	r3, [r0, #8]
 800155e:	b113      	cbz	r3, 8001566 <_Unwind_DeleteException+0xa>
 8001560:	4601      	mov	r1, r0
 8001562:	2001      	movs	r0, #1
 8001564:	4718      	bx	r3
 8001566:	4770      	bx	lr

08001568 <_Unwind_VRS_Get>:
 8001568:	b500      	push	{lr}
 800156a:	2904      	cmp	r1, #4
 800156c:	d807      	bhi.n	800157e <_Unwind_VRS_Get+0x16>
 800156e:	e8df f001 	tbb	[pc, r1]
 8001572:	0903      	.short	0x0903
 8001574:	0906      	.short	0x0906
 8001576:	09          	.byte	0x09
 8001577:	00          	.byte	0x00
 8001578:	b90b      	cbnz	r3, 800157e <_Unwind_VRS_Get+0x16>
 800157a:	2a0f      	cmp	r2, #15
 800157c:	d905      	bls.n	800158a <_Unwind_VRS_Get+0x22>
 800157e:	2002      	movs	r0, #2
 8001580:	f85d fb04 	ldr.w	pc, [sp], #4
 8001584:	2001      	movs	r0, #1
 8001586:	f85d fb04 	ldr.w	pc, [sp], #4
 800158a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800158e:	6852      	ldr	r2, [r2, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f85d fb04 	ldr.w	pc, [sp], #4
 800159a:	bf00      	nop

0800159c <_Unwind_GetGR>:
 800159c:	2300      	movs	r3, #0
 800159e:	b510      	push	{r4, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	ac03      	add	r4, sp, #12
 80015a4:	460a      	mov	r2, r1
 80015a6:	9400      	str	r4, [sp, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff ffdd 	bl	8001568 <_Unwind_VRS_Get>
 80015ae:	9803      	ldr	r0, [sp, #12]
 80015b0:	b004      	add	sp, #16
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <_Unwind_VRS_Set>:
 80015b4:	b500      	push	{lr}
 80015b6:	2904      	cmp	r1, #4
 80015b8:	d807      	bhi.n	80015ca <_Unwind_VRS_Set+0x16>
 80015ba:	e8df f001 	tbb	[pc, r1]
 80015be:	0903      	.short	0x0903
 80015c0:	0906      	.short	0x0906
 80015c2:	09          	.byte	0x09
 80015c3:	00          	.byte	0x00
 80015c4:	b90b      	cbnz	r3, 80015ca <_Unwind_VRS_Set+0x16>
 80015c6:	2a0f      	cmp	r2, #15
 80015c8:	d905      	bls.n	80015d6 <_Unwind_VRS_Set+0x22>
 80015ca:	2002      	movs	r0, #2
 80015cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d0:	2001      	movs	r0, #1
 80015d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015d6:	9901      	ldr	r1, [sp, #4]
 80015d8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80015dc:	6809      	ldr	r1, [r1, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	6051      	str	r1, [r2, #4]
 80015e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80015e6:	bf00      	nop

080015e8 <_Unwind_SetGR>:
 80015e8:	2300      	movs	r3, #0
 80015ea:	b510      	push	{r4, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	ac04      	add	r4, sp, #16
 80015f0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80015f4:	9400      	str	r4, [sp, #0]
 80015f6:	460a      	mov	r2, r1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff ffdb 	bl	80015b4 <_Unwind_VRS_Set>
 80015fe:	b004      	add	sp, #16
 8001600:	bd10      	pop	{r4, pc}
 8001602:	bf00      	nop

08001604 <__gnu_Unwind_Backtrace>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	f04f 3eff 	mov.w	lr, #4294967295
 800160a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800160c:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	1d15      	adds	r5, r2, #4
 8001614:	ac17      	add	r4, sp, #92	; 0x5c
 8001616:	4607      	mov	r7, r0
 8001618:	460e      	mov	r6, r1
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001626:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800162a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800162e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8001632:	e012      	b.n	800165a <__gnu_Unwind_Backtrace+0x56>
 8001634:	210c      	movs	r1, #12
 8001636:	a816      	add	r0, sp, #88	; 0x58
 8001638:	466a      	mov	r2, sp
 800163a:	f7ff ffd5 	bl	80015e8 <_Unwind_SetGR>
 800163e:	4631      	mov	r1, r6
 8001640:	a816      	add	r0, sp, #88	; 0x58
 8001642:	47b8      	blx	r7
 8001644:	b978      	cbnz	r0, 8001666 <__gnu_Unwind_Backtrace+0x62>
 8001646:	9b04      	ldr	r3, [sp, #16]
 8001648:	aa16      	add	r2, sp, #88	; 0x58
 800164a:	4669      	mov	r1, sp
 800164c:	2008      	movs	r0, #8
 800164e:	4798      	blx	r3
 8001650:	2805      	cmp	r0, #5
 8001652:	4604      	mov	r4, r0
 8001654:	d008      	beq.n	8001668 <__gnu_Unwind_Backtrace+0x64>
 8001656:	2809      	cmp	r0, #9
 8001658:	d005      	beq.n	8001666 <__gnu_Unwind_Backtrace+0x62>
 800165a:	9926      	ldr	r1, [sp, #152]	; 0x98
 800165c:	4668      	mov	r0, sp
 800165e:	f7ff fdff 	bl	8001260 <get_eit_entry>
 8001662:	2800      	cmp	r0, #0
 8001664:	d0e6      	beq.n	8001634 <__gnu_Unwind_Backtrace+0x30>
 8001666:	2409      	movs	r4, #9
 8001668:	a816      	add	r0, sp, #88	; 0x58
 800166a:	f7ff fe4b 	bl	8001304 <restore_non_core_regs>
 800166e:	4620      	mov	r0, r4
 8001670:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001676:	bf00      	nop

08001678 <__gnu_unwind_pr_common>:
 8001678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800167c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800167e:	4691      	mov	r9, r2
 8001680:	6822      	ldr	r2, [r4, #0]
 8001682:	b08b      	sub	sp, #44	; 0x2c
 8001684:	3404      	adds	r4, #4
 8001686:	460d      	mov	r5, r1
 8001688:	9207      	str	r2, [sp, #28]
 800168a:	9408      	str	r4, [sp, #32]
 800168c:	f000 0b03 	and.w	fp, r0, #3
 8001690:	461e      	mov	r6, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d160      	bne.n	8001758 <__gnu_unwind_pr_common+0xe0>
 8001696:	2303      	movs	r3, #3
 8001698:	0212      	lsls	r2, r2, #8
 800169a:	9207      	str	r2, [sp, #28]
 800169c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80016a0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80016a4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80016a6:	f1bb 0f02 	cmp.w	fp, #2
 80016aa:	bf08      	it	eq
 80016ac:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80016ae:	f013 0301 	ands.w	r3, r3, #1
 80016b2:	d140      	bne.n	8001736 <__gnu_unwind_pr_common+0xbe>
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	f000 0308 	and.w	r3, r0, #8
 80016ba:	9303      	str	r3, [sp, #12]
 80016bc:	f8d4 8000 	ldr.w	r8, [r4]
 80016c0:	f1b8 0f00 	cmp.w	r8, #0
 80016c4:	d039      	beq.n	800173a <__gnu_unwind_pr_common+0xc2>
 80016c6:	2e02      	cmp	r6, #2
 80016c8:	d043      	beq.n	8001752 <__gnu_unwind_pr_common+0xda>
 80016ca:	f8b4 8000 	ldrh.w	r8, [r4]
 80016ce:	8867      	ldrh	r7, [r4, #2]
 80016d0:	3404      	adds	r4, #4
 80016d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80016d4:	f027 0a01 	bic.w	sl, r7, #1
 80016d8:	210f      	movs	r1, #15
 80016da:	4648      	mov	r0, r9
 80016dc:	449a      	add	sl, r3
 80016de:	f7ff ff5d 	bl	800159c <_Unwind_GetGR>
 80016e2:	4582      	cmp	sl, r0
 80016e4:	d833      	bhi.n	800174e <__gnu_unwind_pr_common+0xd6>
 80016e6:	f028 0301 	bic.w	r3, r8, #1
 80016ea:	449a      	add	sl, r3
 80016ec:	4550      	cmp	r0, sl
 80016ee:	bf2c      	ite	cs
 80016f0:	2000      	movcs	r0, #0
 80016f2:	2001      	movcc	r0, #1
 80016f4:	007f      	lsls	r7, r7, #1
 80016f6:	f007 0702 	and.w	r7, r7, #2
 80016fa:	f008 0801 	and.w	r8, r8, #1
 80016fe:	ea47 0708 	orr.w	r7, r7, r8
 8001702:	2f01      	cmp	r7, #1
 8001704:	d03e      	beq.n	8001784 <__gnu_unwind_pr_common+0x10c>
 8001706:	d335      	bcc.n	8001774 <__gnu_unwind_pr_common+0xfc>
 8001708:	2f02      	cmp	r7, #2
 800170a:	d11c      	bne.n	8001746 <__gnu_unwind_pr_common+0xce>
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001712:	9202      	str	r2, [sp, #8]
 8001714:	f1bb 0f00 	cmp.w	fp, #0
 8001718:	d176      	bne.n	8001808 <__gnu_unwind_pr_common+0x190>
 800171a:	b128      	cbz	r0, 8001728 <__gnu_unwind_pr_common+0xb0>
 800171c:	9903      	ldr	r1, [sp, #12]
 800171e:	2900      	cmp	r1, #0
 8001720:	d07e      	beq.n	8001820 <__gnu_unwind_pr_common+0x1a8>
 8001722:	2a00      	cmp	r2, #0
 8001724:	f000 80a6 	beq.w	8001874 <__gnu_unwind_pr_common+0x1fc>
 8001728:	2b00      	cmp	r3, #0
 800172a:	db77      	blt.n	800181c <__gnu_unwind_pr_common+0x1a4>
 800172c:	9b02      	ldr	r3, [sp, #8]
 800172e:	3301      	adds	r3, #1
 8001730:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001734:	e7c2      	b.n	80016bc <__gnu_unwind_pr_common+0x44>
 8001736:	2300      	movs	r3, #0
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	2e02      	cmp	r6, #2
 800173c:	dd3e      	ble.n	80017bc <__gnu_unwind_pr_common+0x144>
 800173e:	f7ff fe13 	bl	8001368 <__gnu_unwind_24bit.isra.1>
 8001742:	2800      	cmp	r0, #0
 8001744:	d040      	beq.n	80017c8 <__gnu_unwind_pr_common+0x150>
 8001746:	2009      	movs	r0, #9
 8001748:	b00b      	add	sp, #44	; 0x2c
 800174a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800174e:	2000      	movs	r0, #0
 8001750:	e7d0      	b.n	80016f4 <__gnu_unwind_pr_common+0x7c>
 8001752:	6867      	ldr	r7, [r4, #4]
 8001754:	3408      	adds	r4, #8
 8001756:	e7bc      	b.n	80016d2 <__gnu_unwind_pr_common+0x5a>
 8001758:	2b02      	cmp	r3, #2
 800175a:	dca3      	bgt.n	80016a4 <__gnu_unwind_pr_common+0x2c>
 800175c:	2102      	movs	r1, #2
 800175e:	0c13      	lsrs	r3, r2, #16
 8001760:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8001764:	0412      	lsls	r2, r2, #16
 8001766:	b2db      	uxtb	r3, r3
 8001768:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800176c:	9207      	str	r2, [sp, #28]
 800176e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8001772:	e797      	b.n	80016a4 <__gnu_unwind_pr_common+0x2c>
 8001774:	f1bb 0f00 	cmp.w	fp, #0
 8001778:	d002      	beq.n	8001780 <__gnu_unwind_pr_common+0x108>
 800177a:	2800      	cmp	r0, #0
 800177c:	f040 80bd 	bne.w	80018fa <__gnu_unwind_pr_common+0x282>
 8001780:	3404      	adds	r4, #4
 8001782:	e79b      	b.n	80016bc <__gnu_unwind_pr_common+0x44>
 8001784:	f1bb 0f00 	cmp.w	fp, #0
 8001788:	d125      	bne.n	80017d6 <__gnu_unwind_pr_common+0x15e>
 800178a:	b1a8      	cbz	r0, 80017b8 <__gnu_unwind_pr_common+0x140>
 800178c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001790:	1c99      	adds	r1, r3, #2
 8001792:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001796:	d0d6      	beq.n	8001746 <__gnu_unwind_pr_common+0xce>
 8001798:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800179c:	3301      	adds	r3, #1
 800179e:	9106      	str	r1, [sp, #24]
 80017a0:	f000 80a3 	beq.w	80018ea <__gnu_unwind_pr_common+0x272>
 80017a4:	1d20      	adds	r0, r4, #4
 80017a6:	f7ff fdd9 	bl	800135c <_Unwind_decode_typeinfo_ptr.isra.0>
 80017aa:	ab06      	add	r3, sp, #24
 80017ac:	4601      	mov	r1, r0
 80017ae:	4628      	mov	r0, r5
 80017b0:	f004 fb7e 	bl	8005eb0 <__cxa_type_match>
 80017b4:	2800      	cmp	r0, #0
 80017b6:	d177      	bne.n	80018a8 <__gnu_unwind_pr_common+0x230>
 80017b8:	3408      	adds	r4, #8
 80017ba:	e77f      	b.n	80016bc <__gnu_unwind_pr_common+0x44>
 80017bc:	a907      	add	r1, sp, #28
 80017be:	4648      	mov	r0, r9
 80017c0:	f000 faf0 	bl	8001da4 <__gnu_unwind_execute>
 80017c4:	2800      	cmp	r0, #0
 80017c6:	d1be      	bne.n	8001746 <__gnu_unwind_pr_common+0xce>
 80017c8:	9b01      	ldr	r3, [sp, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d15c      	bne.n	8001888 <__gnu_unwind_pr_common+0x210>
 80017ce:	2008      	movs	r0, #8
 80017d0:	b00b      	add	sp, #44	; 0x2c
 80017d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017d6:	210d      	movs	r1, #13
 80017d8:	4648      	mov	r0, r9
 80017da:	6a2f      	ldr	r7, [r5, #32]
 80017dc:	f7ff fede 	bl	800159c <_Unwind_GetGR>
 80017e0:	4287      	cmp	r7, r0
 80017e2:	d1e9      	bne.n	80017b8 <__gnu_unwind_pr_common+0x140>
 80017e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017e6:	429c      	cmp	r4, r3
 80017e8:	d1e6      	bne.n	80017b8 <__gnu_unwind_pr_common+0x140>
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff fcea 	bl	80011c4 <selfrel_offset31>
 80017f0:	210f      	movs	r1, #15
 80017f2:	4602      	mov	r2, r0
 80017f4:	4648      	mov	r0, r9
 80017f6:	f7ff fef7 	bl	80015e8 <_Unwind_SetGR>
 80017fa:	4648      	mov	r0, r9
 80017fc:	462a      	mov	r2, r5
 80017fe:	2100      	movs	r1, #0
 8001800:	f7ff fef2 	bl	80015e8 <_Unwind_SetGR>
 8001804:	2007      	movs	r0, #7
 8001806:	e79f      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 8001808:	210d      	movs	r1, #13
 800180a:	4648      	mov	r0, r9
 800180c:	6a2f      	ldr	r7, [r5, #32]
 800180e:	f7ff fec5 	bl	800159c <_Unwind_GetGR>
 8001812:	4287      	cmp	r7, r0
 8001814:	d058      	beq.n	80018c8 <__gnu_unwind_pr_common+0x250>
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	da87      	bge.n	800172c <__gnu_unwind_pr_common+0xb4>
 800181c:	3404      	adds	r4, #4
 800181e:	e785      	b.n	800172c <__gnu_unwind_pr_common+0xb4>
 8001820:	9b02      	ldr	r3, [sp, #8]
 8001822:	b33b      	cbz	r3, 8001874 <__gnu_unwind_pr_common+0x1fc>
 8001824:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001828:	1d27      	adds	r7, r4, #4
 800182a:	f8cd b010 	str.w	fp, [sp, #16]
 800182e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8001832:	46a3      	mov	fp, r4
 8001834:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001838:	461c      	mov	r4, r3
 800183a:	9605      	str	r6, [sp, #20]
 800183c:	e002      	b.n	8001844 <__gnu_unwind_pr_common+0x1cc>
 800183e:	45b2      	cmp	sl, r6
 8001840:	46b0      	mov	r8, r6
 8001842:	d016      	beq.n	8001872 <__gnu_unwind_pr_common+0x1fa>
 8001844:	4638      	mov	r0, r7
 8001846:	9406      	str	r4, [sp, #24]
 8001848:	f7ff fd88 	bl	800135c <_Unwind_decode_typeinfo_ptr.isra.0>
 800184c:	ab06      	add	r3, sp, #24
 800184e:	4601      	mov	r1, r0
 8001850:	2200      	movs	r2, #0
 8001852:	4628      	mov	r0, r5
 8001854:	f004 fb2c 	bl	8005eb0 <__cxa_type_match>
 8001858:	f108 0601 	add.w	r6, r8, #1
 800185c:	3704      	adds	r7, #4
 800185e:	2800      	cmp	r0, #0
 8001860:	d0ed      	beq.n	800183e <__gnu_unwind_pr_common+0x1c6>
 8001862:	9b02      	ldr	r3, [sp, #8]
 8001864:	465c      	mov	r4, fp
 8001866:	4543      	cmp	r3, r8
 8001868:	f8dd b010 	ldr.w	fp, [sp, #16]
 800186c:	9e05      	ldr	r6, [sp, #20]
 800186e:	d1d2      	bne.n	8001816 <__gnu_unwind_pr_common+0x19e>
 8001870:	e000      	b.n	8001874 <__gnu_unwind_pr_common+0x1fc>
 8001872:	465c      	mov	r4, fp
 8001874:	4648      	mov	r0, r9
 8001876:	210d      	movs	r1, #13
 8001878:	f7ff fe90 	bl	800159c <_Unwind_GetGR>
 800187c:	9b06      	ldr	r3, [sp, #24]
 800187e:	6228      	str	r0, [r5, #32]
 8001880:	62ac      	str	r4, [r5, #40]	; 0x28
 8001882:	626b      	str	r3, [r5, #36]	; 0x24
 8001884:	2006      	movs	r0, #6
 8001886:	e75f      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 8001888:	210f      	movs	r1, #15
 800188a:	4648      	mov	r0, r9
 800188c:	f7ff fe86 	bl	800159c <_Unwind_GetGR>
 8001890:	210e      	movs	r1, #14
 8001892:	4602      	mov	r2, r0
 8001894:	4648      	mov	r0, r9
 8001896:	f7ff fea7 	bl	80015e8 <_Unwind_SetGR>
 800189a:	4648      	mov	r0, r9
 800189c:	4a29      	ldr	r2, [pc, #164]	; (8001944 <__gnu_unwind_pr_common+0x2cc>)
 800189e:	210f      	movs	r1, #15
 80018a0:	f7ff fea2 	bl	80015e8 <_Unwind_SetGR>
 80018a4:	2007      	movs	r0, #7
 80018a6:	e74f      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 80018a8:	4607      	mov	r7, r0
 80018aa:	210d      	movs	r1, #13
 80018ac:	4648      	mov	r0, r9
 80018ae:	f7ff fe75 	bl	800159c <_Unwind_GetGR>
 80018b2:	2f02      	cmp	r7, #2
 80018b4:	6228      	str	r0, [r5, #32]
 80018b6:	d11d      	bne.n	80018f4 <__gnu_unwind_pr_common+0x27c>
 80018b8:	462b      	mov	r3, r5
 80018ba:	9a06      	ldr	r2, [sp, #24]
 80018bc:	f843 2f2c 	str.w	r2, [r3, #44]!
 80018c0:	626b      	str	r3, [r5, #36]	; 0x24
 80018c2:	62ac      	str	r4, [r5, #40]	; 0x28
 80018c4:	2006      	movs	r0, #6
 80018c6:	e73f      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 80018c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80018ca:	429c      	cmp	r4, r3
 80018cc:	d1a3      	bne.n	8001816 <__gnu_unwind_pr_common+0x19e>
 80018ce:	2204      	movs	r2, #4
 80018d0:	2700      	movs	r7, #0
 80018d2:	9902      	ldr	r1, [sp, #8]
 80018d4:	18a3      	adds	r3, r4, r2
 80018d6:	62a9      	str	r1, [r5, #40]	; 0x28
 80018d8:	62ef      	str	r7, [r5, #44]	; 0x2c
 80018da:	632a      	str	r2, [r5, #48]	; 0x30
 80018dc:	636b      	str	r3, [r5, #52]	; 0x34
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	42bb      	cmp	r3, r7
 80018e2:	db1d      	blt.n	8001920 <__gnu_unwind_pr_common+0x2a8>
 80018e4:	2301      	movs	r3, #1
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	e720      	b.n	800172c <__gnu_unwind_pr_common+0xb4>
 80018ea:	4648      	mov	r0, r9
 80018ec:	210d      	movs	r1, #13
 80018ee:	f7ff fe55 	bl	800159c <_Unwind_GetGR>
 80018f2:	6228      	str	r0, [r5, #32]
 80018f4:	9b06      	ldr	r3, [sp, #24]
 80018f6:	626b      	str	r3, [r5, #36]	; 0x24
 80018f8:	e7e3      	b.n	80018c2 <__gnu_unwind_pr_common+0x24a>
 80018fa:	4620      	mov	r0, r4
 80018fc:	f7ff fc62 	bl	80011c4 <selfrel_offset31>
 8001900:	3404      	adds	r4, #4
 8001902:	4606      	mov	r6, r0
 8001904:	63ac      	str	r4, [r5, #56]	; 0x38
 8001906:	4628      	mov	r0, r5
 8001908:	f004 fb30 	bl	8005f6c <__cxa_begin_cleanup>
 800190c:	2800      	cmp	r0, #0
 800190e:	f43f af1a 	beq.w	8001746 <__gnu_unwind_pr_common+0xce>
 8001912:	4648      	mov	r0, r9
 8001914:	4632      	mov	r2, r6
 8001916:	210f      	movs	r1, #15
 8001918:	f7ff fe66 	bl	80015e8 <_Unwind_SetGR>
 800191c:	2007      	movs	r0, #7
 800191e:	e713      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 8001920:	4608      	mov	r0, r1
 8001922:	3001      	adds	r0, #1
 8001924:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001928:	f7ff fc4c 	bl	80011c4 <selfrel_offset31>
 800192c:	210f      	movs	r1, #15
 800192e:	4602      	mov	r2, r0
 8001930:	4648      	mov	r0, r9
 8001932:	f7ff fe59 	bl	80015e8 <_Unwind_SetGR>
 8001936:	4648      	mov	r0, r9
 8001938:	462a      	mov	r2, r5
 800193a:	4639      	mov	r1, r7
 800193c:	f7ff fe54 	bl	80015e8 <_Unwind_SetGR>
 8001940:	2007      	movs	r0, #7
 8001942:	e701      	b.n	8001748 <__gnu_unwind_pr_common+0xd0>
 8001944:	0800667d 	.word	0x0800667d

08001948 <__aeabi_unwind_cpp_pr0>:
 8001948:	2300      	movs	r3, #0
 800194a:	e695      	b.n	8001678 <__gnu_unwind_pr_common>

0800194c <__aeabi_unwind_cpp_pr1>:
 800194c:	2301      	movs	r3, #1
 800194e:	e693      	b.n	8001678 <__gnu_unwind_pr_common>

08001950 <__aeabi_unwind_cpp_pr2>:
 8001950:	2302      	movs	r3, #2
 8001952:	e691      	b.n	8001678 <__gnu_unwind_pr_common>

08001954 <_Unwind_VRS_Pop>:
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	4604      	mov	r4, r0
 8001958:	b0c5      	sub	sp, #276	; 0x114
 800195a:	2904      	cmp	r1, #4
 800195c:	d80d      	bhi.n	800197a <_Unwind_VRS_Pop+0x26>
 800195e:	e8df f001 	tbb	[pc, r1]
 8001962:	0355      	.short	0x0355
 8001964:	310c      	.short	0x310c
 8001966:	0f          	.byte	0x0f
 8001967:	00          	.byte	0x00
 8001968:	2b01      	cmp	r3, #1
 800196a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800196e:	b295      	uxth	r5, r2
 8001970:	d164      	bne.n	8001a3c <_Unwind_VRS_Pop+0xe8>
 8001972:	1972      	adds	r2, r6, r5
 8001974:	2a10      	cmp	r2, #16
 8001976:	f240 809d 	bls.w	8001ab4 <_Unwind_VRS_Pop+0x160>
 800197a:	2002      	movs	r0, #2
 800197c:	b045      	add	sp, #276	; 0x114
 800197e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1fa      	bne.n	800197a <_Unwind_VRS_Pop+0x26>
 8001984:	2a10      	cmp	r2, #16
 8001986:	d8f8      	bhi.n	800197a <_Unwind_VRS_Pop+0x26>
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	06d8      	lsls	r0, r3, #27
 800198c:	f100 80c8 	bmi.w	8001b20 <_Unwind_VRS_Pop+0x1cc>
 8001990:	ae22      	add	r6, sp, #136	; 0x88
 8001992:	4630      	mov	r0, r6
 8001994:	9201      	str	r2, [sp, #4]
 8001996:	2501      	movs	r5, #1
 8001998:	f000 f974 	bl	8001c84 <__gnu_Unwind_Save_WMMXC>
 800199c:	2300      	movs	r3, #0
 800199e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019a0:	9a01      	ldr	r2, [sp, #4]
 80019a2:	fa05 f103 	lsl.w	r1, r5, r3
 80019a6:	4211      	tst	r1, r2
 80019a8:	d003      	beq.n	80019b2 <_Unwind_VRS_Pop+0x5e>
 80019aa:	6801      	ldr	r1, [r0, #0]
 80019ac:	3004      	adds	r0, #4
 80019ae:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 80019b2:	3301      	adds	r3, #1
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d1f4      	bne.n	80019a2 <_Unwind_VRS_Pop+0x4e>
 80019b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 f958 	bl	8001c70 <__gnu_Unwind_Restore_WMMXC>
 80019c0:	2000      	movs	r0, #0
 80019c2:	e7db      	b.n	800197c <_Unwind_VRS_Pop+0x28>
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	d1d8      	bne.n	800197a <_Unwind_VRS_Pop+0x26>
 80019c8:	0c15      	lsrs	r5, r2, #16
 80019ca:	b297      	uxth	r7, r2
 80019cc:	19eb      	adds	r3, r5, r7
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d8d3      	bhi.n	800197a <_Unwind_VRS_Pop+0x26>
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	071e      	lsls	r6, r3, #28
 80019d6:	f100 80b7 	bmi.w	8001b48 <_Unwind_VRS_Pop+0x1f4>
 80019da:	ae22      	add	r6, sp, #136	; 0x88
 80019dc:	4630      	mov	r0, r6
 80019de:	f000 f925 	bl	8001c2c <__gnu_Unwind_Save_WMMXD>
 80019e2:	00ed      	lsls	r5, r5, #3
 80019e4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019e6:	b15f      	cbz	r7, 8001a00 <_Unwind_VRS_Pop+0xac>
 80019e8:	3d04      	subs	r5, #4
 80019ea:	4603      	mov	r3, r0
 80019ec:	1971      	adds	r1, r6, r5
 80019ee:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80019f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80019f6:	4283      	cmp	r3, r0
 80019f8:	f841 2f04 	str.w	r2, [r1, #4]!
 80019fc:	d1f9      	bne.n	80019f2 <_Unwind_VRS_Pop+0x9e>
 80019fe:	4618      	mov	r0, r3
 8001a00:	63a0      	str	r0, [r4, #56]	; 0x38
 8001a02:	4630      	mov	r0, r6
 8001a04:	f000 f8f0 	bl	8001be8 <__gnu_Unwind_Restore_WMMXD>
 8001a08:	2000      	movs	r0, #0
 8001a0a:	e7b7      	b.n	800197c <_Unwind_VRS_Pop+0x28>
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1b4      	bne.n	800197a <_Unwind_VRS_Pop+0x26>
 8001a10:	2701      	movs	r7, #1
 8001a12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001a14:	b296      	uxth	r6, r2
 8001a16:	1d20      	adds	r0, r4, #4
 8001a18:	fa07 f103 	lsl.w	r1, r7, r3
 8001a1c:	4231      	tst	r1, r6
 8001a1e:	f103 0301 	add.w	r3, r3, #1
 8001a22:	d002      	beq.n	8001a2a <_Unwind_VRS_Pop+0xd6>
 8001a24:	6829      	ldr	r1, [r5, #0]
 8001a26:	3504      	adds	r5, #4
 8001a28:	6001      	str	r1, [r0, #0]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	f100 0004 	add.w	r0, r0, #4
 8001a30:	d1f2      	bne.n	8001a18 <_Unwind_VRS_Pop+0xc4>
 8001a32:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8001a36:	d13b      	bne.n	8001ab0 <_Unwind_VRS_Pop+0x15c>
 8001a38:	63a5      	str	r5, [r4, #56]	; 0x38
 8001a3a:	e79f      	b.n	800197c <_Unwind_VRS_Pop+0x28>
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d19c      	bne.n	800197a <_Unwind_VRS_Pop+0x26>
 8001a40:	1977      	adds	r7, r6, r5
 8001a42:	2f20      	cmp	r7, #32
 8001a44:	d899      	bhi.n	800197a <_Unwind_VRS_Pop+0x26>
 8001a46:	2e0f      	cmp	r6, #15
 8001a48:	d966      	bls.n	8001b18 <_Unwind_VRS_Pop+0x1c4>
 8001a4a:	462f      	mov	r7, r5
 8001a4c:	2d00      	cmp	r5, #0
 8001a4e:	d13a      	bne.n	8001ac6 <_Unwind_VRS_Pop+0x172>
 8001a50:	462a      	mov	r2, r5
 8001a52:	2700      	movs	r7, #0
 8001a54:	2a00      	cmp	r2, #0
 8001a56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001a58:	dd72      	ble.n	8001b40 <_Unwind_VRS_Pop+0x1ec>
 8001a5a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001a5e:	4601      	mov	r1, r0
 8001a60:	a844      	add	r0, sp, #272	; 0x110
 8001a62:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8001a66:	388c      	subs	r0, #140	; 0x8c
 8001a68:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a6c:	4291      	cmp	r1, r2
 8001a6e:	f840 5f04 	str.w	r5, [r0, #4]!
 8001a72:	d1f9      	bne.n	8001a68 <_Unwind_VRS_Pop+0x114>
 8001a74:	4608      	mov	r0, r1
 8001a76:	b197      	cbz	r7, 8001a9e <_Unwind_VRS_Pop+0x14a>
 8001a78:	2e10      	cmp	r6, #16
 8001a7a:	4632      	mov	r2, r6
 8001a7c:	bf38      	it	cc
 8001a7e:	2210      	movcc	r2, #16
 8001a80:	a944      	add	r1, sp, #272	; 0x110
 8001a82:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001a86:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001a8a:	0079      	lsls	r1, r7, #1
 8001a8c:	3a04      	subs	r2, #4
 8001a8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001a92:	f850 5b04 	ldr.w	r5, [r0], #4
 8001a96:	4288      	cmp	r0, r1
 8001a98:	f842 5f04 	str.w	r5, [r2, #4]!
 8001a9c:	d1f9      	bne.n	8001a92 <_Unwind_VRS_Pop+0x13e>
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d048      	beq.n	8001b34 <_Unwind_VRS_Pop+0x1e0>
 8001aa2:	2e0f      	cmp	r6, #15
 8001aa4:	63a1      	str	r1, [r4, #56]	; 0x38
 8001aa6:	d933      	bls.n	8001b10 <_Unwind_VRS_Pop+0x1bc>
 8001aa8:	b117      	cbz	r7, 8001ab0 <_Unwind_VRS_Pop+0x15c>
 8001aaa:	a802      	add	r0, sp, #8
 8001aac:	f000 f894 	bl	8001bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	e763      	b.n	800197c <_Unwind_VRS_Pop+0x28>
 8001ab4:	2e0f      	cmp	r6, #15
 8001ab6:	f63f af60 	bhi.w	800197a <_Unwind_VRS_Pop+0x26>
 8001aba:	2700      	movs	r7, #0
 8001abc:	6822      	ldr	r2, [r4, #0]
 8001abe:	07d1      	lsls	r1, r2, #31
 8001ac0:	d417      	bmi.n	8001af2 <_Unwind_VRS_Pop+0x19e>
 8001ac2:	2f00      	cmp	r7, #0
 8001ac4:	d060      	beq.n	8001b88 <_Unwind_VRS_Pop+0x234>
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	0751      	lsls	r1, r2, #29
 8001aca:	d445      	bmi.n	8001b58 <_Unwind_VRS_Pop+0x204>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d04d      	beq.n	8001b6c <_Unwind_VRS_Pop+0x218>
 8001ad0:	2e0f      	cmp	r6, #15
 8001ad2:	d806      	bhi.n	8001ae2 <_Unwind_VRS_Pop+0x18e>
 8001ad4:	a822      	add	r0, sp, #136	; 0x88
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	f000 f87a 	bl	8001bd0 <__gnu_Unwind_Save_VFP_D>
 8001adc:	9b01      	ldr	r3, [sp, #4]
 8001ade:	2f00      	cmp	r7, #0
 8001ae0:	d0b6      	beq.n	8001a50 <_Unwind_VRS_Pop+0xfc>
 8001ae2:	a802      	add	r0, sp, #8
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	f000 f87b 	bl	8001be0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	f1c6 0210 	rsb	r2, r6, #16
 8001af0:	e7b0      	b.n	8001a54 <_Unwind_VRS_Pop+0x100>
 8001af2:	f022 0101 	bic.w	r1, r2, #1
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	6021      	str	r1, [r4, #0]
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	4620      	mov	r0, r4
 8001afe:	d03b      	beq.n	8001b78 <_Unwind_VRS_Pop+0x224>
 8001b00:	f022 0203 	bic.w	r2, r2, #3
 8001b04:	f840 2b48 	str.w	r2, [r0], #72
 8001b08:	f000 f85a 	bl	8001bc0 <__gnu_Unwind_Save_VFP>
 8001b0c:	9b01      	ldr	r3, [sp, #4]
 8001b0e:	e7d8      	b.n	8001ac2 <_Unwind_VRS_Pop+0x16e>
 8001b10:	a822      	add	r0, sp, #136	; 0x88
 8001b12:	f000 f859 	bl	8001bc8 <__gnu_Unwind_Restore_VFP_D>
 8001b16:	e7c7      	b.n	8001aa8 <_Unwind_VRS_Pop+0x154>
 8001b18:	2f10      	cmp	r7, #16
 8001b1a:	d9ce      	bls.n	8001aba <_Unwind_VRS_Pop+0x166>
 8001b1c:	3f10      	subs	r7, #16
 8001b1e:	e7cd      	b.n	8001abc <_Unwind_VRS_Pop+0x168>
 8001b20:	f023 0310 	bic.w	r3, r3, #16
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001b2a:	9201      	str	r2, [sp, #4]
 8001b2c:	f000 f8aa 	bl	8001c84 <__gnu_Unwind_Save_WMMXC>
 8001b30:	9a01      	ldr	r2, [sp, #4]
 8001b32:	e72d      	b.n	8001990 <_Unwind_VRS_Pop+0x3c>
 8001b34:	3104      	adds	r1, #4
 8001b36:	63a1      	str	r1, [r4, #56]	; 0x38
 8001b38:	a822      	add	r0, sp, #136	; 0x88
 8001b3a:	f000 f83d 	bl	8001bb8 <__gnu_Unwind_Restore_VFP>
 8001b3e:	e7b7      	b.n	8001ab0 <_Unwind_VRS_Pop+0x15c>
 8001b40:	2f00      	cmp	r7, #0
 8001b42:	d199      	bne.n	8001a78 <_Unwind_VRS_Pop+0x124>
 8001b44:	4601      	mov	r1, r0
 8001b46:	e7aa      	b.n	8001a9e <_Unwind_VRS_Pop+0x14a>
 8001b48:	f023 0308 	bic.w	r3, r3, #8
 8001b4c:	6023      	str	r3, [r4, #0]
 8001b4e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001b52:	f000 f86b 	bl	8001c2c <__gnu_Unwind_Save_WMMXD>
 8001b56:	e740      	b.n	80019da <_Unwind_VRS_Pop+0x86>
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f022 0204 	bic.w	r2, r2, #4
 8001b5e:	f840 2bd0 	str.w	r2, [r0], #208
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f000 f83c 	bl	8001be0 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001b68:	9b01      	ldr	r3, [sp, #4]
 8001b6a:	e7af      	b.n	8001acc <_Unwind_VRS_Pop+0x178>
 8001b6c:	a822      	add	r0, sp, #136	; 0x88
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	f000 f826 	bl	8001bc0 <__gnu_Unwind_Save_VFP>
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	e7b9      	b.n	8001aec <_Unwind_VRS_Pop+0x198>
 8001b78:	f041 0102 	orr.w	r1, r1, #2
 8001b7c:	f840 1b48 	str.w	r1, [r0], #72
 8001b80:	f000 f826 	bl	8001bd0 <__gnu_Unwind_Save_VFP_D>
 8001b84:	9b01      	ldr	r3, [sp, #4]
 8001b86:	e79c      	b.n	8001ac2 <_Unwind_VRS_Pop+0x16e>
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d003      	beq.n	8001b94 <_Unwind_VRS_Pop+0x240>
 8001b8c:	2e0f      	cmp	r6, #15
 8001b8e:	f63f af5f 	bhi.w	8001a50 <_Unwind_VRS_Pop+0xfc>
 8001b92:	e79f      	b.n	8001ad4 <_Unwind_VRS_Pop+0x180>
 8001b94:	a822      	add	r0, sp, #136	; 0x88
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	f000 f812 	bl	8001bc0 <__gnu_Unwind_Save_VFP>
 8001b9c:	9b01      	ldr	r3, [sp, #4]
 8001b9e:	e757      	b.n	8001a50 <_Unwind_VRS_Pop+0xfc>

08001ba0 <__restore_core_regs>:
 8001ba0:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001ba4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001ba8:	469c      	mov	ip, r3
 8001baa:	46a6      	mov	lr, r4
 8001bac:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001bb0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001bb4:	46e5      	mov	sp, ip
 8001bb6:	bd00      	pop	{pc}

08001bb8 <__gnu_Unwind_Restore_VFP>:
 8001bb8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <__gnu_Unwind_Save_VFP>:
 8001bc0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <__gnu_Unwind_Restore_VFP_D>:
 8001bc8:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <__gnu_Unwind_Save_VFP_D>:
 8001bd0:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001bd8:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001be0:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <__gnu_Unwind_Restore_WMMXD>:
 8001be8:	ecf0 0102 	ldfe	f0, [r0], #8
 8001bec:	ecf0 1102 	ldfe	f1, [r0], #8
 8001bf0:	ecf0 2102 	ldfe	f2, [r0], #8
 8001bf4:	ecf0 3102 	ldfe	f3, [r0], #8
 8001bf8:	ecf0 4102 	ldfe	f4, [r0], #8
 8001bfc:	ecf0 5102 	ldfe	f5, [r0], #8
 8001c00:	ecf0 6102 	ldfe	f6, [r0], #8
 8001c04:	ecf0 7102 	ldfe	f7, [r0], #8
 8001c08:	ecf0 8102 	ldfp	f0, [r0], #8
 8001c0c:	ecf0 9102 	ldfp	f1, [r0], #8
 8001c10:	ecf0 a102 	ldfp	f2, [r0], #8
 8001c14:	ecf0 b102 	ldfp	f3, [r0], #8
 8001c18:	ecf0 c102 	ldfp	f4, [r0], #8
 8001c1c:	ecf0 d102 	ldfp	f5, [r0], #8
 8001c20:	ecf0 e102 	ldfp	f6, [r0], #8
 8001c24:	ecf0 f102 	ldfp	f7, [r0], #8
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <__gnu_Unwind_Save_WMMXD>:
 8001c2c:	ece0 0102 	stfe	f0, [r0], #8
 8001c30:	ece0 1102 	stfe	f1, [r0], #8
 8001c34:	ece0 2102 	stfe	f2, [r0], #8
 8001c38:	ece0 3102 	stfe	f3, [r0], #8
 8001c3c:	ece0 4102 	stfe	f4, [r0], #8
 8001c40:	ece0 5102 	stfe	f5, [r0], #8
 8001c44:	ece0 6102 	stfe	f6, [r0], #8
 8001c48:	ece0 7102 	stfe	f7, [r0], #8
 8001c4c:	ece0 8102 	stfp	f0, [r0], #8
 8001c50:	ece0 9102 	stfp	f1, [r0], #8
 8001c54:	ece0 a102 	stfp	f2, [r0], #8
 8001c58:	ece0 b102 	stfp	f3, [r0], #8
 8001c5c:	ece0 c102 	stfp	f4, [r0], #8
 8001c60:	ece0 d102 	stfp	f5, [r0], #8
 8001c64:	ece0 e102 	stfp	f6, [r0], #8
 8001c68:	ece0 f102 	stfp	f7, [r0], #8
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop

08001c70 <__gnu_Unwind_Restore_WMMXC>:
 8001c70:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001c74:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001c78:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001c7c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <__gnu_Unwind_Save_WMMXC>:
 8001c84:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001c88:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001c8c:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001c90:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <_Unwind_RaiseException>:
 8001c98:	46ec      	mov	ip, sp
 8001c9a:	b500      	push	{lr}
 8001c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cac:	a901      	add	r1, sp, #4
 8001cae:	f7ff fbed 	bl	800148c <__gnu_Unwind_RaiseException>
 8001cb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cb6:	b012      	add	sp, #72	; 0x48
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <_Unwind_Resume>:
 8001cbc:	46ec      	mov	ip, sp
 8001cbe:	b500      	push	{lr}
 8001cc0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001cc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cd0:	a901      	add	r1, sp, #4
 8001cd2:	f7ff fc15 	bl	8001500 <__gnu_Unwind_Resume>
 8001cd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cda:	b012      	add	sp, #72	; 0x48
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <_Unwind_Resume_or_Rethrow>:
 8001ce0:	46ec      	mov	ip, sp
 8001ce2:	b500      	push	{lr}
 8001ce4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ce8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cf4:	a901      	add	r1, sp, #4
 8001cf6:	f7ff fc25 	bl	8001544 <__gnu_Unwind_Resume_or_Rethrow>
 8001cfa:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cfe:	b012      	add	sp, #72	; 0x48
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop

08001d04 <_Unwind_ForcedUnwind>:
 8001d04:	46ec      	mov	ip, sp
 8001d06:	b500      	push	{lr}
 8001d08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001d0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001d18:	ab01      	add	r3, sp, #4
 8001d1a:	f7ff fbe7 	bl	80014ec <__gnu_Unwind_ForcedUnwind>
 8001d1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001d22:	b012      	add	sp, #72	; 0x48
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop

08001d28 <_Unwind_Backtrace>:
 8001d28:	46ec      	mov	ip, sp
 8001d2a:	b500      	push	{lr}
 8001d2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001d30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001d3c:	aa01      	add	r2, sp, #4
 8001d3e:	f7ff fc61 	bl	8001604 <__gnu_Unwind_Backtrace>
 8001d42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001d46:	b012      	add	sp, #72	; 0x48
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop

08001d4c <next_unwind_byte>:
 8001d4c:	7a02      	ldrb	r2, [r0, #8]
 8001d4e:	b91a      	cbnz	r2, 8001d58 <next_unwind_byte+0xc>
 8001d50:	7a43      	ldrb	r3, [r0, #9]
 8001d52:	b943      	cbnz	r3, 8001d66 <next_unwind_byte+0x1a>
 8001d54:	20b0      	movs	r0, #176	; 0xb0
 8001d56:	4770      	bx	lr
 8001d58:	6803      	ldr	r3, [r0, #0]
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	7202      	strb	r2, [r0, #8]
 8001d5e:	021a      	lsls	r2, r3, #8
 8001d60:	6002      	str	r2, [r0, #0]
 8001d62:	0e18      	lsrs	r0, r3, #24
 8001d64:	4770      	bx	lr
 8001d66:	2103      	movs	r1, #3
 8001d68:	6842      	ldr	r2, [r0, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b410      	push	{r4}
 8001d6e:	7243      	strb	r3, [r0, #9]
 8001d70:	6813      	ldr	r3, [r2, #0]
 8001d72:	1d14      	adds	r4, r2, #4
 8001d74:	7201      	strb	r1, [r0, #8]
 8001d76:	021a      	lsls	r2, r3, #8
 8001d78:	6044      	str	r4, [r0, #4]
 8001d7a:	6002      	str	r2, [r0, #0]
 8001d7c:	bc10      	pop	{r4}
 8001d7e:	0e18      	lsrs	r0, r3, #24
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop

08001d84 <_Unwind_GetGR.constprop.0>:
 8001d84:	2300      	movs	r3, #0
 8001d86:	b500      	push	{lr}
 8001d88:	b085      	sub	sp, #20
 8001d8a:	aa03      	add	r2, sp, #12
 8001d8c:	9200      	str	r2, [sp, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	220c      	movs	r2, #12
 8001d92:	f7ff fbe9 	bl	8001568 <_Unwind_VRS_Get>
 8001d96:	9803      	ldr	r0, [sp, #12]
 8001d98:	b005      	add	sp, #20
 8001d9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d9e:	bf00      	nop

08001da0 <unwind_UCB_from_context>:
 8001da0:	e7f0      	b.n	8001d84 <_Unwind_GetGR.constprop.0>
 8001da2:	bf00      	nop

08001da4 <__gnu_unwind_execute>:
 8001da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da8:	4606      	mov	r6, r0
 8001daa:	460f      	mov	r7, r1
 8001dac:	f04f 0800 	mov.w	r8, #0
 8001db0:	b085      	sub	sp, #20
 8001db2:	4638      	mov	r0, r7
 8001db4:	f7ff ffca 	bl	8001d4c <next_unwind_byte>
 8001db8:	28b0      	cmp	r0, #176	; 0xb0
 8001dba:	4604      	mov	r4, r0
 8001dbc:	d023      	beq.n	8001e06 <__gnu_unwind_execute+0x62>
 8001dbe:	0605      	lsls	r5, r0, #24
 8001dc0:	d427      	bmi.n	8001e12 <__gnu_unwind_execute+0x6e>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f10d 090c 	add.w	r9, sp, #12
 8001dc8:	4619      	mov	r1, r3
 8001dca:	0085      	lsls	r5, r0, #2
 8001dcc:	220d      	movs	r2, #13
 8001dce:	f8cd 9000 	str.w	r9, [sp]
 8001dd2:	4630      	mov	r0, r6
 8001dd4:	f7ff fbc8 	bl	8001568 <_Unwind_VRS_Get>
 8001dd8:	b2ed      	uxtb	r5, r5
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	0660      	lsls	r0, r4, #25
 8001dde:	f105 0504 	add.w	r5, r5, #4
 8001de2:	bf4c      	ite	mi
 8001de4:	1b5d      	submi	r5, r3, r5
 8001de6:	18ed      	addpl	r5, r5, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	220d      	movs	r2, #13
 8001dec:	4619      	mov	r1, r3
 8001dee:	f8cd 9000 	str.w	r9, [sp]
 8001df2:	4630      	mov	r0, r6
 8001df4:	9503      	str	r5, [sp, #12]
 8001df6:	f7ff fbdd 	bl	80015b4 <_Unwind_VRS_Set>
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	f7ff ffa6 	bl	8001d4c <next_unwind_byte>
 8001e00:	28b0      	cmp	r0, #176	; 0xb0
 8001e02:	4604      	mov	r4, r0
 8001e04:	d1db      	bne.n	8001dbe <__gnu_unwind_execute+0x1a>
 8001e06:	f1b8 0f00 	cmp.w	r8, #0
 8001e0a:	f000 8094 	beq.w	8001f36 <__gnu_unwind_execute+0x192>
 8001e0e:	2000      	movs	r0, #0
 8001e10:	e01c      	b.n	8001e4c <__gnu_unwind_execute+0xa8>
 8001e12:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d05c      	beq.n	8001ed4 <__gnu_unwind_execute+0x130>
 8001e1a:	2b90      	cmp	r3, #144	; 0x90
 8001e1c:	d019      	beq.n	8001e52 <__gnu_unwind_execute+0xae>
 8001e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e20:	d02c      	beq.n	8001e7c <__gnu_unwind_execute+0xd8>
 8001e22:	2bb0      	cmp	r3, #176	; 0xb0
 8001e24:	d03e      	beq.n	8001ea4 <__gnu_unwind_execute+0x100>
 8001e26:	2bc0      	cmp	r3, #192	; 0xc0
 8001e28:	d06b      	beq.n	8001f02 <__gnu_unwind_execute+0x15e>
 8001e2a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001e2e:	2bd0      	cmp	r3, #208	; 0xd0
 8001e30:	d10b      	bne.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001e32:	f000 0207 	and.w	r2, r0, #7
 8001e36:	3201      	adds	r2, #1
 8001e38:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4630      	mov	r0, r6
 8001e42:	f7ff fd87 	bl	8001954 <_Unwind_VRS_Pop>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d0b3      	beq.n	8001db2 <__gnu_unwind_execute+0xe>
 8001e4a:	2009      	movs	r0, #9
 8001e4c:	b005      	add	sp, #20
 8001e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e52:	f000 030d 	and.w	r3, r0, #13
 8001e56:	2b0d      	cmp	r3, #13
 8001e58:	d0f7      	beq.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	ad03      	add	r5, sp, #12
 8001e5e:	f000 020f 	and.w	r2, r0, #15
 8001e62:	4619      	mov	r1, r3
 8001e64:	9500      	str	r5, [sp, #0]
 8001e66:	4630      	mov	r0, r6
 8001e68:	f7ff fb7e 	bl	8001568 <_Unwind_VRS_Get>
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	9500      	str	r5, [sp, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	220d      	movs	r2, #13
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7ff fb9d 	bl	80015b4 <_Unwind_VRS_Set>
 8001e7a:	e79a      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001e7c:	43c3      	mvns	r3, r0
 8001e7e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	411a      	asrs	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	0701      	lsls	r1, r0, #28
 8001e8c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001e90:	bf48      	it	mi
 8001e92:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001e96:	4619      	mov	r1, r3
 8001e98:	4630      	mov	r0, r6
 8001e9a:	f7ff fd5b 	bl	8001954 <_Unwind_VRS_Pop>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d1d3      	bne.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001ea2:	e786      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001ea4:	28b1      	cmp	r0, #177	; 0xb1
 8001ea6:	d057      	beq.n	8001f58 <__gnu_unwind_execute+0x1b4>
 8001ea8:	28b2      	cmp	r0, #178	; 0xb2
 8001eaa:	d068      	beq.n	8001f7e <__gnu_unwind_execute+0x1da>
 8001eac:	28b3      	cmp	r0, #179	; 0xb3
 8001eae:	f000 8095 	beq.w	8001fdc <__gnu_unwind_execute+0x238>
 8001eb2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001eb6:	2bb4      	cmp	r3, #180	; 0xb4
 8001eb8:	d0c7      	beq.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f000 0207 	and.w	r2, r0, #7
 8001ec0:	441a      	add	r2, r3
 8001ec2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f7ff fd43 	bl	8001954 <_Unwind_VRS_Pop>
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	d1bb      	bne.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001ed2:	e76e      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001ed4:	4638      	mov	r0, r7
 8001ed6:	f7ff ff39 	bl	8001d4c <next_unwind_byte>
 8001eda:	0224      	lsls	r4, r4, #8
 8001edc:	4304      	orrs	r4, r0
 8001ede:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001ee2:	d0b2      	beq.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	0124      	lsls	r4, r4, #4
 8001ee8:	b2a2      	uxth	r2, r4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7ff fd31 	bl	8001954 <_Unwind_VRS_Pop>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	d1a9      	bne.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001ef6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001efa:	bf18      	it	ne
 8001efc:	f04f 0801 	movne.w	r8, #1
 8001f00:	e757      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001f02:	28c6      	cmp	r0, #198	; 0xc6
 8001f04:	d07d      	beq.n	8002002 <__gnu_unwind_execute+0x25e>
 8001f06:	28c7      	cmp	r0, #199	; 0xc7
 8001f08:	f000 8086 	beq.w	8002018 <__gnu_unwind_execute+0x274>
 8001f0c:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001f10:	2bc0      	cmp	r3, #192	; 0xc0
 8001f12:	f000 8094 	beq.w	800203e <__gnu_unwind_execute+0x29a>
 8001f16:	28c8      	cmp	r0, #200	; 0xc8
 8001f18:	f000 809f 	beq.w	800205a <__gnu_unwind_execute+0x2b6>
 8001f1c:	28c9      	cmp	r0, #201	; 0xc9
 8001f1e:	d194      	bne.n	8001e4a <__gnu_unwind_execute+0xa6>
 8001f20:	4638      	mov	r0, r7
 8001f22:	f7ff ff13 	bl	8001d4c <next_unwind_byte>
 8001f26:	0302      	lsls	r2, r0, #12
 8001f28:	f000 000f 	and.w	r0, r0, #15
 8001f2c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001f30:	3001      	adds	r0, #1
 8001f32:	4302      	orrs	r2, r0
 8001f34:	e782      	b.n	8001e3c <__gnu_unwind_execute+0x98>
 8001f36:	ac03      	add	r4, sp, #12
 8001f38:	4643      	mov	r3, r8
 8001f3a:	220e      	movs	r2, #14
 8001f3c:	4641      	mov	r1, r8
 8001f3e:	9400      	str	r4, [sp, #0]
 8001f40:	4630      	mov	r0, r6
 8001f42:	f7ff fb11 	bl	8001568 <_Unwind_VRS_Get>
 8001f46:	9400      	str	r4, [sp, #0]
 8001f48:	4630      	mov	r0, r6
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	4641      	mov	r1, r8
 8001f50:	f7ff fb30 	bl	80015b4 <_Unwind_VRS_Set>
 8001f54:	4640      	mov	r0, r8
 8001f56:	e779      	b.n	8001e4c <__gnu_unwind_execute+0xa8>
 8001f58:	4638      	mov	r0, r7
 8001f5a:	f7ff fef7 	bl	8001d4c <next_unwind_byte>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f43f af73 	beq.w	8001e4a <__gnu_unwind_execute+0xa6>
 8001f64:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001f68:	f47f af6f 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4630      	mov	r0, r6
 8001f72:	f7ff fcef 	bl	8001954 <_Unwind_VRS_Pop>
 8001f76:	2800      	cmp	r0, #0
 8001f78:	f47f af67 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 8001f7c:	e719      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f10d 090c 	add.w	r9, sp, #12
 8001f84:	220d      	movs	r2, #13
 8001f86:	4619      	mov	r1, r3
 8001f88:	f8cd 9000 	str.w	r9, [sp]
 8001f8c:	4630      	mov	r0, r6
 8001f8e:	f7ff faeb 	bl	8001568 <_Unwind_VRS_Get>
 8001f92:	4638      	mov	r0, r7
 8001f94:	f7ff feda 	bl	8001d4c <next_unwind_byte>
 8001f98:	0602      	lsls	r2, r0, #24
 8001f9a:	f04f 0402 	mov.w	r4, #2
 8001f9e:	d50c      	bpl.n	8001fba <__gnu_unwind_execute+0x216>
 8001fa0:	9b03      	ldr	r3, [sp, #12]
 8001fa2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001fa6:	40a0      	lsls	r0, r4
 8001fa8:	4403      	add	r3, r0
 8001faa:	4638      	mov	r0, r7
 8001fac:	9303      	str	r3, [sp, #12]
 8001fae:	f7ff fecd 	bl	8001d4c <next_unwind_byte>
 8001fb2:	0603      	lsls	r3, r0, #24
 8001fb4:	f104 0407 	add.w	r4, r4, #7
 8001fb8:	d4f2      	bmi.n	8001fa0 <__gnu_unwind_execute+0x1fc>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9903      	ldr	r1, [sp, #12]
 8001fbe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001fc2:	40a2      	lsls	r2, r4
 8001fc4:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001fc8:	188c      	adds	r4, r1, r2
 8001fca:	f8cd 9000 	str.w	r9, [sp]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	220d      	movs	r2, #13
 8001fd2:	4630      	mov	r0, r6
 8001fd4:	9403      	str	r4, [sp, #12]
 8001fd6:	f7ff faed 	bl	80015b4 <_Unwind_VRS_Set>
 8001fda:	e6ea      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8001fdc:	4638      	mov	r0, r7
 8001fde:	f7ff feb5 	bl	8001d4c <next_unwind_byte>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	0301      	lsls	r1, r0, #12
 8001fe6:	f000 000f 	and.w	r0, r0, #15
 8001fea:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001fee:	18c2      	adds	r2, r0, r3
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff fcad 	bl	8001954 <_Unwind_VRS_Pop>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	f47f af25 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 8002000:	e6d7      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 8002002:	4638      	mov	r0, r7
 8002004:	f7ff fea2 	bl	8001d4c <next_unwind_byte>
 8002008:	0301      	lsls	r1, r0, #12
 800200a:	f000 000f 	and.w	r0, r0, #15
 800200e:	2303      	movs	r3, #3
 8002010:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8002014:	1c42      	adds	r2, r0, #1
 8002016:	e7eb      	b.n	8001ff0 <__gnu_unwind_execute+0x24c>
 8002018:	4638      	mov	r0, r7
 800201a:	f7ff fe97 	bl	8001d4c <next_unwind_byte>
 800201e:	2800      	cmp	r0, #0
 8002020:	f43f af13 	beq.w	8001e4a <__gnu_unwind_execute+0xa6>
 8002024:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8002028:	f47f af0f 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 800202c:	4602      	mov	r2, r0
 800202e:	2104      	movs	r1, #4
 8002030:	4630      	mov	r0, r6
 8002032:	f7ff fc8f 	bl	8001954 <_Unwind_VRS_Pop>
 8002036:	2800      	cmp	r0, #0
 8002038:	f47f af07 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 800203c:	e6b9      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 800203e:	2303      	movs	r3, #3
 8002040:	f000 020f 	and.w	r2, r0, #15
 8002044:	3201      	adds	r2, #1
 8002046:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800204a:	4619      	mov	r1, r3
 800204c:	4630      	mov	r0, r6
 800204e:	f7ff fc81 	bl	8001954 <_Unwind_VRS_Pop>
 8002052:	2800      	cmp	r0, #0
 8002054:	f47f aef9 	bne.w	8001e4a <__gnu_unwind_execute+0xa6>
 8002058:	e6ab      	b.n	8001db2 <__gnu_unwind_execute+0xe>
 800205a:	4638      	mov	r0, r7
 800205c:	f7ff fe76 	bl	8001d4c <next_unwind_byte>
 8002060:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8002064:	f000 030f 	and.w	r3, r0, #15
 8002068:	3210      	adds	r2, #16
 800206a:	3301      	adds	r3, #1
 800206c:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8002070:	e6e4      	b.n	8001e3c <__gnu_unwind_execute+0x98>
 8002072:	bf00      	nop

08002074 <__gnu_unwind_frame>:
 8002074:	b530      	push	{r4, r5, lr}
 8002076:	2403      	movs	r4, #3
 8002078:	460d      	mov	r5, r1
 800207a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800207c:	b085      	sub	sp, #20
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	f88d 400c 	strb.w	r4, [sp, #12]
 8002084:	79dc      	ldrb	r4, [r3, #7]
 8002086:	0212      	lsls	r2, r2, #8
 8002088:	3308      	adds	r3, #8
 800208a:	a901      	add	r1, sp, #4
 800208c:	4628      	mov	r0, r5
 800208e:	9201      	str	r2, [sp, #4]
 8002090:	f88d 400d 	strb.w	r4, [sp, #13]
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	f7ff fe85 	bl	8001da4 <__gnu_unwind_execute>
 800209a:	b005      	add	sp, #20
 800209c:	bd30      	pop	{r4, r5, pc}
 800209e:	bf00      	nop

080020a0 <_Unwind_GetRegionStart>:
 80020a0:	b508      	push	{r3, lr}
 80020a2:	f7ff fe7d 	bl	8001da0 <unwind_UCB_from_context>
 80020a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80020a8:	bd08      	pop	{r3, pc}
 80020aa:	bf00      	nop

080020ac <_Unwind_GetLanguageSpecificData>:
 80020ac:	b508      	push	{r3, lr}
 80020ae:	f7ff fe77 	bl	8001da0 <unwind_UCB_from_context>
 80020b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80020b4:	79c3      	ldrb	r3, [r0, #7]
 80020b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80020ba:	3008      	adds	r0, #8
 80020bc:	bd08      	pop	{r3, pc}
 80020be:	bf00      	nop

080020c0 <_Unwind_GetTextRelBase>:
 80020c0:	b508      	push	{r3, lr}
 80020c2:	f007 f85c 	bl	800917e <abort>
 80020c6:	bf00      	nop

080020c8 <_Unwind_GetDataRelBase>:
 80020c8:	b508      	push	{r3, lr}
 80020ca:	f7ff fff9 	bl	80020c0 <_Unwind_GetTextRelBase>
 80020ce:	bf00      	nop

080020d0 <_ZN8AllTasksC1Ev>:
#include <AllTasks.h>


AllTasks allTasks;

AllTasks::AllTasks() {
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <_ZN8AllTasksC1Ev+0x1c>)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	08009490 	.word	0x08009490

080020f0 <_ZN8AllTasks4initEv>:

void AllTasks::init(void){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
//	init_latt_driver();
	tools.Init();
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <_ZN8AllTasks4initEv+0x30>)
 80020fa:	f001 fe53 	bl	8003da4 <_ZN5Tools4InitEv>
	futaba.Init();
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <_ZN8AllTasks4initEv+0x34>)
 8002100:	f000 ff62 	bl	8002fc8 <_ZN6Futaba4InitEv>
	mode_manager.init();
 8002104:	4808      	ldr	r0, [pc, #32]	; (8002128 <_ZN8AllTasks4initEv+0x38>)
 8002106:	f001 fb4f 	bl	80037a8 <_ZN11ModeManager4initEv>
	motor_manager.init();
 800210a:	4808      	ldr	r0, [pc, #32]	; (800212c <_ZN8AllTasks4initEv+0x3c>)
 800210c:	f001 fcc6 	bl	8003a9c <_ZN12MotorManager4initEv>
	canSendManager.init();
 8002110:	4807      	ldr	r0, [pc, #28]	; (8002130 <_ZN8AllTasks4initEv+0x40>)
 8002112:	f000 f869 	bl	80021e8 <_ZN14CanSendManager4initEv>

}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001a0 	.word	0x200001a0
 8002124:	200000cc 	.word	0x200000cc
 8002128:	20000180 	.word	0x20000180
 800212c:	20000194 	.word	0x20000194
 8002130:	200000a4 	.word	0x200000a4

08002134 <_ZN8AllTasks7processEv>:

void AllTasks::process(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	//futaba.Process();
	mode_manager.proccess();
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <_ZN8AllTasks7processEv+0x1c>)
 800213e:	f001 fb5f 	bl	8003800 <_ZN11ModeManager8proccessEv>
	motor_manager.process();
 8002142:	4804      	ldr	r0, [pc, #16]	; (8002154 <_ZN8AllTasks7processEv+0x20>)
 8002144:	f001 fcb8 	bl	8003ab8 <_ZN12MotorManager7processEv>

}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000180 	.word	0x20000180
 8002154:	20000194 	.word	0x20000194

08002158 <_ZN8AllTasksD1Ev>:

AllTasks::~AllTasks() {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <_ZN8AllTasksD1Ev+0x1c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	08009490 	.word	0x08009490

08002178 <_ZN8AllTasksD0Ev>:
AllTasks::~AllTasks() {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
}
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffe9 	bl	8002158 <_ZN8AllTasksD1Ev>
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f003 fe2f 	bl	8005dea <_ZdlPv>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <_Z41__static_initialization_and_destruction_0ii>:
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10c      	bne.n	80021c2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d107      	bne.n	80021c2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
AllTasks allTasks;
 80021b2:	4806      	ldr	r0, [pc, #24]	; (80021cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80021b4:	f7ff ff8c 	bl	80020d0 <_ZN8AllTasksC1Ev>
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80021ba:	4906      	ldr	r1, [pc, #24]	; (80021d4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80021be:	f003 fe16 	bl	8005dee <__aeabi_atexit>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200000a0 	.word	0x200000a0
 80021d0:	20000000 	.word	0x20000000
 80021d4:	08002159 	.word	0x08002159

080021d8 <_GLOBAL__sub_I_allTasks>:
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
 80021dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80021e0:	2001      	movs	r0, #1
 80021e2:	f7ff ffd9 	bl	8002198 <_Z41__static_initialization_and_destruction_0ii>
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <_ZN14CanSendManager4initEv>:

#include "CanSendManager.h"

CanSendManager canSendManager;

void CanSendManager::init(){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

	canMsgTx.header.RTR = CAN_RTR_DATA;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
	canMsgTx.header.IDE  = CAN_ID_STD;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
	canMsgTx.header.ExtId = 0x01;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	609a      	str	r2, [r3, #8]
	canMsgTx.header.TransmitGlobalTime = DISABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	761a      	strb	r2, [r3, #24]
	clearTxBuff();
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f804 	bl	8002216 <_ZN14CanSendManager11clearTxBuffEv>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <_ZN14CanSendManager11clearTxBuffEv>:

void CanSendManager::clearTxBuff(){ for(uint8_t i = 0; i<8; i++) canMsgTx.data[i]=0;}
 8002216:	b480      	push	{r7}
 8002218:	b085      	sub	sp, #20
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	2b07      	cmp	r3, #7
 8002226:	dc09      	bgt.n	800223c <_ZN14CanSendManager11clearTxBuffEv+0x26>
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2020 	strb.w	r2, [r3, #32]
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	3301      	adds	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	e7f2      	b.n	8002222 <_ZN14CanSendManager11clearTxBuffEv+0xc>
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>:


void CanSendManager::sendMsg(SEND_MODE mode){
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]


	if (mode == TURN ){
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x20>
		hal_can_send( VELOCITY_FRAME_ID, STEERING_FRAME_LENGTH );
 8002258:	2204      	movs	r2, #4
 800225a:	f240 213e 	movw	r1, #574	; 0x23e
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f950 	bl	8002504 <_ZN14CanSendManager12hal_can_sendEmm>
 8002264:	e012      	b.n	800228c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
	}
	else if (mode == VELOCITY) {
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x34>
		hal_can_send( TURN_FRAME_ID,  STEERING_FRAME_LENGTH);
 800226c:	2204      	movs	r2, #4
 800226e:	f240 214d 	movw	r1, #589	; 0x24d
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f946 	bl	8002504 <_ZN14CanSendManager12hal_can_sendEmm>
 8002278:	e008      	b.n	800228c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
	}
	else if (mode == STATUS ){
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d105      	bne.n	800228c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
		hal_can_send( STATUS_FRAME_ID,  STATUS_FRAME_LENGTH);
 8002280:	2204      	movs	r2, #4
 8002282:	f240 215d 	movw	r1, #605	; 0x25d
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f93c 	bl	8002504 <_ZN14CanSendManager12hal_can_sendEmm>
	}

	clearTxBuff();
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffc2 	bl	8002216 <_ZN14CanSendManager11clearTxBuffEv>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_ZN14CanSendManager7getSignEf>:

uint8_t CanSendManager::getSign(float value){
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
	if (value >=0) return POSITIVE_SIGN;
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	6838      	ldr	r0, [r7, #0]
 80022aa:	f7fe ff1b 	bl	80010e4 <__aeabi_fcmpge>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <_ZN14CanSendManager7getSignEf+0x1e>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <_ZN14CanSendManager7getSignEf+0x20>
	else return NEGATIVE_SIGN;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <_ZN14CanSendManager21convertFloatToUint16tEf>:

uint16_t CanSendManager::convertFloatToUint16t(float value){
 80022c2:	b5b0      	push	{r4, r5, r7, lr}
 80022c4:	b084      	sub	sp, #16
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
	float range = 128;
 80022cc:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 80022d0:	60fb      	str	r3, [r7, #12]
	if( value > range){
 80022d2:	68f9      	ldr	r1, [r7, #12]
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f7fe ff0f 	bl	80010f8 <__aeabi_fcmpgt>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <_ZN14CanSendManager21convertFloatToUint16tEf+0x2a>
		return range;
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7fe ff4f 	bl	8001184 <__aeabi_f2uiz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	e023      	b.n	8002334 <_ZN14CanSendManager21convertFloatToUint16tEf+0x72>
	}
	return(uint16_t)(value * pow(2, 16) /range);
 80022ec:	6838      	ldr	r0, [r7, #0]
 80022ee:	f7fe f89d 	bl	800042c <__aeabi_f2d>
 80022f2:	4604      	mov	r4, r0
 80022f4:	460d      	mov	r5, r1
 80022f6:	2110      	movs	r1, #16
 80022f8:	2002      	movs	r0, #2
 80022fa:	f000 f94e 	bl	800259a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4620      	mov	r0, r4
 8002304:	4629      	mov	r1, r5
 8002306:	f7fe f8e5 	bl	80004d4 <__aeabi_dmul>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	4625      	mov	r5, r4
 8002310:	461c      	mov	r4, r3
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7fe f88a 	bl	800042c <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fe fa02 	bl	8000728 <__aeabi_ddiv>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fbaa 	bl	8000a84 <__aeabi_d2uiz>
 8002330:	4603      	mov	r3, r0
 8002332:	b29b      	uxth	r3, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}

0800233c <_ZN14CanSendManager23encode_frame_big_endianEh>:
	encode_frame_big_endian(STEERING_FRAME_LENGTH);


}

void CanSendManager::encode_frame_big_endian(uint8_t data_length){
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
	 uint8_t* encoded_data = (uint8_t*)calloc(data_length, sizeof(uint8_t));
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2101      	movs	r1, #1
 800234c:	4618      	mov	r0, r3
 800234e:	f006 ff1d 	bl	800918c <calloc>
 8002352:	4603      	mov	r3, r0
 8002354:	60bb      	str	r3, [r7, #8]
	 if (encoded_data != NULL){
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d029      	beq.n	80023b0 <_ZN14CanSendManager23encode_frame_big_endianEh+0x74>
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	78fb      	ldrb	r3, [r7, #3]
 8002364:	429a      	cmp	r2, r3
 8002366:	dc0f      	bgt.n	8002388 <_ZN14CanSendManager23encode_frame_big_endianEh+0x4c>
			encoded_data[i-1] = canMsgTx.data[data_length-i];
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3b01      	subs	r3, #1
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	4413      	add	r3, r2
 8002370:	78f9      	ldrb	r1, [r7, #3]
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	1a8a      	subs	r2, r1, r2
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	440a      	add	r2, r1
 800237a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800237e:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	3301      	adds	r3, #1
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e7eb      	b.n	8002360 <_ZN14CanSendManager23encode_frame_big_endianEh+0x24>
		}
		for( uint8_t i = 0 ; i < data_length  ;i++) canMsgTx.data[i] = encoded_data[i];
 8002388:	2300      	movs	r3, #0
 800238a:	73bb      	strb	r3, [r7, #14]
 800238c:	7bba      	ldrb	r2, [r7, #14]
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	429a      	cmp	r2, r3
 8002392:	da0d      	bge.n	80023b0 <_ZN14CanSendManager23encode_frame_big_endianEh+0x74>
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	7bba      	ldrb	r2, [r7, #14]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	440a      	add	r2, r1
 800239c:	7811      	ldrb	r1, [r2, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	460a      	mov	r2, r1
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
 80023a8:	7bbb      	ldrb	r3, [r7, #14]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73bb      	strb	r3, [r7, #14]
 80023ae:	e7ed      	b.n	800238c <_ZN14CanSendManager23encode_frame_big_endianEh+0x50>
	 }

	 free(encoded_data);
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f006 ff33 	bl	800921c <free>

}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZN14CanSendManager7processEffNS_9SEND_MODEE>:


void CanSendManager::process(float maxvalue, float value,SEND_MODE mode){
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	60f8      	str	r0, [r7, #12]
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	70fb      	strb	r3, [r7, #3]
	uint8_t sign = getSign(value) ;
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff ff63 	bl	800229a <_ZN14CanSendManager7getSignEf>
 80023d4:	4603      	mov	r3, r0
 80023d6:	75fb      	strb	r3, [r7, #23]
	if (sign == NEGATIVE_SIGN){ value *= -1; } //Change sign to positive after check
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <_ZN14CanSendManager7processEffNS_9SEND_MODEE+0x28>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	607b      	str	r3, [r7, #4]
	uint16_t convertedData = convertFloatToUint16t(value);
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff ff6a 	bl	80022c2 <_ZN14CanSendManager21convertFloatToUint16tEf>
 80023ee:	4603      	mov	r3, r0
 80023f0:	82bb      	strh	r3, [r7, #20]
	//uint8_t * frameData = convertToFrame(sign, convertedData);
	canMsgTx.data[0] = (uint8_t)(sign >> 8);
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	121b      	asrs	r3, r3, #8
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]
	canMsgTx.data[1] = (uint8_t) sign;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	7dfa      	ldrb	r2, [r7, #23]
 8002402:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	canMsgTx.data[2] = (uint8_t)(convertedData >> 8 );
 8002406:	8abb      	ldrh	r3, [r7, #20]
 8002408:	121b      	asrs	r3, r3, #8
 800240a:	b2da      	uxtb	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	canMsgTx.data[3] = (uint8_t) (convertedData);
 8002412:	8abb      	ldrh	r3, [r7, #20]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	encode_frame_big_endian(STEERING_FRAME_LENGTH);
 800241c:	2104      	movs	r1, #4
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff ff8c 	bl	800233c <_ZN14CanSendManager23encode_frame_big_endianEh>
	sendMsg(mode);
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	4619      	mov	r1, r3
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff ff0c 	bl	8002246 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN14CanSendManager11setVelocityEff>:

void CanSendManager::setVelocity(float maxVel,float vel){
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
	process(maxVel, vel, VELOCITY);
 8002442:	2301      	movs	r3, #1
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f7ff ffb8 	bl	80023be <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZN14CanSendManager7setTurnEff>:

void CanSendManager::setTurn(float maxAngle, float angle){
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
	process(maxAngle, angle, TURN);
 8002462:	2300      	movs	r3, #0
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f7ff ffa8 	bl	80023be <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>:
void CanSendManager::setStatus(ModeManager::RC_MODE RCmode, ModeManager::DRIVE_MODE drive_mode){
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	4613      	mov	r3, r2
 8002484:	70bb      	strb	r3, [r7, #2]
	uint8_t RCstatus, driveStatus;
	if 		(RCmode == ModeManager::DISARMED)  		 RCstatus =  JOYSTICK_MODE_MSG;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x1c>
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e010      	b.n	80024b4 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_ACRO) 		 RCstatus =  ACRO_MODE_MSG;
 8002492:	78fb      	ldrb	r3, [r7, #3]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d102      	bne.n	800249e <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x28>
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e00a      	b.n	80024b4 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_SEMI) 		 RCstatus =  SEMI_MODE_MSG;
 800249e:	78fb      	ldrb	r3, [r7, #3]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d102      	bne.n	80024aa <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x34>
 80024a4:	2302      	movs	r3, #2
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e004      	b.n	80024b4 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_AUTONOMOUS) RCstatus =  AUTONOMOUS_MODE_MSG;
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
 80024b0:	2303      	movs	r3, #3
 80024b2:	73fb      	strb	r3, [r7, #15]

	if 		(drive_mode == ModeManager::ENABLE)  	 driveStatus =  ENABLE_DRIVE_MSG;
 80024b4:	78bb      	ldrb	r3, [r7, #2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d102      	bne.n	80024c0 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x4a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	73bb      	strb	r3, [r7, #14]
 80024be:	e004      	b.n	80024ca <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
	else if (drive_mode == ModeManager::DISABLE)     driveStatus =  DISABLE_DRIVE_MSG;
 80024c0:	78bb      	ldrb	r3, [r7, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
 80024c6:	2300      	movs	r3, #0
 80024c8:	73bb      	strb	r3, [r7, #14]

	canMsgTx.data[0] = 0;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2020 	strb.w	r2, [r3, #32]
	canMsgTx.data[1] = RCstatus;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	canMsgTx.data[2] = 0;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	canMsgTx.data[3] = driveStatus;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7bba      	ldrb	r2, [r7, #14]
 80024e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
//	uint8_t data_to_encode[]={
//			(uint8_t) NULL,
//			(uint8_t) RCstatus,
//			(uint8_t) NULL,
//			(uint8_t) driveStatus };
	encode_frame_big_endian(STEERING_FRAME_LENGTH);
 80024ea:	2104      	movs	r1, #4
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff25 	bl	800233c <_ZN14CanSendManager23encode_frame_big_endianEh>
	sendMsg(STATUS);
 80024f2:	2102      	movs	r1, #2
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff fea6 	bl	8002246 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>

}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <_ZN14CanSendManager12hal_can_sendEmm>:

void CanSendManager::hal_can_send(uint32_t frame_id, uint32_t dlc){
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]

		canMsgTx.header.DLC = (uint32_t)dlc;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	615a      	str	r2, [r3, #20]
		canMsgTx.header.StdId = (uint32_t)frame_id;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	605a      	str	r2, [r3, #4]
		HAL_CAN_AddTxMessage(&hcan, &(canMsgTx.header),canMsgTx.data,&(canMsgTx.mailbox));
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1d19      	adds	r1, r3, #4
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f103 0220 	add.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	331c      	adds	r3, #28
 800252a:	4803      	ldr	r0, [pc, #12]	; (8002538 <_ZN14CanSendManager12hal_can_sendEmm+0x34>)
 800252c:	f002 f94e 	bl	80047cc <HAL_CAN_AddTxMessage>


}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200001c4 	.word	0x200001c4

0800253c <_ZN14CanSendManagerC1Ev>:
CanSendManager::CanSendManager() {
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <_ZN14CanSendManagerC1Ev+0x1c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	080094b4 	.word	0x080094b4

0800255c <_ZN14CanSendManagerD1Ev>:

CanSendManager::~CanSendManager() {
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <_ZN14CanSendManagerD1Ev+0x1c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	080094b4 	.word	0x080094b4

0800257c <_ZN14CanSendManagerD0Ev>:
CanSendManager::~CanSendManager() {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
}
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffe9 	bl	800255c <_ZN14CanSendManagerD1Ev>
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f003 fc2d 	bl	8005dea <_ZdlPv>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800259a:	b5b0      	push	{r4, r5, r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fd ff2f 	bl	8000408 <__aeabi_i2d>
 80025aa:	4604      	mov	r4, r0
 80025ac:	460d      	mov	r5, r1
 80025ae:	6838      	ldr	r0, [r7, #0]
 80025b0:	f7fd ff2a 	bl	8000408 <__aeabi_i2d>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f004 f932 	bl	8006824 <pow>
 80025c0:	4603      	mov	r3, r0
 80025c2:	460c      	mov	r4, r1
    }
 80025c4:	4618      	mov	r0, r3
 80025c6:	4621      	mov	r1, r4
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080025d0 <_Z41__static_initialization_and_destruction_0ii>:
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10c      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d107      	bne.n	80025fa <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanSendManager canSendManager;
 80025ea:	4806      	ldr	r0, [pc, #24]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80025ec:	f7ff ffa6 	bl	800253c <_ZN14CanSendManagerC1Ev>
 80025f0:	4a05      	ldr	r2, [pc, #20]	; (8002608 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80025f2:	4906      	ldr	r1, [pc, #24]	; (800260c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80025f4:	4803      	ldr	r0, [pc, #12]	; (8002604 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80025f6:	f003 fbfa 	bl	8005dee <__aeabi_atexit>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200000a4 	.word	0x200000a4
 8002608:	20000000 	.word	0x20000000
 800260c:	0800255d 	.word	0x0800255d

08002610 <_GLOBAL__sub_I_canSendManager>:
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
 8002614:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002618:	2001      	movs	r0, #1
 800261a:	f7ff ffd9 	bl	80025d0 <_Z41__static_initialization_and_destruction_0ii>
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZN6FilterC1Ev>:
class Filter {

public:
	virtual float apply(float input) = 0;

	Filter(){};
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <_ZN6FilterC1Ev+0x1c>)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	0800963c 	.word	0x0800963c

08002640 <_ZN6FilterD1Ev>:
	virtual ~Filter(){};
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4a04      	ldr	r2, [pc, #16]	; (800265c <_ZN6FilterD1Ev+0x1c>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	0800963c 	.word	0x0800963c

08002660 <_ZN6FilterD0Ev>:
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffe9 	bl	8002640 <_ZN6FilterD1Ev>
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f003 fbbb 	bl	8005dea <_ZdlPv>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <_ZN10NullFilterD1Ev>:
public:
	float apply(float input);
	void init(void);

	NullFilter(){};
	virtual ~NullFilter(){};
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <_ZN10NullFilterD1Ev+0x20>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ffd5 	bl	8002640 <_ZN6FilterD1Ev>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	080094e0 	.word	0x080094e0

080026a4 <_ZN10NullFilterD0Ev>:
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ffe7 	bl	8002680 <_ZN10NullFilterD1Ev>
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f003 fb99 	bl	8005dea <_ZdlPv>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <_ZN9PT1Filter5applyEf>:
 */

#include <Filters.h>

/* PT1 */
float PT1Filter::apply(float input) {
 80026c2:	b5b0      	push	{r4, r5, r7, lr}
 80026c4:	b082      	sub	sp, #8
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
    state += k * (input - state);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685c      	ldr	r4, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689d      	ldr	r5, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4619      	mov	r1, r3
 80026da:	6838      	ldr	r0, [r7, #0]
 80026dc:	f7fe fa46 	bl	8000b6c <__aeabi_fsub>
 80026e0:	4603      	mov	r3, r0
 80026e2:	4619      	mov	r1, r3
 80026e4:	4628      	mov	r0, r5
 80026e6:	f7fe fb4b 	bl	8000d80 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4619      	mov	r1, r3
 80026ee:	4620      	mov	r0, r4
 80026f0:	f7fe fa3e 	bl	8000b70 <__addsf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	605a      	str	r2, [r3, #4]
    return state;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bdb0      	pop	{r4, r5, r7, pc}

08002708 <_ZN9PT1FilterD1Ev>:
PT1Filter::PT1Filter(uint8_t f_cut, float dT){
    float RC = 1.0f / ( 2.0f * M_PI_FLOAT * f_cut );
    k = dT / (RC + dT);
    state = 0;
}
PT1Filter::~PT1Filter() {
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_ZN9PT1FilterD1Ev+0x20>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff91 	bl	8002640 <_ZN6FilterD1Ev>
}
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	0800951c 	.word	0x0800951c

0800272c <_ZN9PT1FilterD0Ev>:
PT1Filter::~PT1Filter() {
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
}
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ffe7 	bl	8002708 <_ZN9PT1FilterD1Ev>
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f003 fb55 	bl	8005dea <_ZdlPv>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_ZN12BiquadFilter5applyEf>:

/* Biquad */
float BiquadFilter::apply(float input) {
 800274a:	b590      	push	{r4, r7, lr}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
    float result = b0 * input + x1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	6839      	ldr	r1, [r7, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fb10 	bl	8000d80 <__aeabi_fmul>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f7fe fa00 	bl	8000b70 <__addsf3>
 8002770:	4603      	mov	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
    x1 = b1 * input - a1 * result + x2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fb00 	bl	8000d80 <__aeabi_fmul>
 8002780:	4603      	mov	r3, r0
 8002782:	461c      	mov	r4, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe faf8 	bl	8000d80 <__aeabi_fmul>
 8002790:	4603      	mov	r3, r0
 8002792:	4619      	mov	r1, r3
 8002794:	4620      	mov	r0, r4
 8002796:	f7fe f9e9 	bl	8000b6c <__aeabi_fsub>
 800279a:	4603      	mov	r3, r0
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	4610      	mov	r0, r2
 80027a6:	f7fe f9e3 	bl	8000b70 <__addsf3>
 80027aa:	4603      	mov	r3, r0
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]
    x2 = b2 * input - a2 * result;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fae1 	bl	8000d80 <__aeabi_fmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	461c      	mov	r4, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	68f9      	ldr	r1, [r7, #12]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fad9 	bl	8000d80 <__aeabi_fmul>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4619      	mov	r1, r3
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7fe f9ca 	bl	8000b6c <__aeabi_fsub>
 80027d8:	4603      	mov	r3, r0
 80027da:	461a      	mov	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    return result;
 80027e0:	68fb      	ldr	r3, [r7, #12]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}
	...

080027ec <_ZN12BiquadFilterC1E18biquadFilterType_efff>:
BiquadFilter::BiquadFilter( biquadFilterType_e type, float dT, float filterFreq,  float cutoff) {
 80027ec:	b590      	push	{r4, r7, lr}
 80027ee:	b08d      	sub	sp, #52	; 0x34
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	72fb      	strb	r3, [r7, #11]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff ff0e 	bl	8002620 <_ZN6FilterC1Ev>
 8002804:	4a74      	ldr	r2, [pc, #464]	; (80029d8 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1ec>)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a73      	ldr	r2, [pc, #460]	; (80029dc <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f0>)
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a73      	ldr	r2, [pc, #460]	; (80029e0 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f4>)
 8002814:	609a      	str	r2, [r3, #8]

	const float omega = 2.0f * M_PI_FLOAT * filterFreq * dT;
 8002816:	4973      	ldr	r1, [pc, #460]	; (80029e4 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f8>)
 8002818:	6838      	ldr	r0, [r7, #0]
 800281a:	f7fe fab1 	bl	8000d80 <__aeabi_fmul>
 800281e:	4603      	mov	r3, r0
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe faac 	bl	8000d80 <__aeabi_fmul>
 8002828:	4603      	mov	r3, r0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	const float sn = sin_approx(omega);
 800282c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800282e:	f003 ffc3 	bl	80067b8 <sinf>
 8002832:	4603      	mov	r3, r0
 8002834:	623b      	str	r3, [r7, #32]
	const float cs = cos_approx(omega);
 8002836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002838:	f003 ff80 	bl	800673c <cosf>
 800283c:	4603      	mov	r3, r0
 800283e:	61fb      	str	r3, [r7, #28]
	float Q;
	if (type == FILTER_NOTCH) {
 8002840:	7afb      	ldrb	r3, [r7, #11]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d12b      	bne.n	800289e <_ZN12BiquadFilterC1E18biquadFilterType_efff+0xb2>
		float octaves = log2f((float) filterFreq / (float) cutoff) * 2;
 8002846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f7fe fb4d 	bl	8000ee8 <__aeabi_fdiv>
 800284e:	4603      	mov	r3, r0
 8002850:	4618      	mov	r0, r3
 8002852:	f003 ffa7 	bl	80067a4 <log2f>
 8002856:	4603      	mov	r3, r0
 8002858:	4619      	mov	r1, r3
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe f988 	bl	8000b70 <__addsf3>
 8002860:	4603      	mov	r3, r0
 8002862:	61bb      	str	r3, [r7, #24]
		Q = sqrtf(powf(2, octaves)) / (powf(2, octaves) - 1);
 8002864:	69b9      	ldr	r1, [r7, #24]
 8002866:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800286a:	f004 f9b1 	bl	8006bd0 <powf>
 800286e:	4603      	mov	r3, r0
 8002870:	4618      	mov	r0, r3
 8002872:	f004 fb19 	bl	8006ea8 <sqrtf>
 8002876:	4604      	mov	r4, r0
 8002878:	69b9      	ldr	r1, [r7, #24]
 800287a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800287e:	f004 f9a7 	bl	8006bd0 <powf>
 8002882:	4603      	mov	r3, r0
 8002884:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe f96f 	bl	8000b6c <__aeabi_fsub>
 800288e:	4603      	mov	r3, r0
 8002890:	4619      	mov	r1, r3
 8002892:	4620      	mov	r0, r4
 8002894:	f7fe fb28 	bl	8000ee8 <__aeabi_fdiv>
 8002898:	4603      	mov	r3, r0
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289c:	e002      	b.n	80028a4 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0xb8>
	} else
		Q = BIQUAD_Q;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float alpha = sn / (2.0f * Q);
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	4619      	mov	r1, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe f961 	bl	8000b70 <__addsf3>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4619      	mov	r1, r3
 80028b2:	6a38      	ldr	r0, [r7, #32]
 80028b4:	f7fe fb18 	bl	8000ee8 <__aeabi_fdiv>
 80028b8:	4603      	mov	r3, r0
 80028ba:	617b      	str	r3, [r7, #20]

	float a0 = 0;
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
	b0 = 0; b1 = 0; b2 = 0; a0 = 0; a1 = 0; a2 = 0;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	611a      	str	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	619a      	str	r2, [r3, #24]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	61da      	str	r2, [r3, #28]

	switch (type) {
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d045      	beq.n	8002982 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x196>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d076      	beq.n	80029e8 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1fc>
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 809a 	bne.w	8002a34 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
	case FILTER_LPF:
		b0 = (1 - cs) * 0.5f;
 8002900:	69f9      	ldr	r1, [r7, #28]
 8002902:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002906:	f7fe f931 	bl	8000b6c <__aeabi_fsub>
 800290a:	4603      	mov	r3, r0
 800290c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fa35 	bl	8000d80 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	60da      	str	r2, [r3, #12]
		b1 = 1 - cs;
 800291e:	69f9      	ldr	r1, [r7, #28]
 8002920:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002924:	f7fe f922 	bl	8000b6c <__aeabi_fsub>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	611a      	str	r2, [r3, #16]
		b2 = (1 - cs) * 0.5f;
 8002930:	69f9      	ldr	r1, [r7, #28]
 8002932:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002936:	f7fe f919 	bl	8000b6c <__aeabi_fsub>
 800293a:	4603      	mov	r3, r0
 800293c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fa1d 	bl	8000d80 <__aeabi_fmul>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 800294e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	f7fe f90c 	bl	8000b70 <__addsf3>
 8002958:	4603      	mov	r3, r0
 800295a:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 800295c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002960:	69f8      	ldr	r0, [r7, #28]
 8002962:	f7fe fa0d 	bl	8000d80 <__aeabi_fmul>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002974:	f7fe f8fa 	bl	8000b6c <__aeabi_fsub>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	61da      	str	r2, [r3, #28]
		break;
 8002980:	e058      	b.n	8002a34 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
	case FILTER_NOTCH:
		b0 =  1;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002988:	60da      	str	r2, [r3, #12]
		b1 = -2 * cs;
 800298a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800298e:	69f8      	ldr	r0, [r7, #28]
 8002990:	f7fe f9f6 	bl	8000d80 <__aeabi_fmul>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	611a      	str	r2, [r3, #16]
		b2 = 1;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029a2:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 80029a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029a8:	6978      	ldr	r0, [r7, #20]
 80029aa:	f7fe f8e1 	bl	8000b70 <__addsf3>
 80029ae:	4603      	mov	r3, r0
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 80029b2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80029b6:	69f8      	ldr	r0, [r7, #28]
 80029b8:	f7fe f9e2 	bl	8000d80 <__aeabi_fmul>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 80029c4:	6979      	ldr	r1, [r7, #20]
 80029c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80029ca:	f7fe f8cf 	bl	8000b6c <__aeabi_fsub>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	61da      	str	r2, [r3, #28]
		break;
 80029d6:	e02d      	b.n	8002a34 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
 80029d8:	08009508 	.word	0x08009508
 80029dc:	3ff33333 	.word	0x3ff33333
 80029e0:	3f3504f3 	.word	0x3f3504f3
 80029e4:	40c90fdb 	.word	0x40c90fdb
	case FILTER_BPF:
		b0 = alpha;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	60da      	str	r2, [r3, #12]
		b1 = 0;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	611a      	str	r2, [r3, #16]
		b2 = -alpha;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 8002a00:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f7fe f8b3 	bl	8000b70 <__addsf3>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 8002a0e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002a12:	69f8      	ldr	r0, [r7, #28]
 8002a14:	f7fe f9b4 	bl	8000d80 <__aeabi_fmul>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a26:	f7fe f8a1 	bl	8000b6c <__aeabi_fsub>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	61da      	str	r2, [r3, #28]
		break;
 8002a32:	bf00      	nop
	}

	// precompute the coefficients
	b0 = b0 / a0;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fa54 	bl	8000ee8 <__aeabi_fdiv>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	60da      	str	r2, [r3, #12]
	b1 = b1 / a0;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe fa4a 	bl	8000ee8 <__aeabi_fdiv>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	611a      	str	r2, [r3, #16]
	b2 = b2 / a0;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fa40 	bl	8000ee8 <__aeabi_fdiv>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	615a      	str	r2, [r3, #20]
	a1 = a1 / a0;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fa36 	bl	8000ee8 <__aeabi_fdiv>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	619a      	str	r2, [r3, #24]
	a2 = a2 / a0;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fa2c 	bl	8000ee8 <__aeabi_fdiv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	61da      	str	r2, [r3, #28]

	// zero initial samples
	x1 = x2 = 0;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	621a      	str	r2, [r3, #32]
	y1 = y2 = 0;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	e005      	b.n	8002ac8 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x2dc>
BiquadFilter::BiquadFilter( biquadFilterType_e type, float dT, float filterFreq,  float cutoff) {
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fdbe 	bl	8002640 <_ZN6FilterD1Ev>
 8002ac4:	f003 f9d0 	bl	8005e68 <__cxa_end_cleanup>
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3734      	adds	r7, #52	; 0x34
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}

08002ad0 <_ZN12BiquadFilterD1Ev>:
BiquadFilter::~BiquadFilter() {}
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <_ZN12BiquadFilterD1Ev+0x20>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fdad 	bl	8002640 <_ZN6FilterD1Ev>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	08009508 	.word	0x08009508

08002af4 <_ZN12BiquadFilterD0Ev>:
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ffe7 	bl	8002ad0 <_ZN12BiquadFilterD1Ev>
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f003 f971 	bl	8005dea <_ZdlPv>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_ZN12KalmanFilter5applyEf>:

/* Kalman */
float KalmanFilter::apply(float input){
 8002b12:	b5b0      	push	{r4, r5, r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	6039      	str	r1, [r7, #0]

	//project the state ahead using acceleration
	x += (x - lastX);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	695c      	ldr	r4, [r3, #20]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f7fe f81e 	bl	8000b6c <__aeabi_fsub>
 8002b30:	4603      	mov	r3, r0
 8002b32:	4619      	mov	r1, r3
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7fe f81b 	bl	8000b70 <__addsf3>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	615a      	str	r2, [r3, #20]

	//update last state
	lastX = x;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	619a      	str	r2, [r3, #24]

	//prediction update
	p += q;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f7fe f80b 	bl	8000b70 <__addsf3>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]

	//measurement update
	k = p / (p + r);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68dc      	ldr	r4, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fd fffd 	bl	8000b70 <__addsf3>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe f9b4 	bl	8000ee8 <__aeabi_fdiv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]
	x += k * (input - x);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695c      	ldr	r4, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691d      	ldr	r5, [r3, #16]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4619      	mov	r1, r3
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f7fd ffe8 	bl	8000b6c <__aeabi_fsub>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f7fe f8ed 	bl	8000d80 <__aeabi_fmul>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4620      	mov	r0, r4
 8002bac:	f7fd ffe0 	bl	8000b70 <__addsf3>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	615a      	str	r2, [r3, #20]
	p = (1.f - k) * p;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002bc2:	f7fd ffd3 	bl	8000b6c <__aeabi_fsub>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7fe f8d5 	bl	8000d80 <__aeabi_fmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60da      	str	r2, [r3, #12]

	return x;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002bec <_ZN12KalmanFilterD1Ev>:
	p     = ppar * 0.001f;		//add multiplier to make tuning easier
	x     = intialValue;		//set intial value, can be zero if unknown
	lastX = intialValue;		//set intial value, can be zero if unknown
	k = 0.0f;					//kalman gain,
}
KalmanFilter::~KalmanFilter(){}
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4a05      	ldr	r2, [pc, #20]	; (8002c0c <_ZN12KalmanFilterD1Ev+0x20>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff fd1f 	bl	8002640 <_ZN6FilterD1Ev>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	080094f4 	.word	0x080094f4

08002c10 <_ZN12KalmanFilterD0Ev>:
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ffe7 	bl	8002bec <_ZN12KalmanFilterD1Ev>
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f003 f8e3 	bl	8005dea <_ZdlPv>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZN10NullFilter5applyEf>:

/* NullFilter */
float NullFilter::apply(float input){
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
    return input;
 8002c38:	683b      	ldr	r3, [r7, #0]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <_ZN6Futaba15sbusDataReceiveEh>:

#define SBUS_DIGITAL_CHANNEL_MIN 173
#define SBUS_DIGITAL_CHANNEL_MAX 1812

Futaba futaba;
void Futaba::sbusDataReceive(uint8_t c){
 8002c44:	b590      	push	{r4, r7, lr}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	70fb      	strb	r3, [r7, #3]

	const uint32_t nowUs = tools.GetMicros();
 8002c50:	4826      	ldr	r0, [pc, #152]	; (8002cec <_ZN6Futaba15sbusDataReceiveEh+0xa8>)
 8002c52:	f001 f89b 	bl	8003d8c <_ZN5Tools9GetMicrosEv>
 8002c56:	4603      	mov	r3, r0
 8002c58:	60fb      	str	r3, [r7, #12]
	const int32_t sbusFrameTime = abs(nowUs - startAtUs);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd67 	bl	8003736 <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	4621      	mov	r1, r4
 8002c70:	f7fd fee0 	bl	8000a34 <__aeabi_d2iz>
 8002c74:	4603      	mov	r3, r0
 8002c76:	60bb      	str	r3, [r7, #8]

	if (sbusFrameTime > (long) (SBUS_TIME_NEEDED_PER_FRAME + 500)) {
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	dd03      	ble.n	8002c8a <_ZN6Futaba15sbusDataReceiveEh+0x46>
		position = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if (position == 0) {
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <_ZN6Futaba15sbusDataReceiveEh+0x5c>
		if (c != SBUS_FRAME_BEGIN_BYTE) {
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	d123      	bne.n	8002ce2 <_ZN6Futaba15sbusDataReceiveEh+0x9e>
			return;
		}
		startAtUs = nowUs;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (position < SBUS_FRAME_SIZE) {
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002ca6:	2b18      	cmp	r3, #24
 8002ca8:	d81c      	bhi.n	8002ce4 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		frame.bytes[position++] = (uint8_t) c;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	b2d1      	uxtb	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	731a      	strb	r2, [r3, #12]
		if (position < SBUS_FRAME_SIZE) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	d804      	bhi.n	8002cd8 <_ZN6Futaba15sbusDataReceiveEh+0x94>
			done = 0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002cd6:	e005      	b.n	8002ce4 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		} else {
			done = 1;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002ce0:	e000      	b.n	8002ce4 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
			return;
 8002ce2:	bf00      	nop
		}
	}
}
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd90      	pop	{r4, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200001a0 	.word	0x200001a0

08002cf0 <_ZN6Futaba15sbusFrameStatusEv>:
uint8_t Futaba::sbusFrameStatus(void){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

	    if (!done) {
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <_ZN6Futaba15sbusFrameStatusEv+0x16>
	        return RX_FRAME_PENDING;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e023      	b.n	8002d4e <_ZN6Futaba15sbusFrameStatusEv+0x5e>
	    }
	    done = 0;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	    if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <_ZN6Futaba15sbusFrameStatusEv+0x3a>
	        stateFlags |= SBUS_STATE_SIGNALLOSS;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d20:	f043 0302 	orr.w	r3, r3, #2
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }
	    if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d006      	beq.n	8002d46 <_ZN6Futaba15sbusFrameStatusEv+0x56>
	        stateFlags |= SBUS_STATE_FAILSAFE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }

	    return sbusChannelsDecode();
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f805 	bl	8002d56 <_ZN6Futaba18sbusChannelsDecodeEv>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <_ZN6Futaba18sbusChannelsDecodeEv>:
uint8_t Futaba::sbusChannelsDecode(void) {
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	sbusChannelData[0] = frame.frame.channels.chan0;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbusChannelData[1] = frame.frame.channels.chan1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	89db      	ldrh	r3, [r3, #14]
 8002d74:	f3c3 03ca 	ubfx	r3, r3, #3, #11
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbusChannelData[2] = frame.frame.channels.chan2;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7bda      	ldrb	r2, [r3, #15]
 8002d86:	0992      	lsrs	r2, r2, #6
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	8a1b      	ldrh	r3, [r3, #16]
 8002d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4313      	orrs	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbusChannelData[3] = frame.frame.channels.chan3;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbusChannelData[4] = frame.frame.channels.chan4;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8a5b      	ldrh	r3, [r3, #18]
 8002db4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	sbusChannelData[5] = frame.frame.channels.chan5;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7cda      	ldrb	r2, [r3, #19]
 8002dc6:	09d2      	lsrs	r2, r2, #7
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	8a9b      	ldrh	r3, [r3, #20]
 8002dcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	sbusChannelData[6] = frame.frame.channels.chan6;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	sbusChannelData[7] = frame.frame.channels.chan7;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8adb      	ldrh	r3, [r3, #22]
 8002df4:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	sbusChannelData[8] = frame.frame.channels.chan8;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8b1b      	ldrh	r3, [r3, #24]
 8002e06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sbusChannelData[9] = frame.frame.channels.chan9;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f3c3 23ca 	ubfx	r3, r3, #11, #11
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	sbusChannelData[10] = frame.frame.channels.chan10;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8b5a      	ldrh	r2, [r3, #26]
 8002e2a:	0992      	lsrs	r2, r2, #6
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	7f1b      	ldrb	r3, [r3, #28]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	029b      	lsls	r3, r3, #10
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	sbusChannelData[11] = frame.frame.channels.chan11;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	8b9b      	ldrh	r3, [r3, #28]
 8002e46:	f3c3 034a 	ubfx	r3, r3, #1, #11
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	sbusChannelData[12] = frame.frame.channels.chan12;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f3c3 330a 	ubfx	r3, r3, #12, #11
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	sbusChannelData[13] = frame.frame.channels.chan13;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8bda      	ldrh	r2, [r3, #30]
 8002e6a:	09d2      	lsrs	r2, r2, #7
 8002e6c:	b292      	uxth	r2, r2
 8002e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	sbusChannelData[14] = frame.frame.channels.chan14;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8c1b      	ldrh	r3, [r3, #32]
 8002e88:	f3c3 038a 	ubfx	r3, r3, #2, #11
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	sbusChannelData[15] = frame.frame.channels.chan15;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f3c3 334a 	ubfx	r3, r3, #13, #11
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_17) {
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <_ZN6Futaba18sbusChannelsDecodeEv+0x16c>
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MAX;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f240 7214 	movw	r2, #1812	; 0x714
 8002ebc:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8002ec0:	e003      	b.n	8002eca <_ZN6Futaba18sbusChannelsDecodeEv+0x174>
	} else {
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MIN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	22ad      	movs	r2, #173	; 0xad
 8002ec6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	}

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_18) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <_ZN6Futaba18sbusChannelsDecodeEv+0x18e>
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MAX;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f240 7214 	movw	r2, #1812	; 0x714
 8002ede:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8002ee2:	e003      	b.n	8002eec <_ZN6Futaba18sbusChannelsDecodeEv+0x196>
	} else {
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MIN;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	22ad      	movs	r2, #173	; 0xad
 8002ee8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}

	if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <_ZN6Futaba18sbusChannelsDecodeEv+0x1a8>
		// internal failsafe enabled and rx failsafe flag set
		// RX *should* still be sending valid channel data (repeated), so use it.
		return RX_FRAME_COMPLETE | RX_FRAME_FAILSAFE;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e009      	b.n	8002f12 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <_ZN6Futaba18sbusChannelsDecodeEv+0x1ba>
		// The received data is a repeat of the last valid data so can be considered complete.
		return RX_FRAME_COMPLETE | RX_FRAME_DROPPED;
 8002f0c:	2309      	movs	r3, #9
 8002f0e:	e000      	b.n	8002f12 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	return RX_FRAME_COMPLETE;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <_ZN6Futaba16sbusChannelsInitEv>:
    // http://www.wolframalpha.com/input/?i=linear+fit+%7B173%2C+988%7D%2C+%7B1812%2C+2012%7D%2C+%7B993%2C+1500%7D
    return (5 * sbusChannelData[chan] / 8) + 880;
}

void Futaba::sbusChannelsInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b11      	cmp	r3, #17
 8002f2c:	dc1d      	bgt.n	8002f6a <_ZN6Futaba16sbusChannelsInitEv+0x4e>
    	sbusChannelData[b] = (16 * midrc) / 10 - 1408;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <_ZN6Futaba16sbusChannelsInitEv+0xa8>)
 8002f36:	fb82 1203 	smull	r1, r2, r2, r3
 8002f3a:	1092      	asrs	r2, r2, #2
 8002f3c:	17db      	asrs	r3, r3, #31
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8002f46:	b299      	uxth	r1, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3324      	adds	r3, #36	; 0x24
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	460a      	mov	r2, r1
 8002f54:	809a      	strh	r2, [r3, #4]
    	Stick_Command[b] = 0;
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3396      	adds	r3, #150	; 0x96
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3301      	adds	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e7de      	b.n	8002f28 <_ZN6Futaba16sbusChannelsInitEv+0xc>
    }
	StickDeflection[ROLL] = 0.f;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = 0.f;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = 0.f;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = 0.f;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	67da      	str	r2, [r3, #124]	; 0x7c

	SwitchA = SWITCH_UP;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	SwitchB = SWITCH_UP;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	SwitchC = SWITCH_UP;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	SwitchD = SWITCH_UP;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	SwitchE = SWITCH_UP;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SwitchF = SWITCH_UP;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	66666667 	.word	0x66666667

08002fc8 <_ZN6Futaba4InitEv>:
void Futaba::Init(void) {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	MX_USART2_UART_Init();
 8002fd0:	f001 fa26 	bl	8004420 <MX_USART2_UART_Init>
	tools.Init();
 8002fd4:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <_ZN6Futaba4InitEv+0x30>)
 8002fd6:	f000 fee5 	bl	8003da4 <_ZN5Tools4InitEv>
	sbusChannelsInit();
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ff9e 	bl	8002f1c <_ZN6Futaba16sbusChannelsInitEv>
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4804      	ldr	r0, [pc, #16]	; (8002ffc <_ZN6Futaba4InitEv+0x34>)
 8002fea:	f002 fd49 	bl	8005a80 <HAL_UART_Receive_IT>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	200001a0 	.word	0x200001a0
 8002ffc:	200002a4 	.word	0x200002a4

08003000 <_ZN6Futaba11Get_RCStateEv>:
uint16_t Futaba::Get_RCState(void) {
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	return RCState;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800300e:	b29b      	uxth	r3, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <_ZN6Futaba7ProcessEv>:
void Futaba::Process(void) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	static uint8_t even_once = 1;
//	osEvent evt = osSignalWait(RxSignal, 1000);
//	if (evt.status == osEventSignal) { //ODPALANE CO OKRESLONY CZAS
//		even_once = 0;
	sbusDataReceive(RxBuffer[0]);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	791b      	ldrb	r3, [r3, #4]
 8003028:	4619      	mov	r1, r3
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fe0a 	bl	8002c44 <_ZN6Futaba15sbusDataReceiveEh>
	frameStatus = sbusFrameStatus();
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff fe5d 	bl	8002cf0 <_ZN6Futaba15sbusFrameStatusEv>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (frameStatus & RX_FRAME_COMPLETE) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d025      	beq.n	800309a <_ZN6Futaba7ProcessEv+0x7e>
		if (frameStatus & RX_FRAME_FAILSAFE) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <_ZN6Futaba7ProcessEv+0x50>
			RCState = 1;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			sbusChannelsInit();
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff59 	bl	8002f1c <_ZN6Futaba16sbusChannelsInitEv>
 800306a:	e016      	b.n	800309a <_ZN6Futaba7ProcessEv+0x7e>
		} else if (frameStatus & RX_FRAME_DROPPED) {
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <_ZN6Futaba7ProcessEv+0x6a>
			frames_dropped++;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
 8003084:	e009      	b.n	800309a <_ZN6Futaba7ProcessEv+0x7e>
//				RCState = 2;
//				sbusChannelsInit();
		} else {
			Conversions();
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f872 	bl	8003170 <_ZN6Futaba11ConversionsEv>
			RCCommands();
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f967 	bl	8003360 <_ZN6Futaba10RCCommandsEv>
			RCState = 0;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
	}
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3304      	adds	r3, #4
 800309e:	2201      	movs	r2, #1
 80030a0:	4619      	mov	r1, r3
 80030a2:	480d      	ldr	r0, [pc, #52]	; (80030d8 <_ZN6Futaba7ProcessEv+0xbc>)
 80030a4:	f002 fcec 	bl	8005a80 <HAL_UART_Receive_IT>
//	}
//	else if(even_once){
	if(even_once){
 80030a8:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <_ZN6Futaba7ProcessEv+0xc0>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00f      	beq.n	80030d0 <_ZN6Futaba7ProcessEv+0xb4>
		// FAILSAFE!
		even_once = 0;
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <_ZN6Futaba7ProcessEv+0xc0>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	701a      	strb	r2, [r3, #0]
		RCState = 3;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		sbusChannelsInit();
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff2c 	bl	8002f1c <_ZN6Futaba16sbusChannelsInitEv>
		HAL_UART_DeInit(&huart2);
 80030c4:	4804      	ldr	r0, [pc, #16]	; (80030d8 <_ZN6Futaba7ProcessEv+0xbc>)
 80030c6:	f002 fcc3 	bl	8005a50 <HAL_UART_DeInit>
		Init();
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff7c 	bl	8002fc8 <_ZN6Futaba4InitEv>

	}
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200002a4 	.word	0x200002a4
 80030dc:	20000004 	.word	0x20000004

080030e0 <_ZN6Futaba18ConfigureSmoothingEff>:
void Futaba::ConfigureSmoothing(float cutoff, float _dt) {
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af02      	add	r7, sp, #8
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < 4; i++){
 80030ec:	2300      	movs	r3, #0
 80030ee:	75fb      	strb	r3, [r7, #23]
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	dc1c      	bgt.n	8003130 <_ZN6Futaba18ConfigureSmoothingEff+0x50>
		lpf[i] = new BiquadFilter(FILTER_LPF, _dt, cutoff);
 80030f6:	2030      	movs	r0, #48	; 0x30
 80030f8:	f002 fea5 	bl	8005e46 <_Znwj>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461c      	mov	r4, r3
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	2100      	movs	r1, #0
 800310c:	4620      	mov	r0, r4
 800310e:	f7ff fb6d 	bl	80027ec <_ZN12BiquadFilterC1E18biquadFilterType_efff>
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	330c      	adds	r3, #12
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	605c      	str	r4, [r3, #4]
	for (uint8_t i = 0; i < 4; i++){
 800311e:	7dfb      	ldrb	r3, [r7, #23]
 8003120:	3301      	adds	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
 8003124:	e7e4      	b.n	80030f0 <_ZN6Futaba18ConfigureSmoothingEff+0x10>
		lpf[i] = new BiquadFilter(FILTER_LPF, _dt, cutoff);
 8003126:	4620      	mov	r0, r4
 8003128:	f002 fe5f 	bl	8005dea <_ZdlPv>
 800312c:	f002 fe9c 	bl	8005e68 <__cxa_end_cleanup>
	}
}
 8003130:	bf00      	nop
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <_ZN6Futaba16ProcessSmoothingEv>:
void Futaba::ProcessSmoothing(void) {
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b03      	cmp	r3, #3
 8003148:	dc0d      	bgt.n	8003166 <_ZN6Futaba16ProcessSmoothingEv+0x2e>
//		SmoothDeflection[i] = lpf[i]->apply(StickDeflection[i]);//WYRZUCA HARDFAULT
		SmoothDeflection[i] = StickDeflection[i];
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	321c      	adds	r2, #28
 8003150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	3220      	adds	r2, #32
 800315a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 4; i++){
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3301      	adds	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e7ee      	b.n	8003144 <_ZN6Futaba16ProcessSmoothingEv+0xc>
	}
}
 8003166:	bf00      	nop
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <_ZN6Futaba11ConversionsEv>:
void Futaba::Conversions(void) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	StickDeflection[ROLL] = (sbusChannelData[0] - RX_OFFSET_AER) / 800.f;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800317e:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003182:	4618      	mov	r0, r3
 8003184:	f7fd fda8 	bl	8000cd8 <__aeabi_i2f>
 8003188:	4603      	mov	r3, r0
 800318a:	4973      	ldr	r1, [pc, #460]	; (8003358 <_ZN6Futaba11ConversionsEv+0x1e8>)
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd feab 	bl	8000ee8 <__aeabi_fdiv>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = (sbusChannelData[1] - RX_OFFSET_AER) / 800.f;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80031a0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd fd97 	bl	8000cd8 <__aeabi_i2f>
 80031aa:	4603      	mov	r3, r0
 80031ac:	496a      	ldr	r1, [pc, #424]	; (8003358 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fe9a 	bl	8000ee8 <__aeabi_fdiv>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = (sbusChannelData[2] - RX_OFFSET_T) / 1600.f;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c2:	3bc0      	subs	r3, #192	; 0xc0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fd fd87 	bl	8000cd8 <__aeabi_i2f>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4963      	ldr	r1, [pc, #396]	; (800335c <_ZN6Futaba11ConversionsEv+0x1ec>)
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd fe8a 	bl	8000ee8 <__aeabi_fdiv>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = (sbusChannelData[3] - RX_OFFSET_AER) / 800.f;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031e2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fd76 	bl	8000cd8 <__aeabi_i2f>
 80031ec:	4603      	mov	r3, r0
 80031ee:	495a      	ldr	r1, [pc, #360]	; (8003358 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd fe79 	bl	8000ee8 <__aeabi_fdiv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	67da      	str	r2, [r3, #124]	; 0x7c

	if (sbusChannelData[AUX4] < 500) {
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003204:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003208:	da04      	bge.n	8003214 <_ZN6Futaba11ConversionsEv+0xa4>
		SwitchA = SWITCH_UP;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003212:	e010      	b.n	8003236 <_ZN6Futaba11ConversionsEv+0xc6>
	} else if (sbusChannelData[AUX4] > 1500) {
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800321a:	461a      	mov	r2, r3
 800321c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003220:	429a      	cmp	r2, r3
 8003222:	dd04      	ble.n	800322e <_ZN6Futaba11ConversionsEv+0xbe>
		SwitchA = SWITCH_DOWN;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800322c:	e003      	b.n	8003236 <_ZN6Futaba11ConversionsEv+0xc6>
	} else {
		SwitchA = SWITCH_MIDDLE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	}
	if (sbusChannelData[AUX2] < 500) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800323c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003240:	da04      	bge.n	800324c <_ZN6Futaba11ConversionsEv+0xdc>
		SwitchB = SWITCH_UP;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800324a:	e010      	b.n	800326e <_ZN6Futaba11ConversionsEv+0xfe>
	} else if (sbusChannelData[AUX2] > 1500) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003252:	461a      	mov	r2, r3
 8003254:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003258:	429a      	cmp	r2, r3
 800325a:	dd04      	ble.n	8003266 <_ZN6Futaba11ConversionsEv+0xf6>
		SwitchB = SWITCH_MIDDLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8003264:	e003      	b.n	800326e <_ZN6Futaba11ConversionsEv+0xfe>
	} else {
		SwitchB = SWITCH_DOWN;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}

	if (sbusChannelData[AUX3] < 500) {
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003278:	da04      	bge.n	8003284 <_ZN6Futaba11ConversionsEv+0x114>
		SwitchC = SWITCH_UP;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8003282:	e010      	b.n	80032a6 <_ZN6Futaba11ConversionsEv+0x136>
	} else if (sbusChannelData[AUX3] > 1500) {
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800328a:	461a      	mov	r2, r3
 800328c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003290:	429a      	cmp	r2, r3
 8003292:	dd04      	ble.n	800329e <_ZN6Futaba11ConversionsEv+0x12e>
		SwitchC = SWITCH_DOWN;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800329c:	e003      	b.n	80032a6 <_ZN6Futaba11ConversionsEv+0x136>
	} else {
		SwitchC = SWITCH_MIDDLE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}

	if (sbusChannelData[AUX5] < 500) {
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032b0:	da04      	bge.n	80032bc <_ZN6Futaba11ConversionsEv+0x14c>
		SwitchD = SWITCH_UP;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80032ba:	e010      	b.n	80032de <_ZN6Futaba11ConversionsEv+0x16e>
	} else if (sbusChannelData[AUX5] > 1500) {
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032c2:	461a      	mov	r2, r3
 80032c4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80032c8:	429a      	cmp	r2, r3
 80032ca:	dd04      	ble.n	80032d6 <_ZN6Futaba11ConversionsEv+0x166>
		SwitchD = SWITCH_DOWN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80032d4:	e003      	b.n	80032de <_ZN6Futaba11ConversionsEv+0x16e>
	} else {
		SwitchD = SWITCH_MIDDLE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	}

	if (sbusChannelData[AUX1] < 500) {
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032e8:	da04      	bge.n	80032f4 <_ZN6Futaba11ConversionsEv+0x184>
		SwitchE = SWITCH_UP;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80032f2:	e010      	b.n	8003316 <_ZN6Futaba11ConversionsEv+0x1a6>
	} else if (sbusChannelData[AUX1] > 1500) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80032fa:	461a      	mov	r2, r3
 80032fc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003300:	429a      	cmp	r2, r3
 8003302:	dd04      	ble.n	800330e <_ZN6Futaba11ConversionsEv+0x19e>
		SwitchE = SWITCH_DOWN;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800330c:	e003      	b.n	8003316 <_ZN6Futaba11ConversionsEv+0x1a6>
	} else {
		SwitchE = SWITCH_MIDDLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}

	if (sbusChannelData[AUX6] < 500) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800331c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003320:	da04      	bge.n	800332c <_ZN6Futaba11ConversionsEv+0x1bc>
		SwitchF = SWITCH_UP;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	} else if (sbusChannelData[AUX6] > 1500) {
		SwitchF = SWITCH_MIDDLE;
	} else {
		SwitchF = SWITCH_DOWN;
	}
}
 800332a:	e010      	b.n	800334e <_ZN6Futaba11ConversionsEv+0x1de>
	} else if (sbusChannelData[AUX6] > 1500) {
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003332:	461a      	mov	r2, r3
 8003334:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003338:	429a      	cmp	r2, r3
 800333a:	dd04      	ble.n	8003346 <_ZN6Futaba11ConversionsEv+0x1d6>
		SwitchF = SWITCH_MIDDLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8003344:	e003      	b.n	800334e <_ZN6Futaba11ConversionsEv+0x1de>
		SwitchF = SWITCH_DOWN;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	44480000 	.word	0x44480000
 800335c:	44c80000 	.word	0x44c80000

08003360 <_ZN6Futaba10RCCommandsEv>:
void Futaba::RCCommands(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if (RCState == 0) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800336e:	2b00      	cmp	r3, #0
 8003370:	f040 815f 	bne.w	8003632 <_ZN6Futaba10RCCommandsEv+0x2d2>
		/* STICK COMMAND 0 (   .)    (   .) */
		static uint16_t counter0 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4983      	ldr	r1, [pc, #524]	; (8003588 <_ZN6Futaba10RCCommandsEv+0x228>)
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd fe9e 	bl	80010bc <__aeabi_fcmplt>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d036      	beq.n	80033f4 <_ZN6Futaba10RCCommandsEv+0x94>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338a:	4980      	ldr	r1, [pc, #512]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd feb3 	bl	80010f8 <__aeabi_fcmpgt>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d02d      	beq.n	80033f4 <_ZN6Futaba10RCCommandsEv+0x94>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339c:	497c      	ldr	r1, [pc, #496]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd fe8c 	bl	80010bc <__aeabi_fcmplt>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d024      	beq.n	80033f4 <_ZN6Futaba10RCCommandsEv+0x94>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ae:	4977      	ldr	r1, [pc, #476]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd fea1 	bl	80010f8 <__aeabi_fcmpgt>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01b      	beq.n	80033f4 <_ZN6Futaba10RCCommandsEv+0x94>
			if (++counter0 == 111) {
 80033bc:	4b75      	ldr	r3, [pc, #468]	; (8003594 <_ZN6Futaba10RCCommandsEv+0x234>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	4b73      	ldr	r3, [pc, #460]	; (8003594 <_ZN6Futaba10RCCommandsEv+0x234>)
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	4b72      	ldr	r3, [pc, #456]	; (8003594 <_ZN6Futaba10RCCommandsEv+0x234>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	2b6f      	cmp	r3, #111	; 0x6f
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00f      	beq.n	80033fa <_ZN6Futaba10RCCommandsEv+0x9a>
				Stick_Command[0] = Stick_Command[0] ? 0 : 1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	461a      	mov	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if (++counter0 == 111) {
 80033f2:	e002      	b.n	80033fa <_ZN6Futaba10RCCommandsEv+0x9a>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter0 = 0;
 80033f4:	4b67      	ldr	r3, [pc, #412]	; (8003594 <_ZN6Futaba10RCCommandsEv+0x234>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 1 (.   )    (.   ) */
		static uint16_t counter1 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] < -0.95f) {
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	4962      	ldr	r1, [pc, #392]	; (8003588 <_ZN6Futaba10RCCommandsEv+0x228>)
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fe5b 	bl	80010bc <__aeabi_fcmplt>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d036      	beq.n	800347a <_ZN6Futaba10RCCommandsEv+0x11a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003410:	495f      	ldr	r1, [pc, #380]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fe52 	bl	80010bc <__aeabi_fcmplt>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d02d      	beq.n	800347a <_ZN6Futaba10RCCommandsEv+0x11a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003422:	495b      	ldr	r1, [pc, #364]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fe49 	bl	80010bc <__aeabi_fcmplt>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d024      	beq.n	800347a <_ZN6Futaba10RCCommandsEv+0x11a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	4956      	ldr	r1, [pc, #344]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fe40 	bl	80010bc <__aeabi_fcmplt>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01b      	beq.n	800347a <_ZN6Futaba10RCCommandsEv+0x11a>
			if (++counter1 == 111) {
 8003442:	4b55      	ldr	r3, [pc, #340]	; (8003598 <_ZN6Futaba10RCCommandsEv+0x238>)
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	4b53      	ldr	r3, [pc, #332]	; (8003598 <_ZN6Futaba10RCCommandsEv+0x238>)
 800344c:	801a      	strh	r2, [r3, #0]
 800344e:	4b52      	ldr	r3, [pc, #328]	; (8003598 <_ZN6Futaba10RCCommandsEv+0x238>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	2b6f      	cmp	r3, #111	; 0x6f
 8003454:	bf0c      	ite	eq
 8003456:	2301      	moveq	r3, #1
 8003458:	2300      	movne	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00f      	beq.n	8003480 <_ZN6Futaba10RCCommandsEv+0x120>
				Stick_Command[1] = Stick_Command[1] ? 0 : 1;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf0c      	ite	eq
 800346a:	2301      	moveq	r3, #1
 800346c:	2300      	movne	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			if (++counter1 == 111) {
 8003478:	e002      	b.n	8003480 <_ZN6Futaba10RCCommandsEv+0x120>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter1 = 0;
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <_ZN6Futaba10RCCommandsEv+0x238>)
 800347c:	2200      	movs	r2, #0
 800347e:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 2 ('   )    ('   ) */
		static uint16_t counter2 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] < -0.95f) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4941      	ldr	r1, [pc, #260]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fe36 	bl	80010f8 <__aeabi_fcmpgt>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d036      	beq.n	8003500 <_ZN6Futaba10RCCommandsEv+0x1a0>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003496:	493e      	ldr	r1, [pc, #248]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd fe0f 	bl	80010bc <__aeabi_fcmplt>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d02d      	beq.n	8003500 <_ZN6Futaba10RCCommandsEv+0x1a0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a8:	4938      	ldr	r1, [pc, #224]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fe24 	bl	80010f8 <__aeabi_fcmpgt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d024      	beq.n	8003500 <_ZN6Futaba10RCCommandsEv+0x1a0>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ba:	4935      	ldr	r1, [pc, #212]	; (8003590 <_ZN6Futaba10RCCommandsEv+0x230>)
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fdfd 	bl	80010bc <__aeabi_fcmplt>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <_ZN6Futaba10RCCommandsEv+0x1a0>
			if (++counter2 == 111) {
 80034c8:	4b34      	ldr	r3, [pc, #208]	; (800359c <_ZN6Futaba10RCCommandsEv+0x23c>)
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	3301      	adds	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	4b32      	ldr	r3, [pc, #200]	; (800359c <_ZN6Futaba10RCCommandsEv+0x23c>)
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	4b31      	ldr	r3, [pc, #196]	; (800359c <_ZN6Futaba10RCCommandsEv+0x23c>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	2b6f      	cmp	r3, #111	; 0x6f
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00f      	beq.n	8003506 <_ZN6Futaba10RCCommandsEv+0x1a6>
				Stick_Command[2] = Stick_Command[2] ?  0 : 1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			if (++counter2 == 111) {
 80034fe:	e002      	b.n	8003506 <_ZN6Futaba10RCCommandsEv+0x1a6>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter2 = 0;
 8003500:	4b26      	ldr	r3, [pc, #152]	; (800359c <_ZN6Futaba10RCCommandsEv+0x23c>)
 8003502:	2200      	movs	r2, #0
 8003504:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 3 (   ')    (   ') */
		static uint16_t counter3 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] > 0.95f) {
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4920      	ldr	r1, [pc, #128]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fdf3 	bl	80010f8 <__aeabi_fcmpgt>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d045      	beq.n	80035a4 <_ZN6Futaba10RCCommandsEv+0x244>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800351c:	491b      	ldr	r1, [pc, #108]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fdea 	bl	80010f8 <__aeabi_fcmpgt>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03c      	beq.n	80035a4 <_ZN6Futaba10RCCommandsEv+0x244>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	4917      	ldr	r1, [pc, #92]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd fde1 	bl	80010f8 <__aeabi_fcmpgt>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d033      	beq.n	80035a4 <_ZN6Futaba10RCCommandsEv+0x244>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003540:	4912      	ldr	r1, [pc, #72]	; (800358c <_ZN6Futaba10RCCommandsEv+0x22c>)
 8003542:	4618      	mov	r0, r3
 8003544:	f7fd fdd8 	bl	80010f8 <__aeabi_fcmpgt>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02a      	beq.n	80035a4 <_ZN6Futaba10RCCommandsEv+0x244>
			if (++counter3 == 111) {
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <_ZN6Futaba10RCCommandsEv+0x240>)
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <_ZN6Futaba10RCCommandsEv+0x240>)
 8003558:	801a      	strh	r2, [r3, #0]
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <_ZN6Futaba10RCCommandsEv+0x240>)
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	2b6f      	cmp	r3, #111	; 0x6f
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d01e      	beq.n	80035aa <_ZN6Futaba10RCCommandsEv+0x24a>
				Stick_Command[3] = Stick_Command[3] ?  0 : 1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf0c      	ite	eq
 8003576:	2301      	moveq	r3, #1
 8003578:	2300      	movne	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			if (++counter3 == 111) {
 8003584:	e011      	b.n	80035aa <_ZN6Futaba10RCCommandsEv+0x24a>
 8003586:	bf00      	nop
 8003588:	3d4ccccd 	.word	0x3d4ccccd
 800358c:	3f733333 	.word	0x3f733333
 8003590:	bf733333 	.word	0xbf733333
 8003594:	20000174 	.word	0x20000174
 8003598:	20000176 	.word	0x20000176
 800359c:	20000178 	.word	0x20000178
 80035a0:	2000017a 	.word	0x2000017a
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter3 = 0;
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <_ZN6Futaba10RCCommandsEv+0x2dc>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 4 (.   )    (   .) */
		static uint16_t counter4 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4924      	ldr	r1, [pc, #144]	; (8003640 <_ZN6Futaba10RCCommandsEv+0x2e0>)
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fd83 	bl	80010bc <__aeabi_fcmplt>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d036      	beq.n	800362a <_ZN6Futaba10RCCommandsEv+0x2ca>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c0:	4920      	ldr	r1, [pc, #128]	; (8003644 <_ZN6Futaba10RCCommandsEv+0x2e4>)
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fd7a 	bl	80010bc <__aeabi_fcmplt>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d02d      	beq.n	800362a <_ZN6Futaba10RCCommandsEv+0x2ca>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d2:	491c      	ldr	r1, [pc, #112]	; (8003644 <_ZN6Futaba10RCCommandsEv+0x2e4>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd fd71 	bl	80010bc <__aeabi_fcmplt>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d024      	beq.n	800362a <_ZN6Futaba10RCCommandsEv+0x2ca>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e4:	4918      	ldr	r1, [pc, #96]	; (8003648 <_ZN6Futaba10RCCommandsEv+0x2e8>)
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fd86 	bl	80010f8 <__aeabi_fcmpgt>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01b      	beq.n	800362a <_ZN6Futaba10RCCommandsEv+0x2ca>
			if (++counter4 == 111) {
 80035f2:	4b16      	ldr	r3, [pc, #88]	; (800364c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	3301      	adds	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	2b6f      	cmp	r3, #111	; 0x6f
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <_ZN6Futaba10RCCommandsEv+0x2d2>
				Stick_Command[4] = Stick_Command[4] ?  0 : 1;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			if (++counter4 == 111) {
 8003628:	e003      	b.n	8003632 <_ZN6Futaba10RCCommandsEv+0x2d2>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter4 = 0;
 800362a:	4b08      	ldr	r3, [pc, #32]	; (800364c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 800362c:	2200      	movs	r2, #0
 800362e:	801a      	strh	r2, [r3, #0]
	}
}
 8003630:	e7ff      	b.n	8003632 <_ZN6Futaba10RCCommandsEv+0x2d2>
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	2000017a 	.word	0x2000017a
 8003640:	3d4ccccd 	.word	0x3d4ccccd
 8003644:	bf733333 	.word	0xbf733333
 8003648:	3f733333 	.word	0x3f733333
 800364c:	2000017c 	.word	0x2000017c

08003650 <_ZN6Futaba10RxCallbackEv>:
void Futaba::RxCallback(void) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
//	osSignalSet(FutabaTaskHandle, RxSignal);
	Process();
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff fcdf 	bl	800301c <_ZN6Futaba7ProcessEv>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <_ZN6FutabaC1Ev>:

Futaba::Futaba() {
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <_ZN6FutabaC1Ev+0x8c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2203      	movs	r2, #3
 800367a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	859a      	strh	r2, [r3, #44]	; 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036a8:	861a      	strh	r2, [r3, #48]	; 0x30
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	645a      	str	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	649a      	str	r2, [r3, #72]	; 0x48
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	// TODO Auto-generated constructor stub

}
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	0800959c 	.word	0x0800959c

080036f8 <_ZN6FutabaD1Ev>:

Futaba::~Futaba() {
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <_ZN6FutabaD1Ev+0x1c>)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	0800959c 	.word	0x0800959c

08003718 <_ZN6FutabaD0Ev>:
Futaba::~Futaba() {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
}
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff ffe9 	bl	80036f8 <_ZN6FutabaD1Ev>
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f002 fb5f 	bl	8005dea <_ZdlPv>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
 8003736:	b590      	push	{r4, r7, lr}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fc fe52 	bl	80003e8 <__aeabi_ui2d>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
	...

08003754 <_Z41__static_initialization_and_destruction_0ii>:
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10c      	bne.n	800377e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800376a:	4293      	cmp	r3, r2
 800376c:	d107      	bne.n	800377e <_Z41__static_initialization_and_destruction_0ii+0x2a>
Futaba futaba;
 800376e:	4806      	ldr	r0, [pc, #24]	; (8003788 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003770:	f7ff ff7a 	bl	8003668 <_ZN6FutabaC1Ev>
 8003774:	4a05      	ldr	r2, [pc, #20]	; (800378c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003776:	4906      	ldr	r1, [pc, #24]	; (8003790 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003778:	4803      	ldr	r0, [pc, #12]	; (8003788 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800377a:	f002 fb38 	bl	8005dee <__aeabi_atexit>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	200000cc 	.word	0x200000cc
 800378c:	20000000 	.word	0x20000000
 8003790:	080036f9 	.word	0x080036f9

08003794 <_GLOBAL__sub_I_futaba>:
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
 8003798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800379c:	2001      	movs	r0, #1
 800379e:	f7ff ffd9 	bl	8003754 <_Z41__static_initialization_and_destruction_0ii>
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	0000      	movs	r0, r0
	...

080037a8 <_ZN11ModeManager4initEv>:
//		last_cmd = futaba.Stick_Command[4];
//
//	}
//}

void ModeManager::init(){
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]

	futaba.ConfigureSmoothing(50.f, task_dt * 1e-3); /* Nyquist frequency - 1/2 Radio frequency * 0.9; 8CH - 9ms, 16CH - 18ms,*/
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fe17 	bl	80003e8 <__aeabi_ui2d>
 80037ba:	a30d      	add	r3, pc, #52	; (adr r3, 80037f0 <_ZN11ModeManager4initEv+0x48>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	f7fc fe88 	bl	80004d4 <__aeabi_dmul>
 80037c4:	4603      	mov	r3, r0
 80037c6:	460c      	mov	r4, r1
 80037c8:	4618      	mov	r0, r3
 80037ca:	4621      	mov	r1, r4
 80037cc:	f7fd f97a 	bl	8000ac4 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4908      	ldr	r1, [pc, #32]	; (80037f8 <_ZN11ModeManager4initEv+0x50>)
 80037d6:	4809      	ldr	r0, [pc, #36]	; (80037fc <_ZN11ModeManager4initEv+0x54>)
 80037d8:	f7ff fc82 	bl	80030e0 <_ZN6Futaba18ConfigureSmoothingEff>

//	MX_TIM13_Init();

	isUnlockDriveTimerRunning = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	71da      	strb	r2, [r3, #7]

//	osDelay(init_task_dt);
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	f3af 8000 	nop.w
 80037f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80037f4:	3f50624d 	.word	0x3f50624d
 80037f8:	42480000 	.word	0x42480000
 80037fc:	200000cc 	.word	0x200000cc

08003800 <_ZN11ModeManager8proccessEv>:

void ModeManager::proccess(){
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
	futaba.ProcessSmoothing(); //check
 8003808:	480c      	ldr	r0, [pc, #48]	; (800383c <_ZN11ModeManager8proccessEv+0x3c>)
 800380a:	f7ff fc95 	bl	8003138 <_ZN6Futaba16ProcessSmoothingEv>

	if(futaba.SwitchC == SWITCH_DOWN) ride_mode = COMPETITION;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <_ZN11ModeManager8proccessEv+0x3c>)
 8003810:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003814:	2b02      	cmp	r3, #2
 8003816:	d103      	bne.n	8003820 <_ZN11ModeManager8proccessEv+0x20>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	719a      	strb	r2, [r3, #6]
 800381e:	e002      	b.n	8003826 <_ZN11ModeManager8proccessEv+0x26>
	else 							  ride_mode = FREERUN;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	719a      	strb	r2, [r3, #6]

	setModes();
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f80a 	bl	8003840 <_ZN11ModeManager8setModesEv>

	checkRideMode();
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f84d 	bl	80038cc <_ZN11ModeManager13checkRideModeEv>
//	rc_mode = MODE_ACRO;
//	drive_mode = ENABLE;

}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200000cc 	.word	0x200000cc

08003840 <_ZN11ModeManager8setModesEv>:

void ModeManager::setModes(){
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	if (futaba.Get_RCState() || futaba.SwitchA < SWITCH_DOWN) {
 8003848:	481f      	ldr	r0, [pc, #124]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 800384a:	f7ff fbd9 	bl	8003000 <_ZN6Futaba11Get_RCStateEv>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <_ZN11ModeManager8setModesEv+0x1e>
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 8003856:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800385a:	2b01      	cmp	r3, #1
 800385c:	dc01      	bgt.n	8003862 <_ZN11ModeManager8setModesEv+0x22>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <_ZN11ModeManager8setModesEv+0x24>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <_ZN11ModeManager8setModesEv+0x36>
		rc_mode = DISARMED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	711a      	strb	r2, [r3, #4]
		drive_mode = DISABLE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	715a      	strb	r2, [r3, #5]
			rc_mode = MODE_AUTONOMOUS;
			drive_mode = ENABLE;

		}
	}
}
 8003874:	e024      	b.n	80038c0 <_ZN11ModeManager8setModesEv+0x80>
	} else if (futaba.SwitchA == SWITCH_DOWN) {
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 8003878:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800387c:	2b02      	cmp	r3, #2
 800387e:	d11f      	bne.n	80038c0 <_ZN11ModeManager8setModesEv+0x80>
		if (futaba.SwitchB == SWITCH_UP) {
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 8003882:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <_ZN11ModeManager8setModesEv+0x52>
			rc_mode = MODE_ACRO;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	711a      	strb	r2, [r3, #4]
}
 8003890:	e016      	b.n	80038c0 <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_MIDDLE) {
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 8003894:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003898:	2b01      	cmp	r3, #1
 800389a:	d106      	bne.n	80038aa <_ZN11ModeManager8setModesEv+0x6a>
			rc_mode = MODE_SEMI;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	715a      	strb	r2, [r3, #5]
}
 80038a8:	e00a      	b.n	80038c0 <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_DOWN) {
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <_ZN11ModeManager8setModesEv+0x88>)
 80038ac:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d105      	bne.n	80038c0 <_ZN11ModeManager8setModesEv+0x80>
			rc_mode = MODE_AUTONOMOUS;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	715a      	strb	r2, [r3, #5]
}
 80038c0:	bf00      	nop
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	200000cc 	.word	0x200000cc

080038cc <_ZN11ModeManager13checkRideModeEv>:

void ModeManager::checkRideMode(){
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	switch(ride_mode){
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	799b      	ldrb	r3, [r3, #6]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <_ZN11ModeManager13checkRideModeEv+0x26>
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d000      	beq.n	80038e2 <_ZN11ModeManager13checkRideModeEv+0x16>
		break;
	case COMPETITION:
		checkUnlockDriveTimer();
		break;
	}
}
 80038e0:	e00c      	b.n	80038fc <_ZN11ModeManager13checkRideModeEv+0x30>
		if (rc_mode != DISARMED) drive_mode = ENABLE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	791b      	ldrb	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <_ZN11ModeManager13checkRideModeEv+0x2e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	715a      	strb	r2, [r3, #5]
		break;
 80038f0:	e003      	b.n	80038fa <_ZN11ModeManager13checkRideModeEv+0x2e>
		checkUnlockDriveTimer();
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f806 	bl	8003904 <_ZN11ModeManager21checkUnlockDriveTimerEv>
		break;
 80038f8:	e000      	b.n	80038fc <_ZN11ModeManager13checkRideModeEv+0x30>
		break;
 80038fa:	bf00      	nop
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <_ZN11ModeManager21checkUnlockDriveTimerEv>:

void ModeManager::checkUnlockDriveTimer(){
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	switch(rc_mode){
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	791b      	ldrb	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db1a      	blt.n	800394a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
 8003914:	2b02      	cmp	r3, #2
 8003916:	dd0d      	ble.n	8003934 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x30>
 8003918:	2b03      	cmp	r3, #3
 800391a:	d000      	beq.n	800391e <_ZN11ModeManager21checkUnlockDriveTimerEv+0x1a>
		if(isUnlockDriveTimerRunning){
			breakUnlockDriveTimer();
		}
		break;
	}
}
 800391c:	e015      	b.n	800394a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		if(!isUnlockDriveTimerRunning){
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	79db      	ldrb	r3, [r3, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10e      	bne.n	8003944 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
			drive_mode = DISABLE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	715a      	strb	r2, [r3, #5]
			startUnlockDriveTimer();
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 f810 	bl	8003952 <_ZN11ModeManager21startUnlockDriveTimerEv>
		break;
 8003932:	e007      	b.n	8003944 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
		if(isUnlockDriveTimerRunning){
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	79db      	ldrb	r3, [r3, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
			breakUnlockDriveTimer();
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f814 	bl	800396a <_ZN11ModeManager21breakUnlockDriveTimerEv>
		break;
 8003942:	e001      	b.n	8003948 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
		break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		break;
 8003948:	bf00      	nop
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZN11ModeManager21startUnlockDriveTimerEv>:
	} else {
		drive_mode = ENABLE;
	}
}

void ModeManager::startUnlockDriveTimer(){
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Start_IT(&UNLOCK_DRIVE_TIM);
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <_ZN11ModeManager21breakUnlockDriveTimerEv>:

void ModeManager::breakUnlockDriveTimer(){
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Stop_IT(&UNLOCK_DRIVE_TIM);
//	__HAL_TIM_SET_COUNTER(&UNLOCK_DRIVE_TIM, 0);
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <_ZN11ModeManager9getRCmodeEv>:

ModeManager::RC_MODE ModeManager::getRCmode(){
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
	return rc_mode;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	791b      	ldrb	r3, [r3, #4]
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	return drive_mode;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	795b      	ldrb	r3, [r3, #5]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <_ZN11ModeManager11getRideModeEv>:

ModeManager::RIDE_MODE ModeManager::getRideMode(){
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
	return ride_mode;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	799b      	ldrb	r3, [r3, #6]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr

080039c4 <_ZN11ModeManagerC1Ev>:

//UNUSED(rc_mode); //should be checked

ModeManager::ModeManager() {
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <_ZN11ModeManagerC1Ev+0x44>)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	711a      	strb	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	715a      	strb	r2, [r3, #5]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	719a      	strb	r2, [r3, #6]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	71da      	strb	r2, [r3, #7]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	721a      	strb	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	080095bc 	.word	0x080095bc

08003a0c <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <_ZN11ModeManagerD1Ev+0x1c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	080095bc 	.word	0x080095bc

08003a2c <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
}
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ffe9 	bl	8003a0c <_ZN11ModeManagerD1Ev>
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f002 f9d5 	bl	8005dea <_ZdlPv>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <_Z41__static_initialization_and_destruction_0ii>:
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d10c      	bne.n	8003a76 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d107      	bne.n	8003a76 <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager mode_manager;
 8003a66:	4806      	ldr	r0, [pc, #24]	; (8003a80 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003a68:	f7ff ffac 	bl	80039c4 <_ZN11ModeManagerC1Ev>
 8003a6c:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003a6e:	4906      	ldr	r1, [pc, #24]	; (8003a88 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003a70:	4803      	ldr	r0, [pc, #12]	; (8003a80 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003a72:	f002 f9bc 	bl	8005dee <__aeabi_atexit>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000180 	.word	0x20000180
 8003a84:	20000000 	.word	0x20000000
 8003a88:	08003a0d 	.word	0x08003a0d

08003a8c <_GLOBAL__sub_I_mode_manager>:
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a94:	2001      	movs	r0, #1
 8003a96:	f7ff ffd9 	bl	8003a4c <_Z41__static_initialization_and_destruction_0ii>
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_ZN12MotorManager4initEv>:

#include <MotorManager.h>

MotorManager motor_manager;

void MotorManager::init(){
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
//	motor.SetPassthroughState(false);
	//motor.setMaxVelocity(3500.f);
	maxVelocity = ACRO_MAX_VELOCITY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a03      	ldr	r2, [pc, #12]	; (8003ab4 <_ZN12MotorManager4initEv+0x18>)
 8003aa8:	609a      	str	r2, [r3, #8]
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr
 8003ab4:	42be0000 	.word	0x42be0000

08003ab8 <_ZN12MotorManager7processEv>:

void MotorManager::process(){
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	setMaxVelocity();
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8c1 	bl	8003c48 <_ZN12MotorManager14setMaxVelocityEv>
	DriveModeCheck();
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f808 	bl	8003adc <_ZN12MotorManager14DriveModeCheckEv>
	RCModeCheck();
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f817 	bl	8003b00 <_ZN12MotorManager11RCModeCheckEv>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <_ZN12MotorManager14DriveModeCheckEv>:

void MotorManager::DriveModeCheck(){
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
		driveMode = mode_manager.getDriveMode();
 8003ae4:	4805      	ldr	r0, [pc, #20]	; (8003afc <_ZN12MotorManager14DriveModeCheckEv+0x20>)
 8003ae6:	f7ff ff57 	bl	8003998 <_ZN11ModeManager12getDriveModeEv>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	711a      	strb	r2, [r3, #4]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000180 	.word	0x20000180

08003b00 <_ZN12MotorManager11RCModeCheckEv>:
void MotorManager::RCModeCheck(){
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	switch(mode_manager.getRCmode()){
 8003b08:	484a      	ldr	r0, [pc, #296]	; (8003c34 <_ZN12MotorManager11RCModeCheckEv+0x134>)
 8003b0a:	f7ff ff3a 	bl	8003982 <_ZN11ModeManager9getRCmodeEv>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	f200 808b 	bhi.w	8003c2c <_ZN12MotorManager11RCModeCheckEv+0x12c>
 8003b16:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <_ZN12MotorManager11RCModeCheckEv+0x1c>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003c05 	.word	0x08003c05
 8003b24:	08003bb3 	.word	0x08003bb3
 8003b28:	08003b47 	.word	0x08003b47
		case ModeManager::DISARMED:
			// TO TEST
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b32:	4841      	ldr	r0, [pc, #260]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b34:	f001 fa40 	bl	8004fb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b3e:	483e      	ldr	r0, [pc, #248]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b40:	f001 fa3a 	bl	8004fb8 <HAL_GPIO_WritePin>
//			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
//			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[YAW] * MAX_TURN_ANGLE) ;
			break;
 8003b44:	e072      	b.n	8003c2c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_ACRO:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b46:	2200      	movs	r2, #0
 8003b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b4c:	483a      	ldr	r0, [pc, #232]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b4e:	f001 fa33 	bl	8004fb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003b52:	2201      	movs	r2, #1
 8003b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b58:	4837      	ldr	r0, [pc, #220]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b5a:	f001 fa2d 	bl	8004fb8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	2103      	movs	r1, #3
 8003b66:	4835      	ldr	r0, [pc, #212]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003b68:	f7fe fc85 	bl	8002476 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f8a7 	bl	8003cc0 <_ZN12MotorManager14getMaxVelocityEv>
 8003b72:	4604      	mov	r4, r0
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8a3 	bl	8003cc0 <_ZN12MotorManager14getMaxVelocityEv>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fd f8fb 	bl	8000d80 <__aeabi_fmul>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4621      	mov	r1, r4
 8003b90:	482a      	ldr	r0, [pc, #168]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003b92:	f7fe fc50 	bl	8002436 <_ZN14CanSendManager11setVelocityEff>
			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[YAW] * MAX_TURN_ANGLE) ;
 8003b96:	4b2a      	ldr	r3, [pc, #168]	; (8003c40 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b9c:	4929      	ldr	r1, [pc, #164]	; (8003c44 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fd f8ee 	bl	8000d80 <__aeabi_fmul>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4926      	ldr	r1, [pc, #152]	; (8003c44 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 8003baa:	4824      	ldr	r0, [pc, #144]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003bac:	f7fe fc53 	bl	8002456 <_ZN14CanSendManager7setTurnEff>
			break;
 8003bb0:	e03c      	b.n	8003c2c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_SEMI:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003bb8:	481f      	ldr	r0, [pc, #124]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003bba:	f001 f9fd 	bl	8004fb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003bc4:	481c      	ldr	r0, [pc, #112]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003bc6:	f001 f9f7 	bl	8004fb8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_SEMI, driveMode);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	791b      	ldrb	r3, [r3, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	481a      	ldr	r0, [pc, #104]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003bd4:	f7fe fc4f 	bl	8002476 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f871 	bl	8003cc0 <_ZN12MotorManager14getMaxVelocityEv>
 8003bde:	4604      	mov	r4, r0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f86d 	bl	8003cc0 <_ZN12MotorManager14getMaxVelocityEv>
 8003be6:	4602      	mov	r2, r0
 8003be8:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	f7fd f8c5 	bl	8000d80 <__aeabi_fmul>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	480f      	ldr	r0, [pc, #60]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003bfe:	f7fe fc1a 	bl	8002436 <_ZN14CanSendManager11setVelocityEff>

			break;
 8003c02:	e013      	b.n	8003c2c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_AUTONOMOUS:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c0a:	480b      	ldr	r0, [pc, #44]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003c0c:	f001 f9d4 	bl	8004fb8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c16:	4808      	ldr	r0, [pc, #32]	; (8003c38 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003c18:	f001 f9ce 	bl	8004fb8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_AUTONOMOUS, driveMode);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	791b      	ldrb	r3, [r3, #4]
 8003c20:	461a      	mov	r2, r3
 8003c22:	2101      	movs	r1, #1
 8003c24:	4805      	ldr	r0, [pc, #20]	; (8003c3c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003c26:	f7fe fc26 	bl	8002476 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			break;
 8003c2a:	bf00      	nop
		}
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd90      	pop	{r4, r7, pc}
 8003c34:	20000180 	.word	0x20000180
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	200000a4 	.word	0x200000a4
 8003c40:	200000cc 	.word	0x200000cc
 8003c44:	42340000 	.word	0x42340000

08003c48 <_ZN12MotorManager14setMaxVelocityEv>:
void MotorManager::setMaxVelocity(){
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
	if(mode_manager.getRideMode() == ModeManager::COMPETITION){
 8003c50:	4818      	ldr	r0, [pc, #96]	; (8003cb4 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003c52:	f7ff feac 	bl	80039ae <_ZN11ModeManager11getRideModeEv>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01d      	beq.n	8003ca2 <_ZN12MotorManager14setMaxVelocityEv+0x5a>
		switch(mode_manager.getRCmode()){
 8003c66:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003c68:	f7ff fe8b 	bl	8003982 <_ZN11ModeManager9getRCmodeEv>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d81c      	bhi.n	8003cac <_ZN12MotorManager14setMaxVelocityEv+0x64>
 8003c72:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <_ZN12MotorManager14setMaxVelocityEv+0x30>)
 8003c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003c99 	.word	0x08003c99
 8003c80:	08003c91 	.word	0x08003c91
 8003c84:	08003c89 	.word	0x08003c89
		case ModeManager::DISARMED:
			break;
		case ModeManager::MODE_ACRO:
			maxVelocity = ACRO_MAX_VELOCITY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 8003c8c:	609a      	str	r2, [r3, #8]
			break;
 8003c8e:	e00d      	b.n	8003cac <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_SEMI:
			maxVelocity = SEMI_MAX_VELOCITY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 8003c94:	609a      	str	r2, [r3, #8]
			break;
 8003c96:	e009      	b.n	8003cac <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_AUTONOMOUS:
			maxVelocity = AUTONOMOUS_MAX_VELOCITY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 8003c9c:	609a      	str	r2, [r3, #8]
			break;
 8003c9e:	bf00      	nop
 8003ca0:	e004      	b.n	8003cac <_ZN12MotorManager14setMaxVelocityEv+0x64>
		}
	}else{
		maxVelocity = SERVICE_MAX_VELOCITY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 8003ca6:	609a      	str	r2, [r3, #8]
	}
}
 8003ca8:	e000      	b.n	8003cac <_ZN12MotorManager14setMaxVelocityEv+0x64>
			break;
 8003caa:	bf00      	nop
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000180 	.word	0x20000180
 8003cb8:	42be0000 	.word	0x42be0000
 8003cbc:	42a00000 	.word	0x42a00000

08003cc0 <_ZN12MotorManager14getMaxVelocityEv>:

float MotorManager::getMaxVelocity(){
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	return maxVelocity;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_ZN12MotorManagerC1Ev>:
MotorManager::MotorManager() {
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	4a05      	ldr	r2, [pc, #20]	; (8003cf8 <_ZN12MotorManagerC1Ev+0x20>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr
 8003cf8:	080095e4 	.word	0x080095e4

08003cfc <_ZN12MotorManagerD1Ev>:

MotorManager::~MotorManager() {
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <_ZN12MotorManagerD1Ev+0x1c>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	080095e4 	.word	0x080095e4

08003d1c <_ZN12MotorManagerD0Ev>:
MotorManager::~MotorManager() {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
}
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ffe9 	bl	8003cfc <_ZN12MotorManagerD1Ev>
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f002 f85d 	bl	8005dea <_ZdlPv>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <_Z41__static_initialization_and_destruction_0ii>:
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10c      	bne.n	8003d66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d107      	bne.n	8003d66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MotorManager motor_manager;
 8003d56:	4806      	ldr	r0, [pc, #24]	; (8003d70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d58:	f7ff ffbe 	bl	8003cd8 <_ZN12MotorManagerC1Ev>
 8003d5c:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003d5e:	4906      	ldr	r1, [pc, #24]	; (8003d78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d62:	f002 f844 	bl	8005dee <__aeabi_atexit>
}
 8003d66:	bf00      	nop
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000194 	.word	0x20000194
 8003d74:	20000000 	.word	0x20000000
 8003d78:	08003cfd 	.word	0x08003cfd

08003d7c <_GLOBAL__sub_I_motor_manager>:
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d84:	2001      	movs	r0, #1
 8003d86:	f7ff ffd9 	bl	8003d3c <_Z41__static_initialization_and_destruction_0ii>
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_ZN5Tools9GetMicrosEv>:
Tools tools;

uint8_t Tools::GetMicrosState(void){
	return MicrosInitDone;
}
uint32_t Tools::GetMicros(void){
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	return TIM2->CNT;
 8003d94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <_ZN5Tools4InitEv>:
int32_t Tools::CompareMicros(uint32_t a, uint32_t b) {
	return (int32_t)(a - b);
}
uint8_t Tools::Init(void) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	if (MicrosInitDone) {
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	791b      	ldrb	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <_ZN5Tools4InitEv+0x14>
		return 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e008      	b.n	8003dca <_ZN5Tools4InitEv+0x26>
	} else {
		MX_TIM2_Init();
 8003db8:	f000 fa9a 	bl	80042f0 <MX_TIM2_Init>
		HAL_TIM_Base_Start(&htim2);
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <_ZN5Tools4InitEv+0x30>)
 8003dbe:	f001 fba5 	bl	800550c <HAL_TIM_Base_Start>
		MicrosInitDone = 1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	711a      	strb	r2, [r3, #4]

	}
	return 1;
 8003dc8:	2301      	movs	r3, #1
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000025c 	.word	0x2000025c

08003dd8 <_ZN5ToolsC1Ev>:


Tools::Tools() {
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <_ZN5ToolsC1Ev+0x20>)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bc80      	pop	{r7}
 8003df6:	4770      	bx	lr
 8003df8:	0800960c 	.word	0x0800960c

08003dfc <_ZN5ToolsD1Ev>:

Tools::~Tools() {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <_ZN5ToolsD1Ev+0x1c>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	0800960c 	.word	0x0800960c

08003e1c <_ZN5ToolsD0Ev>:
Tools::~Tools() {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
}
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff ffe9 	bl	8003dfc <_ZN5ToolsD1Ev>
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 ffdd 	bl	8005dea <_ZdlPv>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
	...

08003e3c <_Z41__static_initialization_and_destruction_0ii>:
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10c      	bne.n	8003e66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d107      	bne.n	8003e66 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Tools tools;
 8003e56:	4806      	ldr	r0, [pc, #24]	; (8003e70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003e58:	f7ff ffbe 	bl	8003dd8 <_ZN5ToolsC1Ev>
 8003e5c:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003e5e:	4906      	ldr	r1, [pc, #24]	; (8003e78 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003e60:	4803      	ldr	r0, [pc, #12]	; (8003e70 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003e62:	f001 ffc4 	bl	8005dee <__aeabi_atexit>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200001a0 	.word	0x200001a0
 8003e74:	20000000 	.word	0x20000000
 8003e78:	08003dfd 	.word	0x08003dfd

08003e7c <_GLOBAL__sub_I_tools>:
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003e84:	2001      	movs	r0, #1
 8003e86:	f7ff ffd9 	bl	8003e3c <_Z41__static_initialization_and_destruction_0ii>
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003e8c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8003e90:	480e      	ldr	r0, [pc, #56]	; (8003ecc <MX_CAN_Init+0x40>)
{
 8003e92:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8003e94:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003e98:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003e9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 8003e9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ed0 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003ea0:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8003ea2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8003ea6:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003ea8:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 8003eaa:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003eac:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003eae:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003eb0:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003eb2:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003eb4:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003eb6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003eb8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003eba:	f000 fb75 	bl	80045a8 <HAL_CAN_Init>
 8003ebe:	b118      	cbz	r0, 8003ec8 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8003ec0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003ec4:	f000 b99b 	b.w	80041fe <Error_Handler>
 8003ec8:	bd08      	pop	{r3, pc}
 8003eca:	bf00      	nop
 8003ecc:	200001c4 	.word	0x200001c4
 8003ed0:	40006400 	.word	0x40006400

08003ed4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eda:	2210      	movs	r2, #16
 8003edc:	2100      	movs	r1, #0
 8003ede:	a802      	add	r0, sp, #8
 8003ee0:	f005 f9a4 	bl	800922c <memset>
  if(canHandle->Instance==CAN1)
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_CAN_MspInit+0x98>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d13d      	bne.n	8003f68 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003eec:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003ef0:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003ef2:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003ef4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ef8:	61da      	str	r2, [r3, #28]
 8003efa:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003efc:	481c      	ldr	r0, [pc, #112]	; (8003f70 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003efe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003f02:	9200      	str	r2, [sp, #0]
 8003f04:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	f042 0204 	orr.w	r2, r2, #4
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8003f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f1c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003f1e:	f000 fefb 	bl	8004d18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8003f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f26:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f2c:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003f2e:	a902      	add	r1, sp, #8
 8003f30:	480f      	ldr	r0, [pc, #60]	; (8003f70 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f32:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003f34:	f000 fef0 	bl	8004d18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2013      	movs	r0, #19
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	f000 fe37 	bl	8004bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003f42:	2013      	movs	r0, #19
 8003f44:	f000 fe68 	bl	8004c18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2014      	movs	r0, #20
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	f000 fe2f 	bl	8004bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003f52:	2014      	movs	r0, #20
 8003f54:	f000 fe60 	bl	8004c18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2015      	movs	r0, #21
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	f000 fe27 	bl	8004bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003f62:	2015      	movs	r0, #21
 8003f64:	f000 fe58 	bl	8004c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003f68:	b006      	add	sp, #24
 8003f6a:	bd10      	pop	{r4, pc}
 8003f6c:	40006400 	.word	0x40006400
 8003f70:	40010800 	.word	0x40010800

08003f74 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003f78:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 8003f7a:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003f7c:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 8003f7e:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 8003f80:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8003f82:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8003f84:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003f86:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8003f88:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8003f8a:	4804      	ldr	r0, [pc, #16]	; (8003f9c <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003f8c:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 8003f8e:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 8003f90:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8003f92:	f000 bb84 	b.w	800469e <HAL_CAN_ConfigFilter>
 8003f96:	bf00      	nop
 8003f98:	200001ec 	.word	0x200001ec
 8003f9c:	200001c4 	.word	0x200001c4

08003fa0 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
//	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 8003fa0:	b500      	push	{lr}
 8003fa2:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 8003fa4:	ab08      	add	r3, sp, #32
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	2100      	movs	r1, #0
 8003faa:	f000 fc5d 	bl	8004868 <HAL_CAN_GetRxMessage>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 8003fae:	b00b      	add	sp, #44	; 0x2c
 8003fb0:	f85d fb04 	ldr.w	pc, [sp], #4

08003fb4 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	2210      	movs	r2, #16
{
 8003fb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	eb0d 0002 	add.w	r0, sp, r2
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	f005 f933 	bl	800922c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003fc8:	4f3c      	ldr	r7, [pc, #240]	; (80040bc <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fca:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003fcc:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fce:	f042 0210 	orr.w	r2, r2, #16
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003fd6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fda:	f002 0210 	and.w	r2, r2, #16
 8003fde:	9200      	str	r2, [sp, #0]
 8003fe0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe2:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fe4:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fe6:	f042 0220 	orr.w	r2, r2, #32
 8003fea:	619a      	str	r2, [r3, #24]
 8003fec:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003fee:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff0:	f002 0220 	and.w	r2, r2, #32
 8003ff4:	9201      	str	r2, [sp, #4]
 8003ff6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ffa:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffc:	f042 0204 	orr.w	r2, r2, #4
 8004000:	619a      	str	r2, [r3, #24]
 8004002:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8004004:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004008:	f002 0204 	and.w	r2, r2, #4
 800400c:	9202      	str	r2, [sp, #8]
 800400e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004010:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004012:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80040d0 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004016:	f042 0208 	orr.w	r2, r2, #8
 800401a:	619a      	str	r2, [r3, #24]
 800401c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 800401e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8004028:	f000 ffc6 	bl	8004fb8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800402c:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004030:	a904      	add	r1, sp, #16
 8004032:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8004034:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004036:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004038:	f000 fe6e 	bl	8004d18 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800403c:	a904      	add	r1, sp, #16
 800403e:	4820      	ldr	r0, [pc, #128]	; (80040c0 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8004040:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004042:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004044:	f000 fe68 	bl	8004d18 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8004048:	f248 73f1 	movw	r3, #34801	; 0x87f1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404c:	a904      	add	r1, sp, #16
 800404e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8004050:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004052:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004054:	f000 fe60 	bl	8004d18 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004058:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800405a:	a904      	add	r1, sp, #16
 800405c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800405e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8004060:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004066:	f000 fe57 	bl	8004d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800406a:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406e:	a904      	add	r1, sp, #16
 8004070:	4815      	ldr	r0, [pc, #84]	; (80040c8 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8004072:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004074:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004076:	f000 fe4f 	bl	8004d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 800407a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800407e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004080:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004082:	a904      	add	r1, sp, #16
 8004084:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004086:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800408e:	f000 fe43 	bl	8004d18 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8004092:	4a0e      	ldr	r2, [pc, #56]	; (80040cc <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004094:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8004096:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004098:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800409a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800409e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a2:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80040a4:	4632      	mov	r2, r6
 80040a6:	f000 fd83 	bl	8004bb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80040aa:	4628      	mov	r0, r5
 80040ac:	f000 fdb4 	bl	8004c18 <HAL_NVIC_EnableIRQ>

}
 80040b0:	b009      	add	sp, #36	; 0x24
 80040b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40011400 	.word	0x40011400
 80040c4:	10110000 	.word	0x10110000
 80040c8:	40010c00 	.word	0x40010c00
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010800 	.word	0x40010800

080040d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d102      	bne.n	80040ec <HAL_TIM_PeriodElapsedCallback+0x18>
    allTasks.process();
 80040e6:	4804      	ldr	r0, [pc, #16]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80040e8:	f7fe f824 	bl	8002134 <_ZN8AllTasks7processEv>
  }
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40000400 	.word	0x40000400
 80040f8:	200000a0 	.word	0x200000a0

080040fc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) //aparatura
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a04      	ldr	r2, [pc, #16]	; (800411c <HAL_UART_RxCpltCallback+0x20>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d102      	bne.n	8004114 <HAL_UART_RxCpltCallback+0x18>
	{
		futaba.RxCallback();
 800410e:	4804      	ldr	r0, [pc, #16]	; (8004120 <HAL_UART_RxCpltCallback+0x24>)
 8004110:	f7ff fa9e 	bl	8003650 <_ZN6Futaba10RxCallbackEv>
	}
}
 8004114:	bf00      	nop
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40004400 	.word	0x40004400
 8004120:	200000cc 	.word	0x200000cc

08004124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800412a:	f000 fa19 	bl	8004560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800412e:	f000 f821 	bl	8004174 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004132:	f7ff ff3f 	bl	8003fb4 <MX_GPIO_Init>
  MX_CAN_Init();
 8004136:	f7ff fea9 	bl	8003e8c <MX_CAN_Init>
  MX_TIM3_Init();
 800413a:	f000 f90d 	bl	8004358 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hal_can_filter_init();
 800413e:	f7ff ff19 	bl	8003f74 <hal_can_filter_init>

  HAL_CAN_Start(&hcan);
 8004142:	4809      	ldr	r0, [pc, #36]	; (8004168 <main+0x44>)
 8004144:	f000 fb17 	bl	8004776 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 8004148:	2102      	movs	r1, #2
 800414a:	4807      	ldr	r0, [pc, #28]	; (8004168 <main+0x44>)
 800414c:	f000 fc02 	bl	8004954 <HAL_CAN_ActivateNotification>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }

  HAL_TIM_Base_Start_IT(&htim3);
 8004154:	4805      	ldr	r0, [pc, #20]	; (800416c <main+0x48>)
 8004156:	f001 f9ff 	bl	8005558 <HAL_TIM_Base_Start_IT>
  allTasks.init();
 800415a:	4805      	ldr	r0, [pc, #20]	; (8004170 <main+0x4c>)
 800415c:	f7fd ffc8 	bl	80020f0 <_ZN8AllTasks4initEv>

  uint8_t data = 1;
 8004160:	2301      	movs	r3, #1
 8004162:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004164:	e7fe      	b.n	8004164 <main+0x40>
 8004166:	bf00      	nop
 8004168:	200001c4 	.word	0x200001c4
 800416c:	20000214 	.word	0x20000214
 8004170:	200000a0 	.word	0x200000a0

08004174 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b090      	sub	sp, #64	; 0x40
 8004178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800417a:	f107 0318 	add.w	r3, r7, #24
 800417e:	2228      	movs	r2, #40	; 0x28
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f005 f852 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	609a      	str	r2, [r3, #8]
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004196:	2302      	movs	r3, #2
 8004198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800419a:	2301      	movs	r3, #1
 800419c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800419e:	2310      	movs	r3, #16
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041a6:	f107 0318 	add.w	r3, r7, #24
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 ff16 	bl	8004fdc <HAL_RCC_OscConfig>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80041c0:	f000 f81d 	bl	80041fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041c4:	230f      	movs	r3, #15
 80041c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 f8d7 	bl	8005390 <HAL_RCC_ClockConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80041f2:	f000 f804 	bl	80041fe <Error_Handler>
  }
}
 80041f6:	bf00      	nop
 80041f8:	3740      	adds	r7, #64	; 0x40
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041fe:	b480      	push	{r7}
 8004200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004202:	bf00      	nop
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
	...

0800420c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800420c:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_MspInit+0x3c>)
{
 800420e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004210:	699a      	ldr	r2, [r3, #24]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	f002 0201 	and.w	r2, r2, #1
 800421e:	9200      	str	r2, [sp, #0]
 8004220:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004228:	61da      	str	r2, [r3, #28]
 800422a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800422c:	4a07      	ldr	r2, [pc, #28]	; (800424c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004236:	6853      	ldr	r3, [r2, #4]
 8004238:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800423c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004240:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004242:	b002      	add	sp, #8
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40021000 	.word	0x40021000
 800424c:	40010000 	.word	0x40010000

08004250 <NMI_Handler>:
 8004250:	4770      	bx	lr

08004252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004252:	e7fe      	b.n	8004252 <HardFault_Handler>

08004254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004254:	e7fe      	b.n	8004254 <MemManage_Handler>

08004256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004256:	e7fe      	b.n	8004256 <BusFault_Handler>

08004258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004258:	e7fe      	b.n	8004258 <UsageFault_Handler>

0800425a <SVC_Handler>:
 800425a:	4770      	bx	lr

0800425c <DebugMon_Handler>:
 800425c:	4770      	bx	lr

0800425e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800425e:	4770      	bx	lr

08004260 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004260:	f000 b990 	b.w	8004584 <HAL_IncTick>

08004264 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004264:	2002      	movs	r0, #2
 8004266:	f000 bead 	b.w	8004fc4 <HAL_GPIO_EXTI_IRQHandler>
	...

0800426c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800426c:	4801      	ldr	r0, [pc, #4]	; (8004274 <CAN1_RX1_IRQHandler+0x8>)
 800426e:	f000 bb8e 	b.w	800498e <HAL_CAN_IRQHandler>
 8004272:	bf00      	nop
 8004274:	200001c4 	.word	0x200001c4

08004278 <USB_LP_CAN1_RX0_IRQHandler>:
 8004278:	f7ff bff8 	b.w	800426c <CAN1_RX1_IRQHandler>

0800427c <USB_HP_CAN1_TX_IRQHandler>:
 800427c:	f7ff bff6 	b.w	800426c <CAN1_RX1_IRQHandler>

08004280 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <TIM3_IRQHandler+0x8>)
 8004282:	f001 b997 	b.w	80055b4 <HAL_TIM_IRQHandler>
 8004286:	bf00      	nop
 8004288:	20000214 	.word	0x20000214

0800428c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <USART2_IRQHandler+0x8>)
 800428e:	f001 bc5b 	b.w	8005b48 <HAL_UART_IRQHandler>
 8004292:	bf00      	nop
 8004294:	200002a4 	.word	0x200002a4

08004298 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8004298:	2001      	movs	r0, #1
 800429a:	4770      	bx	lr

0800429c <_kill>:

int _kill(int pid, int sig)
{
 800429c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800429e:	f004 ff8b 	bl	80091b8 <__errno>
 80042a2:	2316      	movs	r3, #22
 80042a4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80042a6:	f04f 30ff 	mov.w	r0, #4294967295
 80042aa:	bd08      	pop	{r3, pc}

080042ac <_exit>:

void _exit (int status)
{
 80042ac:	b508      	push	{r3, lr}
	errno = EINVAL;
 80042ae:	f004 ff83 	bl	80091b8 <__errno>
 80042b2:	2316      	movs	r3, #22
 80042b4:	6003      	str	r3, [r0, #0]
 80042b6:	e7fe      	b.n	80042b6 <_exit+0xa>

080042b8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80042b8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <_sbrk+0x2c>)
{
 80042bc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	b909      	cbnz	r1, 80042c6 <_sbrk+0xe>
		heap_end = &end;
 80042c2:	4909      	ldr	r1, [pc, #36]	; (80042e8 <_sbrk+0x30>)
 80042c4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80042c6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80042c8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80042ca:	4402      	add	r2, r0
 80042cc:	428a      	cmp	r2, r1
 80042ce:	d906      	bls.n	80042de <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80042d0:	f004 ff72 	bl	80091b8 <__errno>
 80042d4:	230c      	movs	r3, #12
 80042d6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80042de:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80042e0:	bd08      	pop	{r3, pc}
 80042e2:	bf00      	nop
 80042e4:	200001a8 	.word	0x200001a8
 80042e8:	200002ec 	.word	0x200002ec

080042ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042ec:	4770      	bx	lr
	...

080042f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80042f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042f2:	2210      	movs	r2, #16
 80042f4:	2100      	movs	r1, #0
 80042f6:	a802      	add	r0, sp, #8
 80042f8:	f004 ff98 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8;
 80042fc:	2208      	movs	r2, #8
 80042fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8004302:	4814      	ldr	r0, [pc, #80]	; (8004354 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004304:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 8;
 8004306:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xffff;
 800430a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004312:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xffff;
 8004314:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004316:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004318:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800431a:	f001 fa25 	bl	8005768 <HAL_TIM_Base_Init>
 800431e:	b108      	cbz	r0, 8004324 <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 8004320:	f7ff ff6d 	bl	80041fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004328:	a902      	add	r1, sp, #8
 800432a:	480a      	ldr	r0, [pc, #40]	; (8004354 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800432c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800432e:	f001 fa51 	bl	80057d4 <HAL_TIM_ConfigClockSource>
 8004332:	b108      	cbz	r0, 8004338 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 8004334:	f7ff ff63 	bl	80041fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004338:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800433a:	4669      	mov	r1, sp
 800433c:	4805      	ldr	r0, [pc, #20]	; (8004354 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800433e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004340:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004342:	f001 fadb 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 8004346:	b108      	cbz	r0, 800434c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004348:	f7ff ff59 	bl	80041fe <Error_Handler>
  }

}
 800434c:	b007      	add	sp, #28
 800434e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004352:	bf00      	nop
 8004354:	2000025c 	.word	0x2000025c

08004358 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004358:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800435a:	2210      	movs	r2, #16
 800435c:	2100      	movs	r1, #0
 800435e:	a802      	add	r0, sp, #8
 8004360:	f004 ff64 	bl	800922c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004364:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 800-1;
 8004366:	f240 321f 	movw	r2, #799	; 0x31f
  htim3.Instance = TIM3;
 800436a:	4814      	ldr	r0, [pc, #80]	; (80043bc <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 800-1;
 800436c:	4914      	ldr	r1, [pc, #80]	; (80043c0 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 800-1;
 8004372:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004376:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8004378:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800437c:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800437e:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 8004380:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004382:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004384:	f001 f9f0 	bl	8005768 <HAL_TIM_Base_Init>
 8004388:	b108      	cbz	r0, 800438e <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 800438a:	f7ff ff38 	bl	80041fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800438e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004392:	a902      	add	r1, sp, #8
 8004394:	4809      	ldr	r0, [pc, #36]	; (80043bc <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004396:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004398:	f001 fa1c 	bl	80057d4 <HAL_TIM_ConfigClockSource>
 800439c:	b108      	cbz	r0, 80043a2 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 800439e:	f7ff ff2e 	bl	80041fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043a4:	4669      	mov	r1, sp
 80043a6:	4805      	ldr	r0, [pc, #20]	; (80043bc <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043aa:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043ac:	f001 faa6 	bl	80058fc <HAL_TIMEx_MasterConfigSynchronization>
 80043b0:	b108      	cbz	r0, 80043b6 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80043b2:	f7ff ff24 	bl	80041fe <Error_Handler>
  }

}
 80043b6:	b007      	add	sp, #28
 80043b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80043bc:	20000214 	.word	0x20000214
 80043c0:	40000400 	.word	0x40000400

080043c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80043c4:	6803      	ldr	r3, [r0, #0]
{
 80043c6:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80043c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043cc:	d10d      	bne.n	80043ea <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043ce:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	f042 0201 	orr.w	r2, r2, #1
 80043d8:	61da      	str	r2, [r3, #28]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80043e4:	b003      	add	sp, #12
 80043e6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 80043ea:	4a0b      	ldr	r2, [pc, #44]	; (8004418 <HAL_TIM_Base_MspInit+0x54>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d1f9      	bne.n	80043e4 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043f2:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	f042 0202 	orr.w	r2, r2, #2
 80043fa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80043fc:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043fe:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004400:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800440a:	f000 fbd1 	bl	8004bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800440e:	201d      	movs	r0, #29
 8004410:	f000 fc02 	bl	8004c18 <HAL_NVIC_EnableIRQ>
}
 8004414:	e7e6      	b.n	80043e4 <HAL_TIM_Base_MspInit+0x20>
 8004416:	bf00      	nop
 8004418:	40000400 	.word	0x40000400
 800441c:	40021000 	.word	0x40021000

08004420 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004420:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 100000;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
  huart2.Init.StopBits = UART_STOPBITS_2;
 8004422:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004426:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  huart2.Instance = USART2;
 800442a:	480a      	ldr	r0, [pc, #40]	; (8004454 <MX_USART2_UART_Init+0x34>)
  huart2.Init.StopBits = UART_STOPBITS_2;
 800442c:	490a      	ldr	r1, [pc, #40]	; (8004458 <MX_USART2_UART_Init+0x38>)
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <MX_USART2_UART_Init+0x3c>)
 8004430:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004438:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800443a:	230c      	movs	r3, #12
 800443c:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443e:	2300      	movs	r3, #0
 8004440:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004442:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004444:	f001 fad6 	bl	80059f4 <HAL_UART_Init>
 8004448:	b118      	cbz	r0, 8004452 <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 800444a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800444e:	f7ff bed6 	b.w	80041fe <Error_Handler>
 8004452:	bd08      	pop	{r3, pc}
 8004454:	200002a4 	.word	0x200002a4
 8004458:	40004400 	.word	0x40004400
 800445c:	000186a0 	.word	0x000186a0

08004460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004460:	b510      	push	{r4, lr}
 8004462:	4604      	mov	r4, r0
 8004464:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004466:	2210      	movs	r2, #16
 8004468:	2100      	movs	r1, #0
 800446a:	a802      	add	r0, sp, #8
 800446c:	f004 fede 	bl	800922c <memset>
  if(uartHandle->Instance==USART2)
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_UART_MspInit+0x7c>)
 8004474:	429a      	cmp	r2, r3
 8004476:	d12f      	bne.n	80044d8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004478:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800447c:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447e:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8004480:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004488:	4815      	ldr	r0, [pc, #84]	; (80044e0 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800448a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800448e:	9200      	str	r2, [sp, #0]
 8004490:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004492:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004494:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004496:	f042 0204 	orr.w	r2, r2, #4
 800449a:	619a      	str	r2, [r3, #24]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044a6:	2304      	movs	r3, #4
 80044a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044aa:	2302      	movs	r3, #2
 80044ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ae:	2303      	movs	r3, #3
 80044b0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b2:	f000 fc31 	bl	8004d18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044b6:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044b8:	4809      	ldr	r0, [pc, #36]	; (80044e0 <HAL_UART_MspInit+0x80>)
 80044ba:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044be:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c4:	f000 fc28 	bl	8004d18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80044c8:	2026      	movs	r0, #38	; 0x26
 80044ca:	4622      	mov	r2, r4
 80044cc:	4621      	mov	r1, r4
 80044ce:	f000 fb6f 	bl	8004bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044d2:	2026      	movs	r0, #38	; 0x26
 80044d4:	f000 fba0 	bl	8004c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80044d8:	b006      	add	sp, #24
 80044da:	bd10      	pop	{r4, pc}
 80044dc:	40004400 	.word	0x40004400
 80044e0:	40010800 	.word	0x40010800

080044e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80044e4:	b508      	push	{r3, lr}

  if(uartHandle->Instance==USART2)
 80044e6:	6802      	ldr	r2, [r0, #0]
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_UART_MspDeInit+0x28>)
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d10d      	bne.n	800450a <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <HAL_UART_MspDeInit+0x2c>)
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80044f0:	4808      	ldr	r0, [pc, #32]	; (8004514 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART2_CLK_DISABLE();
 80044f2:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80044f4:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 80044f6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044fa:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80044fc:	f000 fcee 	bl	8004edc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
} 
 8004500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004504:	2026      	movs	r0, #38	; 0x26
 8004506:	f000 bb95 	b.w	8004c34 <HAL_NVIC_DisableIRQ>
 800450a:	bd08      	pop	{r3, pc}
 800450c:	40004400 	.word	0x40004400
 8004510:	40021000 	.word	0x40021000
 8004514:	40010800 	.word	0x40010800

08004518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004518:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <HAL_InitTick+0x3c>)
{
 800451c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800451e:	7818      	ldrb	r0, [r3, #0]
 8004520:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004524:	fbb3 f3f0 	udiv	r3, r3, r0
 8004528:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_InitTick+0x40>)
 800452a:	6810      	ldr	r0, [r2, #0]
 800452c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004530:	f000 fb94 	bl	8004c5c <HAL_SYSTICK_Config>
 8004534:	4604      	mov	r4, r0
 8004536:	b958      	cbnz	r0, 8004550 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004538:	2d0f      	cmp	r5, #15
 800453a:	d809      	bhi.n	8004550 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800453c:	4602      	mov	r2, r0
 800453e:	4629      	mov	r1, r5
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	f000 fb34 	bl	8004bb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <HAL_InitTick+0x44>)
 800454a:	4620      	mov	r0, r4
 800454c:	601d      	str	r5, [r3, #0]
 800454e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004550:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	2000000c 	.word	0x2000000c
 8004558:	20000008 	.word	0x20000008
 800455c:	20000010 	.word	0x20000010

08004560 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004560:	4a07      	ldr	r2, [pc, #28]	; (8004580 <HAL_Init+0x20>)
{
 8004562:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004564:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004566:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004568:	f043 0310 	orr.w	r3, r3, #16
 800456c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456e:	f000 fb0d 	bl	8004b8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004572:	2000      	movs	r0, #0
 8004574:	f7ff ffd0 	bl	8004518 <HAL_InitTick>
  HAL_MspInit();
 8004578:	f7ff fe48 	bl	800420c <HAL_MspInit>
}
 800457c:	2000      	movs	r0, #0
 800457e:	bd08      	pop	{r3, pc}
 8004580:	40022000 	.word	0x40022000

08004584 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004584:	4a03      	ldr	r2, [pc, #12]	; (8004594 <HAL_IncTick+0x10>)
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <HAL_IncTick+0x14>)
 8004588:	6811      	ldr	r1, [r2, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	440b      	add	r3, r1
 800458e:	6013      	str	r3, [r2, #0]
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	200002e4 	.word	0x200002e4
 8004598:	2000000c 	.word	0x2000000c

0800459c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800459c:	4b01      	ldr	r3, [pc, #4]	; (80045a4 <HAL_GetTick+0x8>)
 800459e:	6818      	ldr	r0, [r3, #0]
}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	200002e4 	.word	0x200002e4

080045a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80045a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80045aa:	4604      	mov	r4, r0
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d06e      	beq.n	800468e <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80045b0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80045b4:	b90b      	cbnz	r3, 80045ba <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80045b6:	f7ff fc8d 	bl	8003ed4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	6813      	ldr	r3, [r2, #0]
 80045be:	f023 0302 	bic.w	r3, r3, #2
 80045c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045c4:	f7ff ffea 	bl	800459c <HAL_GetTick>
 80045c8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	0791      	lsls	r1, r2, #30
 80045d0:	d451      	bmi.n	8004676 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045da:	f7ff ffdf 	bl	800459c <HAL_GetTick>
 80045de:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	07d2      	lsls	r2, r2, #31
 80045e6:	d554      	bpl.n	8004692 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045e8:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80045ea:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045ec:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	bf0c      	ite	eq
 80045f2:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045f6:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80045fa:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 80045fc:	7e62      	ldrb	r2, [r4, #25]
 80045fe:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	bf0c      	ite	eq
 8004604:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004608:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800460c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800460e:	7ea2      	ldrb	r2, [r4, #26]
 8004610:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	bf0c      	ite	eq
 8004616:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800461a:	f022 0220 	bicne.w	r2, r2, #32
 800461e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004620:	7ee2      	ldrb	r2, [r4, #27]
 8004622:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	bf0c      	ite	eq
 8004628:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800462c:	f042 0210 	orrne.w	r2, r2, #16
 8004630:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004632:	7f22      	ldrb	r2, [r4, #28]
 8004634:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	bf0c      	ite	eq
 800463a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800463e:	f022 0208 	bicne.w	r2, r2, #8
 8004642:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004644:	7f62      	ldrb	r2, [r4, #29]
 8004646:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	bf0c      	ite	eq
 800464c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004650:	f022 0204 	bicne.w	r2, r2, #4
 8004654:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004656:	68e1      	ldr	r1, [r4, #12]
 8004658:	68a2      	ldr	r2, [r4, #8]
 800465a:	430a      	orrs	r2, r1
 800465c:	6921      	ldr	r1, [r4, #16]
 800465e:	430a      	orrs	r2, r1
 8004660:	6961      	ldr	r1, [r4, #20]
 8004662:	430a      	orrs	r2, r1
 8004664:	6861      	ldr	r1, [r4, #4]
 8004666:	3901      	subs	r1, #1
 8004668:	430a      	orrs	r2, r1
 800466a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800466c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800466e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004670:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8004674:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004676:	f7ff ff91 	bl	800459c <HAL_GetTick>
 800467a:	1b40      	subs	r0, r0, r5
 800467c:	280a      	cmp	r0, #10
 800467e:	d9a4      	bls.n	80045ca <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004686:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8004688:	2305      	movs	r3, #5
 800468a:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800468e:	2001      	movs	r0, #1
}
 8004690:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004692:	f7ff ff83 	bl	800459c <HAL_GetTick>
 8004696:	1b40      	subs	r0, r0, r5
 8004698:	280a      	cmp	r0, #10
 800469a:	d9a1      	bls.n	80045e0 <HAL_CAN_Init+0x38>
 800469c:	e7f0      	b.n	8004680 <HAL_CAN_Init+0xd8>

0800469e <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 800469e:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80046a2:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80046a4:	3b01      	subs	r3, #1
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d85f      	bhi.n	800476a <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046aa:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 80046ac:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046ae:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80046b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80046b4:	f042 0201 	orr.w	r2, r2, #1
 80046b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046bc:	f000 021f 	and.w	r2, r0, #31
 80046c0:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046c4:	43d4      	mvns	r4, r2
 80046c6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80046ca:	4025      	ands	r5, r4
 80046cc:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046d0:	69cd      	ldr	r5, [r1, #28]
 80046d2:	bb85      	cbnz	r5, 8004736 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046d4:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046d8:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046da:	4025      	ands	r5, r4
 80046dc:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046e0:	888d      	ldrh	r5, [r1, #4]
 80046e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046e6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ea:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ee:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046f0:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046f2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046f6:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80046fa:	6988      	ldr	r0, [r1, #24]
 80046fc:	bb68      	cbnz	r0, 800475a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80046fe:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8004702:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004704:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004708:	6908      	ldr	r0, [r1, #16]
 800470a:	bb50      	cbnz	r0, 8004762 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800470c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004710:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004712:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004716:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8004718:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800471a:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800471c:	bf02      	ittt	eq
 800471e:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8004722:	430a      	orreq	r2, r1
 8004724:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004728:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8004734:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004736:	2d01      	cmp	r5, #1
 8004738:	d1df      	bne.n	80046fa <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800473a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800473e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004740:	4315      	orrs	r5, r2
 8004742:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004746:	888d      	ldrh	r5, [r1, #4]
 8004748:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800474c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004750:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004754:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004756:	898d      	ldrh	r5, [r1, #12]
 8004758:	e7cb      	b.n	80046f2 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800475a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800475e:	4310      	orrs	r0, r2
 8004760:	e7d0      	b.n	8004704 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004762:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004766:	4310      	orrs	r0, r2
 8004768:	e7d3      	b.n	8004712 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800476a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004772:	2001      	movs	r0, #1
  }
}
 8004774:	bd70      	pop	{r4, r5, r6, pc}

08004776 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004776:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004778:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 800477c:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 800477e:	2b01      	cmp	r3, #1
 8004780:	d11f      	bne.n	80047c2 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004782:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004784:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004786:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800478a:	6813      	ldr	r3, [r2, #0]
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004792:	f7ff ff03 	bl	800459c <HAL_GetTick>
 8004796:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	6858      	ldr	r0, [r3, #4]
 800479c:	f010 0001 	ands.w	r0, r0, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047a2:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047a6:	f7ff fef9 	bl	800459c <HAL_GetTick>
 80047aa:	1b40      	subs	r0, r0, r5
 80047ac:	280a      	cmp	r0, #10
 80047ae:	d9f3      	bls.n	8004798 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80047b8:	2305      	movs	r3, #5
 80047ba:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80047be:	2001      	movs	r0, #1
  }
}
 80047c0:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80047c2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c8:	6243      	str	r3, [r0, #36]	; 0x24
 80047ca:	e7f8      	b.n	80047be <HAL_CAN_Start+0x48>

080047cc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80047ce:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80047d2:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80047d4:	3d01      	subs	r5, #1
 80047d6:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80047d8:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 80047da:	d841      	bhi.n	8004860 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80047dc:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 80047e0:	d03a      	beq.n	8004858 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80047e2:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80047e6:	2c03      	cmp	r4, #3
 80047e8:	f04f 0501 	mov.w	r5, #1
 80047ec:	d105      	bne.n	80047fa <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80047ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047f4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80047f6:	2001      	movs	r0, #1
  }
}
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80047fa:	40a5      	lsls	r5, r4
 80047fc:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80047fe:	6888      	ldr	r0, [r1, #8]
 8004800:	68cf      	ldr	r7, [r1, #12]
 8004802:	f104 0318 	add.w	r3, r4, #24
 8004806:	bb10      	cbnz	r0, 800484e <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004808:	6808      	ldr	r0, [r1, #0]
 800480a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004812:	6908      	ldr	r0, [r1, #16]
 8004814:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004816:	7d09      	ldrb	r1, [r1, #20]
 8004818:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800481a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800481e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004820:	bf08      	it	eq
 8004822:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004826:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004828:	bf04      	itt	eq
 800482a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800482e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004832:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8004834:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004836:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004840:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800484c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800484e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8004850:	4338      	orrs	r0, r7
 8004852:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8004856:	e7da      	b.n	800480e <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004858:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800485a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800485e:	e7c9      	b.n	80047f4 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004866:	e7c5      	b.n	80047f4 <HAL_CAN_AddTxMessage+0x28>

08004868 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004868:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800486a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800486e:	3c01      	subs	r4, #1
 8004870:	2c01      	cmp	r4, #1
 8004872:	d86b      	bhi.n	800494c <HAL_CAN_GetRxMessage+0xe4>
 8004874:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004876:	b941      	cbnz	r1, 800488a <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004878:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800487a:	07a4      	lsls	r4, r4, #30
 800487c:	d107      	bne.n	800488e <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800487e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004884:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004886:	2001      	movs	r0, #1
  }
}
 8004888:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800488a:	6934      	ldr	r4, [r6, #16]
 800488c:	e7f5      	b.n	800487a <HAL_CAN_GetRxMessage+0x12>
 800488e:	010c      	lsls	r4, r1, #4
 8004890:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004892:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004896:	f007 0704 	and.w	r7, r7, #4
 800489a:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800489c:	2f00      	cmp	r7, #0
 800489e:	d14b      	bne.n	8004938 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80048a0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80048a4:	0d7f      	lsrs	r7, r7, #21
 80048a6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80048a8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80048ac:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80048ae:	f007 0702 	and.w	r7, r7, #2
 80048b2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80048b4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80048b8:	f007 070f 	and.w	r7, r7, #15
 80048bc:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80048be:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80048c2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80048c6:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80048ca:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80048cc:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80048ce:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80048d0:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 80048d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80048d6:	6802      	ldr	r2, [r0, #0]
 80048d8:	4422      	add	r2, r4
 80048da:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80048de:	0a12      	lsrs	r2, r2, #8
 80048e0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80048e2:	6802      	ldr	r2, [r0, #0]
 80048e4:	4422      	add	r2, r4
 80048e6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80048ea:	0c12      	lsrs	r2, r2, #16
 80048ec:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80048ee:	6802      	ldr	r2, [r0, #0]
 80048f0:	4422      	add	r2, r4
 80048f2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80048f6:	0e12      	lsrs	r2, r2, #24
 80048f8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80048fa:	6802      	ldr	r2, [r0, #0]
 80048fc:	4422      	add	r2, r4
 80048fe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004902:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004904:	6802      	ldr	r2, [r0, #0]
 8004906:	4422      	add	r2, r4
 8004908:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800490c:	0a12      	lsrs	r2, r2, #8
 800490e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004910:	6802      	ldr	r2, [r0, #0]
 8004912:	4422      	add	r2, r4
 8004914:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004918:	0c12      	lsrs	r2, r2, #16
 800491a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800491c:	6802      	ldr	r2, [r0, #0]
 800491e:	4414      	add	r4, r2
 8004920:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8004924:	0e12      	lsrs	r2, r2, #24
 8004926:	71da      	strb	r2, [r3, #7]
 8004928:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800492a:	b951      	cbnz	r1, 8004942 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	f042 0220 	orr.w	r2, r2, #32
 8004932:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8004934:	2000      	movs	r0, #0
 8004936:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004938:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800493c:	08ff      	lsrs	r7, r7, #3
 800493e:	6057      	str	r7, [r2, #4]
 8004940:	e7b2      	b.n	80048a8 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	611a      	str	r2, [r3, #16]
 800494a:	e7f3      	b.n	8004934 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800494c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800494e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004952:	e797      	b.n	8004884 <HAL_CAN_GetRxMessage+0x1c>

08004954 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004954:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004958:	3b01      	subs	r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d805      	bhi.n	800496a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800495e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8004960:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004962:	6953      	ldr	r3, [r2, #20]
 8004964:	4319      	orrs	r1, r3
 8004966:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8004968:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800496a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800496c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004970:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004972:	2001      	movs	r0, #1
  }
}
 8004974:	4770      	bx	lr

08004976 <HAL_CAN_TxMailbox0CompleteCallback>:
 8004976:	4770      	bx	lr

08004978 <HAL_CAN_TxMailbox1CompleteCallback>:
 8004978:	4770      	bx	lr

0800497a <HAL_CAN_TxMailbox2CompleteCallback>:
 800497a:	4770      	bx	lr

0800497c <HAL_CAN_TxMailbox0AbortCallback>:
 800497c:	4770      	bx	lr

0800497e <HAL_CAN_TxMailbox1AbortCallback>:
 800497e:	4770      	bx	lr

08004980 <HAL_CAN_TxMailbox2AbortCallback>:
 8004980:	4770      	bx	lr

08004982 <HAL_CAN_RxFifo0FullCallback>:
 8004982:	4770      	bx	lr

08004984 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8004984:	4770      	bx	lr

08004986 <HAL_CAN_RxFifo1FullCallback>:
 8004986:	4770      	bx	lr

08004988 <HAL_CAN_SleepCallback>:
 8004988:	4770      	bx	lr

0800498a <HAL_CAN_WakeUpFromRxMsgCallback>:
 800498a:	4770      	bx	lr

0800498c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800498c:	4770      	bx	lr

0800498e <HAL_CAN_IRQHandler>:
{
 800498e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004992:	6803      	ldr	r3, [r0, #0]
{
 8004994:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004996:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004998:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800499c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80049a0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80049a2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80049a6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80049aa:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80049ae:	d022      	beq.n	80049f6 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80049b0:	f017 0401 	ands.w	r4, r7, #1
 80049b4:	d007      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049b6:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049b8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80049ba:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80049bc:	f140 80a3 	bpl.w	8004b06 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80049c0:	f7ff ffd9 	bl	8004976 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80049c4:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80049c6:	05fb      	lsls	r3, r7, #23
 80049c8:	d509      	bpl.n	80049de <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ce:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049d0:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80049d2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80049d4:	f140 80a5 	bpl.w	8004b22 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80049d8:	4628      	mov	r0, r5
 80049da:	f7ff ffcd 	bl	8004978 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80049de:	03fb      	lsls	r3, r7, #15
 80049e0:	d509      	bpl.n	80049f6 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049e6:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049e8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80049ea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80049ec:	f140 80a7 	bpl.w	8004b3e <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80049f0:	4628      	mov	r0, r5
 80049f2:	f7ff ffc2 	bl	800497a <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80049f6:	0733      	lsls	r3, r6, #28
 80049f8:	d507      	bpl.n	8004a0a <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80049fa:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80049fe:	bf1f      	itttt	ne
 8004a00:	2210      	movne	r2, #16
 8004a02:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004a04:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004a08:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004a0a:	0777      	lsls	r7, r6, #29
 8004a0c:	d508      	bpl.n	8004a20 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004a0e:	f01b 0f08 	tst.w	fp, #8
 8004a12:	d005      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a14:	2208      	movs	r2, #8
 8004a16:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a18:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004a1a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004a1c:	f7ff ffb1 	bl	8004982 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004a20:	07b0      	lsls	r0, r6, #30
 8004a22:	d506      	bpl.n	8004a32 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004a24:	682b      	ldr	r3, [r5, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	0799      	lsls	r1, r3, #30
 8004a2a:	d002      	beq.n	8004a32 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f7ff fab7 	bl	8003fa0 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004a32:	0672      	lsls	r2, r6, #25
 8004a34:	d507      	bpl.n	8004a46 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004a36:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a3a:	bf1f      	itttt	ne
 8004a3c:	2210      	movne	r2, #16
 8004a3e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004a40:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004a44:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004a46:	06b3      	lsls	r3, r6, #26
 8004a48:	d508      	bpl.n	8004a5c <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004a4a:	f01a 0f08 	tst.w	sl, #8
 8004a4e:	d005      	beq.n	8004a5c <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a50:	2208      	movs	r2, #8
 8004a52:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a54:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004a56:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004a58:	f7ff ff95 	bl	8004986 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004a5c:	06f7      	lsls	r7, r6, #27
 8004a5e:	d506      	bpl.n	8004a6e <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	0798      	lsls	r0, r3, #30
 8004a66:	d002      	beq.n	8004a6e <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f7ff ff8b 	bl	8004984 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004a6e:	03b1      	lsls	r1, r6, #14
 8004a70:	d508      	bpl.n	8004a84 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004a72:	f019 0f10 	tst.w	r9, #16
 8004a76:	d005      	beq.n	8004a84 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a78:	2210      	movs	r2, #16
 8004a7a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8004a7c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004a7e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8004a80:	f7ff ff82 	bl	8004988 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004a84:	03f2      	lsls	r2, r6, #15
 8004a86:	d508      	bpl.n	8004a9a <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004a88:	f019 0f08 	tst.w	r9, #8
 8004a8c:	d005      	beq.n	8004a9a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a8e:	2208      	movs	r2, #8
 8004a90:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a92:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004a94:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004a96:	f7ff ff78 	bl	800498a <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004a9a:	0433      	lsls	r3, r6, #16
 8004a9c:	d52a      	bpl.n	8004af4 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004a9e:	f019 0f04 	tst.w	r9, #4
 8004aa2:	682a      	ldr	r2, [r5, #0]
 8004aa4:	d024      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004aa6:	05f7      	lsls	r7, r6, #23
 8004aa8:	d504      	bpl.n	8004ab4 <HAL_CAN_IRQHandler+0x126>
 8004aaa:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8004aae:	bf18      	it	ne
 8004ab0:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ab4:	05b0      	lsls	r0, r6, #22
 8004ab6:	d504      	bpl.n	8004ac2 <HAL_CAN_IRQHandler+0x134>
 8004ab8:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8004abc:	bf18      	it	ne
 8004abe:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004ac2:	0571      	lsls	r1, r6, #21
 8004ac4:	d504      	bpl.n	8004ad0 <HAL_CAN_IRQHandler+0x142>
 8004ac6:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8004aca:	bf18      	it	ne
 8004acc:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004ad0:	0533      	lsls	r3, r6, #20
 8004ad2:	d50d      	bpl.n	8004af0 <HAL_CAN_IRQHandler+0x162>
 8004ad4:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8004ad8:	d00a      	beq.n	8004af0 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8004ada:	2b30      	cmp	r3, #48	; 0x30
 8004adc:	d04c      	beq.n	8004b78 <HAL_CAN_IRQHandler+0x1ea>
 8004ade:	d83c      	bhi.n	8004b5a <HAL_CAN_IRQHandler+0x1cc>
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d043      	beq.n	8004b6c <HAL_CAN_IRQHandler+0x1de>
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d044      	beq.n	8004b72 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004ae8:	6993      	ldr	r3, [r2, #24]
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004af0:	2304      	movs	r3, #4
 8004af2:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004af4:	b12c      	cbz	r4, 8004b02 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8004af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004af8:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8004afa:	431c      	orrs	r4, r3
 8004afc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004afe:	f7ff ff45 	bl	800498c <HAL_CAN_ErrorCallback>
 8004b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b06:	077a      	lsls	r2, r7, #29
 8004b08:	d405      	bmi.n	8004b16 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b0a:	f017 0408 	ands.w	r4, r7, #8
 8004b0e:	d105      	bne.n	8004b1c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b10:	f7ff ff34 	bl	800497c <HAL_CAN_TxMailbox0AbortCallback>
 8004b14:	e757      	b.n	80049c6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b16:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004b1a:	e754      	b.n	80049c6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b1c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004b20:	e751      	b.n	80049c6 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b22:	0579      	lsls	r1, r7, #21
 8004b24:	d502      	bpl.n	8004b2c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b26:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004b2a:	e758      	b.n	80049de <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b2c:	053a      	lsls	r2, r7, #20
 8004b2e:	d502      	bpl.n	8004b36 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b30:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004b34:	e753      	b.n	80049de <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7ff ff21 	bl	800497e <HAL_CAN_TxMailbox1AbortCallback>
 8004b3c:	e74f      	b.n	80049de <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004b3e:	0379      	lsls	r1, r7, #13
 8004b40:	d502      	bpl.n	8004b48 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b42:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004b46:	e756      	b.n	80049f6 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b48:	033a      	lsls	r2, r7, #12
 8004b4a:	d502      	bpl.n	8004b52 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b4c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8004b50:	e751      	b.n	80049f6 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b52:	4628      	mov	r0, r5
 8004b54:	f7ff ff14 	bl	8004980 <HAL_CAN_TxMailbox2AbortCallback>
 8004b58:	e74d      	b.n	80049f6 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8004b5a:	2b50      	cmp	r3, #80	; 0x50
 8004b5c:	d00f      	beq.n	8004b7e <HAL_CAN_IRQHandler+0x1f0>
 8004b5e:	2b60      	cmp	r3, #96	; 0x60
 8004b60:	d010      	beq.n	8004b84 <HAL_CAN_IRQHandler+0x1f6>
 8004b62:	2b40      	cmp	r3, #64	; 0x40
 8004b64:	d1c0      	bne.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004b66:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8004b6a:	e7bd      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004b6c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8004b70:	e7ba      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004b72:	f044 0410 	orr.w	r4, r4, #16
            break;
 8004b76:	e7b7      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004b78:	f044 0420 	orr.w	r4, r4, #32
            break;
 8004b7c:	e7b4      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004b7e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8004b82:	e7b1      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004b84:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8004b88:	e7ae      	b.n	8004ae8 <HAL_CAN_IRQHandler+0x15a>
	...

08004b8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b8c:	4a07      	ldr	r2, [pc, #28]	; (8004bac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b8e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b90:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	0c1b      	lsrs	r3, r3, #16
 8004b9e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004ba6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004ba8:	60d3      	str	r3, [r2, #12]
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb0:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb2:	b530      	push	{r4, r5, lr}
 8004bb4:	68dc      	ldr	r4, [r3, #12]
 8004bb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	bf28      	it	cs
 8004bc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bcc:	bf98      	it	ls
 8004bce:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bd0:	fa05 f303 	lsl.w	r3, r5, r3
 8004bd4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd8:	bf88      	it	hi
 8004bda:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bdc:	4019      	ands	r1, r3
 8004bde:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004be0:	fa05 f404 	lsl.w	r4, r5, r4
 8004be4:	3c01      	subs	r4, #1
 8004be6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004be8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bea:	ea42 0201 	orr.w	r2, r2, r1
 8004bee:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	bfa9      	itett	ge
 8004bf4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf8:	4b06      	ldrlt	r3, [pc, #24]	; (8004c14 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bfa:	b2d2      	uxtbge	r2, r2
 8004bfc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c00:	bfbb      	ittet	lt
 8004c02:	f000 000f 	andlt.w	r0, r0, #15
 8004c06:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	541a      	strblt	r2, [r3, r0]
 8004c0e:	bd30      	pop	{r4, r5, pc}
 8004c10:	e000ed00 	.word	0xe000ed00
 8004c14:	e000ed14 	.word	0xe000ed14

08004c18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	db08      	blt.n	8004c2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	0942      	lsrs	r2, r0, #5
 8004c20:	f000 001f 	and.w	r0, r0, #31
 8004c24:	fa03 f000 	lsl.w	r0, r3, r0
 8004c28:	4b01      	ldr	r3, [pc, #4]	; (8004c30 <HAL_NVIC_EnableIRQ+0x18>)
 8004c2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004c2e:	4770      	bx	lr
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004c34:	2800      	cmp	r0, #0
 8004c36:	db0d      	blt.n	8004c54 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c38:	2201      	movs	r2, #1
 8004c3a:	0943      	lsrs	r3, r0, #5
 8004c3c:	f000 001f 	and.w	r0, r0, #31
 8004c40:	fa02 f000 	lsl.w	r0, r2, r0
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <HAL_NVIC_DisableIRQ+0x24>)
 8004c46:	3320      	adds	r3, #32
 8004c48:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004c4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	e000e100 	.word	0xe000e100

08004c5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c5c:	3801      	subs	r0, #1
 8004c5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004c62:	d20a      	bcs.n	8004c7a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c64:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c68:	4a06      	ldr	r2, [pc, #24]	; (8004c84 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c6a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c70:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c72:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c74:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c7a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c88:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8004c8c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c92:	2304      	movs	r3, #4
 8004c94:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c96:	2001      	movs	r0, #1
 8004c98:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c9a:	6803      	ldr	r3, [r0, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f022 020e 	bic.w	r2, r2, #14
 8004ca2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004cac:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_DMA_Abort_IT+0x88>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d01f      	beq.n	8004cf2 <HAL_DMA_Abort_IT+0x6a>
 8004cb2:	3214      	adds	r2, #20
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d01e      	beq.n	8004cf6 <HAL_DMA_Abort_IT+0x6e>
 8004cb8:	3214      	adds	r2, #20
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01d      	beq.n	8004cfa <HAL_DMA_Abort_IT+0x72>
 8004cbe:	3214      	adds	r2, #20
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d01d      	beq.n	8004d00 <HAL_DMA_Abort_IT+0x78>
 8004cc4:	3214      	adds	r2, #20
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_Abort_IT+0x7e>
 8004cca:	3214      	adds	r2, #20
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bf0c      	ite	eq
 8004cd0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004cd4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8004cd8:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cda:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004cdc:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004ce4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8004ce6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8004cea:	b17b      	cbz	r3, 8004d0c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8004cec:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	4620      	mov	r0, r4
 8004cf0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e7f0      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x50>
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	e7ee      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x50>
 8004cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cfe:	e7eb      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x50>
 8004d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d04:	e7e8      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x50>
 8004d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0a:	e7e5      	b.n	8004cd8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8004d0c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8004d0e:	bd10      	pop	{r4, pc}
 8004d10:	40020008 	.word	0x40020008
 8004d14:	40020000 	.word	0x40020000

08004d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d1c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8004d1e:	4626      	mov	r6, r4
 8004d20:	4b66      	ldr	r3, [pc, #408]	; (8004ebc <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d22:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004ecc <HAL_GPIO_Init+0x1b4>
 8004d26:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8004ed0 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d2a:	680a      	ldr	r2, [r1, #0]
 8004d2c:	fa32 f506 	lsrs.w	r5, r2, r6
 8004d30:	d102      	bne.n	8004d38 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8004d32:	b003      	add	sp, #12
 8004d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004d38:	f04f 0801 	mov.w	r8, #1
 8004d3c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d40:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8004d44:	4590      	cmp	r8, r2
 8004d46:	d17f      	bne.n	8004e48 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8004d48:	684d      	ldr	r5, [r1, #4]
 8004d4a:	2d12      	cmp	r5, #18
 8004d4c:	f000 80aa 	beq.w	8004ea4 <HAL_GPIO_Init+0x18c>
 8004d50:	f200 8083 	bhi.w	8004e5a <HAL_GPIO_Init+0x142>
 8004d54:	2d02      	cmp	r5, #2
 8004d56:	f000 80a2 	beq.w	8004e9e <HAL_GPIO_Init+0x186>
 8004d5a:	d877      	bhi.n	8004e4c <HAL_GPIO_Init+0x134>
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	f000 8089 	beq.w	8004e74 <HAL_GPIO_Init+0x15c>
 8004d62:	2d01      	cmp	r5, #1
 8004d64:	f000 8099 	beq.w	8004e9a <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d68:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d6c:	2aff      	cmp	r2, #255	; 0xff
 8004d6e:	bf93      	iteet	ls
 8004d70:	4682      	movls	sl, r0
 8004d72:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8004d76:	3d08      	subhi	r5, #8
 8004d78:	f8d0 b000 	ldrls.w	fp, [r0]
 8004d7c:	bf92      	itee	ls
 8004d7e:	00b5      	lslls	r5, r6, #2
 8004d80:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8004d84:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d86:	fa09 f805 	lsl.w	r8, r9, r5
 8004d8a:	ea2b 0808 	bic.w	r8, fp, r8
 8004d8e:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d92:	bf88      	it	hi
 8004d94:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004d98:	ea48 0505 	orr.w	r5, r8, r5
 8004d9c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004da0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004da4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004da8:	d04e      	beq.n	8004e48 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004daa:	4d45      	ldr	r5, [pc, #276]	; (8004ec0 <HAL_GPIO_Init+0x1a8>)
 8004dac:	4f44      	ldr	r7, [pc, #272]	; (8004ec0 <HAL_GPIO_Init+0x1a8>)
 8004dae:	69ad      	ldr	r5, [r5, #24]
 8004db0:	f026 0803 	bic.w	r8, r6, #3
 8004db4:	f045 0501 	orr.w	r5, r5, #1
 8004db8:	61bd      	str	r5, [r7, #24]
 8004dba:	69bd      	ldr	r5, [r7, #24]
 8004dbc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004dc0:	f005 0501 	and.w	r5, r5, #1
 8004dc4:	9501      	str	r5, [sp, #4]
 8004dc6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dca:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004dce:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004dd4:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004dd8:	fa09 f90b 	lsl.w	r9, r9, fp
 8004ddc:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004de0:	4d38      	ldr	r5, [pc, #224]	; (8004ec4 <HAL_GPIO_Init+0x1ac>)
 8004de2:	42a8      	cmp	r0, r5
 8004de4:	d063      	beq.n	8004eae <HAL_GPIO_Init+0x196>
 8004de6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dea:	42a8      	cmp	r0, r5
 8004dec:	d061      	beq.n	8004eb2 <HAL_GPIO_Init+0x19a>
 8004dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004df2:	42a8      	cmp	r0, r5
 8004df4:	d05f      	beq.n	8004eb6 <HAL_GPIO_Init+0x19e>
 8004df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dfa:	42a8      	cmp	r0, r5
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2503      	moveq	r5, #3
 8004e00:	2504      	movne	r5, #4
 8004e02:	fa05 f50b 	lsl.w	r5, r5, fp
 8004e06:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004e0a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004e0e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e10:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004e14:	bf14      	ite	ne
 8004e16:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e18:	4395      	biceq	r5, r2
 8004e1a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8004e1c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e1e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004e22:	bf14      	ite	ne
 8004e24:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004e26:	4395      	biceq	r5, r2
 8004e28:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e2a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e2c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004e30:	bf14      	ite	ne
 8004e32:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004e34:	4395      	biceq	r5, r2
 8004e36:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e38:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e3a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004e3e:	bf14      	ite	ne
 8004e40:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004e42:	ea25 0202 	biceq.w	r2, r5, r2
 8004e46:	60da      	str	r2, [r3, #12]
	position++;
 8004e48:	3601      	adds	r6, #1
 8004e4a:	e76e      	b.n	8004d2a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8004e4c:	2d03      	cmp	r5, #3
 8004e4e:	d022      	beq.n	8004e96 <HAL_GPIO_Init+0x17e>
 8004e50:	2d11      	cmp	r5, #17
 8004e52:	d189      	bne.n	8004d68 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e54:	68cc      	ldr	r4, [r1, #12]
 8004e56:	3404      	adds	r4, #4
          break;
 8004e58:	e786      	b.n	8004d68 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8004e5a:	4f1b      	ldr	r7, [pc, #108]	; (8004ec8 <HAL_GPIO_Init+0x1b0>)
 8004e5c:	42bd      	cmp	r5, r7
 8004e5e:	d009      	beq.n	8004e74 <HAL_GPIO_Init+0x15c>
 8004e60:	d812      	bhi.n	8004e88 <HAL_GPIO_Init+0x170>
 8004e62:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004ed4 <HAL_GPIO_Init+0x1bc>
 8004e66:	454d      	cmp	r5, r9
 8004e68:	d004      	beq.n	8004e74 <HAL_GPIO_Init+0x15c>
 8004e6a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8004e6e:	454d      	cmp	r5, r9
 8004e70:	f47f af7a 	bne.w	8004d68 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e74:	688c      	ldr	r4, [r1, #8]
 8004e76:	b1c4      	cbz	r4, 8004eaa <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e78:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8004e7a:	bf0c      	ite	eq
 8004e7c:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8004e80:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e84:	2408      	movs	r4, #8
 8004e86:	e76f      	b.n	8004d68 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8004e88:	4575      	cmp	r5, lr
 8004e8a:	d0f3      	beq.n	8004e74 <HAL_GPIO_Init+0x15c>
 8004e8c:	4565      	cmp	r5, ip
 8004e8e:	d0f1      	beq.n	8004e74 <HAL_GPIO_Init+0x15c>
 8004e90:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004ed8 <HAL_GPIO_Init+0x1c0>
 8004e94:	e7eb      	b.n	8004e6e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e96:	2400      	movs	r4, #0
 8004e98:	e766      	b.n	8004d68 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e9a:	68cc      	ldr	r4, [r1, #12]
          break;
 8004e9c:	e764      	b.n	8004d68 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e9e:	68cc      	ldr	r4, [r1, #12]
 8004ea0:	3408      	adds	r4, #8
          break;
 8004ea2:	e761      	b.n	8004d68 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004ea4:	68cc      	ldr	r4, [r1, #12]
 8004ea6:	340c      	adds	r4, #12
          break;
 8004ea8:	e75e      	b.n	8004d68 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004eaa:	2404      	movs	r4, #4
 8004eac:	e75c      	b.n	8004d68 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eae:	2500      	movs	r5, #0
 8004eb0:	e7a7      	b.n	8004e02 <HAL_GPIO_Init+0xea>
 8004eb2:	2501      	movs	r5, #1
 8004eb4:	e7a5      	b.n	8004e02 <HAL_GPIO_Init+0xea>
 8004eb6:	2502      	movs	r5, #2
 8004eb8:	e7a3      	b.n	8004e02 <HAL_GPIO_Init+0xea>
 8004eba:	bf00      	nop
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40010800 	.word	0x40010800
 8004ec8:	10210000 	.word	0x10210000
 8004ecc:	10310000 	.word	0x10310000
 8004ed0:	10320000 	.word	0x10320000
 8004ed4:	10110000 	.word	0x10110000
 8004ed8:	10220000 	.word	0x10220000

08004edc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004ee0:	f04f 0a04 	mov.w	sl, #4
  uint32_t position = 0x00u;
 8004ee4:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004ee6:	f04f 0901 	mov.w	r9, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004eea:	f04f 0c0f 	mov.w	ip, #15
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004eee:	4a30      	ldr	r2, [pc, #192]	; (8004fb0 <HAL_GPIO_DeInit+0xd4>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004ef0:	eb00 0b0a 	add.w	fp, r0, sl
  while ((GPIO_Pin >> position) != 0u)
 8004ef4:	fa31 f403 	lsrs.w	r4, r1, r3
 8004ef8:	d101      	bne.n	8004efe <HAL_GPIO_DeInit+0x22>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8004efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004efe:	fa09 f603 	lsl.w	r6, r9, r3
    if (iocurrent)
 8004f02:	400e      	ands	r6, r1
 8004f04:	d04c      	beq.n	8004fa0 <HAL_GPIO_DeInit+0xc4>
 8004f06:	f023 0403 	bic.w	r4, r3, #3
 8004f0a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004f0e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004f12:	f003 0703 	and.w	r7, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8004f16:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004f18:	00bf      	lsls	r7, r7, #2
 8004f1a:	fa0c f807 	lsl.w	r8, ip, r7
 8004f1e:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004f22:	4d24      	ldr	r5, [pc, #144]	; (8004fb4 <HAL_GPIO_DeInit+0xd8>)
 8004f24:	42a8      	cmp	r0, r5
 8004f26:	d03d      	beq.n	8004fa4 <HAL_GPIO_DeInit+0xc8>
 8004f28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f2c:	42a8      	cmp	r0, r5
 8004f2e:	d03b      	beq.n	8004fa8 <HAL_GPIO_DeInit+0xcc>
 8004f30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f34:	42a8      	cmp	r0, r5
 8004f36:	d039      	beq.n	8004fac <HAL_GPIO_DeInit+0xd0>
 8004f38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f3c:	42a8      	cmp	r0, r5
 8004f3e:	bf0c      	ite	eq
 8004f40:	2503      	moveq	r5, #3
 8004f42:	2504      	movne	r5, #4
 8004f44:	40bd      	lsls	r5, r7
 8004f46:	45ae      	cmp	lr, r5
 8004f48:	ea6f 0506 	mvn.w	r5, r6
 8004f4c:	d10f      	bne.n	8004f6e <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004f4e:	68a7      	ldr	r7, [r4, #8]
 8004f50:	ea27 0708 	bic.w	r7, r7, r8
 8004f54:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004f56:	6814      	ldr	r4, [r2, #0]
 8004f58:	402c      	ands	r4, r5
 8004f5a:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004f5c:	6854      	ldr	r4, [r2, #4]
 8004f5e:	402c      	ands	r4, r5
 8004f60:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004f62:	6894      	ldr	r4, [r2, #8]
 8004f64:	402c      	ands	r4, r5
 8004f66:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004f68:	68d4      	ldr	r4, [r2, #12]
 8004f6a:	402c      	ands	r4, r5
 8004f6c:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004f6e:	2eff      	cmp	r6, #255	; 0xff
 8004f70:	bf91      	iteee	ls
 8004f72:	4607      	movls	r7, r0
 8004f74:	465f      	movhi	r7, fp
 8004f76:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 8004f7a:	3c08      	subhi	r4, #8
 8004f7c:	bf95      	itete	ls
 8004f7e:	f8d0 e000 	ldrls.w	lr, [r0]
 8004f82:	f8d0 e004 	ldrhi.w	lr, [r0, #4]
 8004f86:	009c      	lslls	r4, r3, #2
 8004f88:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004f8a:	fa0c f604 	lsl.w	r6, ip, r4
 8004f8e:	ea2e 0606 	bic.w	r6, lr, r6
 8004f92:	fa0a f404 	lsl.w	r4, sl, r4
 8004f96:	4326      	orrs	r6, r4
 8004f98:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004f9a:	68c4      	ldr	r4, [r0, #12]
 8004f9c:	4025      	ands	r5, r4
 8004f9e:	60c5      	str	r5, [r0, #12]
    position++;
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	e7a7      	b.n	8004ef4 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	e7cd      	b.n	8004f44 <HAL_GPIO_DeInit+0x68>
 8004fa8:	2501      	movs	r5, #1
 8004faa:	e7cb      	b.n	8004f44 <HAL_GPIO_DeInit+0x68>
 8004fac:	2502      	movs	r5, #2
 8004fae:	e7c9      	b.n	8004f44 <HAL_GPIO_DeInit+0x68>
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40010800 	.word	0x40010800

08004fb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fb8:	b10a      	cbz	r2, 8004fbe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004fba:	6101      	str	r1, [r0, #16]
 8004fbc:	4770      	bx	lr
 8004fbe:	0409      	lsls	r1, r1, #16
 8004fc0:	e7fb      	b.n	8004fba <HAL_GPIO_WritePin+0x2>

08004fc2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004fc4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fc6:	4b04      	ldr	r3, [pc, #16]	; (8004fd8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004fc8:	6959      	ldr	r1, [r3, #20]
 8004fca:	4201      	tst	r1, r0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fd0:	f7ff fff7 	bl	8004fc2 <HAL_GPIO_EXTI_Callback>
 8004fd4:	bd08      	pop	{r3, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40010400 	.word	0x40010400

08004fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fdc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fe0:	4605      	mov	r5, r0
 8004fe2:	b908      	cbnz	r0, 8004fe8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	e03c      	b.n	8005062 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe8:	6803      	ldr	r3, [r0, #0]
 8004fea:	07db      	lsls	r3, r3, #31
 8004fec:	d410      	bmi.n	8005010 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	079f      	lsls	r7, r3, #30
 8004ff2:	d45d      	bmi.n	80050b0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	0719      	lsls	r1, r3, #28
 8004ff8:	f100 8094 	bmi.w	8005124 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	075a      	lsls	r2, r3, #29
 8005000:	f100 80be 	bmi.w	8005180 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005004:	69e8      	ldr	r0, [r5, #28]
 8005006:	2800      	cmp	r0, #0
 8005008:	f040 812c 	bne.w	8005264 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800500c:	2000      	movs	r0, #0
 800500e:	e028      	b.n	8005062 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005010:	4c8f      	ldr	r4, [pc, #572]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005012:	6863      	ldr	r3, [r4, #4]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b04      	cmp	r3, #4
 800501a:	d007      	beq.n	800502c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b08      	cmp	r3, #8
 8005024:	d109      	bne.n	800503a <HAL_RCC_OscConfig+0x5e>
 8005026:	6863      	ldr	r3, [r4, #4]
 8005028:	03de      	lsls	r6, r3, #15
 800502a:	d506      	bpl.n	800503a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	039c      	lsls	r4, r3, #14
 8005030:	d5dd      	bpl.n	8004fee <HAL_RCC_OscConfig+0x12>
 8005032:	686b      	ldr	r3, [r5, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1da      	bne.n	8004fee <HAL_RCC_OscConfig+0x12>
 8005038:	e7d4      	b.n	8004fe4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503a:	686b      	ldr	r3, [r5, #4]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x8c>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005048:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800504a:	f7ff faa7 	bl	800459c <HAL_GetTick>
 800504e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	0398      	lsls	r0, r3, #14
 8005054:	d4cb      	bmi.n	8004fee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005056:	f7ff faa1 	bl	800459c <HAL_GetTick>
 800505a:	1b80      	subs	r0, r0, r6
 800505c:	2864      	cmp	r0, #100	; 0x64
 800505e:	d9f7      	bls.n	8005050 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8005060:	2003      	movs	r0, #3
}
 8005062:	b002      	add	sp, #8
 8005064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	b99b      	cbnz	r3, 8005092 <HAL_RCC_OscConfig+0xb6>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005078:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800507a:	f7ff fa8f 	bl	800459c <HAL_GetTick>
 800507e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	0399      	lsls	r1, r3, #14
 8005084:	d5b3      	bpl.n	8004fee <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005086:	f7ff fa89 	bl	800459c <HAL_GetTick>
 800508a:	1b80      	subs	r0, r0, r6
 800508c:	2864      	cmp	r0, #100	; 0x64
 800508e:	d9f7      	bls.n	8005080 <HAL_RCC_OscConfig+0xa4>
 8005090:	e7e6      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	d103      	bne.n	80050a2 <HAL_RCC_OscConfig+0xc6>
 800509a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	e7cf      	b.n	8005042 <HAL_RCC_OscConfig+0x66>
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	6023      	str	r3, [r4, #0]
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050ae:	e7cb      	b.n	8005048 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050b0:	4c67      	ldr	r4, [pc, #412]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80050b2:	6863      	ldr	r3, [r4, #4]
 80050b4:	f013 0f0c 	tst.w	r3, #12
 80050b8:	d007      	beq.n	80050ca <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ba:	6863      	ldr	r3, [r4, #4]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d110      	bne.n	80050e6 <HAL_RCC_OscConfig+0x10a>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	03da      	lsls	r2, r3, #15
 80050c8:	d40d      	bmi.n	80050e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	079b      	lsls	r3, r3, #30
 80050ce:	d502      	bpl.n	80050d6 <HAL_RCC_OscConfig+0xfa>
 80050d0:	692b      	ldr	r3, [r5, #16]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d186      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	696a      	ldr	r2, [r5, #20]
 80050da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	e786      	b.n	8004ff4 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050e6:	692a      	ldr	r2, [r5, #16]
 80050e8:	4b5a      	ldr	r3, [pc, #360]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80050ea:	b16a      	cbz	r2, 8005108 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80050f0:	f7ff fa54 	bl	800459c <HAL_GetTick>
 80050f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	079f      	lsls	r7, r3, #30
 80050fa:	d4ec      	bmi.n	80050d6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050fc:	f7ff fa4e 	bl	800459c <HAL_GetTick>
 8005100:	1b80      	subs	r0, r0, r6
 8005102:	2802      	cmp	r0, #2
 8005104:	d9f7      	bls.n	80050f6 <HAL_RCC_OscConfig+0x11a>
 8005106:	e7ab      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8005108:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800510a:	f7ff fa47 	bl	800459c <HAL_GetTick>
 800510e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	0798      	lsls	r0, r3, #30
 8005114:	f57f af6e 	bpl.w	8004ff4 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005118:	f7ff fa40 	bl	800459c <HAL_GetTick>
 800511c:	1b80      	subs	r0, r0, r6
 800511e:	2802      	cmp	r0, #2
 8005120:	d9f6      	bls.n	8005110 <HAL_RCC_OscConfig+0x134>
 8005122:	e79d      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005124:	69aa      	ldr	r2, [r5, #24]
 8005126:	4c4a      	ldr	r4, [pc, #296]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005128:	4b4b      	ldr	r3, [pc, #300]	; (8005258 <HAL_RCC_OscConfig+0x27c>)
 800512a:	b1da      	cbz	r2, 8005164 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800512c:	2201      	movs	r2, #1
 800512e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005130:	f7ff fa34 	bl	800459c <HAL_GetTick>
 8005134:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005138:	079b      	lsls	r3, r3, #30
 800513a:	d50d      	bpl.n	8005158 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800513c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005140:	4b46      	ldr	r3, [pc, #280]	; (800525c <HAL_RCC_OscConfig+0x280>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
 8005148:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800514a:	bf00      	nop
  }
  while (Delay --);
 800514c:	9b01      	ldr	r3, [sp, #4]
 800514e:	1e5a      	subs	r2, r3, #1
 8005150:	9201      	str	r2, [sp, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f9      	bne.n	800514a <HAL_RCC_OscConfig+0x16e>
 8005156:	e751      	b.n	8004ffc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7ff fa20 	bl	800459c <HAL_GetTick>
 800515c:	1b80      	subs	r0, r0, r6
 800515e:	2802      	cmp	r0, #2
 8005160:	d9e9      	bls.n	8005136 <HAL_RCC_OscConfig+0x15a>
 8005162:	e77d      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8005164:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005166:	f7ff fa19 	bl	800459c <HAL_GetTick>
 800516a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800516e:	079f      	lsls	r7, r3, #30
 8005170:	f57f af44 	bpl.w	8004ffc <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005174:	f7ff fa12 	bl	800459c <HAL_GetTick>
 8005178:	1b80      	subs	r0, r0, r6
 800517a:	2802      	cmp	r0, #2
 800517c:	d9f6      	bls.n	800516c <HAL_RCC_OscConfig+0x190>
 800517e:	e76f      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005180:	4c33      	ldr	r4, [pc, #204]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005182:	69e3      	ldr	r3, [r4, #28]
 8005184:	00d8      	lsls	r0, r3, #3
 8005186:	d424      	bmi.n	80051d2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8005188:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	69e3      	ldr	r3, [r4, #28]
 800518c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005190:	61e3      	str	r3, [r4, #28]
 8005192:	69e3      	ldr	r3, [r4, #28]
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	4e30      	ldr	r6, [pc, #192]	; (8005260 <HAL_RCC_OscConfig+0x284>)
 800519e:	6833      	ldr	r3, [r6, #0]
 80051a0:	05d9      	lsls	r1, r3, #23
 80051a2:	d518      	bpl.n	80051d6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a4:	68eb      	ldr	r3, [r5, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d126      	bne.n	80051f8 <HAL_RCC_OscConfig+0x21c>
 80051aa:	6a23      	ldr	r3, [r4, #32]
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80051b2:	f7ff f9f3 	bl	800459c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80051ba:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051bc:	6a23      	ldr	r3, [r4, #32]
 80051be:	079b      	lsls	r3, r3, #30
 80051c0:	d53f      	bpl.n	8005242 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	f43f af1e 	beq.w	8005004 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c8:	69e3      	ldr	r3, [r4, #28]
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051ce:	61e3      	str	r3, [r4, #28]
 80051d0:	e718      	b.n	8005004 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80051d2:	2700      	movs	r7, #0
 80051d4:	e7e2      	b.n	800519c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d6:	6833      	ldr	r3, [r6, #0]
 80051d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80051de:	f7ff f9dd 	bl	800459c <HAL_GetTick>
 80051e2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	05da      	lsls	r2, r3, #23
 80051e8:	d4dc      	bmi.n	80051a4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7ff f9d7 	bl	800459c <HAL_GetTick>
 80051ee:	eba0 0008 	sub.w	r0, r0, r8
 80051f2:	2864      	cmp	r0, #100	; 0x64
 80051f4:	d9f6      	bls.n	80051e4 <HAL_RCC_OscConfig+0x208>
 80051f6:	e733      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f8:	b9ab      	cbnz	r3, 8005226 <HAL_RCC_OscConfig+0x24a>
 80051fa:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	6223      	str	r3, [r4, #32]
 8005206:	6a23      	ldr	r3, [r4, #32]
 8005208:	f023 0304 	bic.w	r3, r3, #4
 800520c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800520e:	f7ff f9c5 	bl	800459c <HAL_GetTick>
 8005212:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005214:	6a23      	ldr	r3, [r4, #32]
 8005216:	0798      	lsls	r0, r3, #30
 8005218:	d5d3      	bpl.n	80051c2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800521a:	f7ff f9bf 	bl	800459c <HAL_GetTick>
 800521e:	1b80      	subs	r0, r0, r6
 8005220:	4540      	cmp	r0, r8
 8005222:	d9f7      	bls.n	8005214 <HAL_RCC_OscConfig+0x238>
 8005224:	e71c      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005226:	2b05      	cmp	r3, #5
 8005228:	6a23      	ldr	r3, [r4, #32]
 800522a:	d103      	bne.n	8005234 <HAL_RCC_OscConfig+0x258>
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6223      	str	r3, [r4, #32]
 8005232:	e7ba      	b.n	80051aa <HAL_RCC_OscConfig+0x1ce>
 8005234:	f023 0301 	bic.w	r3, r3, #1
 8005238:	6223      	str	r3, [r4, #32]
 800523a:	6a23      	ldr	r3, [r4, #32]
 800523c:	f023 0304 	bic.w	r3, r3, #4
 8005240:	e7b6      	b.n	80051b0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005242:	f7ff f9ab 	bl	800459c <HAL_GetTick>
 8005246:	eba0 0008 	sub.w	r0, r0, r8
 800524a:	42b0      	cmp	r0, r6
 800524c:	d9b6      	bls.n	80051bc <HAL_RCC_OscConfig+0x1e0>
 800524e:	e707      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
 8005250:	40021000 	.word	0x40021000
 8005254:	42420000 	.word	0x42420000
 8005258:	42420480 	.word	0x42420480
 800525c:	20000008 	.word	0x20000008
 8005260:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005264:	4b2a      	ldr	r3, [pc, #168]	; (8005310 <HAL_RCC_OscConfig+0x334>)
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	461c      	mov	r4, r3
 800526a:	f002 020c 	and.w	r2, r2, #12
 800526e:	2a08      	cmp	r2, #8
 8005270:	d03d      	beq.n	80052ee <HAL_RCC_OscConfig+0x312>
 8005272:	2300      	movs	r3, #0
 8005274:	4e27      	ldr	r6, [pc, #156]	; (8005314 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005276:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005278:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527a:	d12b      	bne.n	80052d4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800527c:	f7ff f98e 	bl	800459c <HAL_GetTick>
 8005280:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	0199      	lsls	r1, r3, #6
 8005286:	d41f      	bmi.n	80052c8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005288:	6a2b      	ldr	r3, [r5, #32]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005290:	6862      	ldr	r2, [r4, #4]
 8005292:	68a9      	ldr	r1, [r5, #8]
 8005294:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005298:	430a      	orrs	r2, r1
 800529a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800529c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80052a6:	4313      	orrs	r3, r2
 80052a8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80052aa:	2301      	movs	r3, #1
 80052ac:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80052ae:	f7ff f975 	bl	800459c <HAL_GetTick>
 80052b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	f53f aea8 	bmi.w	800500c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052bc:	f7ff f96e 	bl	800459c <HAL_GetTick>
 80052c0:	1b40      	subs	r0, r0, r5
 80052c2:	2802      	cmp	r0, #2
 80052c4:	d9f6      	bls.n	80052b4 <HAL_RCC_OscConfig+0x2d8>
 80052c6:	e6cb      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7ff f968 	bl	800459c <HAL_GetTick>
 80052cc:	1bc0      	subs	r0, r0, r7
 80052ce:	2802      	cmp	r0, #2
 80052d0:	d9d7      	bls.n	8005282 <HAL_RCC_OscConfig+0x2a6>
 80052d2:	e6c5      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80052d4:	f7ff f962 	bl	800459c <HAL_GetTick>
 80052d8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	f57f ae95 	bpl.w	800500c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e2:	f7ff f95b 	bl	800459c <HAL_GetTick>
 80052e6:	1b40      	subs	r0, r0, r5
 80052e8:	2802      	cmp	r0, #2
 80052ea:	d9f6      	bls.n	80052da <HAL_RCC_OscConfig+0x2fe>
 80052ec:	e6b8      	b.n	8005060 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ee:	2801      	cmp	r0, #1
 80052f0:	f43f aeb7 	beq.w	8005062 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80052f4:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f6:	6a2b      	ldr	r3, [r5, #32]
 80052f8:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80052fc:	429a      	cmp	r2, r3
 80052fe:	f47f ae71 	bne.w	8004fe4 <HAL_RCC_OscConfig+0x8>
 8005302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005304:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8005308:	1ac0      	subs	r0, r0, r3
 800530a:	bf18      	it	ne
 800530c:	2001      	movne	r0, #1
 800530e:	e6a8      	b.n	8005062 <HAL_RCC_OscConfig+0x86>
 8005310:	40021000 	.word	0x40021000
 8005314:	42420060 	.word	0x42420060

08005318 <HAL_RCC_GetSysClockFreq>:
{
 8005318:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800531a:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800531c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800531e:	ac02      	add	r4, sp, #8
 8005320:	f103 0510 	add.w	r5, r3, #16
 8005324:	4622      	mov	r2, r4
 8005326:	6818      	ldr	r0, [r3, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	3308      	adds	r3, #8
 800532c:	c203      	stmia	r2!, {r0, r1}
 800532e:	42ab      	cmp	r3, r5
 8005330:	4614      	mov	r4, r2
 8005332:	d1f7      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005334:	2301      	movs	r3, #1
 8005336:	f88d 3004 	strb.w	r3, [sp, #4]
 800533a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800533c:	4911      	ldr	r1, [pc, #68]	; (8005384 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800533e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8005342:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005344:	f003 020c 	and.w	r2, r3, #12
 8005348:	2a08      	cmp	r2, #8
 800534a:	d117      	bne.n	800537c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800534c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005350:	a806      	add	r0, sp, #24
 8005352:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005354:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005356:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800535a:	d50c      	bpl.n	8005376 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800535c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800535e:	480a      	ldr	r0, [pc, #40]	; (8005388 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005360:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005364:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005366:	aa06      	add	r2, sp, #24
 8005368:	4413      	add	r3, r2
 800536a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800536e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005372:	b007      	add	sp, #28
 8005374:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005376:	4805      	ldr	r0, [pc, #20]	; (800538c <HAL_RCC_GetSysClockFreq+0x74>)
 8005378:	4350      	muls	r0, r2
 800537a:	e7fa      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 800537c:	4802      	ldr	r0, [pc, #8]	; (8005388 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800537e:	e7f8      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x5a>
 8005380:	08009623 	.word	0x08009623
 8005384:	40021000 	.word	0x40021000
 8005388:	007a1200 	.word	0x007a1200
 800538c:	003d0900 	.word	0x003d0900

08005390 <HAL_RCC_ClockConfig>:
{
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005396:	4604      	mov	r4, r0
 8005398:	b910      	cbnz	r0, 80053a0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800539a:	2001      	movs	r0, #1
 800539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a0:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_RCC_ClockConfig+0x128>)
 80053a2:	6813      	ldr	r3, [r2, #0]
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	428b      	cmp	r3, r1
 80053aa:	d329      	bcc.n	8005400 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	6821      	ldr	r1, [r4, #0]
 80053ae:	078e      	lsls	r6, r1, #30
 80053b0:	d431      	bmi.n	8005416 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b2:	07ca      	lsls	r2, r1, #31
 80053b4:	d444      	bmi.n	8005440 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b6:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <HAL_RCC_ClockConfig+0x128>)
 80053b8:	6813      	ldr	r3, [r2, #0]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	429d      	cmp	r5, r3
 80053c0:	d367      	bcc.n	8005492 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	4d3d      	ldr	r5, [pc, #244]	; (80054bc <HAL_RCC_ClockConfig+0x12c>)
 80053c6:	f012 0f04 	tst.w	r2, #4
 80053ca:	d16e      	bne.n	80054aa <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053cc:	0713      	lsls	r3, r2, #28
 80053ce:	d506      	bpl.n	80053de <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80053d0:	686b      	ldr	r3, [r5, #4]
 80053d2:	6922      	ldr	r2, [r4, #16]
 80053d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80053d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80053dc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053de:	f7ff ff9b 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80053e2:	686b      	ldr	r3, [r5, #4]
 80053e4:	4a36      	ldr	r2, [pc, #216]	; (80054c0 <HAL_RCC_ClockConfig+0x130>)
 80053e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	40d8      	lsrs	r0, r3
 80053ee:	4b35      	ldr	r3, [pc, #212]	; (80054c4 <HAL_RCC_ClockConfig+0x134>)
 80053f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80053f2:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <HAL_RCC_ClockConfig+0x138>)
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f7ff f88f 	bl	8004518 <HAL_InitTick>
  return HAL_OK;
 80053fa:	2000      	movs	r0, #0
 80053fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	f023 0307 	bic.w	r3, r3, #7
 8005406:	430b      	orrs	r3, r1
 8005408:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800540a:	6813      	ldr	r3, [r2, #0]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4299      	cmp	r1, r3
 8005412:	d1c2      	bne.n	800539a <HAL_RCC_ClockConfig+0xa>
 8005414:	e7ca      	b.n	80053ac <HAL_RCC_ClockConfig+0x1c>
 8005416:	4b29      	ldr	r3, [pc, #164]	; (80054bc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005418:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800541c:	bf1e      	ittt	ne
 800541e:	685a      	ldrne	r2, [r3, #4]
 8005420:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005424:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005426:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005428:	bf42      	ittt	mi
 800542a:	685a      	ldrmi	r2, [r3, #4]
 800542c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005430:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	68a0      	ldr	r0, [r4, #8]
 8005436:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800543a:	4302      	orrs	r2, r0
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	e7b8      	b.n	80053b2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005440:	6862      	ldr	r2, [r4, #4]
 8005442:	4e1e      	ldr	r6, [pc, #120]	; (80054bc <HAL_RCC_ClockConfig+0x12c>)
 8005444:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005446:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005448:	d11b      	bne.n	8005482 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	d0a4      	beq.n	800539a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005450:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005452:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	f023 0303 	bic.w	r3, r3, #3
 800545a:	4313      	orrs	r3, r2
 800545c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800545e:	f7ff f89d 	bl	800459c <HAL_GetTick>
 8005462:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005464:	6873      	ldr	r3, [r6, #4]
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005470:	d0a1      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005472:	f7ff f893 	bl	800459c <HAL_GetTick>
 8005476:	1bc0      	subs	r0, r0, r7
 8005478:	4540      	cmp	r0, r8
 800547a:	d9f3      	bls.n	8005464 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 800547c:	2003      	movs	r0, #3
}
 800547e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005482:	2a02      	cmp	r2, #2
 8005484:	d102      	bne.n	800548c <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005486:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800548a:	e7e0      	b.n	800544e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548c:	f013 0f02 	tst.w	r3, #2
 8005490:	e7dd      	b.n	800544e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	6813      	ldr	r3, [r2, #0]
 8005494:	f023 0307 	bic.w	r3, r3, #7
 8005498:	432b      	orrs	r3, r5
 800549a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	429d      	cmp	r5, r3
 80054a4:	f47f af79 	bne.w	800539a <HAL_RCC_ClockConfig+0xa>
 80054a8:	e78b      	b.n	80053c2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054aa:	686b      	ldr	r3, [r5, #4]
 80054ac:	68e1      	ldr	r1, [r4, #12]
 80054ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80054b2:	430b      	orrs	r3, r1
 80054b4:	606b      	str	r3, [r5, #4]
 80054b6:	e789      	b.n	80053cc <HAL_RCC_ClockConfig+0x3c>
 80054b8:	40022000 	.word	0x40022000
 80054bc:	40021000 	.word	0x40021000
 80054c0:	08009658 	.word	0x08009658
 80054c4:	20000008 	.word	0x20000008
 80054c8:	20000010 	.word	0x20000010

080054cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80054ce:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80054d6:	5cd3      	ldrb	r3, [r2, r3]
 80054d8:	4a03      	ldr	r2, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80054da:	6810      	ldr	r0, [r2, #0]
}
 80054dc:	40d8      	lsrs	r0, r3
 80054de:	4770      	bx	lr
 80054e0:	40021000 	.word	0x40021000
 80054e4:	08009668 	.word	0x08009668
 80054e8:	20000008 	.word	0x20000008

080054ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <HAL_RCC_GetPCLK2Freq+0x14>)
 80054ee:	4a05      	ldr	r2, [pc, #20]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x18>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80054f6:	5cd3      	ldrb	r3, [r2, r3]
 80054f8:	4a03      	ldr	r2, [pc, #12]	; (8005508 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80054fa:	6810      	ldr	r0, [r2, #0]
}
 80054fc:	40d8      	lsrs	r0, r3
 80054fe:	4770      	bx	lr
 8005500:	40021000 	.word	0x40021000
 8005504:	08009668 	.word	0x08009668
 8005508:	20000008 	.word	0x20000008

0800550c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800550c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005510:	2b01      	cmp	r3, #1
 8005512:	d11c      	bne.n	800554e <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005516:	4a0f      	ldr	r2, [pc, #60]	; (8005554 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800551c:	6803      	ldr	r3, [r0, #0]
 800551e:	4293      	cmp	r3, r2
 8005520:	d00a      	beq.n	8005538 <HAL_TIM_Base_Start+0x2c>
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005526:	d007      	beq.n	8005538 <HAL_TIM_Base_Start+0x2c>
 8005528:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <HAL_TIM_Base_Start+0x2c>
 8005530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005534:	4293      	cmp	r3, r2
 8005536:	d104      	bne.n	8005542 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005538:	689a      	ldr	r2, [r3, #8]
 800553a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	2a06      	cmp	r2, #6
 8005540:	d003      	beq.n	800554a <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	f042 0201 	orr.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800554a:	2000      	movs	r0, #0
}
 800554c:	4770      	bx	lr
    return HAL_ERROR;
 800554e:	2001      	movs	r0, #1
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00

08005558 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005558:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800555c:	2b01      	cmp	r3, #1
 800555e:	d120      	bne.n	80055a2 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005560:	2302      	movs	r3, #2
 8005562:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005566:	6803      	ldr	r3, [r0, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <HAL_TIM_Base_Start_IT+0x50>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00a      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x34>
 8005576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557a:	d007      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x34>
 800557c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005580:	4293      	cmp	r3, r2
 8005582:	d003      	beq.n	800558c <HAL_TIM_Base_Start_IT+0x34>
 8005584:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005588:	4293      	cmp	r3, r2
 800558a:	d104      	bne.n	8005596 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	2a06      	cmp	r2, #6
 8005594:	d003      	beq.n	800559e <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800559e:	2000      	movs	r0, #0
}
 80055a0:	4770      	bx	lr
    return HAL_ERROR;
 80055a2:	2001      	movs	r0, #1
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40012c00 	.word	0x40012c00

080055ac <HAL_TIM_OC_DelayElapsedCallback>:
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_IC_CaptureCallback>:
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80055b0:	4770      	bx	lr

080055b2 <HAL_TIM_TriggerCallback>:
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	6803      	ldr	r3, [r0, #0]
{
 80055b6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b8:	691a      	ldr	r2, [r3, #16]
{
 80055ba:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055bc:	0791      	lsls	r1, r2, #30
 80055be:	d50e      	bpl.n	80055de <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	0792      	lsls	r2, r2, #30
 80055c4:	d50b      	bpl.n	80055de <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c6:	f06f 0202 	mvn.w	r2, #2
 80055ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055cc:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ce:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d2:	079b      	lsls	r3, r3, #30
 80055d4:	d077      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	f7ff ffea 	bl	80055ae <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	2300      	movs	r3, #0
 80055dc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055de:	6823      	ldr	r3, [r4, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	0750      	lsls	r0, r2, #29
 80055e4:	d510      	bpl.n	8005608 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	0751      	lsls	r1, r2, #29
 80055ea:	d50d      	bpl.n	8005608 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ec:	f06f 0204 	mvn.w	r2, #4
 80055f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f2:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055f6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055f8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055fc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055fe:	d068      	beq.n	80056d2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005600:	f7ff ffd5 	bl	80055ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005604:	2300      	movs	r3, #0
 8005606:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	0712      	lsls	r2, r2, #28
 800560e:	d50f      	bpl.n	8005630 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	0710      	lsls	r0, r2, #28
 8005614:	d50c      	bpl.n	8005630 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005616:	f06f 0208 	mvn.w	r2, #8
 800561a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005620:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005622:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005624:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005626:	d05a      	beq.n	80056de <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005628:	f7ff ffc1 	bl	80055ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562c:	2300      	movs	r3, #0
 800562e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	06d2      	lsls	r2, r2, #27
 8005636:	d510      	bpl.n	800565a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	06d0      	lsls	r0, r2, #27
 800563c:	d50d      	bpl.n	800565a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800563e:	f06f 0210 	mvn.w	r2, #16
 8005642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005644:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005646:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005648:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800564a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005650:	d04b      	beq.n	80056ea <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005652:	f7ff ffac 	bl	80055ae <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	2300      	movs	r3, #0
 8005658:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	07d1      	lsls	r1, r2, #31
 8005660:	d508      	bpl.n	8005674 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	07d2      	lsls	r2, r2, #31
 8005666:	d505      	bpl.n	8005674 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005668:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800566e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005670:	f7fe fd30 	bl	80040d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	0610      	lsls	r0, r2, #24
 800567a:	d508      	bpl.n	800568e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	0611      	lsls	r1, r2, #24
 8005680:	d505      	bpl.n	800568e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005682:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005686:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005688:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800568a:	f000 f96a 	bl	8005962 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	0652      	lsls	r2, r2, #25
 8005694:	d508      	bpl.n	80056a8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	0650      	lsls	r0, r2, #25
 800569a:	d505      	bpl.n	80056a8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800569c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80056a4:	f7ff ff85 	bl	80055b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	691a      	ldr	r2, [r3, #16]
 80056ac:	0691      	lsls	r1, r2, #26
 80056ae:	d522      	bpl.n	80056f6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	0692      	lsls	r2, r2, #26
 80056b4:	d51f      	bpl.n	80056f6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ba:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80056c2:	f000 b94d 	b.w	8005960 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c6:	f7ff ff71 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff ff70 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80056d0:	e783      	b.n	80055da <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	f7ff ff6b 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d6:	4620      	mov	r0, r4
 80056d8:	f7ff ff6a 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80056dc:	e792      	b.n	8005604 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	f7ff ff65 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	4620      	mov	r0, r4
 80056e4:	f7ff ff64 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80056e8:	e7a0      	b.n	800562c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	f7ff ff5f 	bl	80055ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ee:	4620      	mov	r0, r4
 80056f0:	f7ff ff5e 	bl	80055b0 <HAL_TIM_PWM_PulseFinishedCallback>
 80056f4:	e7af      	b.n	8005656 <HAL_TIM_IRQHandler+0xa2>
 80056f6:	bd10      	pop	{r4, pc}

080056f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 80056fa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056fc:	4290      	cmp	r0, r2
 80056fe:	d00a      	beq.n	8005716 <TIM_Base_SetConfig+0x1e>
 8005700:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005704:	d007      	beq.n	8005716 <TIM_Base_SetConfig+0x1e>
 8005706:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800570a:	4290      	cmp	r0, r2
 800570c:	d003      	beq.n	8005716 <TIM_Base_SetConfig+0x1e>
 800570e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005712:	4290      	cmp	r0, r2
 8005714:	d115      	bne.n	8005742 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005716:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800571c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	4a11      	ldr	r2, [pc, #68]	; (8005764 <TIM_Base_SetConfig+0x6c>)
 8005720:	4290      	cmp	r0, r2
 8005722:	d00a      	beq.n	800573a <TIM_Base_SetConfig+0x42>
 8005724:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005728:	d007      	beq.n	800573a <TIM_Base_SetConfig+0x42>
 800572a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800572e:	4290      	cmp	r0, r2
 8005730:	d003      	beq.n	800573a <TIM_Base_SetConfig+0x42>
 8005732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005736:	4290      	cmp	r0, r2
 8005738:	d103      	bne.n	8005742 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800573c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005740:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005742:	694a      	ldr	r2, [r1, #20]
 8005744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005748:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800574a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	688b      	ldr	r3, [r1, #8]
 800574e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005750:	680b      	ldr	r3, [r1, #0]
 8005752:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <TIM_Base_SetConfig+0x6c>)
 8005756:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005758:	bf04      	itt	eq
 800575a:	690b      	ldreq	r3, [r1, #16]
 800575c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800575e:	2301      	movs	r3, #1
 8005760:	6143      	str	r3, [r0, #20]
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00

08005768 <HAL_TIM_Base_Init>:
{
 8005768:	b510      	push	{r4, lr}
  if (htim == NULL)
 800576a:	4604      	mov	r4, r0
 800576c:	b330      	cbz	r0, 80057bc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005776:	b91b      	cbnz	r3, 8005780 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005778:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800577c:	f7fe fe22 	bl	80043c4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005782:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005788:	1d21      	adds	r1, r4, #4
 800578a:	f7ff ffb5 	bl	80056f8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578e:	2301      	movs	r3, #1
  return HAL_OK;
 8005790:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005792:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800579a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800579e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80057ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80057bc:	2001      	movs	r0, #1
}
 80057be:	bd10      	pop	{r4, pc}

080057c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057c2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057c4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057ca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80057ce:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057d0:	6083      	str	r3, [r0, #8]
 80057d2:	bd10      	pop	{r4, pc}

080057d4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80057d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80057d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80057da:	2b01      	cmp	r3, #1
{
 80057dc:	4604      	mov	r4, r0
 80057de:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80057e2:	d019      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0x44>
 80057e4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80057e6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80057ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80057ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80057f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80057fa:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80057fc:	680b      	ldr	r3, [r1, #0]
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d065      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0xfa>
 8005802:	d815      	bhi.n	8005830 <HAL_TIM_ConfigClockSource+0x5c>
 8005804:	2b10      	cmp	r3, #16
 8005806:	d00c      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x4e>
 8005808:	d807      	bhi.n	800581a <HAL_TIM_ConfigClockSource+0x46>
 800580a:	b153      	cbz	r3, 8005822 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800580c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800580e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005810:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005814:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005818:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800581a:	2b20      	cmp	r3, #32
 800581c:	d001      	beq.n	8005822 <HAL_TIM_ConfigClockSource+0x4e>
 800581e:	2b30      	cmp	r3, #48	; 0x30
 8005820:	d1f4      	bne.n	800580c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8005822:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005824:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005828:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800582c:	4313      	orrs	r3, r2
 800582e:	e01a      	b.n	8005866 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005830:	2b60      	cmp	r3, #96	; 0x60
 8005832:	d034      	beq.n	800589e <HAL_TIM_ConfigClockSource+0xca>
 8005834:	d819      	bhi.n	800586a <HAL_TIM_ConfigClockSource+0x96>
 8005836:	2b50      	cmp	r3, #80	; 0x50
 8005838:	d1e8      	bne.n	800580c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800583a:	684a      	ldr	r2, [r1, #4]
 800583c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800583e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005840:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005842:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005846:	f025 0501 	bic.w	r5, r5, #1
 800584a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800584c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800584e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005858:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800585a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800585c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800585e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005862:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005866:	6083      	str	r3, [r0, #8]
 8005868:	e7d0      	b.n	800580c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800586a:	2b70      	cmp	r3, #112	; 0x70
 800586c:	d00c      	beq.n	8005888 <HAL_TIM_ConfigClockSource+0xb4>
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005872:	d1cb      	bne.n	800580c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	68cb      	ldr	r3, [r1, #12]
 8005876:	684a      	ldr	r2, [r1, #4]
 8005878:	6889      	ldr	r1, [r1, #8]
 800587a:	f7ff ffa1 	bl	80057c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	6893      	ldr	r3, [r2, #8]
 8005882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005886:	e008      	b.n	800589a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8005888:	68cb      	ldr	r3, [r1, #12]
 800588a:	684a      	ldr	r2, [r1, #4]
 800588c:	6889      	ldr	r1, [r1, #8]
 800588e:	f7ff ff97 	bl	80057c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005896:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800589a:	6093      	str	r3, [r2, #8]
      break;
 800589c:	e7b6      	b.n	800580c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	684d      	ldr	r5, [r1, #4]
 80058a0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a2:	6a01      	ldr	r1, [r0, #32]
 80058a4:	f021 0110 	bic.w	r1, r1, #16
 80058a8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058aa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80058ac:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058ae:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80058b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058ba:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80058be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80058c0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058c8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80058cc:	e7cb      	b.n	8005866 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	684a      	ldr	r2, [r1, #4]
 80058d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80058d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058d6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058da:	f025 0501 	bic.w	r5, r5, #1
 80058de:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80058e2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80058ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80058ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80058f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058f6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80058fa:	e7b4      	b.n	8005866 <HAL_TIM_ConfigClockSource+0x92>

080058fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005900:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005902:	2b01      	cmp	r3, #1
 8005904:	f04f 0302 	mov.w	r3, #2
 8005908:	d025      	beq.n	8005956 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800590a:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005910:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005912:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8005914:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8005916:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 800591a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005920:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005922:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	4c0d      	ldr	r4, [pc, #52]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005926:	42a3      	cmp	r3, r4
 8005928:	d00a      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d007      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005930:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005934:	42a3      	cmp	r3, r4
 8005936:	d003      	beq.n	8005940 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005938:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800593c:	42a3      	cmp	r3, r4
 800593e:	d104      	bne.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005940:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005946:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800594a:	2301      	movs	r3, #1
 800594c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005950:	2300      	movs	r3, #0
 8005952:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005956:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005958:	bd30      	pop	{r4, r5, pc}
 800595a:	bf00      	nop
 800595c:	40012c00 	.word	0x40012c00

08005960 <HAL_TIMEx_CommutCallback>:
 8005960:	4770      	bx	lr

08005962 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005962:	4770      	bx	lr

08005964 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005964:	6803      	ldr	r3, [r0, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800596c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	695a      	ldr	r2, [r3, #20]
 8005970:	f022 0201 	bic.w	r2, r2, #1
 8005974:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	2320      	movs	r3, #32
 8005978:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800597c:	4770      	bx	lr
	...

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005984:	6803      	ldr	r3, [r0, #0]
 8005986:	68c1      	ldr	r1, [r0, #12]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800598e:	430a      	orrs	r2, r1
 8005990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005992:	6882      	ldr	r2, [r0, #8]
 8005994:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005996:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005998:	4302      	orrs	r2, r0
 800599a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800599c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80059a0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059a4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80059a6:	430a      	orrs	r2, r1
 80059a8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	69a1      	ldr	r1, [r4, #24]
 80059ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059b2:	430a      	orrs	r2, r1
 80059b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059b6:	4a0e      	ldr	r2, [pc, #56]	; (80059f0 <UART_SetConfig+0x70>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d115      	bne.n	80059e8 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059bc:	f7ff fd96 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059c0:	2319      	movs	r3, #25
 80059c2:	4358      	muls	r0, r3
 80059c4:	6863      	ldr	r3, [r4, #4]
 80059c6:	2264      	movs	r2, #100	; 0x64
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80059ce:	fbb0 f1f2 	udiv	r1, r0, r2
 80059d2:	fb02 0311 	mls	r3, r2, r1, r0
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	3332      	adds	r3, #50	; 0x32
 80059da:	fbb3 f3f2 	udiv	r3, r3, r2
 80059de:	6825      	ldr	r5, [r4, #0]
 80059e0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80059e4:	60ab      	str	r3, [r5, #8]
 80059e6:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7ff fd70 	bl	80054cc <HAL_RCC_GetPCLK1Freq>
 80059ec:	e7e8      	b.n	80059c0 <UART_SetConfig+0x40>
 80059ee:	bf00      	nop
 80059f0:	40013800 	.word	0x40013800

080059f4 <HAL_UART_Init>:
{
 80059f4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80059f6:	4604      	mov	r4, r0
 80059f8:	b340      	cbz	r0, 8005a4c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80059fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a02:	b91b      	cbnz	r3, 8005a0c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005a04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005a08:	f7fe fd2a 	bl	8004460 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005a0e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005a14:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a16:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005a1e:	f7ff ffaf 	bl	8005980 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a22:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a24:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2e:	695a      	ldr	r2, [r3, #20]
 8005a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a34:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005a36:	68da      	ldr	r2, [r3, #12]
 8005a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a3c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a40:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a42:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8005a4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a4c:	2001      	movs	r0, #1
}
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <HAL_UART_DeInit>:
{
 8005a50:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005a52:	4604      	mov	r4, r0
 8005a54:	b190      	cbz	r0, 8005a7c <HAL_UART_DeInit+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005a56:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005a58:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005a5a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005a5e:	68d3      	ldr	r3, [r2, #12]
 8005a60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a64:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8005a66:	f7fe fd3d 	bl	80044e4 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 8005a6e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 8005a72:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 8005a76:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  return HAL_OK;
 8005a7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a7c:	2001      	movs	r0, #1
}
 8005a7e:	bd10      	pop	{r4, pc}

08005a80 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a80:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d120      	bne.n	8005aca <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8005a88:	b1e9      	cbz	r1, 8005ac6 <HAL_UART_Receive_IT+0x46>
 8005a8a:	b1e2      	cbz	r2, 8005ac6 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8005a8c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d01a      	beq.n	8005aca <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8005a94:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8005a96:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a9a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a9e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa2:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8005aa4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aa6:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8005aa8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005ab0:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab2:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8005ab4:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ab6:	f041 0101 	orr.w	r1, r1, #1
 8005aba:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005abc:	68d1      	ldr	r1, [r2, #12]
 8005abe:	f041 0120 	orr.w	r1, r1, #32
 8005ac2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8005ac4:	4770      	bx	lr
      return HAL_ERROR;
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	4770      	bx	lr
    return HAL_BUSY;
 8005aca:	2002      	movs	r0, #2
}
 8005acc:	4770      	bx	lr

08005ace <HAL_UART_TxCpltCallback>:
 8005ace:	4770      	bx	lr

08005ad0 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8005ad4:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad6:	2b22      	cmp	r3, #34	; 0x22
 8005ad8:	d132      	bne.n	8005b40 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ada:	6881      	ldr	r1, [r0, #8]
 8005adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005ade:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005ae2:	6802      	ldr	r2, [r0, #0]
 8005ae4:	d120      	bne.n	8005b28 <UART_Receive_IT+0x58>
 8005ae6:	6901      	ldr	r1, [r0, #16]
 8005ae8:	bb09      	cbnz	r1, 8005b2e <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005aea:	6852      	ldr	r2, [r2, #4]
 8005aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af0:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8005af4:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8005af6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005af8:	3c01      	subs	r4, #1
 8005afa:	b2a4      	uxth	r4, r4
 8005afc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8005afe:	b98c      	cbnz	r4, 8005b24 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b00:	6803      	ldr	r3, [r0, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	f022 0220 	bic.w	r2, r2, #32
 8005b08:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b10:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b12:	695a      	ldr	r2, [r3, #20]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005b1a:	2320      	movs	r3, #32
 8005b1c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005b20:	f7fe faec 	bl	80040fc <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8005b24:	2000      	movs	r0, #0
}
 8005b26:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b28:	b931      	cbnz	r1, 8005b38 <UART_Receive_IT+0x68>
 8005b2a:	6901      	ldr	r1, [r0, #16]
 8005b2c:	b921      	cbnz	r1, 8005b38 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b2e:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b30:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8005b32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005b34:	3301      	adds	r3, #1
 8005b36:	e7dd      	b.n	8005af4 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b38:	6852      	ldr	r2, [r2, #4]
 8005b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b3e:	e7f7      	b.n	8005b30 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8005b40:	2002      	movs	r0, #2
 8005b42:	bd10      	pop	{r4, pc}

08005b44 <HAL_UART_ErrorCallback>:
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b48:	6803      	ldr	r3, [r0, #0]
{
 8005b4a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b4c:	681a      	ldr	r2, [r3, #0]
{
 8005b4e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005b50:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b52:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b54:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005b56:	d107      	bne.n	8005b68 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b58:	0696      	lsls	r6, r2, #26
 8005b5a:	d55c      	bpl.n	8005c16 <HAL_UART_IRQHandler+0xce>
 8005b5c:	068d      	lsls	r5, r1, #26
 8005b5e:	d55a      	bpl.n	8005c16 <HAL_UART_IRQHandler+0xce>
}
 8005b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005b64:	f7ff bfb4 	b.w	8005ad0 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b68:	f015 0501 	ands.w	r5, r5, #1
 8005b6c:	d102      	bne.n	8005b74 <HAL_UART_IRQHandler+0x2c>
 8005b6e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005b72:	d050      	beq.n	8005c16 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b74:	07d0      	lsls	r0, r2, #31
 8005b76:	d505      	bpl.n	8005b84 <HAL_UART_IRQHandler+0x3c>
 8005b78:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b7a:	bf42      	ittt	mi
 8005b7c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8005b7e:	f043 0301 	orrmi.w	r3, r3, #1
 8005b82:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b84:	0756      	lsls	r6, r2, #29
 8005b86:	d504      	bpl.n	8005b92 <HAL_UART_IRQHandler+0x4a>
 8005b88:	b11d      	cbz	r5, 8005b92 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b92:	0790      	lsls	r0, r2, #30
 8005b94:	d504      	bpl.n	8005ba0 <HAL_UART_IRQHandler+0x58>
 8005b96:	b11d      	cbz	r5, 8005ba0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b9a:	f043 0304 	orr.w	r3, r3, #4
 8005b9e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ba0:	0713      	lsls	r3, r2, #28
 8005ba2:	d506      	bpl.n	8005bb2 <HAL_UART_IRQHandler+0x6a>
 8005ba4:	068e      	lsls	r6, r1, #26
 8005ba6:	d400      	bmi.n	8005baa <HAL_UART_IRQHandler+0x62>
 8005ba8:	b11d      	cbz	r5, 8005bb2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005baa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bac:	f043 0308 	orr.w	r3, r3, #8
 8005bb0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d064      	beq.n	8005c82 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb8:	0695      	lsls	r5, r2, #26
 8005bba:	d504      	bpl.n	8005bc6 <HAL_UART_IRQHandler+0x7e>
 8005bbc:	0688      	lsls	r0, r1, #26
 8005bbe:	d502      	bpl.n	8005bc6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7ff ff85 	bl	8005ad0 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bc6:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8005bc8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bcc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005bce:	0711      	lsls	r1, r2, #28
 8005bd0:	d402      	bmi.n	8005bd8 <HAL_UART_IRQHandler+0x90>
 8005bd2:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005bd6:	d01a      	beq.n	8005c0e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8005bd8:	f7ff fec4 	bl	8005964 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	0652      	lsls	r2, r2, #25
 8005be2:	d510      	bpl.n	8005c06 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be4:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005be6:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bec:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005bee:	b150      	cbz	r0, 8005c06 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <HAL_UART_IRQHandler+0x13c>)
 8005bf2:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005bf4:	f7ff f848 	bl	8004c88 <HAL_DMA_Abort_IT>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d042      	beq.n	8005c82 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005bfc:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005c04:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff ff9c 	bl	8005b44 <HAL_UART_ErrorCallback>
 8005c0c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005c0e:	f7ff ff99 	bl	8005b44 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c16:	0616      	lsls	r6, r2, #24
 8005c18:	d525      	bpl.n	8005c66 <HAL_UART_IRQHandler+0x11e>
 8005c1a:	060d      	lsls	r5, r1, #24
 8005c1c:	d523      	bpl.n	8005c66 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c1e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005c22:	2a21      	cmp	r2, #33	; 0x21
 8005c24:	d12d      	bne.n	8005c82 <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c26:	68a2      	ldr	r2, [r4, #8]
 8005c28:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005c2c:	6a22      	ldr	r2, [r4, #32]
 8005c2e:	d115      	bne.n	8005c5c <HAL_UART_IRQHandler+0x114>
 8005c30:	6921      	ldr	r1, [r4, #16]
 8005c32:	b999      	cbnz	r1, 8005c5c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c34:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005c38:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005c3c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c3e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005c40:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005c42:	3a01      	subs	r2, #1
 8005c44:	b292      	uxth	r2, r2
 8005c46:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005c48:	b9da      	cbnz	r2, 8005c82 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c50:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c58:	60da      	str	r2, [r3, #12]
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c5c:	1c51      	adds	r1, r2, #1
 8005c5e:	6221      	str	r1, [r4, #32]
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	e7ec      	b.n	8005c40 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c66:	0650      	lsls	r0, r2, #25
 8005c68:	d50b      	bpl.n	8005c82 <HAL_UART_IRQHandler+0x13a>
 8005c6a:	064a      	lsls	r2, r1, #25
 8005c6c:	d509      	bpl.n	8005c82 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c6e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8005c70:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c76:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005c7e:	f7ff ff26 	bl	8005ace <HAL_UART_TxCpltCallback>
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	08005c89 	.word	0x08005c89

08005c88 <UART_DMAAbortOnError>:
{
 8005c88:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005c8a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005c8e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c90:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005c92:	f7ff ff57 	bl	8005b44 <HAL_UART_ErrorCallback>
 8005c96:	bd08      	pop	{r3, pc}

08005c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005c98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005c9a:	e003      	b.n	8005ca4 <LoopCopyDataInit>

08005c9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005c9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ca0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005ca2:	3104      	adds	r1, #4

08005ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005ca4:	480a      	ldr	r0, [pc, #40]	; (8005cd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005ca6:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005ca8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005caa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005cac:	d3f6      	bcc.n	8005c9c <CopyDataInit>
  ldr r2, =_sbss
 8005cae:	4a0a      	ldr	r2, [pc, #40]	; (8005cd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005cb0:	e002      	b.n	8005cb8 <LoopFillZerobss>

08005cb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005cb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005cb4:	f842 3b04 	str.w	r3, [r2], #4

08005cb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005cb8:	4b08      	ldr	r3, [pc, #32]	; (8005cdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005cba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005cbc:	d3f9      	bcc.n	8005cb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005cbe:	f7fe fb15 	bl	80042ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005cc2:	f003 fa7f 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005cc6:	f7fe fa2d 	bl	8004124 <main>
  bx lr
 8005cca:	4770      	bx	lr
  ldr r3, =_sidata
 8005ccc:	08009f64 	.word	0x08009f64
  ldr r0, =_sdata
 8005cd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005cd4:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8005cd8:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8005cdc:	200002ec 	.word	0x200002ec

08005ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005ce0:	e7fe      	b.n	8005ce0 <ADC1_2_IRQHandler>
	...

08005ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	4b02      	ldr	r3, [pc, #8]	; (8005cf4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005cea:	6003      	str	r3, [r0, #0]
 8005cec:	f000 fc30 	bl	8006550 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	bd10      	pop	{r4, pc}
 8005cf4:	080096ac 	.word	0x080096ac

08005cf8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	f7ff fff2 	bl	8005ce4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005d00:	4620      	mov	r0, r4
 8005d02:	210c      	movs	r1, #12
 8005d04:	f000 fbfa 	bl	80064fc <_ZdlPvj>
 8005d08:	4620      	mov	r0, r4
 8005d0a:	bd10      	pop	{r4, pc}

08005d0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d10:	9e06      	ldr	r6, [sp, #24]
 8005d12:	4680      	mov	r8, r0
 8005d14:	4296      	cmp	r6, r2
 8005d16:	460f      	mov	r7, r1
 8005d18:	4614      	mov	r4, r2
 8005d1a:	461d      	mov	r5, r3
 8005d1c:	d103      	bne.n	8005d26 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005d1e:	4619      	mov	r1, r3
 8005d20:	f000 fc6a 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 8005d24:	b958      	cbnz	r0, 8005d3e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8005d26:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	6803      	ldr	r3, [r0, #0]
 8005d2e:	9606      	str	r6, [sp, #24]
 8005d30:	6a1e      	ldr	r6, [r3, #32]
 8005d32:	4639      	mov	r1, r7
 8005d34:	462b      	mov	r3, r5
 8005d36:	46b4      	mov	ip, r6
 8005d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3c:	4760      	bx	ip
 8005d3e:	2006      	movs	r0, #6
 8005d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005d44:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d48:	460e      	mov	r6, r1
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4683      	mov	fp, r0
 8005d4e:	4617      	mov	r7, r2
 8005d50:	4699      	mov	r9, r3
 8005d52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d54:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005d58:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005d5c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005d5e:	f000 fc4b 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 8005d62:	b190      	cbz	r0, 8005d8a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	602c      	str	r4, [r5, #0]
 8005d68:	712f      	strb	r7, [r5, #4]
 8005d6a:	db09      	blt.n	8005d80 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005d6c:	4434      	add	r4, r6
 8005d6e:	45a0      	cmp	r8, r4
 8005d70:	bf0c      	ite	eq
 8005d72:	2406      	moveq	r4, #6
 8005d74:	2401      	movne	r4, #1
 8005d76:	71ac      	strb	r4, [r5, #6]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	b001      	add	sp, #4
 8005d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d80:	3602      	adds	r6, #2
 8005d82:	d1f9      	bne.n	8005d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005d84:	2301      	movs	r3, #1
 8005d86:	71ab      	strb	r3, [r5, #6]
 8005d88:	e7f6      	b.n	8005d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005d8a:	4544      	cmp	r4, r8
 8005d8c:	d104      	bne.n	8005d98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005d8e:	4651      	mov	r1, sl
 8005d90:	4658      	mov	r0, fp
 8005d92:	f000 fc31 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 8005d96:	b988      	cbnz	r0, 8005dbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8005d98:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005d9c:	463a      	mov	r2, r7
 8005d9e:	6803      	ldr	r3, [r0, #0]
 8005da0:	950d      	str	r5, [sp, #52]	; 0x34
 8005da2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005da6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005daa:	940a      	str	r4, [sp, #40]	; 0x28
 8005dac:	69dc      	ldr	r4, [r3, #28]
 8005dae:	4631      	mov	r1, r6
 8005db0:	464b      	mov	r3, r9
 8005db2:	46a4      	mov	ip, r4
 8005db4:	b001      	add	sp, #4
 8005db6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	4760      	bx	ip
 8005dbc:	716f      	strb	r7, [r5, #5]
 8005dbe:	e7db      	b.n	8005d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08005dc0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	4616      	mov	r6, r2
 8005dca:	461f      	mov	r7, r3
 8005dcc:	f000 fbd4 	bl	8006578 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005dd0:	b948      	cbnz	r0, 8005de6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005dd2:	68a0      	ldr	r0, [r4, #8]
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	6803      	ldr	r3, [r0, #0]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	699c      	ldr	r4, [r3, #24]
 8005ddc:	463b      	mov	r3, r7
 8005dde:	46a4      	mov	ip, r4
 8005de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de4:	4760      	bx	ip
 8005de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005dea <_ZdlPv>:
 8005dea:	f003 ba17 	b.w	800921c <free>

08005dee <__aeabi_atexit>:
 8005dee:	460b      	mov	r3, r1
 8005df0:	4601      	mov	r1, r0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f003 b9d2 	b.w	800919c <__cxa_atexit>

08005df8 <__cxa_pure_virtual>:
 8005df8:	b508      	push	{r3, lr}
 8005dfa:	f000 f80d 	bl	8005e18 <_ZSt9terminatev>

08005dfe <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005dfe:	b508      	push	{r3, lr}
 8005e00:	4780      	blx	r0
 8005e02:	f003 f9bc 	bl	800917e <abort>
	...

08005e08 <_ZSt13get_terminatev>:
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <_ZSt13get_terminatev+0xc>)
 8005e0a:	6818      	ldr	r0, [r3, #0]
 8005e0c:	f3bf 8f5b 	dmb	ish
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000014 	.word	0x20000014

08005e18 <_ZSt9terminatev>:
 8005e18:	b508      	push	{r3, lr}
 8005e1a:	f7ff fff5 	bl	8005e08 <_ZSt13get_terminatev>
 8005e1e:	f7ff ffee 	bl	8005dfe <_ZN10__cxxabiv111__terminateEPFvvE>

08005e22 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005e22:	b508      	push	{r3, lr}
 8005e24:	4780      	blx	r0
 8005e26:	f7ff fff7 	bl	8005e18 <_ZSt9terminatev>
	...

08005e2c <_ZSt14get_unexpectedv>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <_ZSt14get_unexpectedv+0xc>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	f3bf 8f5b 	dmb	ish
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000018 	.word	0x20000018

08005e3c <_ZSt10unexpectedv>:
 8005e3c:	b508      	push	{r3, lr}
 8005e3e:	f7ff fff5 	bl	8005e2c <_ZSt14get_unexpectedv>
 8005e42:	f7ff ffee 	bl	8005e22 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005e46 <_Znwj>:
 8005e46:	b510      	push	{r4, lr}
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	bf14      	ite	ne
 8005e4c:	4604      	movne	r4, r0
 8005e4e:	2401      	moveq	r4, #1
 8005e50:	4620      	mov	r0, r4
 8005e52:	f003 f9db 	bl	800920c <malloc>
 8005e56:	b930      	cbnz	r0, 8005e66 <_Znwj+0x20>
 8005e58:	f000 fb52 	bl	8006500 <_ZSt15get_new_handlerv>
 8005e5c:	b908      	cbnz	r0, 8005e62 <_Znwj+0x1c>
 8005e5e:	f003 f98e 	bl	800917e <abort>
 8005e62:	4780      	blx	r0
 8005e64:	e7f4      	b.n	8005e50 <_Znwj+0xa>
 8005e66:	bd10      	pop	{r4, pc}

08005e68 <__cxa_end_cleanup>:
 8005e68:	b41e      	push	{r1, r2, r3, r4}
 8005e6a:	f000 f89c 	bl	8005fa6 <__gnu_end_cleanup>
 8005e6e:	bc1e      	pop	{r1, r2, r3, r4}
 8005e70:	f7fb ff24 	bl	8001cbc <_Unwind_Resume>

08005e74 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005e74:	7803      	ldrb	r3, [r0, #0]
 8005e76:	2b47      	cmp	r3, #71	; 0x47
 8005e78:	d117      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e7a:	7843      	ldrb	r3, [r0, #1]
 8005e7c:	2b4e      	cmp	r3, #78	; 0x4e
 8005e7e:	d114      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e80:	7883      	ldrb	r3, [r0, #2]
 8005e82:	2b55      	cmp	r3, #85	; 0x55
 8005e84:	d111      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e86:	78c3      	ldrb	r3, [r0, #3]
 8005e88:	2b43      	cmp	r3, #67	; 0x43
 8005e8a:	d10e      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e8c:	7903      	ldrb	r3, [r0, #4]
 8005e8e:	2b43      	cmp	r3, #67	; 0x43
 8005e90:	d10b      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e92:	7943      	ldrb	r3, [r0, #5]
 8005e94:	2b2b      	cmp	r3, #43	; 0x2b
 8005e96:	d108      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e98:	7983      	ldrb	r3, [r0, #6]
 8005e9a:	2b2b      	cmp	r3, #43	; 0x2b
 8005e9c:	d105      	bne.n	8005eaa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005e9e:	79c0      	ldrb	r0, [r0, #7]
 8005ea0:	2801      	cmp	r0, #1
 8005ea2:	bf8c      	ite	hi
 8005ea4:	2000      	movhi	r0, #0
 8005ea6:	2001      	movls	r0, #1
 8005ea8:	4770      	bx	lr
 8005eaa:	2000      	movs	r0, #0
 8005eac:	4770      	bx	lr
	...

08005eb0 <__cxa_type_match>:
 8005eb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005eb4:	461e      	mov	r6, r3
 8005eb6:	7803      	ldrb	r3, [r0, #0]
 8005eb8:	460d      	mov	r5, r1
 8005eba:	2b47      	cmp	r3, #71	; 0x47
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	79c1      	ldrb	r1, [r0, #7]
 8005ec0:	d147      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ec2:	7843      	ldrb	r3, [r0, #1]
 8005ec4:	2b4e      	cmp	r3, #78	; 0x4e
 8005ec6:	d144      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ec8:	7883      	ldrb	r3, [r0, #2]
 8005eca:	2b55      	cmp	r3, #85	; 0x55
 8005ecc:	d141      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ece:	78c3      	ldrb	r3, [r0, #3]
 8005ed0:	2b43      	cmp	r3, #67	; 0x43
 8005ed2:	d13e      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ed4:	7903      	ldrb	r3, [r0, #4]
 8005ed6:	2b46      	cmp	r3, #70	; 0x46
 8005ed8:	d13b      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005eda:	7943      	ldrb	r3, [r0, #5]
 8005edc:	2b4f      	cmp	r3, #79	; 0x4f
 8005ede:	d138      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ee0:	7983      	ldrb	r3, [r0, #6]
 8005ee2:	2b52      	cmp	r3, #82	; 0x52
 8005ee4:	d135      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005ee6:	2900      	cmp	r1, #0
 8005ee8:	d133      	bne.n	8005f52 <__cxa_type_match+0xa2>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4608      	mov	r0, r1
 8005eee:	2400      	movs	r4, #0
 8005ef0:	9401      	str	r4, [sp, #4]
 8005ef2:	bb33      	cbnz	r3, 8005f42 <__cxa_type_match+0x92>
 8005ef4:	bb38      	cbnz	r0, 8005f46 <__cxa_type_match+0x96>
 8005ef6:	2901      	cmp	r1, #1
 8005ef8:	bf0a      	itet	eq
 8005efa:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005efe:	f1a2 0320 	subne.w	r3, r2, #32
 8005f02:	3b78      	subeq	r3, #120	; 0x78
 8005f04:	2901      	cmp	r1, #1
 8005f06:	bf0c      	ite	eq
 8005f08:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005f0c:	3258      	addne	r2, #88	; 0x58
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	9201      	str	r2, [sp, #4]
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	4620      	mov	r0, r4
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4798      	blx	r3
 8005f1a:	b1b0      	cbz	r0, 8005f4a <__cxa_type_match+0x9a>
 8005f1c:	2702      	movs	r7, #2
 8005f1e:	9b01      	ldr	r3, [sp, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	aa01      	add	r2, sp, #4
 8005f28:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	2301      	movs	r3, #1
 8005f30:	4628      	mov	r0, r5
 8005f32:	47c0      	blx	r8
 8005f34:	b158      	cbz	r0, 8005f4e <__cxa_type_match+0x9e>
 8005f36:	9b01      	ldr	r3, [sp, #4]
 8005f38:	6033      	str	r3, [r6, #0]
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	b002      	add	sp, #8
 8005f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f42:	4c08      	ldr	r4, [pc, #32]	; (8005f64 <__cxa_type_match+0xb4>)
 8005f44:	e7e5      	b.n	8005f12 <__cxa_type_match+0x62>
 8005f46:	4c08      	ldr	r4, [pc, #32]	; (8005f68 <__cxa_type_match+0xb8>)
 8005f48:	e7e3      	b.n	8005f12 <__cxa_type_match+0x62>
 8005f4a:	2701      	movs	r7, #1
 8005f4c:	e7ea      	b.n	8005f24 <__cxa_type_match+0x74>
 8005f4e:	4607      	mov	r7, r0
 8005f50:	e7f3      	b.n	8005f3a <__cxa_type_match+0x8a>
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7ff ff8e 	bl	8005e74 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005f58:	f080 0001 	eor.w	r0, r0, #1
 8005f5c:	b2c0      	uxtb	r0, r0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e7c5      	b.n	8005eee <__cxa_type_match+0x3e>
 8005f62:	bf00      	nop
 8005f64:	08009744 	.word	0x08009744
 8005f68:	0800974c 	.word	0x0800974c

08005f6c <__cxa_begin_cleanup>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4604      	mov	r4, r0
 8005f70:	f000 fbe0 	bl	8006734 <__cxa_get_globals>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4620      	mov	r0, r4
 8005f78:	f1a4 0120 	sub.w	r1, r4, #32
 8005f7c:	f7ff ff7a 	bl	8005e74 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005f80:	b160      	cbz	r0, 8005f9c <__cxa_begin_cleanup+0x30>
 8005f82:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005f86:	3301      	adds	r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005f8e:	d103      	bne.n	8005f98 <__cxa_begin_cleanup+0x2c>
 8005f90:	6893      	ldr	r3, [r2, #8]
 8005f92:	f844 3c08 	str.w	r3, [r4, #-8]
 8005f96:	6091      	str	r1, [r2, #8]
 8005f98:	2001      	movs	r0, #1
 8005f9a:	bd10      	pop	{r4, pc}
 8005f9c:	6893      	ldr	r3, [r2, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f9      	beq.n	8005f96 <__cxa_begin_cleanup+0x2a>
 8005fa2:	f7ff ff39 	bl	8005e18 <_ZSt9terminatev>

08005fa6 <__gnu_end_cleanup>:
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	f000 fbc4 	bl	8006734 <__cxa_get_globals>
 8005fac:	6882      	ldr	r2, [r0, #8]
 8005fae:	4601      	mov	r1, r0
 8005fb0:	b90a      	cbnz	r2, 8005fb6 <__gnu_end_cleanup+0x10>
 8005fb2:	f7ff ff31 	bl	8005e18 <_ZSt9terminatev>
 8005fb6:	f102 0420 	add.w	r4, r2, #32
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f7ff ff5a 	bl	8005e74 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005fc0:	b140      	cbz	r0, 8005fd4 <__gnu_end_cleanup+0x2e>
 8005fc2:	69d3      	ldr	r3, [r2, #28]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	61d3      	str	r3, [r2, #28]
 8005fc8:	b913      	cbnz	r3, 8005fd0 <__gnu_end_cleanup+0x2a>
 8005fca:	6990      	ldr	r0, [r2, #24]
 8005fcc:	6088      	str	r0, [r1, #8]
 8005fce:	6193      	str	r3, [r2, #24]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bd10      	pop	{r4, pc}
 8005fd4:	6088      	str	r0, [r1, #8]
 8005fd6:	e7fb      	b.n	8005fd0 <__gnu_end_cleanup+0x2a>

08005fd8 <_ZL12read_uleb128PKhPm>:
 8005fd8:	2300      	movs	r3, #0
 8005fda:	b570      	push	{r4, r5, r6, lr}
 8005fdc:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8005fe0:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005fe4:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005fe8:	1994      	adds	r4, r2, r6
 8005fea:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8005fee:	40a2      	lsls	r2, r4
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	062a      	lsls	r2, r5, #24
 8005ff4:	d4f4      	bmi.n	8005fe0 <_ZL12read_uleb128PKhPm+0x8>
 8005ff6:	600b      	str	r3, [r1, #0]
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}

08005ffa <_ZL12read_sleb128PKhPl>:
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	b530      	push	{r4, r5, lr}
 8006000:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006004:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006008:	4095      	lsls	r5, r2
 800600a:	432b      	orrs	r3, r5
 800600c:	0625      	lsls	r5, r4, #24
 800600e:	f102 0207 	add.w	r2, r2, #7
 8006012:	d4f5      	bmi.n	8006000 <_ZL12read_sleb128PKhPl+0x6>
 8006014:	2a1f      	cmp	r2, #31
 8006016:	d806      	bhi.n	8006026 <_ZL12read_sleb128PKhPl+0x2c>
 8006018:	0664      	lsls	r4, r4, #25
 800601a:	bf42      	ittt	mi
 800601c:	f04f 34ff 	movmi.w	r4, #4294967295
 8006020:	fa04 f202 	lslmi.w	r2, r4, r2
 8006024:	4313      	orrmi	r3, r2
 8006026:	600b      	str	r3, [r1, #0]
 8006028:	bd30      	pop	{r4, r5, pc}

0800602a <_ZL28read_encoded_value_with_basehjPKhPj>:
 800602a:	2850      	cmp	r0, #80	; 0x50
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	4605      	mov	r5, r0
 8006030:	460e      	mov	r6, r1
 8006032:	4614      	mov	r4, r2
 8006034:	461f      	mov	r7, r3
 8006036:	d107      	bne.n	8006048 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8006038:	1cd0      	adds	r0, r2, #3
 800603a:	f020 0003 	bic.w	r0, r0, #3
 800603e:	f850 3b04 	ldr.w	r3, [r0], #4
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	b003      	add	sp, #12
 8006046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006048:	f000 030f 	and.w	r3, r0, #15
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d82e      	bhi.n	80060ae <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8006050:	e8df f003 	tbb	[pc, r3]
 8006054:	251d0725 	.word	0x251d0725
 8006058:	2d2d2d29 	.word	0x2d2d2d29
 800605c:	2521182d 	.word	0x2521182d
 8006060:	29          	.byte	0x29
 8006061:	00          	.byte	0x00
 8006062:	a901      	add	r1, sp, #4
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ffb7 	bl	8005fd8 <_ZL12read_uleb128PKhPm>
 800606a:	9b01      	ldr	r3, [sp, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0e8      	beq.n	8006042 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8006070:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8006074:	2a10      	cmp	r2, #16
 8006076:	bf08      	it	eq
 8006078:	4626      	moveq	r6, r4
 800607a:	062a      	lsls	r2, r5, #24
 800607c:	4433      	add	r3, r6
 800607e:	bf48      	it	mi
 8006080:	681b      	ldrmi	r3, [r3, #0]
 8006082:	e7de      	b.n	8006042 <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8006084:	a901      	add	r1, sp, #4
 8006086:	4620      	mov	r0, r4
 8006088:	f7ff ffb7 	bl	8005ffa <_ZL12read_sleb128PKhPl>
 800608c:	e7ed      	b.n	800606a <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 800608e:	4620      	mov	r0, r4
 8006090:	f830 3b02 	ldrh.w	r3, [r0], #2
 8006094:	e7ea      	b.n	800606c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006096:	4620      	mov	r0, r4
 8006098:	f930 3b02 	ldrsh.w	r3, [r0], #2
 800609c:	e7e6      	b.n	800606c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800609e:	4620      	mov	r0, r4
 80060a0:	f850 3b04 	ldr.w	r3, [r0], #4
 80060a4:	e7e2      	b.n	800606c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80060a6:	4620      	mov	r0, r4
 80060a8:	f850 3b08 	ldr.w	r3, [r0], #8
 80060ac:	e7de      	b.n	800606c <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80060ae:	f003 f866 	bl	800917e <abort>

080060b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80060b2:	b508      	push	{r3, lr}
 80060b4:	4603      	mov	r3, r0
 80060b6:	2bff      	cmp	r3, #255	; 0xff
 80060b8:	4608      	mov	r0, r1
 80060ba:	d007      	beq.n	80060cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80060bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d00d      	beq.n	80060e0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80060c4:	d804      	bhi.n	80060d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80060c6:	b10b      	cbz	r3, 80060cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d107      	bne.n	80060dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 80060cc:	2000      	movs	r0, #0
 80060ce:	bd08      	pop	{r3, pc}
 80060d0:	2b40      	cmp	r3, #64	; 0x40
 80060d2:	d00d      	beq.n	80060f0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 80060d4:	2b50      	cmp	r3, #80	; 0x50
 80060d6:	d0f9      	beq.n	80060cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80060d8:	2b30      	cmp	r3, #48	; 0x30
 80060da:	d005      	beq.n	80060e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 80060dc:	f003 f84f 	bl	800917e <abort>
 80060e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060e4:	f7fb bfec 	b.w	80020c0 <_Unwind_GetTextRelBase>
 80060e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ec:	f7fb bfec 	b.w	80020c8 <_Unwind_GetDataRelBase>
 80060f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060f4:	f7fb bfd4 	b.w	80020a0 <_Unwind_GetRegionStart>

080060f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 80060f8:	b570      	push	{r4, r5, r6, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	4601      	mov	r1, r0
 80060fe:	4620      	mov	r0, r4
 8006100:	4615      	mov	r5, r2
 8006102:	461e      	mov	r6, r3
 8006104:	f7ff ffd5 	bl	80060b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006108:	4633      	mov	r3, r6
 800610a:	462a      	mov	r2, r5
 800610c:	4601      	mov	r1, r0
 800610e:	4620      	mov	r0, r4
 8006110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006114:	f7ff bf89 	b.w	800602a <_ZL28read_encoded_value_with_basehjPKhPj>

08006118 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006118:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800611a:	460e      	mov	r6, r1
 800611c:	4614      	mov	r4, r2
 800611e:	4605      	mov	r5, r0
 8006120:	b318      	cbz	r0, 800616a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 8006122:	f7fb ffbd 	bl	80020a0 <_Unwind_GetRegionStart>
 8006126:	6020      	str	r0, [r4, #0]
 8006128:	7831      	ldrb	r1, [r6, #0]
 800612a:	1c72      	adds	r2, r6, #1
 800612c:	29ff      	cmp	r1, #255	; 0xff
 800612e:	d01d      	beq.n	800616c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8006130:	1d23      	adds	r3, r4, #4
 8006132:	4628      	mov	r0, r5
 8006134:	f7ff ffe0 	bl	80060f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006138:	4602      	mov	r2, r0
 800613a:	7813      	ldrb	r3, [r2, #0]
 800613c:	1c50      	adds	r0, r2, #1
 800613e:	2bff      	cmp	r3, #255	; 0xff
 8006140:	7523      	strb	r3, [r4, #20]
 8006142:	d015      	beq.n	8006170 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 8006144:	2310      	movs	r3, #16
 8006146:	a901      	add	r1, sp, #4
 8006148:	7523      	strb	r3, [r4, #20]
 800614a:	f7ff ff45 	bl	8005fd8 <_ZL12read_uleb128PKhPm>
 800614e:	9b01      	ldr	r3, [sp, #4]
 8006150:	4403      	add	r3, r0
 8006152:	60e3      	str	r3, [r4, #12]
 8006154:	7803      	ldrb	r3, [r0, #0]
 8006156:	a901      	add	r1, sp, #4
 8006158:	7563      	strb	r3, [r4, #21]
 800615a:	3001      	adds	r0, #1
 800615c:	f7ff ff3c 	bl	8005fd8 <_ZL12read_uleb128PKhPm>
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	4403      	add	r3, r0
 8006164:	6123      	str	r3, [r4, #16]
 8006166:	b002      	add	sp, #8
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	e7dc      	b.n	8006126 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800616c:	6060      	str	r0, [r4, #4]
 800616e:	e7e4      	b.n	800613a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 8006170:	2300      	movs	r3, #0
 8006172:	e7ee      	b.n	8006152 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

08006174 <_Unwind_GetGR>:
 8006174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006176:	ab03      	add	r3, sp, #12
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	2300      	movs	r3, #0
 800617c:	460a      	mov	r2, r1
 800617e:	4619      	mov	r1, r3
 8006180:	f7fb f9f2 	bl	8001568 <_Unwind_VRS_Get>
 8006184:	9803      	ldr	r0, [sp, #12]
 8006186:	b005      	add	sp, #20
 8006188:	f85d fb04 	ldr.w	pc, [sp], #4

0800618c <__gxx_personality_v0>:
 800618c:	2300      	movs	r3, #0
 800618e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006192:	b091      	sub	sp, #68	; 0x44
 8006194:	9304      	str	r3, [sp, #16]
 8006196:	f000 0303 	and.w	r3, r0, #3
 800619a:	2b01      	cmp	r3, #1
 800619c:	4607      	mov	r7, r0
 800619e:	460c      	mov	r4, r1
 80061a0:	4616      	mov	r6, r2
 80061a2:	d011      	beq.n	80061c8 <__gxx_personality_v0+0x3c>
 80061a4:	d303      	bcc.n	80061ae <__gxx_personality_v0+0x22>
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d003      	beq.n	80061b2 <__gxx_personality_v0+0x26>
 80061aa:	f002 ffe8 	bl	800917e <abort>
 80061ae:	0702      	lsls	r2, r0, #28
 80061b0:	d51a      	bpl.n	80061e8 <__gxx_personality_v0+0x5c>
 80061b2:	4631      	mov	r1, r6
 80061b4:	4620      	mov	r0, r4
 80061b6:	f7fb ff5d 	bl	8002074 <__gnu_unwind_frame>
 80061ba:	b118      	cbz	r0, 80061c4 <__gxx_personality_v0+0x38>
 80061bc:	2009      	movs	r0, #9
 80061be:	b011      	add	sp, #68	; 0x44
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	2008      	movs	r0, #8
 80061c6:	e7fa      	b.n	80061be <__gxx_personality_v0+0x32>
 80061c8:	f000 0508 	and.w	r5, r0, #8
 80061cc:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 80061d0:	bb85      	cbnz	r5, 8006234 <__gxx_personality_v0+0xa8>
 80061d2:	f8d1 9020 	ldr.w	r9, [r1, #32]
 80061d6:	4610      	mov	r0, r2
 80061d8:	210d      	movs	r1, #13
 80061da:	f7ff ffcb 	bl	8006174 <_Unwind_GetGR>
 80061de:	4581      	cmp	r9, r0
 80061e0:	f040 8140 	bne.w	8006464 <__gxx_personality_v0+0x2d8>
 80061e4:	2506      	movs	r5, #6
 80061e6:	e000      	b.n	80061ea <__gxx_personality_v0+0x5e>
 80061e8:	2501      	movs	r5, #1
 80061ea:	ab10      	add	r3, sp, #64	; 0x40
 80061ec:	f843 4d2c 	str.w	r4, [r3, #-44]!
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	f007 0708 	and.w	r7, r7, #8
 80061f8:	433d      	orrs	r5, r7
 80061fa:	220c      	movs	r2, #12
 80061fc:	4619      	mov	r1, r3
 80061fe:	4630      	mov	r0, r6
 8006200:	f7fb f9d8 	bl	80015b4 <_Unwind_VRS_Set>
 8006204:	2d06      	cmp	r5, #6
 8006206:	f040 8139 	bne.w	800647c <__gxx_personality_v0+0x2f0>
 800620a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800620e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006210:	f1b8 0f00 	cmp.w	r8, #0
 8006214:	bf0c      	ite	eq
 8006216:	f04f 0a01 	moveq.w	sl, #1
 800621a:	f04f 0a03 	movne.w	sl, #3
 800621e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006220:	f015 0508 	ands.w	r5, r5, #8
 8006224:	f000 80ce 	beq.w	80063c4 <__gxx_personality_v0+0x238>
 8006228:	f1ba 0f01 	cmp.w	sl, #1
 800622c:	f040 80c6 	bne.w	80063bc <__gxx_personality_v0+0x230>
 8006230:	f7ff fdf2 	bl	8005e18 <_ZSt9terminatev>
 8006234:	2502      	movs	r5, #2
 8006236:	e7d8      	b.n	80061ea <__gxx_personality_v0+0x5e>
 8006238:	9a07      	ldr	r2, [sp, #28]
 800623a:	4413      	add	r3, r2
 800623c:	429f      	cmp	r7, r3
 800623e:	f080 8137 	bcs.w	80064b0 <__gxx_personality_v0+0x324>
 8006242:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006246:	f1b8 0f00 	cmp.w	r8, #0
 800624a:	d001      	beq.n	8006250 <__gxx_personality_v0+0xc4>
 800624c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800624e:	4498      	add	r8, r3
 8006250:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006252:	b117      	cbz	r7, 800625a <__gxx_personality_v0+0xce>
 8006254:	1e78      	subs	r0, r7, #1
 8006256:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006258:	4407      	add	r7, r0
 800625a:	f1b8 0f00 	cmp.w	r8, #0
 800625e:	d0a8      	beq.n	80061b2 <__gxx_personality_v0+0x26>
 8006260:	2f00      	cmp	r7, #0
 8006262:	f000 80a1 	beq.w	80063a8 <__gxx_personality_v0+0x21c>
 8006266:	f015 0308 	ands.w	r3, r5, #8
 800626a:	9302      	str	r3, [sp, #8]
 800626c:	d036      	beq.n	80062dc <__gxx_personality_v0+0x150>
 800626e:	2347      	movs	r3, #71	; 0x47
 8006270:	7023      	strb	r3, [r4, #0]
 8006272:	234e      	movs	r3, #78	; 0x4e
 8006274:	7063      	strb	r3, [r4, #1]
 8006276:	2355      	movs	r3, #85	; 0x55
 8006278:	70a3      	strb	r3, [r4, #2]
 800627a:	2343      	movs	r3, #67	; 0x43
 800627c:	70e3      	strb	r3, [r4, #3]
 800627e:	2346      	movs	r3, #70	; 0x46
 8006280:	7123      	strb	r3, [r4, #4]
 8006282:	234f      	movs	r3, #79	; 0x4f
 8006284:	7163      	strb	r3, [r4, #5]
 8006286:	2352      	movs	r3, #82	; 0x52
 8006288:	71a3      	strb	r3, [r4, #6]
 800628a:	2300      	movs	r3, #0
 800628c:	71e3      	strb	r3, [r4, #7]
 800628e:	f04f 0a00 	mov.w	sl, #0
 8006292:	f06f 0b03 	mvn.w	fp, #3
 8006296:	a907      	add	r1, sp, #28
 8006298:	4638      	mov	r0, r7
 800629a:	f7ff feae 	bl	8005ffa <_ZL12read_sleb128PKhPl>
 800629e:	a908      	add	r1, sp, #32
 80062a0:	9003      	str	r0, [sp, #12]
 80062a2:	f7ff feaa 	bl	8005ffa <_ZL12read_sleb128PKhPl>
 80062a6:	9a07      	ldr	r2, [sp, #28]
 80062a8:	2a00      	cmp	r2, #0
 80062aa:	d076      	beq.n	800639a <__gxx_personality_v0+0x20e>
 80062ac:	dd3d      	ble.n	800632a <__gxx_personality_v0+0x19e>
 80062ae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80062b2:	28ff      	cmp	r0, #255	; 0xff
 80062b4:	d035      	beq.n	8006322 <__gxx_personality_v0+0x196>
 80062b6:	f000 0307 	and.w	r3, r0, #7
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	f63f af75 	bhi.w	80061aa <__gxx_personality_v0+0x1e>
 80062c0:	a101      	add	r1, pc, #4	; (adr r1, 80062c8 <__gxx_personality_v0+0x13c>)
 80062c2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	08006327 	.word	0x08006327
 80062cc:	080061ab 	.word	0x080061ab
 80062d0:	080062ef 	.word	0x080062ef
 80062d4:	08006327 	.word	0x08006327
 80062d8:	0800631f 	.word	0x0800631f
 80062dc:	79e3      	ldrb	r3, [r4, #7]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	bf0c      	ite	eq
 80062e2:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80062e6:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	e7cf      	b.n	800628e <__gxx_personality_v0+0x102>
 80062ee:	2702      	movs	r7, #2
 80062f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062f2:	ab09      	add	r3, sp, #36	; 0x24
 80062f4:	fb07 1212 	mls	r2, r7, r2, r1
 80062f8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062fa:	f7ff fe96 	bl	800602a <_ZL28read_encoded_value_with_basehjPKhPj>
 80062fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006300:	b369      	cbz	r1, 800635e <__gxx_personality_v0+0x1d2>
 8006302:	b12c      	cbz	r4, 8006310 <__gxx_personality_v0+0x184>
 8006304:	ab04      	add	r3, sp, #16
 8006306:	2200      	movs	r2, #0
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fdd1 	bl	8005eb0 <__cxa_type_match>
 800630e:	bb30      	cbnz	r0, 800635e <__gxx_personality_v0+0x1d2>
 8006310:	9f08      	ldr	r7, [sp, #32]
 8006312:	2f00      	cmp	r7, #0
 8006314:	d044      	beq.n	80063a0 <__gxx_personality_v0+0x214>
 8006316:	9b03      	ldr	r3, [sp, #12]
 8006318:	443b      	add	r3, r7
 800631a:	461f      	mov	r7, r3
 800631c:	e7bb      	b.n	8006296 <__gxx_personality_v0+0x10a>
 800631e:	2708      	movs	r7, #8
 8006320:	e7e6      	b.n	80062f0 <__gxx_personality_v0+0x164>
 8006322:	2700      	movs	r7, #0
 8006324:	e7e4      	b.n	80062f0 <__gxx_personality_v0+0x164>
 8006326:	2704      	movs	r7, #4
 8006328:	e7e2      	b.n	80062f0 <__gxx_personality_v0+0x164>
 800632a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800632c:	3201      	adds	r2, #1
 800632e:	b36c      	cbz	r4, 800638c <__gxx_personality_v0+0x200>
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	bb5b      	cbnz	r3, 800638c <__gxx_personality_v0+0x200>
 8006334:	fb0b 7202 	mla	r2, fp, r2, r7
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	1f17      	subs	r7, r2, #4
 800633c:	9306      	str	r3, [sp, #24]
 800633e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006342:	b141      	cbz	r1, 8006356 <__gxx_personality_v0+0x1ca>
 8006344:	ab06      	add	r3, sp, #24
 8006346:	2200      	movs	r2, #0
 8006348:	4439      	add	r1, r7
 800634a:	4620      	mov	r0, r4
 800634c:	f7ff fdb0 	bl	8005eb0 <__cxa_type_match>
 8006350:	2800      	cmp	r0, #0
 8006352:	d0f4      	beq.n	800633e <__gxx_personality_v0+0x1b2>
 8006354:	2101      	movs	r1, #1
 8006356:	f081 0101 	eor.w	r1, r1, #1
 800635a:	2900      	cmp	r1, #0
 800635c:	d0d8      	beq.n	8006310 <__gxx_personality_v0+0x184>
 800635e:	f04f 0a03 	mov.w	sl, #3
 8006362:	9f07      	ldr	r7, [sp, #28]
 8006364:	07eb      	lsls	r3, r5, #31
 8006366:	d527      	bpl.n	80063b8 <__gxx_personality_v0+0x22c>
 8006368:	f1ba 0f02 	cmp.w	sl, #2
 800636c:	f43f af21 	beq.w	80061b2 <__gxx_personality_v0+0x26>
 8006370:	210d      	movs	r1, #13
 8006372:	4630      	mov	r0, r6
 8006374:	9d04      	ldr	r5, [sp, #16]
 8006376:	f7ff fefd 	bl	8006174 <_Unwind_GetGR>
 800637a:	6265      	str	r5, [r4, #36]	; 0x24
 800637c:	6220      	str	r0, [r4, #32]
 800637e:	62a7      	str	r7, [r4, #40]	; 0x28
 8006380:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8006384:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8006388:	2006      	movs	r0, #6
 800638a:	e718      	b.n	80061be <__gxx_personality_v0+0x32>
 800638c:	fb0b f202 	mul.w	r2, fp, r2
 8006390:	58b9      	ldr	r1, [r7, r2]
 8006392:	fab1 f181 	clz	r1, r1
 8006396:	0949      	lsrs	r1, r1, #5
 8006398:	e7df      	b.n	800635a <__gxx_personality_v0+0x1ce>
 800639a:	f04f 0a01 	mov.w	sl, #1
 800639e:	e7b7      	b.n	8006310 <__gxx_personality_v0+0x184>
 80063a0:	f1ba 0f00 	cmp.w	sl, #0
 80063a4:	f43f af05 	beq.w	80061b2 <__gxx_personality_v0+0x26>
 80063a8:	f04f 0a02 	mov.w	sl, #2
 80063ac:	e7da      	b.n	8006364 <__gxx_personality_v0+0x1d8>
 80063ae:	2700      	movs	r7, #0
 80063b0:	f04f 0a01 	mov.w	sl, #1
 80063b4:	46b8      	mov	r8, r7
 80063b6:	e7d5      	b.n	8006364 <__gxx_personality_v0+0x1d8>
 80063b8:	4649      	mov	r1, r9
 80063ba:	e731      	b.n	8006220 <__gxx_personality_v0+0x94>
 80063bc:	2f00      	cmp	r7, #0
 80063be:	da23      	bge.n	8006408 <__gxx_personality_v0+0x27c>
 80063c0:	f7ff fd3c 	bl	8005e3c <_ZSt10unexpectedv>
 80063c4:	f1ba 0f01 	cmp.w	sl, #1
 80063c8:	d102      	bne.n	80063d0 <__gxx_personality_v0+0x244>
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f947 	bl	800665e <__cxa_call_terminate>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	da19      	bge.n	8006408 <__gxx_personality_v0+0x27c>
 80063d4:	aa0a      	add	r2, sp, #40	; 0x28
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff fe9e 	bl	8006118 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80063dc:	4631      	mov	r1, r6
 80063de:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80063e2:	f7ff fe66 	bl	80060b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80063e6:	f06f 0303 	mvn.w	r3, #3
 80063ea:	fb07 3203 	mla	r2, r7, r3, r3
 80063ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f0:	900c      	str	r0, [sp, #48]	; 0x30
 80063f2:	4413      	add	r3, r2
 80063f4:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80063f8:	b10a      	cbz	r2, 80063fe <__gxx_personality_v0+0x272>
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7fa      	b.n	80063f4 <__gxx_personality_v0+0x268>
 80063fe:	2204      	movs	r2, #4
 8006400:	62a5      	str	r5, [r4, #40]	; 0x28
 8006402:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006404:	6322      	str	r2, [r4, #48]	; 0x30
 8006406:	6363      	str	r3, [r4, #52]	; 0x34
 8006408:	ab10      	add	r3, sp, #64	; 0x40
 800640a:	f843 4d1c 	str.w	r4, [r3, #-28]!
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	2300      	movs	r3, #0
 8006412:	4630      	mov	r0, r6
 8006414:	461a      	mov	r2, r3
 8006416:	4619      	mov	r1, r3
 8006418:	f7fb f8cc 	bl	80015b4 <_Unwind_VRS_Set>
 800641c:	ab10      	add	r3, sp, #64	; 0x40
 800641e:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	2201      	movs	r2, #1
 8006428:	4619      	mov	r1, r3
 800642a:	4630      	mov	r0, r6
 800642c:	f7fb f8c2 	bl	80015b4 <_Unwind_VRS_Set>
 8006430:	210f      	movs	r1, #15
 8006432:	4630      	mov	r0, r6
 8006434:	f7ff fe9e 	bl	8006174 <_Unwind_GetGR>
 8006438:	f000 0001 	and.w	r0, r0, #1
 800643c:	ab10      	add	r3, sp, #64	; 0x40
 800643e:	ea40 0008 	orr.w	r0, r0, r8
 8006442:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	220f      	movs	r2, #15
 800644c:	4619      	mov	r1, r3
 800644e:	4630      	mov	r0, r6
 8006450:	f7fb f8b0 	bl	80015b4 <_Unwind_VRS_Set>
 8006454:	f1ba 0f02 	cmp.w	sl, #2
 8006458:	d102      	bne.n	8006460 <__gxx_personality_v0+0x2d4>
 800645a:	4620      	mov	r0, r4
 800645c:	f7ff fd86 	bl	8005f6c <__cxa_begin_cleanup>
 8006460:	2007      	movs	r0, #7
 8006462:	e6ac      	b.n	80061be <__gxx_personality_v0+0x32>
 8006464:	aa10      	add	r2, sp, #64	; 0x40
 8006466:	f842 4d2c 	str.w	r4, [r2, #-44]!
 800646a:	9200      	str	r2, [sp, #0]
 800646c:	4643      	mov	r3, r8
 800646e:	220c      	movs	r2, #12
 8006470:	4641      	mov	r1, r8
 8006472:	4630      	mov	r0, r6
 8006474:	f045 0502 	orr.w	r5, r5, #2
 8006478:	f7fb f89c 	bl	80015b4 <_Unwind_VRS_Set>
 800647c:	4630      	mov	r0, r6
 800647e:	f7fb fe15 	bl	80020ac <_Unwind_GetLanguageSpecificData>
 8006482:	4681      	mov	r9, r0
 8006484:	2800      	cmp	r0, #0
 8006486:	f43f ae94 	beq.w	80061b2 <__gxx_personality_v0+0x26>
 800648a:	aa0a      	add	r2, sp, #40	; 0x28
 800648c:	4601      	mov	r1, r0
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff fe42 	bl	8006118 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006494:	4631      	mov	r1, r6
 8006496:	4680      	mov	r8, r0
 8006498:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800649c:	f7ff fe09 	bl	80060b2 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80064a0:	210f      	movs	r1, #15
 80064a2:	900c      	str	r0, [sp, #48]	; 0x30
 80064a4:	4630      	mov	r0, r6
 80064a6:	f7ff fe65 	bl	8006174 <_Unwind_GetGR>
 80064aa:	f020 0001 	bic.w	r0, r0, #1
 80064ae:	1e47      	subs	r7, r0, #1
 80064b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b2:	4598      	cmp	r8, r3
 80064b4:	f4bf af7b 	bcs.w	80063ae <__gxx_personality_v0+0x222>
 80064b8:	4642      	mov	r2, r8
 80064ba:	ab06      	add	r3, sp, #24
 80064bc:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80064c0:	2000      	movs	r0, #0
 80064c2:	f7ff fe19 	bl	80060f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80064c6:	ab07      	add	r3, sp, #28
 80064c8:	4602      	mov	r2, r0
 80064ca:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80064ce:	2000      	movs	r0, #0
 80064d0:	f7ff fe12 	bl	80060f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80064d4:	ab08      	add	r3, sp, #32
 80064d6:	4602      	mov	r2, r0
 80064d8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80064dc:	2000      	movs	r0, #0
 80064de:	f7ff fe0b 	bl	80060f8 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80064e2:	a909      	add	r1, sp, #36	; 0x24
 80064e4:	f7ff fd78 	bl	8005fd8 <_ZL12read_uleb128PKhPm>
 80064e8:	9a06      	ldr	r2, [sp, #24]
 80064ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064ec:	4680      	mov	r8, r0
 80064ee:	4413      	add	r3, r2
 80064f0:	429f      	cmp	r7, r3
 80064f2:	f4bf aea1 	bcs.w	8006238 <__gxx_personality_v0+0xac>
 80064f6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80064fa:	e7d9      	b.n	80064b0 <__gxx_personality_v0+0x324>

080064fc <_ZdlPvj>:
 80064fc:	f7ff bc75 	b.w	8005dea <_ZdlPv>

08006500 <_ZSt15get_new_handlerv>:
 8006500:	4b02      	ldr	r3, [pc, #8]	; (800650c <_ZSt15get_new_handlerv+0xc>)
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	f3bf 8f5b 	dmb	ish
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	200001ac 	.word	0x200001ac

08006510 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006510:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006512:	2310      	movs	r3, #16
 8006514:	2400      	movs	r4, #0
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	6803      	ldr	r3, [r0, #0]
 800651a:	4615      	mov	r5, r2
 800651c:	699e      	ldr	r6, [r3, #24]
 800651e:	9400      	str	r4, [sp, #0]
 8006520:	466b      	mov	r3, sp
 8006522:	f88d 4004 	strb.w	r4, [sp, #4]
 8006526:	9403      	str	r4, [sp, #12]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	47b0      	blx	r6
 800652c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006530:	f003 0306 	and.w	r3, r3, #6
 8006534:	2b06      	cmp	r3, #6
 8006536:	bf09      	itett	eq
 8006538:	2001      	moveq	r0, #1
 800653a:	4620      	movne	r0, r4
 800653c:	9b00      	ldreq	r3, [sp, #0]
 800653e:	602b      	streq	r3, [r5, #0]
 8006540:	b004      	add	sp, #16
 8006542:	bd70      	pop	{r4, r5, r6, pc}

08006544 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	4290      	cmp	r0, r2
 8006548:	bf0c      	ite	eq
 800654a:	2006      	moveq	r0, #6
 800654c:	2001      	movne	r0, #1
 800654e:	4770      	bx	lr

08006550 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006550:	b510      	push	{r4, lr}
 8006552:	4604      	mov	r4, r0
 8006554:	4b02      	ldr	r3, [pc, #8]	; (8006560 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006556:	6003      	str	r3, [r0, #0]
 8006558:	f000 f84b 	bl	80065f2 <_ZNSt9type_infoD1Ev>
 800655c:	4620      	mov	r0, r4
 800655e:	bd10      	pop	{r4, pc}
 8006560:	08009708 	.word	0x08009708

08006564 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
 8006568:	f7ff fff2 	bl	8006550 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800656c:	4620      	mov	r0, r4
 800656e:	2108      	movs	r1, #8
 8006570:	f7ff ffc4 	bl	80064fc <_ZdlPvj>
 8006574:	4620      	mov	r0, r4
 8006576:	bd10      	pop	{r4, pc}

08006578 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4615      	mov	r5, r2
 800657c:	461c      	mov	r4, r3
 800657e:	f000 f83b 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 8006582:	b120      	cbz	r0, 800658e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006584:	2308      	movs	r3, #8
 8006586:	60e3      	str	r3, [r4, #12]
 8006588:	2306      	movs	r3, #6
 800658a:	6025      	str	r5, [r4, #0]
 800658c:	7123      	strb	r3, [r4, #4]
 800658e:	bd38      	pop	{r3, r4, r5, pc}

08006590 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	4616      	mov	r6, r2
 800659a:	461f      	mov	r7, r3
 800659c:	f000 f82c 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 80065a0:	b948      	cbnz	r0, 80065b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80065a2:	2f03      	cmp	r7, #3
 80065a4:	d807      	bhi.n	80065b6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80065a6:	6823      	ldr	r3, [r4, #0]
 80065a8:	4632      	mov	r2, r6
 80065aa:	4629      	mov	r1, r5
 80065ac:	4620      	mov	r0, r4
 80065ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	4718      	bx	r3
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080065ba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80065ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065be:	9e06      	ldr	r6, [sp, #24]
 80065c0:	4698      	mov	r8, r3
 80065c2:	9b08      	ldr	r3, [sp, #32]
 80065c4:	4607      	mov	r7, r0
 80065c6:	429e      	cmp	r6, r3
 80065c8:	4615      	mov	r5, r2
 80065ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80065cc:	d103      	bne.n	80065d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 80065ce:	9907      	ldr	r1, [sp, #28]
 80065d0:	f000 f812 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 80065d4:	b958      	cbnz	r0, 80065ee <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 80065d6:	4641      	mov	r1, r8
 80065d8:	4638      	mov	r0, r7
 80065da:	f000 f80d 	bl	80065f8 <_ZNKSt9type_infoeqERKS_>
 80065de:	b118      	cbz	r0, 80065e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80065e0:	2301      	movs	r3, #1
 80065e2:	6026      	str	r6, [r4, #0]
 80065e4:	7125      	strb	r5, [r4, #4]
 80065e6:	71a3      	strb	r3, [r4, #6]
 80065e8:	2000      	movs	r0, #0
 80065ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ee:	7165      	strb	r5, [r4, #5]
 80065f0:	e7fa      	b.n	80065e8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

080065f2 <_ZNSt9type_infoD1Ev>:
 80065f2:	4770      	bx	lr

080065f4 <_ZNKSt9type_info14__is_pointer_pEv>:
 80065f4:	2000      	movs	r0, #0
 80065f6:	4770      	bx	lr

080065f8 <_ZNKSt9type_infoeqERKS_>:
 80065f8:	4281      	cmp	r1, r0
 80065fa:	b508      	push	{r3, lr}
 80065fc:	d00e      	beq.n	800661c <_ZNKSt9type_infoeqERKS_+0x24>
 80065fe:	6840      	ldr	r0, [r0, #4]
 8006600:	7803      	ldrb	r3, [r0, #0]
 8006602:	2b2a      	cmp	r3, #42	; 0x2a
 8006604:	d00c      	beq.n	8006620 <_ZNKSt9type_infoeqERKS_+0x28>
 8006606:	6849      	ldr	r1, [r1, #4]
 8006608:	780b      	ldrb	r3, [r1, #0]
 800660a:	2b2a      	cmp	r3, #42	; 0x2a
 800660c:	bf08      	it	eq
 800660e:	3101      	addeq	r1, #1
 8006610:	f7f9 fd9e 	bl	8000150 <strcmp>
 8006614:	fab0 f080 	clz	r0, r0
 8006618:	0940      	lsrs	r0, r0, #5
 800661a:	bd08      	pop	{r3, pc}
 800661c:	2001      	movs	r0, #1
 800661e:	bd08      	pop	{r3, pc}
 8006620:	2000      	movs	r0, #0
 8006622:	bd08      	pop	{r3, pc}

08006624 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006624:	7803      	ldrb	r3, [r0, #0]
 8006626:	2b47      	cmp	r3, #71	; 0x47
 8006628:	d117      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800662a:	7843      	ldrb	r3, [r0, #1]
 800662c:	2b4e      	cmp	r3, #78	; 0x4e
 800662e:	d114      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006630:	7883      	ldrb	r3, [r0, #2]
 8006632:	2b55      	cmp	r3, #85	; 0x55
 8006634:	d111      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006636:	78c3      	ldrb	r3, [r0, #3]
 8006638:	2b43      	cmp	r3, #67	; 0x43
 800663a:	d10e      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800663c:	7903      	ldrb	r3, [r0, #4]
 800663e:	2b43      	cmp	r3, #67	; 0x43
 8006640:	d10b      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006642:	7943      	ldrb	r3, [r0, #5]
 8006644:	2b2b      	cmp	r3, #43	; 0x2b
 8006646:	d108      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006648:	7983      	ldrb	r3, [r0, #6]
 800664a:	2b2b      	cmp	r3, #43	; 0x2b
 800664c:	d105      	bne.n	800665a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800664e:	79c0      	ldrb	r0, [r0, #7]
 8006650:	2801      	cmp	r0, #1
 8006652:	bf8c      	ite	hi
 8006654:	2000      	movhi	r0, #0
 8006656:	2001      	movls	r0, #1
 8006658:	4770      	bx	lr
 800665a:	2000      	movs	r0, #0
 800665c:	4770      	bx	lr

0800665e <__cxa_call_terminate>:
 800665e:	b510      	push	{r4, lr}
 8006660:	4604      	mov	r4, r0
 8006662:	b148      	cbz	r0, 8006678 <__cxa_call_terminate+0x1a>
 8006664:	f000 f83b 	bl	80066de <__cxa_begin_catch>
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff ffdb 	bl	8006624 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800666e:	b118      	cbz	r0, 8006678 <__cxa_call_terminate+0x1a>
 8006670:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006674:	f7ff fbc3 	bl	8005dfe <_ZN10__cxxabiv111__terminateEPFvvE>
 8006678:	f7ff fbce 	bl	8005e18 <_ZSt9terminatev>

0800667c <__cxa_call_unexpected>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4602      	mov	r2, r0
 8006680:	f7ff ffd0 	bl	8006624 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006684:	b140      	cbz	r0, 8006698 <__cxa_call_unexpected+0x1c>
 8006686:	2500      	movs	r5, #0
 8006688:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800668c:	4610      	mov	r0, r2
 800668e:	f000 f826 	bl	80066de <__cxa_begin_catch>
 8006692:	b125      	cbz	r5, 800669e <__cxa_call_unexpected+0x22>
 8006694:	f7ff fbd2 	bl	8005e3c <_ZSt10unexpectedv>
 8006698:	4604      	mov	r4, r0
 800669a:	2501      	movs	r5, #1
 800669c:	e7f6      	b.n	800668c <__cxa_call_unexpected+0x10>
 800669e:	4620      	mov	r0, r4
 80066a0:	f7ff fbbf 	bl	8005e22 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080066a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80066a4:	7803      	ldrb	r3, [r0, #0]
 80066a6:	2b47      	cmp	r3, #71	; 0x47
 80066a8:	d117      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066aa:	7843      	ldrb	r3, [r0, #1]
 80066ac:	2b4e      	cmp	r3, #78	; 0x4e
 80066ae:	d114      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066b0:	7883      	ldrb	r3, [r0, #2]
 80066b2:	2b55      	cmp	r3, #85	; 0x55
 80066b4:	d111      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066b6:	78c3      	ldrb	r3, [r0, #3]
 80066b8:	2b43      	cmp	r3, #67	; 0x43
 80066ba:	d10e      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066bc:	7903      	ldrb	r3, [r0, #4]
 80066be:	2b43      	cmp	r3, #67	; 0x43
 80066c0:	d10b      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066c2:	7943      	ldrb	r3, [r0, #5]
 80066c4:	2b2b      	cmp	r3, #43	; 0x2b
 80066c6:	d108      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066c8:	7983      	ldrb	r3, [r0, #6]
 80066ca:	2b2b      	cmp	r3, #43	; 0x2b
 80066cc:	d105      	bne.n	80066da <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80066ce:	79c0      	ldrb	r0, [r0, #7]
 80066d0:	2801      	cmp	r0, #1
 80066d2:	bf8c      	ite	hi
 80066d4:	2000      	movhi	r0, #0
 80066d6:	2001      	movls	r0, #1
 80066d8:	4770      	bx	lr
 80066da:	2000      	movs	r0, #0
 80066dc:	4770      	bx	lr

080066de <__cxa_begin_catch>:
 80066de:	b538      	push	{r3, r4, r5, lr}
 80066e0:	4605      	mov	r5, r0
 80066e2:	f000 f827 	bl	8006734 <__cxa_get_globals>
 80066e6:	4601      	mov	r1, r0
 80066e8:	6802      	ldr	r2, [r0, #0]
 80066ea:	4628      	mov	r0, r5
 80066ec:	f1a5 0420 	sub.w	r4, r5, #32
 80066f0:	f7ff ffd8 	bl	80066a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80066f4:	b930      	cbnz	r0, 8006704 <__cxa_begin_catch+0x26>
 80066f6:	b10a      	cbz	r2, 80066fc <__cxa_begin_catch+0x1e>
 80066f8:	f7ff fb8e 	bl	8005e18 <_ZSt9terminatev>
 80066fc:	600c      	str	r4, [r1, #0]
 80066fe:	4614      	mov	r4, r2
 8006700:	4620      	mov	r0, r4
 8006702:	bd38      	pop	{r3, r4, r5, pc}
 8006704:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006708:	4628      	mov	r0, r5
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb4      	ite	lt
 800670e:	f1c3 0301 	rsblt	r3, r3, #1
 8006712:	3301      	addge	r3, #1
 8006714:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006718:	684b      	ldr	r3, [r1, #4]
 800671a:	42a2      	cmp	r2, r4
 800671c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006720:	604b      	str	r3, [r1, #4]
 8006722:	bf1c      	itt	ne
 8006724:	f845 2c10 	strne.w	r2, [r5, #-16]
 8006728:	600c      	strne	r4, [r1, #0]
 800672a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800672c:	f7fa ff14 	bl	8001558 <_Unwind_Complete>
 8006730:	e7e6      	b.n	8006700 <__cxa_begin_catch+0x22>
	...

08006734 <__cxa_get_globals>:
 8006734:	4800      	ldr	r0, [pc, #0]	; (8006738 <__cxa_get_globals+0x4>)
 8006736:	4770      	bx	lr
 8006738:	200001b0 	.word	0x200001b0

0800673c <cosf>:
 800673c:	b507      	push	{r0, r1, r2, lr}
 800673e:	4a18      	ldr	r2, [pc, #96]	; (80067a0 <cosf+0x64>)
 8006740:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006744:	4293      	cmp	r3, r2
 8006746:	4601      	mov	r1, r0
 8006748:	dc03      	bgt.n	8006752 <cosf+0x16>
 800674a:	2100      	movs	r1, #0
 800674c:	f001 ffcc 	bl	80086e8 <__kernel_cosf>
 8006750:	e004      	b.n	800675c <cosf+0x20>
 8006752:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006756:	db04      	blt.n	8006762 <cosf+0x26>
 8006758:	f7fa fa08 	bl	8000b6c <__aeabi_fsub>
 800675c:	b003      	add	sp, #12
 800675e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006762:	4669      	mov	r1, sp
 8006764:	f001 fe16 	bl	8008394 <__ieee754_rem_pio2f>
 8006768:	f000 0203 	and.w	r2, r0, #3
 800676c:	2a01      	cmp	r2, #1
 800676e:	d005      	beq.n	800677c <cosf+0x40>
 8006770:	2a02      	cmp	r2, #2
 8006772:	d00a      	beq.n	800678a <cosf+0x4e>
 8006774:	b972      	cbnz	r2, 8006794 <cosf+0x58>
 8006776:	9901      	ldr	r1, [sp, #4]
 8006778:	9800      	ldr	r0, [sp, #0]
 800677a:	e7e7      	b.n	800674c <cosf+0x10>
 800677c:	9901      	ldr	r1, [sp, #4]
 800677e:	9800      	ldr	r0, [sp, #0]
 8006780:	f002 fad4 	bl	8008d2c <__kernel_sinf>
 8006784:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006788:	e7e8      	b.n	800675c <cosf+0x20>
 800678a:	9901      	ldr	r1, [sp, #4]
 800678c:	9800      	ldr	r0, [sp, #0]
 800678e:	f001 ffab 	bl	80086e8 <__kernel_cosf>
 8006792:	e7f7      	b.n	8006784 <cosf+0x48>
 8006794:	2201      	movs	r2, #1
 8006796:	9901      	ldr	r1, [sp, #4]
 8006798:	9800      	ldr	r0, [sp, #0]
 800679a:	f002 fac7 	bl	8008d2c <__kernel_sinf>
 800679e:	e7dd      	b.n	800675c <cosf+0x20>
 80067a0:	3f490fd8 	.word	0x3f490fd8

080067a4 <log2f>:
 80067a4:	b508      	push	{r3, lr}
 80067a6:	f000 f9a1 	bl	8006aec <logf>
 80067aa:	4902      	ldr	r1, [pc, #8]	; (80067b4 <log2f+0x10>)
 80067ac:	f7fa fb9c 	bl	8000ee8 <__aeabi_fdiv>
 80067b0:	bd08      	pop	{r3, pc}
 80067b2:	bf00      	nop
 80067b4:	3f317218 	.word	0x3f317218

080067b8 <sinf>:
 80067b8:	b507      	push	{r0, r1, r2, lr}
 80067ba:	4a19      	ldr	r2, [pc, #100]	; (8006820 <sinf+0x68>)
 80067bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80067c0:	4293      	cmp	r3, r2
 80067c2:	4601      	mov	r1, r0
 80067c4:	dc04      	bgt.n	80067d0 <sinf+0x18>
 80067c6:	2200      	movs	r2, #0
 80067c8:	2100      	movs	r1, #0
 80067ca:	f002 faaf 	bl	8008d2c <__kernel_sinf>
 80067ce:	e004      	b.n	80067da <sinf+0x22>
 80067d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80067d4:	db04      	blt.n	80067e0 <sinf+0x28>
 80067d6:	f7fa f9c9 	bl	8000b6c <__aeabi_fsub>
 80067da:	b003      	add	sp, #12
 80067dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80067e0:	4669      	mov	r1, sp
 80067e2:	f001 fdd7 	bl	8008394 <__ieee754_rem_pio2f>
 80067e6:	f000 0003 	and.w	r0, r0, #3
 80067ea:	2801      	cmp	r0, #1
 80067ec:	d006      	beq.n	80067fc <sinf+0x44>
 80067ee:	2802      	cmp	r0, #2
 80067f0:	d009      	beq.n	8006806 <sinf+0x4e>
 80067f2:	b980      	cbnz	r0, 8006816 <sinf+0x5e>
 80067f4:	2201      	movs	r2, #1
 80067f6:	9901      	ldr	r1, [sp, #4]
 80067f8:	9800      	ldr	r0, [sp, #0]
 80067fa:	e7e6      	b.n	80067ca <sinf+0x12>
 80067fc:	9901      	ldr	r1, [sp, #4]
 80067fe:	9800      	ldr	r0, [sp, #0]
 8006800:	f001 ff72 	bl	80086e8 <__kernel_cosf>
 8006804:	e7e9      	b.n	80067da <sinf+0x22>
 8006806:	2201      	movs	r2, #1
 8006808:	9901      	ldr	r1, [sp, #4]
 800680a:	9800      	ldr	r0, [sp, #0]
 800680c:	f002 fa8e 	bl	8008d2c <__kernel_sinf>
 8006810:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006814:	e7e1      	b.n	80067da <sinf+0x22>
 8006816:	9901      	ldr	r1, [sp, #4]
 8006818:	9800      	ldr	r0, [sp, #0]
 800681a:	f001 ff65 	bl	80086e8 <__kernel_cosf>
 800681e:	e7f7      	b.n	8006810 <sinf+0x58>
 8006820:	3f490fd8 	.word	0x3f490fd8

08006824 <pow>:
 8006824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006828:	b08f      	sub	sp, #60	; 0x3c
 800682a:	461d      	mov	r5, r3
 800682c:	4680      	mov	r8, r0
 800682e:	4689      	mov	r9, r1
 8006830:	4614      	mov	r4, r2
 8006832:	f000 fb85 	bl	8006f40 <__ieee754_pow>
 8006836:	4fa5      	ldr	r7, [pc, #660]	; (8006acc <pow+0x2a8>)
 8006838:	e9cd 0100 	strd	r0, r1, [sp]
 800683c:	f997 3000 	ldrsb.w	r3, [r7]
 8006840:	463e      	mov	r6, r7
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	3301      	adds	r3, #1
 8006846:	d05f      	beq.n	8006908 <pow+0xe4>
 8006848:	4622      	mov	r2, r4
 800684a:	462b      	mov	r3, r5
 800684c:	4620      	mov	r0, r4
 800684e:	4629      	mov	r1, r5
 8006850:	f7fa f8da 	bl	8000a08 <__aeabi_dcmpun>
 8006854:	4682      	mov	sl, r0
 8006856:	2800      	cmp	r0, #0
 8006858:	d156      	bne.n	8006908 <pow+0xe4>
 800685a:	4642      	mov	r2, r8
 800685c:	464b      	mov	r3, r9
 800685e:	4640      	mov	r0, r8
 8006860:	4649      	mov	r1, r9
 8006862:	f7fa f8d1 	bl	8000a08 <__aeabi_dcmpun>
 8006866:	9003      	str	r0, [sp, #12]
 8006868:	b1e8      	cbz	r0, 80068a6 <pow+0x82>
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	4620      	mov	r0, r4
 8006870:	4629      	mov	r1, r5
 8006872:	f7fa f897 	bl	80009a4 <__aeabi_dcmpeq>
 8006876:	2800      	cmp	r0, #0
 8006878:	d046      	beq.n	8006908 <pow+0xe4>
 800687a:	2301      	movs	r3, #1
 800687c:	2200      	movs	r2, #0
 800687e:	9304      	str	r3, [sp, #16]
 8006880:	4b93      	ldr	r3, [pc, #588]	; (8006ad0 <pow+0x2ac>)
 8006882:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	4b92      	ldr	r3, [pc, #584]	; (8006ad4 <pow+0x2b0>)
 800688a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800688e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006892:	9b02      	ldr	r3, [sp, #8]
 8006894:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d031      	beq.n	8006900 <pow+0xdc>
 800689c:	a804      	add	r0, sp, #16
 800689e:	f002 fac4 	bl	8008e2a <matherr>
 80068a2:	bb38      	cbnz	r0, 80068f4 <pow+0xd0>
 80068a4:	e058      	b.n	8006958 <pow+0x134>
 80068a6:	f04f 0a00 	mov.w	sl, #0
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	4652      	mov	r2, sl
 80068b0:	465b      	mov	r3, fp
 80068b2:	4640      	mov	r0, r8
 80068b4:	4649      	mov	r1, r9
 80068b6:	f7fa f875 	bl	80009a4 <__aeabi_dcmpeq>
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d051      	beq.n	8006962 <pow+0x13e>
 80068be:	4652      	mov	r2, sl
 80068c0:	465b      	mov	r3, fp
 80068c2:	4620      	mov	r0, r4
 80068c4:	4629      	mov	r1, r5
 80068c6:	f7fa f86d 	bl	80009a4 <__aeabi_dcmpeq>
 80068ca:	4606      	mov	r6, r0
 80068cc:	b308      	cbz	r0, 8006912 <pow+0xee>
 80068ce:	2301      	movs	r3, #1
 80068d0:	9304      	str	r3, [sp, #16]
 80068d2:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <pow+0x2ac>)
 80068d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80068d8:	9305      	str	r3, [sp, #20]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80068e0:	930c      	str	r3, [sp, #48]	; 0x30
 80068e2:	9b02      	ldr	r3, [sp, #8]
 80068e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0d7      	beq.n	800689c <pow+0x78>
 80068ec:	2200      	movs	r2, #0
 80068ee:	4b79      	ldr	r3, [pc, #484]	; (8006ad4 <pow+0x2b0>)
 80068f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80068f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068f6:	b11b      	cbz	r3, 8006900 <pow+0xdc>
 80068f8:	f002 fc5e 	bl	80091b8 <__errno>
 80068fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068fe:	6003      	str	r3, [r0, #0]
 8006900:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006904:	e88d 0018 	stmia.w	sp, {r3, r4}
 8006908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800690c:	b00f      	add	sp, #60	; 0x3c
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006912:	4620      	mov	r0, r4
 8006914:	4629      	mov	r1, r5
 8006916:	f002 fa82 	bl	8008e1e <finite>
 800691a:	2800      	cmp	r0, #0
 800691c:	d0f4      	beq.n	8006908 <pow+0xe4>
 800691e:	4652      	mov	r2, sl
 8006920:	465b      	mov	r3, fp
 8006922:	4620      	mov	r0, r4
 8006924:	4629      	mov	r1, r5
 8006926:	f7fa f847 	bl	80009b8 <__aeabi_dcmplt>
 800692a:	2800      	cmp	r0, #0
 800692c:	d0ec      	beq.n	8006908 <pow+0xe4>
 800692e:	2301      	movs	r3, #1
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	4b67      	ldr	r3, [pc, #412]	; (8006ad0 <pow+0x2ac>)
 8006934:	960c      	str	r6, [sp, #48]	; 0x30
 8006936:	9305      	str	r3, [sp, #20]
 8006938:	f997 3000 	ldrsb.w	r3, [r7]
 800693c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006940:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006944:	b913      	cbnz	r3, 800694c <pow+0x128>
 8006946:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800694a:	e7a7      	b.n	800689c <pow+0x78>
 800694c:	2000      	movs	r0, #0
 800694e:	4962      	ldr	r1, [pc, #392]	; (8006ad8 <pow+0x2b4>)
 8006950:	2b02      	cmp	r3, #2
 8006952:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006956:	d1a1      	bne.n	800689c <pow+0x78>
 8006958:	f002 fc2e 	bl	80091b8 <__errno>
 800695c:	2321      	movs	r3, #33	; 0x21
 800695e:	6003      	str	r3, [r0, #0]
 8006960:	e7c8      	b.n	80068f4 <pow+0xd0>
 8006962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006966:	f002 fa5a 	bl	8008e1e <finite>
 800696a:	9002      	str	r0, [sp, #8]
 800696c:	2800      	cmp	r0, #0
 800696e:	d17f      	bne.n	8006a70 <pow+0x24c>
 8006970:	4640      	mov	r0, r8
 8006972:	4649      	mov	r1, r9
 8006974:	f002 fa53 	bl	8008e1e <finite>
 8006978:	2800      	cmp	r0, #0
 800697a:	d079      	beq.n	8006a70 <pow+0x24c>
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f002 fa4d 	bl	8008e1e <finite>
 8006984:	2800      	cmp	r0, #0
 8006986:	d073      	beq.n	8006a70 <pow+0x24c>
 8006988:	e9dd 2300 	ldrd	r2, r3, [sp]
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fa f83a 	bl	8000a08 <__aeabi_dcmpun>
 8006994:	f997 7000 	ldrsb.w	r7, [r7]
 8006998:	4b4d      	ldr	r3, [pc, #308]	; (8006ad0 <pow+0x2ac>)
 800699a:	b1a0      	cbz	r0, 80069c6 <pow+0x1a2>
 800699c:	2201      	movs	r2, #1
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	9b02      	ldr	r3, [sp, #8]
 80069a2:	9204      	str	r2, [sp, #16]
 80069a4:	930c      	str	r3, [sp, #48]	; 0x30
 80069a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80069aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	d0c9      	beq.n	8006946 <pow+0x122>
 80069b2:	4652      	mov	r2, sl
 80069b4:	465b      	mov	r3, fp
 80069b6:	4650      	mov	r0, sl
 80069b8:	4659      	mov	r1, fp
 80069ba:	f7f9 feb5 	bl	8000728 <__aeabi_ddiv>
 80069be:	2f02      	cmp	r7, #2
 80069c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80069c4:	e7c7      	b.n	8006956 <pow+0x132>
 80069c6:	2203      	movs	r2, #3
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	9204      	str	r2, [sp, #16]
 80069cc:	900c      	str	r0, [sp, #48]	; 0x30
 80069ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80069d2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80069d6:	bb57      	cbnz	r7, 8006a2e <pow+0x20a>
 80069d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <pow+0x2b8>)
 80069de:	4640      	mov	r0, r8
 80069e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069e4:	4649      	mov	r1, r9
 80069e6:	4652      	mov	r2, sl
 80069e8:	465b      	mov	r3, fp
 80069ea:	f7f9 ffe5 	bl	80009b8 <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d064      	beq.n	8006abc <pow+0x298>
 80069f2:	2200      	movs	r2, #0
 80069f4:	4b3a      	ldr	r3, [pc, #232]	; (8006ae0 <pow+0x2bc>)
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fd6b 	bl	80004d4 <__aeabi_dmul>
 80069fe:	4604      	mov	r4, r0
 8006a00:	460d      	mov	r5, r1
 8006a02:	f002 fa1b 	bl	8008e3c <rint>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	f7f9 ffc9 	bl	80009a4 <__aeabi_dcmpeq>
 8006a12:	b920      	cbnz	r0, 8006a1e <pow+0x1fa>
 8006a14:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a18:	4b32      	ldr	r3, [pc, #200]	; (8006ae4 <pow+0x2c0>)
 8006a1a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a1e:	f996 3000 	ldrsb.w	r3, [r6]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d14a      	bne.n	8006abc <pow+0x298>
 8006a26:	f002 fbc7 	bl	80091b8 <__errno>
 8006a2a:	2322      	movs	r3, #34	; 0x22
 8006a2c:	e797      	b.n	800695e <pow+0x13a>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4b2d      	ldr	r3, [pc, #180]	; (8006ae8 <pow+0x2c4>)
 8006a32:	4640      	mov	r0, r8
 8006a34:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a38:	4649      	mov	r1, r9
 8006a3a:	4652      	mov	r2, sl
 8006a3c:	465b      	mov	r3, fp
 8006a3e:	f7f9 ffbb 	bl	80009b8 <__aeabi_dcmplt>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d0eb      	beq.n	8006a1e <pow+0x1fa>
 8006a46:	2200      	movs	r2, #0
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <pow+0x2bc>)
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	f7f9 fd41 	bl	80004d4 <__aeabi_dmul>
 8006a52:	4604      	mov	r4, r0
 8006a54:	460d      	mov	r5, r1
 8006a56:	f002 f9f1 	bl	8008e3c <rint>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4629      	mov	r1, r5
 8006a62:	f7f9 ff9f 	bl	80009a4 <__aeabi_dcmpeq>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d1d9      	bne.n	8006a1e <pow+0x1fa>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ad8 <pow+0x2b4>)
 8006a6e:	e7d4      	b.n	8006a1a <pow+0x1f6>
 8006a70:	2200      	movs	r2, #0
 8006a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a76:	2300      	movs	r3, #0
 8006a78:	f7f9 ff94 	bl	80009a4 <__aeabi_dcmpeq>
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	f43f af43 	beq.w	8006908 <pow+0xe4>
 8006a82:	4640      	mov	r0, r8
 8006a84:	4649      	mov	r1, r9
 8006a86:	f002 f9ca 	bl	8008e1e <finite>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f43f af3c 	beq.w	8006908 <pow+0xe4>
 8006a90:	4620      	mov	r0, r4
 8006a92:	4629      	mov	r1, r5
 8006a94:	f002 f9c3 	bl	8008e1e <finite>
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	f43f af35 	beq.w	8006908 <pow+0xe4>
 8006a9e:	2304      	movs	r3, #4
 8006aa0:	9304      	str	r3, [sp, #16]
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <pow+0x2ac>)
 8006aa4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2400      	movs	r4, #0
 8006aae:	930c      	str	r3, [sp, #48]	; 0x30
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006ab6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8006aba:	e7b0      	b.n	8006a1e <pow+0x1fa>
 8006abc:	a804      	add	r0, sp, #16
 8006abe:	f002 f9b4 	bl	8008e2a <matherr>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f47f af16 	bne.w	80068f4 <pow+0xd0>
 8006ac8:	e7ad      	b.n	8006a26 <pow+0x202>
 8006aca:	bf00      	nop
 8006acc:	2000001c 	.word	0x2000001c
 8006ad0:	08009798 	.word	0x08009798
 8006ad4:	3ff00000 	.word	0x3ff00000
 8006ad8:	fff00000 	.word	0xfff00000
 8006adc:	47efffff 	.word	0x47efffff
 8006ae0:	3fe00000 	.word	0x3fe00000
 8006ae4:	c7efffff 	.word	0xc7efffff
 8006ae8:	7ff00000 	.word	0x7ff00000

08006aec <logf>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	b08a      	sub	sp, #40	; 0x28
 8006af0:	4604      	mov	r4, r0
 8006af2:	f000 ffc3 	bl	8007a7c <__ieee754_logf>
 8006af6:	4b31      	ldr	r3, [pc, #196]	; (8006bbc <logf+0xd0>)
 8006af8:	4606      	mov	r6, r0
 8006afa:	f993 5000 	ldrsb.w	r5, [r3]
 8006afe:	1c6b      	adds	r3, r5, #1
 8006b00:	d059      	beq.n	8006bb6 <logf+0xca>
 8006b02:	4621      	mov	r1, r4
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7fa fb01 	bl	800110c <__aeabi_fcmpun>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d153      	bne.n	8006bb6 <logf+0xca>
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fa faf1 	bl	80010f8 <__aeabi_fcmpgt>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d14d      	bne.n	8006bb6 <logf+0xca>
 8006b1a:	4b29      	ldr	r3, [pc, #164]	; (8006bc0 <logf+0xd4>)
 8006b1c:	9008      	str	r0, [sp, #32]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	f7f9 fc83 	bl	800042c <__aeabi_f2d>
 8006b26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b2e:	b995      	cbnz	r5, 8006b56 <logf+0x6a>
 8006b30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006b34:	4b23      	ldr	r3, [pc, #140]	; (8006bc4 <logf+0xd8>)
 8006b36:	2100      	movs	r1, #0
 8006b38:	4620      	mov	r0, r4
 8006b3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b3e:	f7fa fab3 	bl	80010a8 <__aeabi_fcmpeq>
 8006b42:	bb30      	cbnz	r0, 8006b92 <logf+0xa6>
 8006b44:	2301      	movs	r3, #1
 8006b46:	2d02      	cmp	r5, #2
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	d117      	bne.n	8006b7c <logf+0x90>
 8006b4c:	f002 fb34 	bl	80091b8 <__errno>
 8006b50:	2321      	movs	r3, #33	; 0x21
 8006b52:	6003      	str	r3, [r0, #0]
 8006b54:	e017      	b.n	8006b86 <logf+0x9a>
 8006b56:	2200      	movs	r2, #0
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <logf+0xdc>)
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b62:	f7fa faa1 	bl	80010a8 <__aeabi_fcmpeq>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d0ec      	beq.n	8006b44 <logf+0x58>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	d111      	bne.n	8006b96 <logf+0xaa>
 8006b72:	f002 fb21 	bl	80091b8 <__errno>
 8006b76:	2322      	movs	r3, #34	; 0x22
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	e011      	b.n	8006ba0 <logf+0xb4>
 8006b7c:	4668      	mov	r0, sp
 8006b7e:	f002 f954 	bl	8008e2a <matherr>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0e2      	beq.n	8006b4c <logf+0x60>
 8006b86:	4811      	ldr	r0, [pc, #68]	; (8006bcc <logf+0xe0>)
 8006b88:	f002 f952 	bl	8008e30 <nan>
 8006b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b90:	e006      	b.n	8006ba0 <logf+0xb4>
 8006b92:	2302      	movs	r3, #2
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4668      	mov	r0, sp
 8006b98:	f002 f947 	bl	8008e2a <matherr>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0e8      	beq.n	8006b72 <logf+0x86>
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	b11b      	cbz	r3, 8006bac <logf+0xc0>
 8006ba4:	f002 fb08 	bl	80091b8 <__errno>
 8006ba8:	9b08      	ldr	r3, [sp, #32]
 8006baa:	6003      	str	r3, [r0, #0]
 8006bac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb0:	f7f9 ff88 	bl	8000ac4 <__aeabi_d2f>
 8006bb4:	4606      	mov	r6, r0
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	b00a      	add	sp, #40	; 0x28
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	2000001c 	.word	0x2000001c
 8006bc0:	0800979c 	.word	0x0800979c
 8006bc4:	c7efffff 	.word	0xc7efffff
 8006bc8:	fff00000 	.word	0xfff00000
 8006bcc:	080097a0 	.word	0x080097a0

08006bd0 <powf>:
 8006bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	b08b      	sub	sp, #44	; 0x2c
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	f001 f88f 	bl	8007cfc <__ieee754_powf>
 8006bde:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8006ea4 <powf+0x2d4>
 8006be2:	4606      	mov	r6, r0
 8006be4:	f998 9000 	ldrsb.w	r9, [r8]
 8006be8:	4647      	mov	r7, r8
 8006bea:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006bee:	d060      	beq.n	8006cb2 <powf+0xe2>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f7fa fa8a 	bl	800110c <__aeabi_fcmpun>
 8006bf8:	4683      	mov	fp, r0
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	d159      	bne.n	8006cb2 <powf+0xe2>
 8006bfe:	4629      	mov	r1, r5
 8006c00:	4628      	mov	r0, r5
 8006c02:	f7fa fa83 	bl	800110c <__aeabi_fcmpun>
 8006c06:	2100      	movs	r1, #0
 8006c08:	4682      	mov	sl, r0
 8006c0a:	b300      	cbz	r0, 8006c4e <powf+0x7e>
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f7fa fa4b 	bl	80010a8 <__aeabi_fcmpeq>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d04d      	beq.n	8006cb2 <powf+0xe2>
 8006c16:	2301      	movs	r3, #1
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4b9c      	ldr	r3, [pc, #624]	; (8006e8c <powf+0x2bc>)
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	9301      	str	r3, [sp, #4]
 8006c20:	f8cd b020 	str.w	fp, [sp, #32]
 8006c24:	f7f9 fc02 	bl	800042c <__aeabi_f2d>
 8006c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f7f9 fbfd 	bl	800042c <__aeabi_f2d>
 8006c32:	2200      	movs	r2, #0
 8006c34:	4b96      	ldr	r3, [pc, #600]	; (8006e90 <powf+0x2c0>)
 8006c36:	f1b9 0f02 	cmp.w	r9, #2
 8006c3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c42:	d031      	beq.n	8006ca8 <powf+0xd8>
 8006c44:	4668      	mov	r0, sp
 8006c46:	f002 f8f0 	bl	8008e2a <matherr>
 8006c4a:	bb38      	cbnz	r0, 8006c9c <powf+0xcc>
 8006c4c:	e05d      	b.n	8006d0a <powf+0x13a>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7fa fa2a 	bl	80010a8 <__aeabi_fcmpeq>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d05d      	beq.n	8006d14 <powf+0x144>
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f7fa fa24 	bl	80010a8 <__aeabi_fcmpeq>
 8006c60:	4607      	mov	r7, r0
 8006c62:	2800      	cmp	r0, #0
 8006c64:	d029      	beq.n	8006cba <powf+0xea>
 8006c66:	2301      	movs	r3, #1
 8006c68:	9300      	str	r3, [sp, #0]
 8006c6a:	4b88      	ldr	r3, [pc, #544]	; (8006e8c <powf+0x2bc>)
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	9301      	str	r3, [sp, #4]
 8006c70:	f8cd a020 	str.w	sl, [sp, #32]
 8006c74:	f7f9 fbda 	bl	800042c <__aeabi_f2d>
 8006c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7f9 fbd5 	bl	800042c <__aeabi_f2d>
 8006c82:	2200      	movs	r2, #0
 8006c84:	2300      	movs	r3, #0
 8006c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c8e:	f1b9 0f00 	cmp.w	r9, #0
 8006c92:	d0d7      	beq.n	8006c44 <powf+0x74>
 8006c94:	2200      	movs	r2, #0
 8006c96:	4b7e      	ldr	r3, [pc, #504]	; (8006e90 <powf+0x2c0>)
 8006c98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c9c:	9b08      	ldr	r3, [sp, #32]
 8006c9e:	b11b      	cbz	r3, 8006ca8 <powf+0xd8>
 8006ca0:	f002 fa8a 	bl	80091b8 <__errno>
 8006ca4:	9b08      	ldr	r3, [sp, #32]
 8006ca6:	6003      	str	r3, [r0, #0]
 8006ca8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cac:	f7f9 ff0a 	bl	8000ac4 <__aeabi_d2f>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	b00b      	add	sp, #44	; 0x2c
 8006cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f002 f9b9 	bl	8009032 <finitef>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d0f6      	beq.n	8006cb2 <powf+0xe2>
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	f7fa f9f8 	bl	80010bc <__aeabi_fcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d0f0      	beq.n	8006cb2 <powf+0xe2>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4b6d      	ldr	r3, [pc, #436]	; (8006e8c <powf+0x2bc>)
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	9301      	str	r3, [sp, #4]
 8006cda:	9708      	str	r7, [sp, #32]
 8006cdc:	f7f9 fba6 	bl	800042c <__aeabi_f2d>
 8006ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f7f9 fba1 	bl	800042c <__aeabi_f2d>
 8006cea:	f998 3000 	ldrsb.w	r3, [r8]
 8006cee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cf2:	b923      	cbnz	r3, 8006cfe <powf+0x12e>
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cfc:	e7a2      	b.n	8006c44 <powf+0x74>
 8006cfe:	2000      	movs	r0, #0
 8006d00:	4964      	ldr	r1, [pc, #400]	; (8006e94 <powf+0x2c4>)
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d08:	d19c      	bne.n	8006c44 <powf+0x74>
 8006d0a:	f002 fa55 	bl	80091b8 <__errno>
 8006d0e:	2321      	movs	r3, #33	; 0x21
 8006d10:	6003      	str	r3, [r0, #0]
 8006d12:	e7c3      	b.n	8006c9c <powf+0xcc>
 8006d14:	4630      	mov	r0, r6
 8006d16:	f002 f98c 	bl	8009032 <finitef>
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	f040 8087 	bne.w	8006e30 <powf+0x260>
 8006d22:	4628      	mov	r0, r5
 8006d24:	f002 f985 	bl	8009032 <finitef>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f000 8081 	beq.w	8006e30 <powf+0x260>
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f002 f97f 	bl	8009032 <finitef>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d07b      	beq.n	8006e30 <powf+0x260>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7fa f9e6 	bl	800110c <__aeabi_fcmpun>
 8006d40:	f997 6000 	ldrsb.w	r6, [r7]
 8006d44:	4b51      	ldr	r3, [pc, #324]	; (8006e8c <powf+0x2bc>)
 8006d46:	b1d0      	cbz	r0, 8006d7e <powf+0x1ae>
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006d50:	f8cd 8020 	str.w	r8, [sp, #32]
 8006d54:	f7f9 fb6a 	bl	800042c <__aeabi_f2d>
 8006d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7f9 fb65 	bl	800042c <__aeabi_f2d>
 8006d62:	2200      	movs	r2, #0
 8006d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2e00      	cmp	r6, #0
 8006d6c:	d0c4      	beq.n	8006cf8 <powf+0x128>
 8006d6e:	4610      	mov	r0, r2
 8006d70:	4619      	mov	r1, r3
 8006d72:	f7f9 fcd9 	bl	8000728 <__aeabi_ddiv>
 8006d76:	2e02      	cmp	r6, #2
 8006d78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006d7c:	e7c4      	b.n	8006d08 <powf+0x138>
 8006d7e:	2203      	movs	r2, #3
 8006d80:	9008      	str	r0, [sp, #32]
 8006d82:	4628      	mov	r0, r5
 8006d84:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006d88:	f7f9 fb50 	bl	800042c <__aeabi_f2d>
 8006d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d90:	4620      	mov	r0, r4
 8006d92:	f7f9 fb4b 	bl	800042c <__aeabi_f2d>
 8006d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d9a:	bb4e      	cbnz	r6, 8006df0 <powf+0x220>
 8006d9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006da0:	4b3d      	ldr	r3, [pc, #244]	; (8006e98 <powf+0x2c8>)
 8006da2:	2100      	movs	r1, #0
 8006da4:	4628      	mov	r0, r5
 8006da6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006daa:	f7fa f987 	bl	80010bc <__aeabi_fcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d064      	beq.n	8006e7c <powf+0x2ac>
 8006db2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7f9 ffe2 	bl	8000d80 <__aeabi_fmul>
 8006dbc:	f7f9 fb36 	bl	800042c <__aeabi_f2d>
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	460d      	mov	r5, r1
 8006dc4:	f002 f83a 	bl	8008e3c <rint>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fde8 	bl	80009a4 <__aeabi_dcmpeq>
 8006dd4:	b920      	cbnz	r0, 8006de0 <powf+0x210>
 8006dd6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006dda:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <powf+0x2cc>)
 8006ddc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006de0:	f997 3000 	ldrsb.w	r3, [r7]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d149      	bne.n	8006e7c <powf+0x2ac>
 8006de8:	f002 f9e6 	bl	80091b8 <__errno>
 8006dec:	2322      	movs	r3, #34	; 0x22
 8006dee:	e78f      	b.n	8006d10 <powf+0x140>
 8006df0:	2200      	movs	r2, #0
 8006df2:	4b2b      	ldr	r3, [pc, #172]	; (8006ea0 <powf+0x2d0>)
 8006df4:	2100      	movs	r1, #0
 8006df6:	4628      	mov	r0, r5
 8006df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006dfc:	f7fa f95e 	bl	80010bc <__aeabi_fcmplt>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d0ed      	beq.n	8006de0 <powf+0x210>
 8006e04:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7f9 ffb9 	bl	8000d80 <__aeabi_fmul>
 8006e0e:	f7f9 fb0d 	bl	800042c <__aeabi_f2d>
 8006e12:	4604      	mov	r4, r0
 8006e14:	460d      	mov	r5, r1
 8006e16:	f002 f811 	bl	8008e3c <rint>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fdbf 	bl	80009a4 <__aeabi_dcmpeq>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d1da      	bne.n	8006de0 <powf+0x210>
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <powf+0x2c4>)
 8006e2e:	e7d5      	b.n	8006ddc <powf+0x20c>
 8006e30:	2100      	movs	r1, #0
 8006e32:	4630      	mov	r0, r6
 8006e34:	f7fa f938 	bl	80010a8 <__aeabi_fcmpeq>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f43f af3a 	beq.w	8006cb2 <powf+0xe2>
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f002 f8f7 	bl	8009032 <finitef>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f43f af34 	beq.w	8006cb2 <powf+0xe2>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f002 f8f1 	bl	8009032 <finitef>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	f43f af2e 	beq.w	8006cb2 <powf+0xe2>
 8006e56:	2304      	movs	r3, #4
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <powf+0x2bc>)
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	2300      	movs	r3, #0
 8006e62:	9308      	str	r3, [sp, #32]
 8006e64:	f7f9 fae2 	bl	800042c <__aeabi_f2d>
 8006e68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7f9 fadd 	bl	800042c <__aeabi_f2d>
 8006e72:	2200      	movs	r2, #0
 8006e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e7af      	b.n	8006ddc <powf+0x20c>
 8006e7c:	4668      	mov	r0, sp
 8006e7e:	f001 ffd4 	bl	8008e2a <matherr>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	f47f af0a 	bne.w	8006c9c <powf+0xcc>
 8006e88:	e7ae      	b.n	8006de8 <powf+0x218>
 8006e8a:	bf00      	nop
 8006e8c:	080097a1 	.word	0x080097a1
 8006e90:	3ff00000 	.word	0x3ff00000
 8006e94:	fff00000 	.word	0xfff00000
 8006e98:	47efffff 	.word	0x47efffff
 8006e9c:	c7efffff 	.word	0xc7efffff
 8006ea0:	7ff00000 	.word	0x7ff00000
 8006ea4:	2000001c 	.word	0x2000001c

08006ea8 <sqrtf>:
 8006ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eaa:	b08b      	sub	sp, #44	; 0x2c
 8006eac:	4604      	mov	r4, r0
 8006eae:	f001 fbc9 	bl	8008644 <__ieee754_sqrtf>
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <sqrtf+0x8c>)
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	f993 5000 	ldrsb.w	r5, [r3]
 8006eba:	1c6b      	adds	r3, r5, #1
 8006ebc:	d02a      	beq.n	8006f14 <sqrtf+0x6c>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7fa f923 	bl	800110c <__aeabi_fcmpun>
 8006ec6:	4607      	mov	r7, r0
 8006ec8:	bb20      	cbnz	r0, 8006f14 <sqrtf+0x6c>
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f7fa f8f5 	bl	80010bc <__aeabi_fcmplt>
 8006ed2:	b1f8      	cbz	r0, 8006f14 <sqrtf+0x6c>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	4b17      	ldr	r3, [pc, #92]	; (8006f38 <sqrtf+0x90>)
 8006eda:	4620      	mov	r0, r4
 8006edc:	9301      	str	r3, [sp, #4]
 8006ede:	9708      	str	r7, [sp, #32]
 8006ee0:	f7f9 faa4 	bl	800042c <__aeabi_f2d>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	b99d      	cbnz	r5, 8006f1a <sqrtf+0x72>
 8006ef2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ef6:	4668      	mov	r0, sp
 8006ef8:	f001 ff97 	bl	8008e2a <matherr>
 8006efc:	b1a8      	cbz	r0, 8006f2a <sqrtf+0x82>
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	b11b      	cbz	r3, 8006f0a <sqrtf+0x62>
 8006f02:	f002 f959 	bl	80091b8 <__errno>
 8006f06:	9b08      	ldr	r3, [sp, #32]
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0e:	f7f9 fdd9 	bl	8000ac4 <__aeabi_d2f>
 8006f12:	4606      	mov	r6, r0
 8006f14:	4630      	mov	r0, r6
 8006f16:	b00b      	add	sp, #44	; 0x2c
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	f7f9 fc03 	bl	8000728 <__aeabi_ddiv>
 8006f22:	2d02      	cmp	r5, #2
 8006f24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006f28:	d1e5      	bne.n	8006ef6 <sqrtf+0x4e>
 8006f2a:	f002 f945 	bl	80091b8 <__errno>
 8006f2e:	2321      	movs	r3, #33	; 0x21
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	e7e4      	b.n	8006efe <sqrtf+0x56>
 8006f34:	2000001c 	.word	0x2000001c
 8006f38:	080097a6 	.word	0x080097a6
 8006f3c:	00000000 	.word	0x00000000

08006f40 <__ieee754_pow>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	b093      	sub	sp, #76	; 0x4c
 8006f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f4a:	9e03      	ldr	r6, [sp, #12]
 8006f4c:	9a02      	ldr	r2, [sp, #8]
 8006f4e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006f52:	ea55 0302 	orrs.w	r3, r5, r2
 8006f56:	4607      	mov	r7, r0
 8006f58:	4688      	mov	r8, r1
 8006f5a:	4682      	mov	sl, r0
 8006f5c:	4689      	mov	r9, r1
 8006f5e:	f000 849e 	beq.w	800789e <__ieee754_pow+0x95e>
 8006f62:	4b77      	ldr	r3, [pc, #476]	; (8007140 <__ieee754_pow+0x200>)
 8006f64:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006f68:	429c      	cmp	r4, r3
 8006f6a:	dc09      	bgt.n	8006f80 <__ieee754_pow+0x40>
 8006f6c:	d103      	bne.n	8006f76 <__ieee754_pow+0x36>
 8006f6e:	b938      	cbnz	r0, 8006f80 <__ieee754_pow+0x40>
 8006f70:	42a5      	cmp	r5, r4
 8006f72:	dc0d      	bgt.n	8006f90 <__ieee754_pow+0x50>
 8006f74:	e001      	b.n	8006f7a <__ieee754_pow+0x3a>
 8006f76:	429d      	cmp	r5, r3
 8006f78:	dc02      	bgt.n	8006f80 <__ieee754_pow+0x40>
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	d10e      	bne.n	8006f9c <__ieee754_pow+0x5c>
 8006f7e:	b16a      	cbz	r2, 8006f9c <__ieee754_pow+0x5c>
 8006f80:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006f84:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f88:	ea54 030a 	orrs.w	r3, r4, sl
 8006f8c:	f000 8487 	beq.w	800789e <__ieee754_pow+0x95e>
 8006f90:	486c      	ldr	r0, [pc, #432]	; (8007144 <__ieee754_pow+0x204>)
 8006f92:	b013      	add	sp, #76	; 0x4c
 8006f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f98:	f001 bf4a 	b.w	8008e30 <nan>
 8006f9c:	f1b9 0f00 	cmp.w	r9, #0
 8006fa0:	da4f      	bge.n	8007042 <__ieee754_pow+0x102>
 8006fa2:	4b69      	ldr	r3, [pc, #420]	; (8007148 <__ieee754_pow+0x208>)
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	dc4a      	bgt.n	800703e <__ieee754_pow+0xfe>
 8006fa8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006fac:	429d      	cmp	r5, r3
 8006fae:	dd48      	ble.n	8007042 <__ieee754_pow+0x102>
 8006fb0:	152b      	asrs	r3, r5, #20
 8006fb2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fb6:	2b14      	cmp	r3, #20
 8006fb8:	dd24      	ble.n	8007004 <__ieee754_pow+0xc4>
 8006fba:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006fbe:	fa22 f103 	lsr.w	r1, r2, r3
 8006fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d13b      	bne.n	8007042 <__ieee754_pow+0x102>
 8006fca:	f001 0101 	and.w	r1, r1, #1
 8006fce:	f1c1 0302 	rsb	r3, r1, #2
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2a00      	cmp	r2, #0
 8006fd6:	d156      	bne.n	8007086 <__ieee754_pow+0x146>
 8006fd8:	4b59      	ldr	r3, [pc, #356]	; (8007140 <__ieee754_pow+0x200>)
 8006fda:	429d      	cmp	r5, r3
 8006fdc:	d122      	bne.n	8007024 <__ieee754_pow+0xe4>
 8006fde:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006fe2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006fe6:	ea53 030a 	orrs.w	r3, r3, sl
 8006fea:	f000 8458 	beq.w	800789e <__ieee754_pow+0x95e>
 8006fee:	4b57      	ldr	r3, [pc, #348]	; (800714c <__ieee754_pow+0x20c>)
 8006ff0:	429c      	cmp	r4, r3
 8006ff2:	dd28      	ble.n	8007046 <__ieee754_pow+0x106>
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	f280 8456 	bge.w	80078a6 <__ieee754_pow+0x966>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	b013      	add	sp, #76	; 0x4c
 8007000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007004:	2a00      	cmp	r2, #0
 8007006:	d13c      	bne.n	8007082 <__ieee754_pow+0x142>
 8007008:	f1c3 0314 	rsb	r3, r3, #20
 800700c:	fa45 f103 	asr.w	r1, r5, r3
 8007010:	fa01 f303 	lsl.w	r3, r1, r3
 8007014:	429d      	cmp	r5, r3
 8007016:	f040 844e 	bne.w	80078b6 <__ieee754_pow+0x976>
 800701a:	f001 0101 	and.w	r1, r1, #1
 800701e:	f1c1 0302 	rsb	r3, r1, #2
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4b4a      	ldr	r3, [pc, #296]	; (8007150 <__ieee754_pow+0x210>)
 8007026:	429d      	cmp	r5, r3
 8007028:	d114      	bne.n	8007054 <__ieee754_pow+0x114>
 800702a:	2e00      	cmp	r6, #0
 800702c:	f280 843f 	bge.w	80078ae <__ieee754_pow+0x96e>
 8007030:	463a      	mov	r2, r7
 8007032:	4643      	mov	r3, r8
 8007034:	2000      	movs	r0, #0
 8007036:	4946      	ldr	r1, [pc, #280]	; (8007150 <__ieee754_pow+0x210>)
 8007038:	f7f9 fb76 	bl	8000728 <__aeabi_ddiv>
 800703c:	e7df      	b.n	8006ffe <__ieee754_pow+0xbe>
 800703e:	2302      	movs	r3, #2
 8007040:	e7c7      	b.n	8006fd2 <__ieee754_pow+0x92>
 8007042:	2300      	movs	r3, #0
 8007044:	e7c5      	b.n	8006fd2 <__ieee754_pow+0x92>
 8007046:	2e00      	cmp	r6, #0
 8007048:	dad7      	bge.n	8006ffa <__ieee754_pow+0xba>
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	9802      	ldr	r0, [sp, #8]
 800704e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007052:	e7d4      	b.n	8006ffe <__ieee754_pow+0xbe>
 8007054:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8007058:	d106      	bne.n	8007068 <__ieee754_pow+0x128>
 800705a:	463a      	mov	r2, r7
 800705c:	4643      	mov	r3, r8
 800705e:	4638      	mov	r0, r7
 8007060:	4641      	mov	r1, r8
 8007062:	f7f9 fa37 	bl	80004d4 <__aeabi_dmul>
 8007066:	e7ca      	b.n	8006ffe <__ieee754_pow+0xbe>
 8007068:	4b3a      	ldr	r3, [pc, #232]	; (8007154 <__ieee754_pow+0x214>)
 800706a:	429e      	cmp	r6, r3
 800706c:	d10b      	bne.n	8007086 <__ieee754_pow+0x146>
 800706e:	f1b9 0f00 	cmp.w	r9, #0
 8007072:	db08      	blt.n	8007086 <__ieee754_pow+0x146>
 8007074:	4638      	mov	r0, r7
 8007076:	4641      	mov	r1, r8
 8007078:	b013      	add	sp, #76	; 0x4c
 800707a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800707e:	f000 bc51 	b.w	8007924 <__ieee754_sqrt>
 8007082:	2300      	movs	r3, #0
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	4638      	mov	r0, r7
 8007088:	4641      	mov	r1, r8
 800708a:	f001 fec5 	bl	8008e18 <fabs>
 800708e:	f1ba 0f00 	cmp.w	sl, #0
 8007092:	d125      	bne.n	80070e0 <__ieee754_pow+0x1a0>
 8007094:	b124      	cbz	r4, 80070a0 <__ieee754_pow+0x160>
 8007096:	4b2e      	ldr	r3, [pc, #184]	; (8007150 <__ieee754_pow+0x210>)
 8007098:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800709c:	429a      	cmp	r2, r3
 800709e:	d11f      	bne.n	80070e0 <__ieee754_pow+0x1a0>
 80070a0:	2e00      	cmp	r6, #0
 80070a2:	da05      	bge.n	80070b0 <__ieee754_pow+0x170>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	2000      	movs	r0, #0
 80070aa:	4929      	ldr	r1, [pc, #164]	; (8007150 <__ieee754_pow+0x210>)
 80070ac:	f7f9 fb3c 	bl	8000728 <__aeabi_ddiv>
 80070b0:	f1b9 0f00 	cmp.w	r9, #0
 80070b4:	daa3      	bge.n	8006ffe <__ieee754_pow+0xbe>
 80070b6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80070ba:	9b00      	ldr	r3, [sp, #0]
 80070bc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80070c0:	4323      	orrs	r3, r4
 80070c2:	d106      	bne.n	80070d2 <__ieee754_pow+0x192>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	f7f9 f850 	bl	800016c <__aeabi_dsub>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	e7b2      	b.n	8007038 <__ieee754_pow+0xf8>
 80070d2:	9b00      	ldr	r3, [sp, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d192      	bne.n	8006ffe <__ieee754_pow+0xbe>
 80070d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070dc:	4619      	mov	r1, r3
 80070de:	e78e      	b.n	8006ffe <__ieee754_pow+0xbe>
 80070e0:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80070e4:	f109 33ff 	add.w	r3, r9, #4294967295
 80070e8:	930c      	str	r3, [sp, #48]	; 0x30
 80070ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070ec:	9b00      	ldr	r3, [sp, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	d104      	bne.n	80070fc <__ieee754_pow+0x1bc>
 80070f2:	463a      	mov	r2, r7
 80070f4:	4643      	mov	r3, r8
 80070f6:	4638      	mov	r0, r7
 80070f8:	4641      	mov	r1, r8
 80070fa:	e7e5      	b.n	80070c8 <__ieee754_pow+0x188>
 80070fc:	4b16      	ldr	r3, [pc, #88]	; (8007158 <__ieee754_pow+0x218>)
 80070fe:	429d      	cmp	r5, r3
 8007100:	f340 80fc 	ble.w	80072fc <__ieee754_pow+0x3bc>
 8007104:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007108:	429d      	cmp	r5, r3
 800710a:	dd0b      	ble.n	8007124 <__ieee754_pow+0x1e4>
 800710c:	4b0f      	ldr	r3, [pc, #60]	; (800714c <__ieee754_pow+0x20c>)
 800710e:	429c      	cmp	r4, r3
 8007110:	dc0e      	bgt.n	8007130 <__ieee754_pow+0x1f0>
 8007112:	2e00      	cmp	r6, #0
 8007114:	f6bf af71 	bge.w	8006ffa <__ieee754_pow+0xba>
 8007118:	a307      	add	r3, pc, #28	; (adr r3, 8007138 <__ieee754_pow+0x1f8>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	4610      	mov	r0, r2
 8007120:	4619      	mov	r1, r3
 8007122:	e79e      	b.n	8007062 <__ieee754_pow+0x122>
 8007124:	4b0d      	ldr	r3, [pc, #52]	; (800715c <__ieee754_pow+0x21c>)
 8007126:	429c      	cmp	r4, r3
 8007128:	ddf3      	ble.n	8007112 <__ieee754_pow+0x1d2>
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <__ieee754_pow+0x210>)
 800712c:	429c      	cmp	r4, r3
 800712e:	dd17      	ble.n	8007160 <__ieee754_pow+0x220>
 8007130:	2e00      	cmp	r6, #0
 8007132:	dcf1      	bgt.n	8007118 <__ieee754_pow+0x1d8>
 8007134:	e761      	b.n	8006ffa <__ieee754_pow+0xba>
 8007136:	bf00      	nop
 8007138:	8800759c 	.word	0x8800759c
 800713c:	7e37e43c 	.word	0x7e37e43c
 8007140:	7ff00000 	.word	0x7ff00000
 8007144:	080097a0 	.word	0x080097a0
 8007148:	433fffff 	.word	0x433fffff
 800714c:	3fefffff 	.word	0x3fefffff
 8007150:	3ff00000 	.word	0x3ff00000
 8007154:	3fe00000 	.word	0x3fe00000
 8007158:	41e00000 	.word	0x41e00000
 800715c:	3feffffe 	.word	0x3feffffe
 8007160:	2200      	movs	r2, #0
 8007162:	4b61      	ldr	r3, [pc, #388]	; (80072e8 <__ieee754_pow+0x3a8>)
 8007164:	f7f9 f802 	bl	800016c <__aeabi_dsub>
 8007168:	a355      	add	r3, pc, #340	; (adr r3, 80072c0 <__ieee754_pow+0x380>)
 800716a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800716e:	4604      	mov	r4, r0
 8007170:	460d      	mov	r5, r1
 8007172:	f7f9 f9af 	bl	80004d4 <__aeabi_dmul>
 8007176:	a354      	add	r3, pc, #336	; (adr r3, 80072c8 <__ieee754_pow+0x388>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	4606      	mov	r6, r0
 800717e:	460f      	mov	r7, r1
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 f9a6 	bl	80004d4 <__aeabi_dmul>
 8007188:	2200      	movs	r2, #0
 800718a:	4682      	mov	sl, r0
 800718c:	468b      	mov	fp, r1
 800718e:	4b57      	ldr	r3, [pc, #348]	; (80072ec <__ieee754_pow+0x3ac>)
 8007190:	4620      	mov	r0, r4
 8007192:	4629      	mov	r1, r5
 8007194:	f7f9 f99e 	bl	80004d4 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	a14c      	add	r1, pc, #304	; (adr r1, 80072d0 <__ieee754_pow+0x390>)
 800719e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a2:	f7f8 ffe3 	bl	800016c <__aeabi_dsub>
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	f7f9 f993 	bl	80004d4 <__aeabi_dmul>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	2000      	movs	r0, #0
 80071b4:	494e      	ldr	r1, [pc, #312]	; (80072f0 <__ieee754_pow+0x3b0>)
 80071b6:	f7f8 ffd9 	bl	800016c <__aeabi_dsub>
 80071ba:	4622      	mov	r2, r4
 80071bc:	462b      	mov	r3, r5
 80071be:	4680      	mov	r8, r0
 80071c0:	4689      	mov	r9, r1
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7f9 f985 	bl	80004d4 <__aeabi_dmul>
 80071ca:	4602      	mov	r2, r0
 80071cc:	460b      	mov	r3, r1
 80071ce:	4640      	mov	r0, r8
 80071d0:	4649      	mov	r1, r9
 80071d2:	f7f9 f97f 	bl	80004d4 <__aeabi_dmul>
 80071d6:	a340      	add	r3, pc, #256	; (adr r3, 80072d8 <__ieee754_pow+0x398>)
 80071d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071dc:	f7f9 f97a 	bl	80004d4 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4650      	mov	r0, sl
 80071e6:	4659      	mov	r1, fp
 80071e8:	f7f8 ffc0 	bl	800016c <__aeabi_dsub>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	4630      	mov	r0, r6
 80071f6:	4639      	mov	r1, r7
 80071f8:	f7f8 ffba 	bl	8000170 <__adddf3>
 80071fc:	2000      	movs	r0, #0
 80071fe:	468b      	mov	fp, r1
 8007200:	4682      	mov	sl, r0
 8007202:	4632      	mov	r2, r6
 8007204:	463b      	mov	r3, r7
 8007206:	f7f8 ffb1 	bl	800016c <__aeabi_dsub>
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f8 ffab 	bl	800016c <__aeabi_dsub>
 8007216:	9b00      	ldr	r3, [sp, #0]
 8007218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800721a:	3b01      	subs	r3, #1
 800721c:	4313      	orrs	r3, r2
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	bf0c      	ite	eq
 8007224:	4c33      	ldreq	r4, [pc, #204]	; (80072f4 <__ieee754_pow+0x3b4>)
 8007226:	4c30      	ldrne	r4, [pc, #192]	; (80072e8 <__ieee754_pow+0x3a8>)
 8007228:	4606      	mov	r6, r0
 800722a:	e88d 0018 	stmia.w	sp, {r3, r4}
 800722e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007232:	2400      	movs	r4, #0
 8007234:	460f      	mov	r7, r1
 8007236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	f7f8 ff95 	bl	800016c <__aeabi_dsub>
 8007242:	4652      	mov	r2, sl
 8007244:	465b      	mov	r3, fp
 8007246:	f7f9 f945 	bl	80004d4 <__aeabi_dmul>
 800724a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800724e:	4680      	mov	r8, r0
 8007250:	4689      	mov	r9, r1
 8007252:	4630      	mov	r0, r6
 8007254:	4639      	mov	r1, r7
 8007256:	f7f9 f93d 	bl	80004d4 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f8 ff85 	bl	8000170 <__adddf3>
 8007266:	4622      	mov	r2, r4
 8007268:	462b      	mov	r3, r5
 800726a:	4680      	mov	r8, r0
 800726c:	4689      	mov	r9, r1
 800726e:	4650      	mov	r0, sl
 8007270:	4659      	mov	r1, fp
 8007272:	f7f9 f92f 	bl	80004d4 <__aeabi_dmul>
 8007276:	4604      	mov	r4, r0
 8007278:	460d      	mov	r5, r1
 800727a:	460b      	mov	r3, r1
 800727c:	4602      	mov	r2, r0
 800727e:	4649      	mov	r1, r9
 8007280:	4640      	mov	r0, r8
 8007282:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007286:	f7f8 ff73 	bl	8000170 <__adddf3>
 800728a:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <__ieee754_pow+0x3b8>)
 800728c:	4682      	mov	sl, r0
 800728e:	4299      	cmp	r1, r3
 8007290:	460f      	mov	r7, r1
 8007292:	460e      	mov	r6, r1
 8007294:	f340 82da 	ble.w	800784c <__ieee754_pow+0x90c>
 8007298:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800729c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80072a0:	4303      	orrs	r3, r0
 80072a2:	f000 81d5 	beq.w	8007650 <__ieee754_pow+0x710>
 80072a6:	a30e      	add	r3, pc, #56	; (adr r3, 80072e0 <__ieee754_pow+0x3a0>)
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b0:	f7f9 f910 	bl	80004d4 <__aeabi_dmul>
 80072b4:	a30a      	add	r3, pc, #40	; (adr r3, 80072e0 <__ieee754_pow+0x3a0>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	e6d2      	b.n	8007062 <__ieee754_pow+0x122>
 80072bc:	f3af 8000 	nop.w
 80072c0:	60000000 	.word	0x60000000
 80072c4:	3ff71547 	.word	0x3ff71547
 80072c8:	f85ddf44 	.word	0xf85ddf44
 80072cc:	3e54ae0b 	.word	0x3e54ae0b
 80072d0:	55555555 	.word	0x55555555
 80072d4:	3fd55555 	.word	0x3fd55555
 80072d8:	652b82fe 	.word	0x652b82fe
 80072dc:	3ff71547 	.word	0x3ff71547
 80072e0:	8800759c 	.word	0x8800759c
 80072e4:	7e37e43c 	.word	0x7e37e43c
 80072e8:	3ff00000 	.word	0x3ff00000
 80072ec:	3fd00000 	.word	0x3fd00000
 80072f0:	3fe00000 	.word	0x3fe00000
 80072f4:	bff00000 	.word	0xbff00000
 80072f8:	408fffff 	.word	0x408fffff
 80072fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	da05      	bge.n	8007312 <__ieee754_pow+0x3d2>
 8007306:	4bca      	ldr	r3, [pc, #808]	; (8007630 <__ieee754_pow+0x6f0>)
 8007308:	f7f9 f8e4 	bl	80004d4 <__aeabi_dmul>
 800730c:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007310:	460c      	mov	r4, r1
 8007312:	1523      	asrs	r3, r4, #20
 8007314:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007318:	4413      	add	r3, r2
 800731a:	9307      	str	r3, [sp, #28]
 800731c:	4bc5      	ldr	r3, [pc, #788]	; (8007634 <__ieee754_pow+0x6f4>)
 800731e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007322:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007326:	429c      	cmp	r4, r3
 8007328:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800732c:	dd08      	ble.n	8007340 <__ieee754_pow+0x400>
 800732e:	4bc2      	ldr	r3, [pc, #776]	; (8007638 <__ieee754_pow+0x6f8>)
 8007330:	429c      	cmp	r4, r3
 8007332:	f340 8154 	ble.w	80075de <__ieee754_pow+0x69e>
 8007336:	9b07      	ldr	r3, [sp, #28]
 8007338:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800733c:	3301      	adds	r3, #1
 800733e:	9307      	str	r3, [sp, #28]
 8007340:	2600      	movs	r6, #0
 8007342:	4629      	mov	r1, r5
 8007344:	00f3      	lsls	r3, r6, #3
 8007346:	930d      	str	r3, [sp, #52]	; 0x34
 8007348:	4bbc      	ldr	r3, [pc, #752]	; (800763c <__ieee754_pow+0x6fc>)
 800734a:	00f2      	lsls	r2, r6, #3
 800734c:	4413      	add	r3, r2
 800734e:	cb18      	ldmia	r3, {r3, r4}
 8007350:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8007354:	461a      	mov	r2, r3
 8007356:	4623      	mov	r3, r4
 8007358:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800735c:	f7f8 ff06 	bl	800016c <__aeabi_dsub>
 8007360:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007364:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800736c:	f7f8 ff00 	bl	8000170 <__adddf3>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	2000      	movs	r0, #0
 8007376:	49b2      	ldr	r1, [pc, #712]	; (8007640 <__ieee754_pow+0x700>)
 8007378:	f7f9 f9d6 	bl	8000728 <__aeabi_ddiv>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007384:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007388:	f7f9 f8a4 	bl	80004d4 <__aeabi_dmul>
 800738c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007390:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007394:	f04f 0a00 	mov.w	sl, #0
 8007398:	2200      	movs	r2, #0
 800739a:	106d      	asrs	r5, r5, #1
 800739c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80073a0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80073a4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80073a8:	4659      	mov	r1, fp
 80073aa:	4650      	mov	r0, sl
 80073ac:	4614      	mov	r4, r2
 80073ae:	461d      	mov	r5, r3
 80073b0:	f7f9 f890 	bl	80004d4 <__aeabi_dmul>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073bc:	f7f8 fed6 	bl	800016c <__aeabi_dsub>
 80073c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80073c4:	4606      	mov	r6, r0
 80073c6:	460f      	mov	r7, r1
 80073c8:	4620      	mov	r0, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	f7f8 fece 	bl	800016c <__aeabi_dsub>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073d8:	f7f8 fec8 	bl	800016c <__aeabi_dsub>
 80073dc:	465b      	mov	r3, fp
 80073de:	4652      	mov	r2, sl
 80073e0:	f7f9 f878 	bl	80004d4 <__aeabi_dmul>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f8 febe 	bl	800016c <__aeabi_dsub>
 80073f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073f4:	f7f9 f86e 	bl	80004d4 <__aeabi_dmul>
 80073f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	f7f9 f866 	bl	80004d4 <__aeabi_dmul>
 8007408:	a377      	add	r3, pc, #476	; (adr r3, 80075e8 <__ieee754_pow+0x6a8>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f9 f85f 	bl	80004d4 <__aeabi_dmul>
 8007416:	a376      	add	r3, pc, #472	; (adr r3, 80075f0 <__ieee754_pow+0x6b0>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f8 fea8 	bl	8000170 <__adddf3>
 8007420:	4622      	mov	r2, r4
 8007422:	462b      	mov	r3, r5
 8007424:	f7f9 f856 	bl	80004d4 <__aeabi_dmul>
 8007428:	a373      	add	r3, pc, #460	; (adr r3, 80075f8 <__ieee754_pow+0x6b8>)
 800742a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742e:	f7f8 fe9f 	bl	8000170 <__adddf3>
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	f7f9 f84d 	bl	80004d4 <__aeabi_dmul>
 800743a:	a371      	add	r3, pc, #452	; (adr r3, 8007600 <__ieee754_pow+0x6c0>)
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f7f8 fe96 	bl	8000170 <__adddf3>
 8007444:	4622      	mov	r2, r4
 8007446:	462b      	mov	r3, r5
 8007448:	f7f9 f844 	bl	80004d4 <__aeabi_dmul>
 800744c:	a36e      	add	r3, pc, #440	; (adr r3, 8007608 <__ieee754_pow+0x6c8>)
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f7f8 fe8d 	bl	8000170 <__adddf3>
 8007456:	4622      	mov	r2, r4
 8007458:	462b      	mov	r3, r5
 800745a:	f7f9 f83b 	bl	80004d4 <__aeabi_dmul>
 800745e:	a36c      	add	r3, pc, #432	; (adr r3, 8007610 <__ieee754_pow+0x6d0>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	f7f8 fe84 	bl	8000170 <__adddf3>
 8007468:	4622      	mov	r2, r4
 800746a:	4606      	mov	r6, r0
 800746c:	460f      	mov	r7, r1
 800746e:	462b      	mov	r3, r5
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f7f9 f82e 	bl	80004d4 <__aeabi_dmul>
 8007478:	4602      	mov	r2, r0
 800747a:	460b      	mov	r3, r1
 800747c:	4630      	mov	r0, r6
 800747e:	4639      	mov	r1, r7
 8007480:	f7f9 f828 	bl	80004d4 <__aeabi_dmul>
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800748c:	465b      	mov	r3, fp
 800748e:	4652      	mov	r2, sl
 8007490:	f7f8 fe6e 	bl	8000170 <__adddf3>
 8007494:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007498:	f7f9 f81c 	bl	80004d4 <__aeabi_dmul>
 800749c:	4622      	mov	r2, r4
 800749e:	462b      	mov	r3, r5
 80074a0:	f7f8 fe66 	bl	8000170 <__adddf3>
 80074a4:	465b      	mov	r3, fp
 80074a6:	4606      	mov	r6, r0
 80074a8:	460f      	mov	r7, r1
 80074aa:	4652      	mov	r2, sl
 80074ac:	4659      	mov	r1, fp
 80074ae:	4650      	mov	r0, sl
 80074b0:	f7f9 f810 	bl	80004d4 <__aeabi_dmul>
 80074b4:	2200      	movs	r2, #0
 80074b6:	4b63      	ldr	r3, [pc, #396]	; (8007644 <__ieee754_pow+0x704>)
 80074b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074bc:	f7f8 fe58 	bl	8000170 <__adddf3>
 80074c0:	4632      	mov	r2, r6
 80074c2:	463b      	mov	r3, r7
 80074c4:	f7f8 fe54 	bl	8000170 <__adddf3>
 80074c8:	4650      	mov	r0, sl
 80074ca:	460d      	mov	r5, r1
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	f7f8 fffe 	bl	80004d4 <__aeabi_dmul>
 80074d8:	2200      	movs	r2, #0
 80074da:	4680      	mov	r8, r0
 80074dc:	4689      	mov	r9, r1
 80074de:	4b59      	ldr	r3, [pc, #356]	; (8007644 <__ieee754_pow+0x704>)
 80074e0:	4629      	mov	r1, r5
 80074e2:	4650      	mov	r0, sl
 80074e4:	f7f8 fe42 	bl	800016c <__aeabi_dsub>
 80074e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80074ec:	f7f8 fe3e 	bl	800016c <__aeabi_dsub>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7f8 fe38 	bl	800016c <__aeabi_dsub>
 80074fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007500:	f7f8 ffe8 	bl	80004d4 <__aeabi_dmul>
 8007504:	462b      	mov	r3, r5
 8007506:	4606      	mov	r6, r0
 8007508:	460f      	mov	r7, r1
 800750a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800750e:	4652      	mov	r2, sl
 8007510:	f7f8 ffe0 	bl	80004d4 <__aeabi_dmul>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f8 fe28 	bl	8000170 <__adddf3>
 8007520:	4606      	mov	r6, r0
 8007522:	460f      	mov	r7, r1
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f8 fe20 	bl	8000170 <__adddf3>
 8007530:	a339      	add	r3, pc, #228	; (adr r3, 8007618 <__ieee754_pow+0x6d8>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	4650      	mov	r0, sl
 8007538:	460d      	mov	r5, r1
 800753a:	f7f8 ffcb 	bl	80004d4 <__aeabi_dmul>
 800753e:	4642      	mov	r2, r8
 8007540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007544:	464b      	mov	r3, r9
 8007546:	4629      	mov	r1, r5
 8007548:	4650      	mov	r0, sl
 800754a:	f7f8 fe0f 	bl	800016c <__aeabi_dsub>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4630      	mov	r0, r6
 8007554:	4639      	mov	r1, r7
 8007556:	f7f8 fe09 	bl	800016c <__aeabi_dsub>
 800755a:	a331      	add	r3, pc, #196	; (adr r3, 8007620 <__ieee754_pow+0x6e0>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 ffb8 	bl	80004d4 <__aeabi_dmul>
 8007564:	a330      	add	r3, pc, #192	; (adr r3, 8007628 <__ieee754_pow+0x6e8>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	4606      	mov	r6, r0
 800756c:	460f      	mov	r7, r1
 800756e:	4650      	mov	r0, sl
 8007570:	4629      	mov	r1, r5
 8007572:	f7f8 ffaf 	bl	80004d4 <__aeabi_dmul>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	4630      	mov	r0, r6
 800757c:	4639      	mov	r1, r7
 800757e:	f7f8 fdf7 	bl	8000170 <__adddf3>
 8007582:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007584:	4b30      	ldr	r3, [pc, #192]	; (8007648 <__ieee754_pow+0x708>)
 8007586:	4413      	add	r3, r2
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	f7f8 fdf0 	bl	8000170 <__adddf3>
 8007590:	4604      	mov	r4, r0
 8007592:	9807      	ldr	r0, [sp, #28]
 8007594:	460d      	mov	r5, r1
 8007596:	f7f8 ff37 	bl	8000408 <__aeabi_i2d>
 800759a:	4606      	mov	r6, r0
 800759c:	460f      	mov	r7, r1
 800759e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075a0:	4b2a      	ldr	r3, [pc, #168]	; (800764c <__ieee754_pow+0x70c>)
 80075a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075ac:	4622      	mov	r2, r4
 80075ae:	462b      	mov	r3, r5
 80075b0:	f7f8 fdde 	bl	8000170 <__adddf3>
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	f7f8 fdda 	bl	8000170 <__adddf3>
 80075bc:	4632      	mov	r2, r6
 80075be:	463b      	mov	r3, r7
 80075c0:	f7f8 fdd6 	bl	8000170 <__adddf3>
 80075c4:	4632      	mov	r2, r6
 80075c6:	463b      	mov	r3, r7
 80075c8:	4650      	mov	r0, sl
 80075ca:	468b      	mov	fp, r1
 80075cc:	f7f8 fdce 	bl	800016c <__aeabi_dsub>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f8 fdca 	bl	800016c <__aeabi_dsub>
 80075d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075dc:	e613      	b.n	8007206 <__ieee754_pow+0x2c6>
 80075de:	2601      	movs	r6, #1
 80075e0:	e6af      	b.n	8007342 <__ieee754_pow+0x402>
 80075e2:	bf00      	nop
 80075e4:	f3af 8000 	nop.w
 80075e8:	4a454eef 	.word	0x4a454eef
 80075ec:	3fca7e28 	.word	0x3fca7e28
 80075f0:	93c9db65 	.word	0x93c9db65
 80075f4:	3fcd864a 	.word	0x3fcd864a
 80075f8:	a91d4101 	.word	0xa91d4101
 80075fc:	3fd17460 	.word	0x3fd17460
 8007600:	518f264d 	.word	0x518f264d
 8007604:	3fd55555 	.word	0x3fd55555
 8007608:	db6fabff 	.word	0xdb6fabff
 800760c:	3fdb6db6 	.word	0x3fdb6db6
 8007610:	33333303 	.word	0x33333303
 8007614:	3fe33333 	.word	0x3fe33333
 8007618:	e0000000 	.word	0xe0000000
 800761c:	3feec709 	.word	0x3feec709
 8007620:	dc3a03fd 	.word	0xdc3a03fd
 8007624:	3feec709 	.word	0x3feec709
 8007628:	145b01f5 	.word	0x145b01f5
 800762c:	be3e2fe0 	.word	0xbe3e2fe0
 8007630:	43400000 	.word	0x43400000
 8007634:	0003988e 	.word	0x0003988e
 8007638:	000bb679 	.word	0x000bb679
 800763c:	080097b0 	.word	0x080097b0
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	40080000 	.word	0x40080000
 8007648:	080097d0 	.word	0x080097d0
 800764c:	080097c0 	.word	0x080097c0
 8007650:	a39b      	add	r3, pc, #620	; (adr r3, 80078c0 <__ieee754_pow+0x980>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f8 fd89 	bl	8000170 <__adddf3>
 800765e:	4622      	mov	r2, r4
 8007660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007664:	462b      	mov	r3, r5
 8007666:	4650      	mov	r0, sl
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 fd7f 	bl	800016c <__aeabi_dsub>
 800766e:	4602      	mov	r2, r0
 8007670:	460b      	mov	r3, r1
 8007672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007676:	f7f9 f9bd 	bl	80009f4 <__aeabi_dcmpgt>
 800767a:	2800      	cmp	r0, #0
 800767c:	f47f ae13 	bne.w	80072a6 <__ieee754_pow+0x366>
 8007680:	4aa3      	ldr	r2, [pc, #652]	; (8007910 <__ieee754_pow+0x9d0>)
 8007682:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007686:	4293      	cmp	r3, r2
 8007688:	f340 8104 	ble.w	8007894 <__ieee754_pow+0x954>
 800768c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007690:	2000      	movs	r0, #0
 8007692:	151b      	asrs	r3, r3, #20
 8007694:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007698:	fa4a f303 	asr.w	r3, sl, r3
 800769c:	4433      	add	r3, r6
 800769e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80076a2:	4f9c      	ldr	r7, [pc, #624]	; (8007914 <__ieee754_pow+0x9d4>)
 80076a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80076a8:	4117      	asrs	r7, r2
 80076aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80076ae:	ea23 0107 	bic.w	r1, r3, r7
 80076b2:	f1c2 0214 	rsb	r2, r2, #20
 80076b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80076ba:	fa4a fa02 	asr.w	sl, sl, r2
 80076be:	2e00      	cmp	r6, #0
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4620      	mov	r0, r4
 80076c6:	4629      	mov	r1, r5
 80076c8:	bfb8      	it	lt
 80076ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80076ce:	f7f8 fd4d 	bl	800016c <__aeabi_dsub>
 80076d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076da:	4642      	mov	r2, r8
 80076dc:	464b      	mov	r3, r9
 80076de:	f7f8 fd47 	bl	8000170 <__adddf3>
 80076e2:	a379      	add	r3, pc, #484	; (adr r3, 80078c8 <__ieee754_pow+0x988>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	2000      	movs	r0, #0
 80076ea:	460d      	mov	r5, r1
 80076ec:	4604      	mov	r4, r0
 80076ee:	f7f8 fef1 	bl	80004d4 <__aeabi_dmul>
 80076f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076f6:	4606      	mov	r6, r0
 80076f8:	460f      	mov	r7, r1
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7f8 fd35 	bl	800016c <__aeabi_dsub>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f8 fd2f 	bl	800016c <__aeabi_dsub>
 800770e:	a370      	add	r3, pc, #448	; (adr r3, 80078d0 <__ieee754_pow+0x990>)
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f7f8 fede 	bl	80004d4 <__aeabi_dmul>
 8007718:	a36f      	add	r3, pc, #444	; (adr r3, 80078d8 <__ieee754_pow+0x998>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	4680      	mov	r8, r0
 8007720:	4689      	mov	r9, r1
 8007722:	4620      	mov	r0, r4
 8007724:	4629      	mov	r1, r5
 8007726:	f7f8 fed5 	bl	80004d4 <__aeabi_dmul>
 800772a:	4602      	mov	r2, r0
 800772c:	460b      	mov	r3, r1
 800772e:	4640      	mov	r0, r8
 8007730:	4649      	mov	r1, r9
 8007732:	f7f8 fd1d 	bl	8000170 <__adddf3>
 8007736:	4604      	mov	r4, r0
 8007738:	460d      	mov	r5, r1
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	f7f8 fd15 	bl	8000170 <__adddf3>
 8007746:	4632      	mov	r2, r6
 8007748:	463b      	mov	r3, r7
 800774a:	4680      	mov	r8, r0
 800774c:	4689      	mov	r9, r1
 800774e:	f7f8 fd0d 	bl	800016c <__aeabi_dsub>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f8 fd07 	bl	800016c <__aeabi_dsub>
 800775e:	4642      	mov	r2, r8
 8007760:	4606      	mov	r6, r0
 8007762:	460f      	mov	r7, r1
 8007764:	464b      	mov	r3, r9
 8007766:	4640      	mov	r0, r8
 8007768:	4649      	mov	r1, r9
 800776a:	f7f8 feb3 	bl	80004d4 <__aeabi_dmul>
 800776e:	a35c      	add	r3, pc, #368	; (adr r3, 80078e0 <__ieee754_pow+0x9a0>)
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	f7f8 feac 	bl	80004d4 <__aeabi_dmul>
 800777c:	a35a      	add	r3, pc, #360	; (adr r3, 80078e8 <__ieee754_pow+0x9a8>)
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f7f8 fcf3 	bl	800016c <__aeabi_dsub>
 8007786:	4622      	mov	r2, r4
 8007788:	462b      	mov	r3, r5
 800778a:	f7f8 fea3 	bl	80004d4 <__aeabi_dmul>
 800778e:	a358      	add	r3, pc, #352	; (adr r3, 80078f0 <__ieee754_pow+0x9b0>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 fcec 	bl	8000170 <__adddf3>
 8007798:	4622      	mov	r2, r4
 800779a:	462b      	mov	r3, r5
 800779c:	f7f8 fe9a 	bl	80004d4 <__aeabi_dmul>
 80077a0:	a355      	add	r3, pc, #340	; (adr r3, 80078f8 <__ieee754_pow+0x9b8>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 fce1 	bl	800016c <__aeabi_dsub>
 80077aa:	4622      	mov	r2, r4
 80077ac:	462b      	mov	r3, r5
 80077ae:	f7f8 fe91 	bl	80004d4 <__aeabi_dmul>
 80077b2:	a353      	add	r3, pc, #332	; (adr r3, 8007900 <__ieee754_pow+0x9c0>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f7f8 fcda 	bl	8000170 <__adddf3>
 80077bc:	4622      	mov	r2, r4
 80077be:	462b      	mov	r3, r5
 80077c0:	f7f8 fe88 	bl	80004d4 <__aeabi_dmul>
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f8 fcce 	bl	800016c <__aeabi_dsub>
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f8 fe7a 	bl	80004d4 <__aeabi_dmul>
 80077e0:	2200      	movs	r2, #0
 80077e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f7f8 fcbd 	bl	800016c <__aeabi_dsub>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fa:	f7f8 ff95 	bl	8000728 <__aeabi_ddiv>
 80077fe:	4632      	mov	r2, r6
 8007800:	4604      	mov	r4, r0
 8007802:	460d      	mov	r5, r1
 8007804:	463b      	mov	r3, r7
 8007806:	4640      	mov	r0, r8
 8007808:	4649      	mov	r1, r9
 800780a:	f7f8 fe63 	bl	80004d4 <__aeabi_dmul>
 800780e:	4632      	mov	r2, r6
 8007810:	463b      	mov	r3, r7
 8007812:	f7f8 fcad 	bl	8000170 <__adddf3>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fca5 	bl	800016c <__aeabi_dsub>
 8007822:	4642      	mov	r2, r8
 8007824:	464b      	mov	r3, r9
 8007826:	f7f8 fca1 	bl	800016c <__aeabi_dsub>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	2000      	movs	r0, #0
 8007830:	4939      	ldr	r1, [pc, #228]	; (8007918 <__ieee754_pow+0x9d8>)
 8007832:	f7f8 fc9b 	bl	800016c <__aeabi_dsub>
 8007836:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800783a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800783e:	da2c      	bge.n	800789a <__ieee754_pow+0x95a>
 8007840:	4652      	mov	r2, sl
 8007842:	f001 fb85 	bl	8008f50 <scalbn>
 8007846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800784a:	e40a      	b.n	8007062 <__ieee754_pow+0x122>
 800784c:	4b33      	ldr	r3, [pc, #204]	; (800791c <__ieee754_pow+0x9dc>)
 800784e:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007852:	429f      	cmp	r7, r3
 8007854:	f77f af14 	ble.w	8007680 <__ieee754_pow+0x740>
 8007858:	4b31      	ldr	r3, [pc, #196]	; (8007920 <__ieee754_pow+0x9e0>)
 800785a:	440b      	add	r3, r1
 800785c:	4303      	orrs	r3, r0
 800785e:	d00b      	beq.n	8007878 <__ieee754_pow+0x938>
 8007860:	a329      	add	r3, pc, #164	; (adr r3, 8007908 <__ieee754_pow+0x9c8>)
 8007862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007866:	e9dd 0100 	ldrd	r0, r1, [sp]
 800786a:	f7f8 fe33 	bl	80004d4 <__aeabi_dmul>
 800786e:	a326      	add	r3, pc, #152	; (adr r3, 8007908 <__ieee754_pow+0x9c8>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7ff bbf5 	b.w	8007062 <__ieee754_pow+0x122>
 8007878:	4622      	mov	r2, r4
 800787a:	462b      	mov	r3, r5
 800787c:	f7f8 fc76 	bl	800016c <__aeabi_dsub>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	4640      	mov	r0, r8
 8007886:	4649      	mov	r1, r9
 8007888:	f7f9 f8a0 	bl	80009cc <__aeabi_dcmple>
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f aef7 	beq.w	8007680 <__ieee754_pow+0x740>
 8007892:	e7e5      	b.n	8007860 <__ieee754_pow+0x920>
 8007894:	f04f 0a00 	mov.w	sl, #0
 8007898:	e71d      	b.n	80076d6 <__ieee754_pow+0x796>
 800789a:	4621      	mov	r1, r4
 800789c:	e7d3      	b.n	8007846 <__ieee754_pow+0x906>
 800789e:	2000      	movs	r0, #0
 80078a0:	491d      	ldr	r1, [pc, #116]	; (8007918 <__ieee754_pow+0x9d8>)
 80078a2:	f7ff bbac 	b.w	8006ffe <__ieee754_pow+0xbe>
 80078a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078aa:	f7ff bba8 	b.w	8006ffe <__ieee754_pow+0xbe>
 80078ae:	4638      	mov	r0, r7
 80078b0:	4641      	mov	r1, r8
 80078b2:	f7ff bba4 	b.w	8006ffe <__ieee754_pow+0xbe>
 80078b6:	9200      	str	r2, [sp, #0]
 80078b8:	f7ff bbb4 	b.w	8007024 <__ieee754_pow+0xe4>
 80078bc:	f3af 8000 	nop.w
 80078c0:	652b82fe 	.word	0x652b82fe
 80078c4:	3c971547 	.word	0x3c971547
 80078c8:	00000000 	.word	0x00000000
 80078cc:	3fe62e43 	.word	0x3fe62e43
 80078d0:	fefa39ef 	.word	0xfefa39ef
 80078d4:	3fe62e42 	.word	0x3fe62e42
 80078d8:	0ca86c39 	.word	0x0ca86c39
 80078dc:	be205c61 	.word	0xbe205c61
 80078e0:	72bea4d0 	.word	0x72bea4d0
 80078e4:	3e663769 	.word	0x3e663769
 80078e8:	c5d26bf1 	.word	0xc5d26bf1
 80078ec:	3ebbbd41 	.word	0x3ebbbd41
 80078f0:	af25de2c 	.word	0xaf25de2c
 80078f4:	3f11566a 	.word	0x3f11566a
 80078f8:	16bebd93 	.word	0x16bebd93
 80078fc:	3f66c16c 	.word	0x3f66c16c
 8007900:	5555553e 	.word	0x5555553e
 8007904:	3fc55555 	.word	0x3fc55555
 8007908:	c2f8f359 	.word	0xc2f8f359
 800790c:	01a56e1f 	.word	0x01a56e1f
 8007910:	3fe00000 	.word	0x3fe00000
 8007914:	000fffff 	.word	0x000fffff
 8007918:	3ff00000 	.word	0x3ff00000
 800791c:	4090cbff 	.word	0x4090cbff
 8007920:	3f6f3400 	.word	0x3f6f3400

08007924 <__ieee754_sqrt>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8007a78 <__ieee754_sqrt+0x154>
 800792c:	4606      	mov	r6, r0
 800792e:	ea3e 0e01 	bics.w	lr, lr, r1
 8007932:	460d      	mov	r5, r1
 8007934:	4607      	mov	r7, r0
 8007936:	460a      	mov	r2, r1
 8007938:	460c      	mov	r4, r1
 800793a:	4603      	mov	r3, r0
 800793c:	d10f      	bne.n	800795e <__ieee754_sqrt+0x3a>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	f7f8 fdc7 	bl	80004d4 <__aeabi_dmul>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4630      	mov	r0, r6
 800794c:	4629      	mov	r1, r5
 800794e:	f7f8 fc0f 	bl	8000170 <__adddf3>
 8007952:	4606      	mov	r6, r0
 8007954:	460d      	mov	r5, r1
 8007956:	4630      	mov	r0, r6
 8007958:	4629      	mov	r1, r5
 800795a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800795e:	2900      	cmp	r1, #0
 8007960:	dc0e      	bgt.n	8007980 <__ieee754_sqrt+0x5c>
 8007962:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8007966:	ea5e 0707 	orrs.w	r7, lr, r7
 800796a:	d0f4      	beq.n	8007956 <__ieee754_sqrt+0x32>
 800796c:	b141      	cbz	r1, 8007980 <__ieee754_sqrt+0x5c>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	f7f8 fbfb 	bl	800016c <__aeabi_dsub>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	f7f8 fed5 	bl	8000728 <__aeabi_ddiv>
 800797e:	e7e8      	b.n	8007952 <__ieee754_sqrt+0x2e>
 8007980:	1512      	asrs	r2, r2, #20
 8007982:	d10c      	bne.n	800799e <__ieee754_sqrt+0x7a>
 8007984:	2c00      	cmp	r4, #0
 8007986:	d06e      	beq.n	8007a66 <__ieee754_sqrt+0x142>
 8007988:	2100      	movs	r1, #0
 800798a:	02e6      	lsls	r6, r4, #11
 800798c:	d56f      	bpl.n	8007a6e <__ieee754_sqrt+0x14a>
 800798e:	1e48      	subs	r0, r1, #1
 8007990:	1a12      	subs	r2, r2, r0
 8007992:	f1c1 0020 	rsb	r0, r1, #32
 8007996:	fa23 f000 	lsr.w	r0, r3, r0
 800799a:	4304      	orrs	r4, r0
 800799c:	408b      	lsls	r3, r1
 800799e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80079a2:	07d5      	lsls	r5, r2, #31
 80079a4:	f04f 0500 	mov.w	r5, #0
 80079a8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80079ac:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80079b0:	bf42      	ittt	mi
 80079b2:	0064      	lslmi	r4, r4, #1
 80079b4:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80079b8:	005b      	lslmi	r3, r3, #1
 80079ba:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80079be:	1050      	asrs	r0, r2, #1
 80079c0:	4421      	add	r1, r4
 80079c2:	2216      	movs	r2, #22
 80079c4:	462c      	mov	r4, r5
 80079c6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	19a7      	adds	r7, r4, r6
 80079ce:	428f      	cmp	r7, r1
 80079d0:	bfde      	ittt	le
 80079d2:	1bc9      	suble	r1, r1, r7
 80079d4:	19bc      	addle	r4, r7, r6
 80079d6:	19ad      	addle	r5, r5, r6
 80079d8:	0049      	lsls	r1, r1, #1
 80079da:	3a01      	subs	r2, #1
 80079dc:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80079e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80079e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079e8:	d1f0      	bne.n	80079cc <__ieee754_sqrt+0xa8>
 80079ea:	f04f 0e20 	mov.w	lr, #32
 80079ee:	4694      	mov	ip, r2
 80079f0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80079f4:	42a1      	cmp	r1, r4
 80079f6:	eb06 070c 	add.w	r7, r6, ip
 80079fa:	dc02      	bgt.n	8007a02 <__ieee754_sqrt+0xde>
 80079fc:	d112      	bne.n	8007a24 <__ieee754_sqrt+0x100>
 80079fe:	429f      	cmp	r7, r3
 8007a00:	d810      	bhi.n	8007a24 <__ieee754_sqrt+0x100>
 8007a02:	2f00      	cmp	r7, #0
 8007a04:	eb07 0c06 	add.w	ip, r7, r6
 8007a08:	da34      	bge.n	8007a74 <__ieee754_sqrt+0x150>
 8007a0a:	f1bc 0f00 	cmp.w	ip, #0
 8007a0e:	db31      	blt.n	8007a74 <__ieee754_sqrt+0x150>
 8007a10:	f104 0801 	add.w	r8, r4, #1
 8007a14:	1b09      	subs	r1, r1, r4
 8007a16:	4644      	mov	r4, r8
 8007a18:	429f      	cmp	r7, r3
 8007a1a:	bf88      	it	hi
 8007a1c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8007a20:	1bdb      	subs	r3, r3, r7
 8007a22:	4432      	add	r2, r6
 8007a24:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8007a28:	f1be 0e01 	subs.w	lr, lr, #1
 8007a2c:	4439      	add	r1, r7
 8007a2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007a36:	d1dd      	bne.n	80079f4 <__ieee754_sqrt+0xd0>
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	d006      	beq.n	8007a4a <__ieee754_sqrt+0x126>
 8007a3c:	1c54      	adds	r4, r2, #1
 8007a3e:	bf0b      	itete	eq
 8007a40:	4672      	moveq	r2, lr
 8007a42:	3201      	addne	r2, #1
 8007a44:	3501      	addeq	r5, #1
 8007a46:	f022 0201 	bicne.w	r2, r2, #1
 8007a4a:	106b      	asrs	r3, r5, #1
 8007a4c:	0852      	lsrs	r2, r2, #1
 8007a4e:	07e9      	lsls	r1, r5, #31
 8007a50:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007a54:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007a58:	bf48      	it	mi
 8007a5a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007a5e:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8007a62:	4616      	mov	r6, r2
 8007a64:	e777      	b.n	8007956 <__ieee754_sqrt+0x32>
 8007a66:	0adc      	lsrs	r4, r3, #11
 8007a68:	3a15      	subs	r2, #21
 8007a6a:	055b      	lsls	r3, r3, #21
 8007a6c:	e78a      	b.n	8007984 <__ieee754_sqrt+0x60>
 8007a6e:	0064      	lsls	r4, r4, #1
 8007a70:	3101      	adds	r1, #1
 8007a72:	e78a      	b.n	800798a <__ieee754_sqrt+0x66>
 8007a74:	46a0      	mov	r8, r4
 8007a76:	e7cd      	b.n	8007a14 <__ieee754_sqrt+0xf0>
 8007a78:	7ff00000 	.word	0x7ff00000

08007a7c <__ieee754_logf>:
 8007a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a80:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8007a84:	4601      	mov	r1, r0
 8007a86:	4605      	mov	r5, r0
 8007a88:	d106      	bne.n	8007a98 <__ieee754_logf+0x1c>
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8007a90:	f7f9 fa2a 	bl	8000ee8 <__aeabi_fdiv>
 8007a94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	da03      	bge.n	8007aa4 <__ieee754_logf+0x28>
 8007a9c:	f7f9 f866 	bl	8000b6c <__aeabi_fsub>
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	e7f5      	b.n	8007a90 <__ieee754_logf+0x14>
 8007aa4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007aa8:	db03      	blt.n	8007ab2 <__ieee754_logf+0x36>
 8007aaa:	f7f9 f861 	bl	8000b70 <__addsf3>
 8007aae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8007ab6:	da36      	bge.n	8007b26 <__ieee754_logf+0xaa>
 8007ab8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007abc:	f7f9 f960 	bl	8000d80 <__aeabi_fmul>
 8007ac0:	f06f 0218 	mvn.w	r2, #24
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	4b81      	ldr	r3, [pc, #516]	; (8007ccc <__ieee754_logf+0x250>)
 8007ac8:	15ee      	asrs	r6, r5, #23
 8007aca:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8007ace:	3e7f      	subs	r6, #127	; 0x7f
 8007ad0:	442b      	add	r3, r5
 8007ad2:	4416      	add	r6, r2
 8007ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad8:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8007adc:	f083 537e 	eor.w	r3, r3, #1065353216	; 0x3f800000
 8007ae0:	ea43 0005 	orr.w	r0, r3, r5
 8007ae4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007ae8:	f7f9 f840 	bl	8000b6c <__aeabi_fsub>
 8007aec:	f105 030f 	add.w	r3, r5, #15
 8007af0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007af4:	2b0f      	cmp	r3, #15
 8007af6:	4604      	mov	r4, r0
 8007af8:	dc47      	bgt.n	8007b8a <__ieee754_logf+0x10e>
 8007afa:	2100      	movs	r1, #0
 8007afc:	f7f9 fad4 	bl	80010a8 <__aeabi_fcmpeq>
 8007b00:	b198      	cbz	r0, 8007b2a <__ieee754_logf+0xae>
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	f000 80de 	beq.w	8007cc4 <__ieee754_logf+0x248>
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7f9 f8e5 	bl	8000cd8 <__aeabi_i2f>
 8007b0e:	4970      	ldr	r1, [pc, #448]	; (8007cd0 <__ieee754_logf+0x254>)
 8007b10:	4605      	mov	r5, r0
 8007b12:	f7f9 f935 	bl	8000d80 <__aeabi_fmul>
 8007b16:	496f      	ldr	r1, [pc, #444]	; (8007cd4 <__ieee754_logf+0x258>)
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f7f9 f930 	bl	8000d80 <__aeabi_fmul>
 8007b20:	4601      	mov	r1, r0
 8007b22:	4620      	mov	r0, r4
 8007b24:	e7c1      	b.n	8007aaa <__ieee754_logf+0x2e>
 8007b26:	2200      	movs	r2, #0
 8007b28:	e7cd      	b.n	8007ac6 <__ieee754_logf+0x4a>
 8007b2a:	496b      	ldr	r1, [pc, #428]	; (8007cd8 <__ieee754_logf+0x25c>)
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f7f9 f927 	bl	8000d80 <__aeabi_fmul>
 8007b32:	4601      	mov	r1, r0
 8007b34:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007b38:	f7f9 f818 	bl	8000b6c <__aeabi_fsub>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4620      	mov	r0, r4
 8007b42:	f7f9 f91d 	bl	8000d80 <__aeabi_fmul>
 8007b46:	4601      	mov	r1, r0
 8007b48:	4628      	mov	r0, r5
 8007b4a:	f7f9 f919 	bl	8000d80 <__aeabi_fmul>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b916      	cbnz	r6, 8007b58 <__ieee754_logf+0xdc>
 8007b52:	4601      	mov	r1, r0
 8007b54:	4620      	mov	r0, r4
 8007b56:	e014      	b.n	8007b82 <__ieee754_logf+0x106>
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f7f9 f8bd 	bl	8000cd8 <__aeabi_i2f>
 8007b5e:	495c      	ldr	r1, [pc, #368]	; (8007cd0 <__ieee754_logf+0x254>)
 8007b60:	4607      	mov	r7, r0
 8007b62:	f7f9 f90d 	bl	8000d80 <__aeabi_fmul>
 8007b66:	495b      	ldr	r1, [pc, #364]	; (8007cd4 <__ieee754_logf+0x258>)
 8007b68:	4606      	mov	r6, r0
 8007b6a:	4638      	mov	r0, r7
 8007b6c:	f7f9 f908 	bl	8000d80 <__aeabi_fmul>
 8007b70:	4601      	mov	r1, r0
 8007b72:	4628      	mov	r0, r5
 8007b74:	f7f8 fffa 	bl	8000b6c <__aeabi_fsub>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f7f8 fff7 	bl	8000b6c <__aeabi_fsub>
 8007b7e:	4601      	mov	r1, r0
 8007b80:	4630      	mov	r0, r6
 8007b82:	f7f8 fff3 	bl	8000b6c <__aeabi_fsub>
 8007b86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007b8e:	f7f8 ffef 	bl	8000b70 <__addsf3>
 8007b92:	4601      	mov	r1, r0
 8007b94:	4620      	mov	r0, r4
 8007b96:	f7f9 f9a7 	bl	8000ee8 <__aeabi_fdiv>
 8007b9a:	4607      	mov	r7, r0
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	f7f9 f89b 	bl	8000cd8 <__aeabi_i2f>
 8007ba2:	4639      	mov	r1, r7
 8007ba4:	4681      	mov	r9, r0
 8007ba6:	4638      	mov	r0, r7
 8007ba8:	f7f9 f8ea 	bl	8000d80 <__aeabi_fmul>
 8007bac:	4601      	mov	r1, r0
 8007bae:	4683      	mov	fp, r0
 8007bb0:	f7f9 f8e6 	bl	8000d80 <__aeabi_fmul>
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4949      	ldr	r1, [pc, #292]	; (8007cdc <__ieee754_logf+0x260>)
 8007bb8:	f7f9 f8e2 	bl	8000d80 <__aeabi_fmul>
 8007bbc:	4948      	ldr	r1, [pc, #288]	; (8007ce0 <__ieee754_logf+0x264>)
 8007bbe:	f7f8 ffd7 	bl	8000b70 <__addsf3>
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	f7f9 f8dc 	bl	8000d80 <__aeabi_fmul>
 8007bc8:	4946      	ldr	r1, [pc, #280]	; (8007ce4 <__ieee754_logf+0x268>)
 8007bca:	f7f8 ffd1 	bl	8000b70 <__addsf3>
 8007bce:	4641      	mov	r1, r8
 8007bd0:	f7f9 f8d6 	bl	8000d80 <__aeabi_fmul>
 8007bd4:	4944      	ldr	r1, [pc, #272]	; (8007ce8 <__ieee754_logf+0x26c>)
 8007bd6:	f7f8 ffcb 	bl	8000b70 <__addsf3>
 8007bda:	4659      	mov	r1, fp
 8007bdc:	f7f9 f8d0 	bl	8000d80 <__aeabi_fmul>
 8007be0:	4942      	ldr	r1, [pc, #264]	; (8007cec <__ieee754_logf+0x270>)
 8007be2:	4683      	mov	fp, r0
 8007be4:	4640      	mov	r0, r8
 8007be6:	f7f9 f8cb 	bl	8000d80 <__aeabi_fmul>
 8007bea:	4941      	ldr	r1, [pc, #260]	; (8007cf0 <__ieee754_logf+0x274>)
 8007bec:	f7f8 ffc0 	bl	8000b70 <__addsf3>
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	f7f9 f8c5 	bl	8000d80 <__aeabi_fmul>
 8007bf6:	493f      	ldr	r1, [pc, #252]	; (8007cf4 <__ieee754_logf+0x278>)
 8007bf8:	f7f8 ffba 	bl	8000b70 <__addsf3>
 8007bfc:	4641      	mov	r1, r8
 8007bfe:	f7f9 f8bf 	bl	8000d80 <__aeabi_fmul>
 8007c02:	4601      	mov	r1, r0
 8007c04:	4658      	mov	r0, fp
 8007c06:	f7f8 ffb3 	bl	8000b70 <__addsf3>
 8007c0a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8007cf8 <__ieee754_logf+0x27c>
 8007c0e:	4680      	mov	r8, r0
 8007c10:	f5c5 1057 	rsb	r0, r5, #3522560	; 0x35c000
 8007c14:	44aa      	add	sl, r5
 8007c16:	f500 7022 	add.w	r0, r0, #648	; 0x288
 8007c1a:	ea40 000a 	orr.w	r0, r0, sl
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	dd2c      	ble.n	8007c7c <__ieee754_logf+0x200>
 8007c22:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007c26:	4620      	mov	r0, r4
 8007c28:	f7f9 f8aa 	bl	8000d80 <__aeabi_fmul>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	f7f9 f8a7 	bl	8000d80 <__aeabi_fmul>
 8007c32:	4605      	mov	r5, r0
 8007c34:	b966      	cbnz	r6, 8007c50 <__ieee754_logf+0x1d4>
 8007c36:	4601      	mov	r1, r0
 8007c38:	4640      	mov	r0, r8
 8007c3a:	f7f8 ff99 	bl	8000b70 <__addsf3>
 8007c3e:	4639      	mov	r1, r7
 8007c40:	f7f9 f89e 	bl	8000d80 <__aeabi_fmul>
 8007c44:	4601      	mov	r1, r0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f7f8 ff90 	bl	8000b6c <__aeabi_fsub>
 8007c4c:	4601      	mov	r1, r0
 8007c4e:	e781      	b.n	8007b54 <__ieee754_logf+0xd8>
 8007c50:	491f      	ldr	r1, [pc, #124]	; (8007cd0 <__ieee754_logf+0x254>)
 8007c52:	4648      	mov	r0, r9
 8007c54:	f7f9 f894 	bl	8000d80 <__aeabi_fmul>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	4640      	mov	r0, r8
 8007c5e:	f7f8 ff87 	bl	8000b70 <__addsf3>
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f9 f88c 	bl	8000d80 <__aeabi_fmul>
 8007c68:	491a      	ldr	r1, [pc, #104]	; (8007cd4 <__ieee754_logf+0x258>)
 8007c6a:	4607      	mov	r7, r0
 8007c6c:	4648      	mov	r0, r9
 8007c6e:	f7f9 f887 	bl	8000d80 <__aeabi_fmul>
 8007c72:	4601      	mov	r1, r0
 8007c74:	4638      	mov	r0, r7
 8007c76:	f7f8 ff7b 	bl	8000b70 <__addsf3>
 8007c7a:	e779      	b.n	8007b70 <__ieee754_logf+0xf4>
 8007c7c:	b93e      	cbnz	r6, 8007c8e <__ieee754_logf+0x212>
 8007c7e:	4641      	mov	r1, r8
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7f8 ff73 	bl	8000b6c <__aeabi_fsub>
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f9 f87a 	bl	8000d80 <__aeabi_fmul>
 8007c8c:	e7de      	b.n	8007c4c <__ieee754_logf+0x1d0>
 8007c8e:	4910      	ldr	r1, [pc, #64]	; (8007cd0 <__ieee754_logf+0x254>)
 8007c90:	4648      	mov	r0, r9
 8007c92:	f7f9 f875 	bl	8000d80 <__aeabi_fmul>
 8007c96:	4641      	mov	r1, r8
 8007c98:	4605      	mov	r5, r0
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7f8 ff66 	bl	8000b6c <__aeabi_fsub>
 8007ca0:	4639      	mov	r1, r7
 8007ca2:	f7f9 f86d 	bl	8000d80 <__aeabi_fmul>
 8007ca6:	490b      	ldr	r1, [pc, #44]	; (8007cd4 <__ieee754_logf+0x258>)
 8007ca8:	4606      	mov	r6, r0
 8007caa:	4648      	mov	r0, r9
 8007cac:	f7f9 f868 	bl	8000d80 <__aeabi_fmul>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	f7f8 ff5a 	bl	8000b6c <__aeabi_fsub>
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f7f8 ff57 	bl	8000b6c <__aeabi_fsub>
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e75e      	b.n	8007b82 <__ieee754_logf+0x106>
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cca:	bf00      	nop
 8007ccc:	004afb20 	.word	0x004afb20
 8007cd0:	3f317180 	.word	0x3f317180
 8007cd4:	3717f7d1 	.word	0x3717f7d1
 8007cd8:	3eaaaaab 	.word	0x3eaaaaab
 8007cdc:	3e178897 	.word	0x3e178897
 8007ce0:	3e3a3325 	.word	0x3e3a3325
 8007ce4:	3e924925 	.word	0x3e924925
 8007ce8:	3f2aaaab 	.word	0x3f2aaaab
 8007cec:	3e1cd04f 	.word	0x3e1cd04f
 8007cf0:	3e638e29 	.word	0x3e638e29
 8007cf4:	3ecccccd 	.word	0x3ecccccd
 8007cf8:	ffcf5c30 	.word	0xffcf5c30

08007cfc <__ieee754_powf>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	b087      	sub	sp, #28
 8007d02:	9101      	str	r1, [sp, #4]
 8007d04:	9c01      	ldr	r4, [sp, #4]
 8007d06:	4681      	mov	r9, r0
 8007d08:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8007d0c:	f000 8325 	beq.w	800835a <__ieee754_powf+0x65e>
 8007d10:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007d14:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007d18:	4680      	mov	r8, r0
 8007d1a:	dc06      	bgt.n	8007d2a <__ieee754_powf+0x2e>
 8007d1c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007d20:	dd09      	ble.n	8007d36 <__ieee754_powf+0x3a>
 8007d22:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007d26:	f000 8318 	beq.w	800835a <__ieee754_powf+0x65e>
 8007d2a:	4885      	ldr	r0, [pc, #532]	; (8007f40 <__ieee754_powf+0x244>)
 8007d2c:	b007      	add	sp, #28
 8007d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d32:	f001 b9c7 	b.w	80090c4 <nanf>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	da1d      	bge.n	8007d76 <__ieee754_powf+0x7a>
 8007d3a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007d3e:	da2b      	bge.n	8007d98 <__ieee754_powf+0x9c>
 8007d40:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007d44:	db30      	blt.n	8007da8 <__ieee754_powf+0xac>
 8007d46:	15fb      	asrs	r3, r7, #23
 8007d48:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007d4c:	fa47 f503 	asr.w	r5, r7, r3
 8007d50:	fa05 f303 	lsl.w	r3, r5, r3
 8007d54:	429f      	cmp	r7, r3
 8007d56:	d127      	bne.n	8007da8 <__ieee754_powf+0xac>
 8007d58:	f005 0501 	and.w	r5, r5, #1
 8007d5c:	f1c5 0502 	rsb	r5, r5, #2
 8007d60:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007d64:	d122      	bne.n	8007dac <__ieee754_powf+0xb0>
 8007d66:	2c00      	cmp	r4, #0
 8007d68:	4649      	mov	r1, r9
 8007d6a:	da11      	bge.n	8007d90 <__ieee754_powf+0x94>
 8007d6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007d70:	f7f9 f8ba 	bl	8000ee8 <__aeabi_fdiv>
 8007d74:	e021      	b.n	8007dba <__ieee754_powf+0xbe>
 8007d76:	2500      	movs	r5, #0
 8007d78:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007d7c:	d1f0      	bne.n	8007d60 <__ieee754_powf+0x64>
 8007d7e:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007d82:	f000 82ea 	beq.w	800835a <__ieee754_powf+0x65e>
 8007d86:	dd09      	ble.n	8007d9c <__ieee754_powf+0xa0>
 8007d88:	2c00      	cmp	r4, #0
 8007d8a:	f280 82e9 	bge.w	8008360 <__ieee754_powf+0x664>
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4608      	mov	r0, r1
 8007d92:	b007      	add	sp, #28
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	2502      	movs	r5, #2
 8007d9a:	e7ed      	b.n	8007d78 <__ieee754_powf+0x7c>
 8007d9c:	2c00      	cmp	r4, #0
 8007d9e:	daf6      	bge.n	8007d8e <__ieee754_powf+0x92>
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007da6:	e7f3      	b.n	8007d90 <__ieee754_powf+0x94>
 8007da8:	2500      	movs	r5, #0
 8007daa:	e7d9      	b.n	8007d60 <__ieee754_powf+0x64>
 8007dac:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007db0:	d105      	bne.n	8007dbe <__ieee754_powf+0xc2>
 8007db2:	4649      	mov	r1, r9
 8007db4:	4608      	mov	r0, r1
 8007db6:	f7f8 ffe3 	bl	8000d80 <__aeabi_fmul>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	e7e8      	b.n	8007d90 <__ieee754_powf+0x94>
 8007dbe:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007dc2:	4648      	mov	r0, r9
 8007dc4:	d107      	bne.n	8007dd6 <__ieee754_powf+0xda>
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	db04      	blt.n	8007dd6 <__ieee754_powf+0xda>
 8007dcc:	b007      	add	sp, #28
 8007dce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd2:	f000 bc37 	b.w	8008644 <__ieee754_sqrtf>
 8007dd6:	f001 f929 	bl	800902c <fabsf>
 8007dda:	4601      	mov	r1, r0
 8007ddc:	b126      	cbz	r6, 8007de8 <__ieee754_powf+0xec>
 8007dde:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007de2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007de6:	d118      	bne.n	8007e1a <__ieee754_powf+0x11e>
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	da04      	bge.n	8007df6 <__ieee754_powf+0xfa>
 8007dec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007df0:	f7f9 f87a 	bl	8000ee8 <__aeabi_fdiv>
 8007df4:	4601      	mov	r1, r0
 8007df6:	f1b8 0f00 	cmp.w	r8, #0
 8007dfa:	dac9      	bge.n	8007d90 <__ieee754_powf+0x94>
 8007dfc:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8007e00:	ea50 0305 	orrs.w	r3, r0, r5
 8007e04:	d104      	bne.n	8007e10 <__ieee754_powf+0x114>
 8007e06:	4608      	mov	r0, r1
 8007e08:	f7f8 feb0 	bl	8000b6c <__aeabi_fsub>
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	e7af      	b.n	8007d70 <__ieee754_powf+0x74>
 8007e10:	2d01      	cmp	r5, #1
 8007e12:	d1bd      	bne.n	8007d90 <__ieee754_powf+0x94>
 8007e14:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007e18:	e7ba      	b.n	8007d90 <__ieee754_powf+0x94>
 8007e1a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8007e1e:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	432b      	orrs	r3, r5
 8007e26:	d101      	bne.n	8007e2c <__ieee754_powf+0x130>
 8007e28:	4649      	mov	r1, r9
 8007e2a:	e7ec      	b.n	8007e06 <__ieee754_powf+0x10a>
 8007e2c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007e30:	f340 8098 	ble.w	8007f64 <__ieee754_powf+0x268>
 8007e34:	4b43      	ldr	r3, [pc, #268]	; (8007f44 <__ieee754_powf+0x248>)
 8007e36:	429e      	cmp	r6, r3
 8007e38:	dc03      	bgt.n	8007e42 <__ieee754_powf+0x146>
 8007e3a:	2c00      	cmp	r4, #0
 8007e3c:	daa7      	bge.n	8007d8e <__ieee754_powf+0x92>
 8007e3e:	4942      	ldr	r1, [pc, #264]	; (8007f48 <__ieee754_powf+0x24c>)
 8007e40:	e7b8      	b.n	8007db4 <__ieee754_powf+0xb8>
 8007e42:	4b42      	ldr	r3, [pc, #264]	; (8007f4c <__ieee754_powf+0x250>)
 8007e44:	429e      	cmp	r6, r3
 8007e46:	dd02      	ble.n	8007e4e <__ieee754_powf+0x152>
 8007e48:	2c00      	cmp	r4, #0
 8007e4a:	dcf8      	bgt.n	8007e3e <__ieee754_powf+0x142>
 8007e4c:	e79f      	b.n	8007d8e <__ieee754_powf+0x92>
 8007e4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007e52:	f7f8 fe8b 	bl	8000b6c <__aeabi_fsub>
 8007e56:	493e      	ldr	r1, [pc, #248]	; (8007f50 <__ieee754_powf+0x254>)
 8007e58:	4606      	mov	r6, r0
 8007e5a:	f7f8 ff91 	bl	8000d80 <__aeabi_fmul>
 8007e5e:	493d      	ldr	r1, [pc, #244]	; (8007f54 <__ieee754_powf+0x258>)
 8007e60:	4607      	mov	r7, r0
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7f8 ff8c 	bl	8000d80 <__aeabi_fmul>
 8007e68:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8007e6c:	4680      	mov	r8, r0
 8007e6e:	4630      	mov	r0, r6
 8007e70:	f7f8 ff86 	bl	8000d80 <__aeabi_fmul>
 8007e74:	4601      	mov	r1, r0
 8007e76:	4838      	ldr	r0, [pc, #224]	; (8007f58 <__ieee754_powf+0x25c>)
 8007e78:	f7f8 fe78 	bl	8000b6c <__aeabi_fsub>
 8007e7c:	4631      	mov	r1, r6
 8007e7e:	f7f8 ff7f 	bl	8000d80 <__aeabi_fmul>
 8007e82:	4601      	mov	r1, r0
 8007e84:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8007e88:	f7f8 fe70 	bl	8000b6c <__aeabi_fsub>
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4681      	mov	r9, r0
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7f8 ff75 	bl	8000d80 <__aeabi_fmul>
 8007e96:	4601      	mov	r1, r0
 8007e98:	4648      	mov	r0, r9
 8007e9a:	f7f8 ff71 	bl	8000d80 <__aeabi_fmul>
 8007e9e:	492f      	ldr	r1, [pc, #188]	; (8007f5c <__ieee754_powf+0x260>)
 8007ea0:	f7f8 ff6e 	bl	8000d80 <__aeabi_fmul>
 8007ea4:	4601      	mov	r1, r0
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7f8 fe60 	bl	8000b6c <__aeabi_fsub>
 8007eac:	4601      	mov	r1, r0
 8007eae:	4606      	mov	r6, r0
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7f8 fe5d 	bl	8000b70 <__addsf3>
 8007eb6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8007eba:	f02a 0a0f 	bic.w	sl, sl, #15
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	f7f8 fe53 	bl	8000b6c <__aeabi_fsub>
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f7f8 fe4f 	bl	8000b6c <__aeabi_fsub>
 8007ece:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	3d01      	subs	r5, #1
 8007ed6:	f024 040f 	bic.w	r4, r4, #15
 8007eda:	432b      	orrs	r3, r5
 8007edc:	4606      	mov	r6, r0
 8007ede:	4621      	mov	r1, r4
 8007ee0:	9801      	ldr	r0, [sp, #4]
 8007ee2:	bf0c      	ite	eq
 8007ee4:	4d1e      	ldreq	r5, [pc, #120]	; (8007f60 <__ieee754_powf+0x264>)
 8007ee6:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8007eea:	f7f8 fe3f 	bl	8000b6c <__aeabi_fsub>
 8007eee:	4651      	mov	r1, sl
 8007ef0:	f7f8 ff46 	bl	8000d80 <__aeabi_fmul>
 8007ef4:	9901      	ldr	r1, [sp, #4]
 8007ef6:	4607      	mov	r7, r0
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7f8 ff41 	bl	8000d80 <__aeabi_fmul>
 8007efe:	4601      	mov	r1, r0
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7f8 fe35 	bl	8000b70 <__addsf3>
 8007f06:	4621      	mov	r1, r4
 8007f08:	4606      	mov	r6, r0
 8007f0a:	4650      	mov	r0, sl
 8007f0c:	f7f8 ff38 	bl	8000d80 <__aeabi_fmul>
 8007f10:	4601      	mov	r1, r0
 8007f12:	4607      	mov	r7, r0
 8007f14:	4681      	mov	r9, r0
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7f8 fe2a 	bl	8000b70 <__addsf3>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	4682      	mov	sl, r0
 8007f20:	4680      	mov	r8, r0
 8007f22:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007f26:	f340 81fb 	ble.w	8008320 <__ieee754_powf+0x624>
 8007f2a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8007f2e:	f340 8149 	ble.w	80081c4 <__ieee754_powf+0x4c8>
 8007f32:	4905      	ldr	r1, [pc, #20]	; (8007f48 <__ieee754_powf+0x24c>)
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7f8 ff23 	bl	8000d80 <__aeabi_fmul>
 8007f3a:	4903      	ldr	r1, [pc, #12]	; (8007f48 <__ieee754_powf+0x24c>)
 8007f3c:	e73b      	b.n	8007db6 <__ieee754_powf+0xba>
 8007f3e:	bf00      	nop
 8007f40:	080097a0 	.word	0x080097a0
 8007f44:	3f7ffff7 	.word	0x3f7ffff7
 8007f48:	7149f2ca 	.word	0x7149f2ca
 8007f4c:	3f800007 	.word	0x3f800007
 8007f50:	3fb8aa00 	.word	0x3fb8aa00
 8007f54:	36eca570 	.word	0x36eca570
 8007f58:	3eaaaaab 	.word	0x3eaaaaab
 8007f5c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f60:	bf800000 	.word	0xbf800000
 8007f64:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8007f68:	f280 810a 	bge.w	8008180 <__ieee754_powf+0x484>
 8007f6c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8007f70:	f7f8 ff06 	bl	8000d80 <__aeabi_fmul>
 8007f74:	f06f 0217 	mvn.w	r2, #23
 8007f78:	4606      	mov	r6, r0
 8007f7a:	15f3      	asrs	r3, r6, #23
 8007f7c:	3b7f      	subs	r3, #127	; 0x7f
 8007f7e:	441a      	add	r2, r3
 8007f80:	4b81      	ldr	r3, [pc, #516]	; (8008188 <__ieee754_powf+0x48c>)
 8007f82:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8007f86:	4298      	cmp	r0, r3
 8007f88:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 8007f8c:	dd06      	ble.n	8007f9c <__ieee754_powf+0x2a0>
 8007f8e:	4b7f      	ldr	r3, [pc, #508]	; (800818c <__ieee754_powf+0x490>)
 8007f90:	4298      	cmp	r0, r3
 8007f92:	f340 80f7 	ble.w	8008184 <__ieee754_powf+0x488>
 8007f96:	3201      	adds	r2, #1
 8007f98:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 8007f9c:	2700      	movs	r7, #0
 8007f9e:	4b7c      	ldr	r3, [pc, #496]	; (8008190 <__ieee754_powf+0x494>)
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8007fa6:	9205      	str	r2, [sp, #20]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	9302      	str	r3, [sp, #8]
 8007fac:	f7f8 fdde 	bl	8000b6c <__aeabi_fsub>
 8007fb0:	9902      	ldr	r1, [sp, #8]
 8007fb2:	4683      	mov	fp, r0
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7f8 fddb 	bl	8000b70 <__addsf3>
 8007fba:	4601      	mov	r1, r0
 8007fbc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007fc0:	f7f8 ff92 	bl	8000ee8 <__aeabi_fdiv>
 8007fc4:	4601      	mov	r1, r0
 8007fc6:	9004      	str	r0, [sp, #16]
 8007fc8:	4658      	mov	r0, fp
 8007fca:	f7f8 fed9 	bl	8000d80 <__aeabi_fmul>
 8007fce:	46b2      	mov	sl, r6
 8007fd0:	1076      	asrs	r6, r6, #1
 8007fd2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8007fd6:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8007fda:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8007fde:	f028 080f 	bic.w	r8, r8, #15
 8007fe2:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8007fe6:	4681      	mov	r9, r0
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4640      	mov	r0, r8
 8007fec:	f7f8 fec8 	bl	8000d80 <__aeabi_fmul>
 8007ff0:	4601      	mov	r1, r0
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f7f8 fdba 	bl	8000b6c <__aeabi_fsub>
 8007ff8:	9902      	ldr	r1, [sp, #8]
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f7f8 fdb5 	bl	8000b6c <__aeabi_fsub>
 8008002:	4601      	mov	r1, r0
 8008004:	4650      	mov	r0, sl
 8008006:	f7f8 fdb1 	bl	8000b6c <__aeabi_fsub>
 800800a:	4641      	mov	r1, r8
 800800c:	f7f8 feb8 	bl	8000d80 <__aeabi_fmul>
 8008010:	4601      	mov	r1, r0
 8008012:	4658      	mov	r0, fp
 8008014:	f7f8 fdaa 	bl	8000b6c <__aeabi_fsub>
 8008018:	9b04      	ldr	r3, [sp, #16]
 800801a:	4619      	mov	r1, r3
 800801c:	f7f8 feb0 	bl	8000d80 <__aeabi_fmul>
 8008020:	4649      	mov	r1, r9
 8008022:	4683      	mov	fp, r0
 8008024:	4648      	mov	r0, r9
 8008026:	f7f8 feab 	bl	8000d80 <__aeabi_fmul>
 800802a:	4606      	mov	r6, r0
 800802c:	4959      	ldr	r1, [pc, #356]	; (8008194 <__ieee754_powf+0x498>)
 800802e:	f7f8 fea7 	bl	8000d80 <__aeabi_fmul>
 8008032:	4959      	ldr	r1, [pc, #356]	; (8008198 <__ieee754_powf+0x49c>)
 8008034:	f7f8 fd9c 	bl	8000b70 <__addsf3>
 8008038:	4631      	mov	r1, r6
 800803a:	f7f8 fea1 	bl	8000d80 <__aeabi_fmul>
 800803e:	4957      	ldr	r1, [pc, #348]	; (800819c <__ieee754_powf+0x4a0>)
 8008040:	f7f8 fd96 	bl	8000b70 <__addsf3>
 8008044:	4631      	mov	r1, r6
 8008046:	f7f8 fe9b 	bl	8000d80 <__aeabi_fmul>
 800804a:	4955      	ldr	r1, [pc, #340]	; (80081a0 <__ieee754_powf+0x4a4>)
 800804c:	f7f8 fd90 	bl	8000b70 <__addsf3>
 8008050:	4631      	mov	r1, r6
 8008052:	f7f8 fe95 	bl	8000d80 <__aeabi_fmul>
 8008056:	4953      	ldr	r1, [pc, #332]	; (80081a4 <__ieee754_powf+0x4a8>)
 8008058:	f7f8 fd8a 	bl	8000b70 <__addsf3>
 800805c:	4631      	mov	r1, r6
 800805e:	f7f8 fe8f 	bl	8000d80 <__aeabi_fmul>
 8008062:	4951      	ldr	r1, [pc, #324]	; (80081a8 <__ieee754_powf+0x4ac>)
 8008064:	f7f8 fd84 	bl	8000b70 <__addsf3>
 8008068:	4631      	mov	r1, r6
 800806a:	4682      	mov	sl, r0
 800806c:	4630      	mov	r0, r6
 800806e:	f7f8 fe87 	bl	8000d80 <__aeabi_fmul>
 8008072:	4601      	mov	r1, r0
 8008074:	4650      	mov	r0, sl
 8008076:	f7f8 fe83 	bl	8000d80 <__aeabi_fmul>
 800807a:	4606      	mov	r6, r0
 800807c:	4649      	mov	r1, r9
 800807e:	4640      	mov	r0, r8
 8008080:	f7f8 fd76 	bl	8000b70 <__addsf3>
 8008084:	4659      	mov	r1, fp
 8008086:	f7f8 fe7b 	bl	8000d80 <__aeabi_fmul>
 800808a:	4631      	mov	r1, r6
 800808c:	f7f8 fd70 	bl	8000b70 <__addsf3>
 8008090:	4641      	mov	r1, r8
 8008092:	4682      	mov	sl, r0
 8008094:	4640      	mov	r0, r8
 8008096:	f7f8 fe73 	bl	8000d80 <__aeabi_fmul>
 800809a:	4944      	ldr	r1, [pc, #272]	; (80081ac <__ieee754_powf+0x4b0>)
 800809c:	9002      	str	r0, [sp, #8]
 800809e:	f7f8 fd67 	bl	8000b70 <__addsf3>
 80080a2:	4651      	mov	r1, sl
 80080a4:	f7f8 fd64 	bl	8000b70 <__addsf3>
 80080a8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80080ac:	f026 060f 	bic.w	r6, r6, #15
 80080b0:	4631      	mov	r1, r6
 80080b2:	4640      	mov	r0, r8
 80080b4:	f7f8 fe64 	bl	8000d80 <__aeabi_fmul>
 80080b8:	493c      	ldr	r1, [pc, #240]	; (80081ac <__ieee754_powf+0x4b0>)
 80080ba:	4680      	mov	r8, r0
 80080bc:	4630      	mov	r0, r6
 80080be:	f7f8 fd55 	bl	8000b6c <__aeabi_fsub>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	4619      	mov	r1, r3
 80080c6:	f7f8 fd51 	bl	8000b6c <__aeabi_fsub>
 80080ca:	4601      	mov	r1, r0
 80080cc:	4650      	mov	r0, sl
 80080ce:	f7f8 fd4d 	bl	8000b6c <__aeabi_fsub>
 80080d2:	4649      	mov	r1, r9
 80080d4:	f7f8 fe54 	bl	8000d80 <__aeabi_fmul>
 80080d8:	4659      	mov	r1, fp
 80080da:	4681      	mov	r9, r0
 80080dc:	4630      	mov	r0, r6
 80080de:	f7f8 fe4f 	bl	8000d80 <__aeabi_fmul>
 80080e2:	4601      	mov	r1, r0
 80080e4:	4648      	mov	r0, r9
 80080e6:	f7f8 fd43 	bl	8000b70 <__addsf3>
 80080ea:	4682      	mov	sl, r0
 80080ec:	4601      	mov	r1, r0
 80080ee:	4640      	mov	r0, r8
 80080f0:	f7f8 fd3e 	bl	8000b70 <__addsf3>
 80080f4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80080f8:	f029 090f 	bic.w	r9, r9, #15
 80080fc:	492c      	ldr	r1, [pc, #176]	; (80081b0 <__ieee754_powf+0x4b4>)
 80080fe:	4648      	mov	r0, r9
 8008100:	f7f8 fe3e 	bl	8000d80 <__aeabi_fmul>
 8008104:	4641      	mov	r1, r8
 8008106:	4606      	mov	r6, r0
 8008108:	4648      	mov	r0, r9
 800810a:	f7f8 fd2f 	bl	8000b6c <__aeabi_fsub>
 800810e:	4601      	mov	r1, r0
 8008110:	4650      	mov	r0, sl
 8008112:	f7f8 fd2b 	bl	8000b6c <__aeabi_fsub>
 8008116:	4927      	ldr	r1, [pc, #156]	; (80081b4 <__ieee754_powf+0x4b8>)
 8008118:	f7f8 fe32 	bl	8000d80 <__aeabi_fmul>
 800811c:	4926      	ldr	r1, [pc, #152]	; (80081b8 <__ieee754_powf+0x4bc>)
 800811e:	4680      	mov	r8, r0
 8008120:	4648      	mov	r0, r9
 8008122:	f7f8 fe2d 	bl	8000d80 <__aeabi_fmul>
 8008126:	4601      	mov	r1, r0
 8008128:	4640      	mov	r0, r8
 800812a:	f7f8 fd21 	bl	8000b70 <__addsf3>
 800812e:	4b23      	ldr	r3, [pc, #140]	; (80081bc <__ieee754_powf+0x4c0>)
 8008130:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8008134:	f7f8 fd1c 	bl	8000b70 <__addsf3>
 8008138:	9a05      	ldr	r2, [sp, #20]
 800813a:	4680      	mov	r8, r0
 800813c:	4610      	mov	r0, r2
 800813e:	f7f8 fdcb 	bl	8000cd8 <__aeabi_i2f>
 8008142:	4681      	mov	r9, r0
 8008144:	4b1e      	ldr	r3, [pc, #120]	; (80081c0 <__ieee754_powf+0x4c4>)
 8008146:	4641      	mov	r1, r8
 8008148:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800814c:	4630      	mov	r0, r6
 800814e:	f7f8 fd0f 	bl	8000b70 <__addsf3>
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 fd0c 	bl	8000b70 <__addsf3>
 8008158:	4649      	mov	r1, r9
 800815a:	f7f8 fd09 	bl	8000b70 <__addsf3>
 800815e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8008162:	f02a 0a0f 	bic.w	sl, sl, #15
 8008166:	4649      	mov	r1, r9
 8008168:	4650      	mov	r0, sl
 800816a:	f7f8 fcff 	bl	8000b6c <__aeabi_fsub>
 800816e:	4639      	mov	r1, r7
 8008170:	f7f8 fcfc 	bl	8000b6c <__aeabi_fsub>
 8008174:	4631      	mov	r1, r6
 8008176:	f7f8 fcf9 	bl	8000b6c <__aeabi_fsub>
 800817a:	4601      	mov	r1, r0
 800817c:	4640      	mov	r0, r8
 800817e:	e6a4      	b.n	8007eca <__ieee754_powf+0x1ce>
 8008180:	2200      	movs	r2, #0
 8008182:	e6fa      	b.n	8007f7a <__ieee754_powf+0x27e>
 8008184:	2701      	movs	r7, #1
 8008186:	e70a      	b.n	8007f9e <__ieee754_powf+0x2a2>
 8008188:	001cc471 	.word	0x001cc471
 800818c:	005db3d6 	.word	0x005db3d6
 8008190:	080097e0 	.word	0x080097e0
 8008194:	3e53f142 	.word	0x3e53f142
 8008198:	3e6c3255 	.word	0x3e6c3255
 800819c:	3e8ba305 	.word	0x3e8ba305
 80081a0:	3eaaaaab 	.word	0x3eaaaaab
 80081a4:	3edb6db7 	.word	0x3edb6db7
 80081a8:	3f19999a 	.word	0x3f19999a
 80081ac:	40400000 	.word	0x40400000
 80081b0:	3f763800 	.word	0x3f763800
 80081b4:	3f76384f 	.word	0x3f76384f
 80081b8:	369dc3a0 	.word	0x369dc3a0
 80081bc:	080097f0 	.word	0x080097f0
 80081c0:	080097e8 	.word	0x080097e8
 80081c4:	f040 80c1 	bne.w	800834a <__ieee754_powf+0x64e>
 80081c8:	4966      	ldr	r1, [pc, #408]	; (8008364 <__ieee754_powf+0x668>)
 80081ca:	4630      	mov	r0, r6
 80081cc:	f7f8 fcd0 	bl	8000b70 <__addsf3>
 80081d0:	4639      	mov	r1, r7
 80081d2:	4681      	mov	r9, r0
 80081d4:	4650      	mov	r0, sl
 80081d6:	f7f8 fcc9 	bl	8000b6c <__aeabi_fsub>
 80081da:	4601      	mov	r1, r0
 80081dc:	4648      	mov	r0, r9
 80081de:	f7f8 ff8b 	bl	80010f8 <__aeabi_fcmpgt>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	f47f aea5 	bne.w	8007f32 <__ieee754_powf+0x236>
 80081e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80081ec:	15e4      	asrs	r4, r4, #23
 80081ee:	3c7e      	subs	r4, #126	; 0x7e
 80081f0:	4123      	asrs	r3, r4
 80081f2:	4443      	add	r3, r8
 80081f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081f8:	495b      	ldr	r1, [pc, #364]	; (8008368 <__ieee754_powf+0x66c>)
 80081fa:	3a7f      	subs	r2, #127	; 0x7f
 80081fc:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008200:	4111      	asrs	r1, r2
 8008202:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8008206:	f1c2 0217 	rsb	r2, r2, #23
 800820a:	4114      	asrs	r4, r2
 800820c:	f1b8 0f00 	cmp.w	r8, #0
 8008210:	ea23 0101 	bic.w	r1, r3, r1
 8008214:	4638      	mov	r0, r7
 8008216:	bfb8      	it	lt
 8008218:	4264      	neglt	r4, r4
 800821a:	f7f8 fca7 	bl	8000b6c <__aeabi_fsub>
 800821e:	4681      	mov	r9, r0
 8008220:	4631      	mov	r1, r6
 8008222:	4648      	mov	r0, r9
 8008224:	f7f8 fca4 	bl	8000b70 <__addsf3>
 8008228:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800822c:	f027 070f 	bic.w	r7, r7, #15
 8008230:	494e      	ldr	r1, [pc, #312]	; (800836c <__ieee754_powf+0x670>)
 8008232:	4638      	mov	r0, r7
 8008234:	f7f8 fda4 	bl	8000d80 <__aeabi_fmul>
 8008238:	4649      	mov	r1, r9
 800823a:	4680      	mov	r8, r0
 800823c:	4638      	mov	r0, r7
 800823e:	f7f8 fc95 	bl	8000b6c <__aeabi_fsub>
 8008242:	4601      	mov	r1, r0
 8008244:	4630      	mov	r0, r6
 8008246:	f7f8 fc91 	bl	8000b6c <__aeabi_fsub>
 800824a:	4949      	ldr	r1, [pc, #292]	; (8008370 <__ieee754_powf+0x674>)
 800824c:	f7f8 fd98 	bl	8000d80 <__aeabi_fmul>
 8008250:	4948      	ldr	r1, [pc, #288]	; (8008374 <__ieee754_powf+0x678>)
 8008252:	4606      	mov	r6, r0
 8008254:	4638      	mov	r0, r7
 8008256:	f7f8 fd93 	bl	8000d80 <__aeabi_fmul>
 800825a:	4601      	mov	r1, r0
 800825c:	4630      	mov	r0, r6
 800825e:	f7f8 fc87 	bl	8000b70 <__addsf3>
 8008262:	4607      	mov	r7, r0
 8008264:	4601      	mov	r1, r0
 8008266:	4640      	mov	r0, r8
 8008268:	f7f8 fc82 	bl	8000b70 <__addsf3>
 800826c:	4641      	mov	r1, r8
 800826e:	4606      	mov	r6, r0
 8008270:	f7f8 fc7c 	bl	8000b6c <__aeabi_fsub>
 8008274:	4601      	mov	r1, r0
 8008276:	4638      	mov	r0, r7
 8008278:	f7f8 fc78 	bl	8000b6c <__aeabi_fsub>
 800827c:	4631      	mov	r1, r6
 800827e:	4680      	mov	r8, r0
 8008280:	4630      	mov	r0, r6
 8008282:	f7f8 fd7d 	bl	8000d80 <__aeabi_fmul>
 8008286:	4607      	mov	r7, r0
 8008288:	493b      	ldr	r1, [pc, #236]	; (8008378 <__ieee754_powf+0x67c>)
 800828a:	f7f8 fd79 	bl	8000d80 <__aeabi_fmul>
 800828e:	493b      	ldr	r1, [pc, #236]	; (800837c <__ieee754_powf+0x680>)
 8008290:	f7f8 fc6c 	bl	8000b6c <__aeabi_fsub>
 8008294:	4639      	mov	r1, r7
 8008296:	f7f8 fd73 	bl	8000d80 <__aeabi_fmul>
 800829a:	4939      	ldr	r1, [pc, #228]	; (8008380 <__ieee754_powf+0x684>)
 800829c:	f7f8 fc68 	bl	8000b70 <__addsf3>
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 fd6d 	bl	8000d80 <__aeabi_fmul>
 80082a6:	4937      	ldr	r1, [pc, #220]	; (8008384 <__ieee754_powf+0x688>)
 80082a8:	f7f8 fc60 	bl	8000b6c <__aeabi_fsub>
 80082ac:	4639      	mov	r1, r7
 80082ae:	f7f8 fd67 	bl	8000d80 <__aeabi_fmul>
 80082b2:	4935      	ldr	r1, [pc, #212]	; (8008388 <__ieee754_powf+0x68c>)
 80082b4:	f7f8 fc5c 	bl	8000b70 <__addsf3>
 80082b8:	4639      	mov	r1, r7
 80082ba:	f7f8 fd61 	bl	8000d80 <__aeabi_fmul>
 80082be:	4601      	mov	r1, r0
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7f8 fc53 	bl	8000b6c <__aeabi_fsub>
 80082c6:	4607      	mov	r7, r0
 80082c8:	4601      	mov	r1, r0
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7f8 fd58 	bl	8000d80 <__aeabi_fmul>
 80082d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80082d4:	4681      	mov	r9, r0
 80082d6:	4638      	mov	r0, r7
 80082d8:	f7f8 fc48 	bl	8000b6c <__aeabi_fsub>
 80082dc:	4601      	mov	r1, r0
 80082de:	4648      	mov	r0, r9
 80082e0:	f7f8 fe02 	bl	8000ee8 <__aeabi_fdiv>
 80082e4:	4641      	mov	r1, r8
 80082e6:	4607      	mov	r7, r0
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7f8 fd49 	bl	8000d80 <__aeabi_fmul>
 80082ee:	4641      	mov	r1, r8
 80082f0:	f7f8 fc3e 	bl	8000b70 <__addsf3>
 80082f4:	4601      	mov	r1, r0
 80082f6:	4638      	mov	r0, r7
 80082f8:	f7f8 fc38 	bl	8000b6c <__aeabi_fsub>
 80082fc:	4631      	mov	r1, r6
 80082fe:	f7f8 fc35 	bl	8000b6c <__aeabi_fsub>
 8008302:	4601      	mov	r1, r0
 8008304:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008308:	f7f8 fc30 	bl	8000b6c <__aeabi_fsub>
 800830c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008314:	da1f      	bge.n	8008356 <__ieee754_powf+0x65a>
 8008316:	4621      	mov	r1, r4
 8008318:	f000 fed8 	bl	80090cc <scalbnf>
 800831c:	4629      	mov	r1, r5
 800831e:	e54a      	b.n	8007db6 <__ieee754_powf+0xba>
 8008320:	4b1a      	ldr	r3, [pc, #104]	; (800838c <__ieee754_powf+0x690>)
 8008322:	429c      	cmp	r4, r3
 8008324:	dd05      	ble.n	8008332 <__ieee754_powf+0x636>
 8008326:	491a      	ldr	r1, [pc, #104]	; (8008390 <__ieee754_powf+0x694>)
 8008328:	4628      	mov	r0, r5
 800832a:	f7f8 fd29 	bl	8000d80 <__aeabi_fmul>
 800832e:	4918      	ldr	r1, [pc, #96]	; (8008390 <__ieee754_powf+0x694>)
 8008330:	e541      	b.n	8007db6 <__ieee754_powf+0xba>
 8008332:	d10a      	bne.n	800834a <__ieee754_powf+0x64e>
 8008334:	4639      	mov	r1, r7
 8008336:	f7f8 fc19 	bl	8000b6c <__aeabi_fsub>
 800833a:	4601      	mov	r1, r0
 800833c:	4630      	mov	r0, r6
 800833e:	f7f8 fec7 	bl	80010d0 <__aeabi_fcmple>
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f af50 	beq.w	80081e8 <__ieee754_powf+0x4ec>
 8008348:	e7ed      	b.n	8008326 <__ieee754_powf+0x62a>
 800834a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800834e:	f73f af4b 	bgt.w	80081e8 <__ieee754_powf+0x4ec>
 8008352:	2400      	movs	r4, #0
 8008354:	e764      	b.n	8008220 <__ieee754_powf+0x524>
 8008356:	4618      	mov	r0, r3
 8008358:	e7e0      	b.n	800831c <__ieee754_powf+0x620>
 800835a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800835e:	e517      	b.n	8007d90 <__ieee754_powf+0x94>
 8008360:	9901      	ldr	r1, [sp, #4]
 8008362:	e515      	b.n	8007d90 <__ieee754_powf+0x94>
 8008364:	3338aa3c 	.word	0x3338aa3c
 8008368:	007fffff 	.word	0x007fffff
 800836c:	3f317200 	.word	0x3f317200
 8008370:	3f317218 	.word	0x3f317218
 8008374:	35bfbe8c 	.word	0x35bfbe8c
 8008378:	3331bb4c 	.word	0x3331bb4c
 800837c:	35ddea0e 	.word	0x35ddea0e
 8008380:	388ab355 	.word	0x388ab355
 8008384:	3b360b61 	.word	0x3b360b61
 8008388:	3e2aaaab 	.word	0x3e2aaaab
 800838c:	43160000 	.word	0x43160000
 8008390:	0da24260 	.word	0x0da24260

08008394 <__ieee754_rem_pio2f>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	4a9d      	ldr	r2, [pc, #628]	; (8008610 <__ieee754_rem_pio2f+0x27c>)
 800839a:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800839e:	4295      	cmp	r5, r2
 80083a0:	b087      	sub	sp, #28
 80083a2:	460c      	mov	r4, r1
 80083a4:	4607      	mov	r7, r0
 80083a6:	dc04      	bgt.n	80083b2 <__ieee754_rem_pio2f+0x1e>
 80083a8:	2300      	movs	r3, #0
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	604b      	str	r3, [r1, #4]
 80083ae:	2600      	movs	r6, #0
 80083b0:	e01a      	b.n	80083e8 <__ieee754_rem_pio2f+0x54>
 80083b2:	4a98      	ldr	r2, [pc, #608]	; (8008614 <__ieee754_rem_pio2f+0x280>)
 80083b4:	4295      	cmp	r5, r2
 80083b6:	dc4b      	bgt.n	8008450 <__ieee754_rem_pio2f+0xbc>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	4997      	ldr	r1, [pc, #604]	; (8008618 <__ieee754_rem_pio2f+0x284>)
 80083bc:	f025 050f 	bic.w	r5, r5, #15
 80083c0:	4e96      	ldr	r6, [pc, #600]	; (800861c <__ieee754_rem_pio2f+0x288>)
 80083c2:	dd23      	ble.n	800840c <__ieee754_rem_pio2f+0x78>
 80083c4:	f7f8 fbd2 	bl	8000b6c <__aeabi_fsub>
 80083c8:	42b5      	cmp	r5, r6
 80083ca:	4607      	mov	r7, r0
 80083cc:	d010      	beq.n	80083f0 <__ieee754_rem_pio2f+0x5c>
 80083ce:	4994      	ldr	r1, [pc, #592]	; (8008620 <__ieee754_rem_pio2f+0x28c>)
 80083d0:	f7f8 fbcc 	bl	8000b6c <__aeabi_fsub>
 80083d4:	4601      	mov	r1, r0
 80083d6:	6020      	str	r0, [r4, #0]
 80083d8:	4638      	mov	r0, r7
 80083da:	f7f8 fbc7 	bl	8000b6c <__aeabi_fsub>
 80083de:	4990      	ldr	r1, [pc, #576]	; (8008620 <__ieee754_rem_pio2f+0x28c>)
 80083e0:	f7f8 fbc4 	bl	8000b6c <__aeabi_fsub>
 80083e4:	2601      	movs	r6, #1
 80083e6:	6060      	str	r0, [r4, #4]
 80083e8:	4630      	mov	r0, r6
 80083ea:	b007      	add	sp, #28
 80083ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f0:	498c      	ldr	r1, [pc, #560]	; (8008624 <__ieee754_rem_pio2f+0x290>)
 80083f2:	f7f8 fbbb 	bl	8000b6c <__aeabi_fsub>
 80083f6:	498c      	ldr	r1, [pc, #560]	; (8008628 <__ieee754_rem_pio2f+0x294>)
 80083f8:	4605      	mov	r5, r0
 80083fa:	f7f8 fbb7 	bl	8000b6c <__aeabi_fsub>
 80083fe:	4601      	mov	r1, r0
 8008400:	6020      	str	r0, [r4, #0]
 8008402:	4628      	mov	r0, r5
 8008404:	f7f8 fbb2 	bl	8000b6c <__aeabi_fsub>
 8008408:	4987      	ldr	r1, [pc, #540]	; (8008628 <__ieee754_rem_pio2f+0x294>)
 800840a:	e7e9      	b.n	80083e0 <__ieee754_rem_pio2f+0x4c>
 800840c:	f7f8 fbb0 	bl	8000b70 <__addsf3>
 8008410:	42b5      	cmp	r5, r6
 8008412:	4607      	mov	r7, r0
 8008414:	d00e      	beq.n	8008434 <__ieee754_rem_pio2f+0xa0>
 8008416:	4982      	ldr	r1, [pc, #520]	; (8008620 <__ieee754_rem_pio2f+0x28c>)
 8008418:	f7f8 fbaa 	bl	8000b70 <__addsf3>
 800841c:	4601      	mov	r1, r0
 800841e:	6020      	str	r0, [r4, #0]
 8008420:	4638      	mov	r0, r7
 8008422:	f7f8 fba3 	bl	8000b6c <__aeabi_fsub>
 8008426:	497e      	ldr	r1, [pc, #504]	; (8008620 <__ieee754_rem_pio2f+0x28c>)
 8008428:	f7f8 fba2 	bl	8000b70 <__addsf3>
 800842c:	f04f 36ff 	mov.w	r6, #4294967295
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	e7d9      	b.n	80083e8 <__ieee754_rem_pio2f+0x54>
 8008434:	497b      	ldr	r1, [pc, #492]	; (8008624 <__ieee754_rem_pio2f+0x290>)
 8008436:	f7f8 fb9b 	bl	8000b70 <__addsf3>
 800843a:	497b      	ldr	r1, [pc, #492]	; (8008628 <__ieee754_rem_pio2f+0x294>)
 800843c:	4605      	mov	r5, r0
 800843e:	f7f8 fb97 	bl	8000b70 <__addsf3>
 8008442:	4601      	mov	r1, r0
 8008444:	6020      	str	r0, [r4, #0]
 8008446:	4628      	mov	r0, r5
 8008448:	f7f8 fb90 	bl	8000b6c <__aeabi_fsub>
 800844c:	4976      	ldr	r1, [pc, #472]	; (8008628 <__ieee754_rem_pio2f+0x294>)
 800844e:	e7eb      	b.n	8008428 <__ieee754_rem_pio2f+0x94>
 8008450:	4a76      	ldr	r2, [pc, #472]	; (800862c <__ieee754_rem_pio2f+0x298>)
 8008452:	4295      	cmp	r5, r2
 8008454:	f300 808c 	bgt.w	8008570 <__ieee754_rem_pio2f+0x1dc>
 8008458:	f000 fde8 	bl	800902c <fabsf>
 800845c:	4974      	ldr	r1, [pc, #464]	; (8008630 <__ieee754_rem_pio2f+0x29c>)
 800845e:	4680      	mov	r8, r0
 8008460:	f7f8 fc8e 	bl	8000d80 <__aeabi_fmul>
 8008464:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008468:	f7f8 fb82 	bl	8000b70 <__addsf3>
 800846c:	f7f8 fe64 	bl	8001138 <__aeabi_f2iz>
 8008470:	4606      	mov	r6, r0
 8008472:	f7f8 fc31 	bl	8000cd8 <__aeabi_i2f>
 8008476:	4968      	ldr	r1, [pc, #416]	; (8008618 <__ieee754_rem_pio2f+0x284>)
 8008478:	4682      	mov	sl, r0
 800847a:	f7f8 fc81 	bl	8000d80 <__aeabi_fmul>
 800847e:	4601      	mov	r1, r0
 8008480:	4640      	mov	r0, r8
 8008482:	f7f8 fb73 	bl	8000b6c <__aeabi_fsub>
 8008486:	4966      	ldr	r1, [pc, #408]	; (8008620 <__ieee754_rem_pio2f+0x28c>)
 8008488:	4680      	mov	r8, r0
 800848a:	4650      	mov	r0, sl
 800848c:	f7f8 fc78 	bl	8000d80 <__aeabi_fmul>
 8008490:	2e1f      	cmp	r6, #31
 8008492:	4681      	mov	r9, r0
 8008494:	dc0c      	bgt.n	80084b0 <__ieee754_rem_pio2f+0x11c>
 8008496:	4a67      	ldr	r2, [pc, #412]	; (8008634 <__ieee754_rem_pio2f+0x2a0>)
 8008498:	1e71      	subs	r1, r6, #1
 800849a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800849e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d004      	beq.n	80084b0 <__ieee754_rem_pio2f+0x11c>
 80084a6:	4649      	mov	r1, r9
 80084a8:	4640      	mov	r0, r8
 80084aa:	f7f8 fb5f 	bl	8000b6c <__aeabi_fsub>
 80084ae:	e009      	b.n	80084c4 <__ieee754_rem_pio2f+0x130>
 80084b0:	4649      	mov	r1, r9
 80084b2:	4640      	mov	r0, r8
 80084b4:	f7f8 fb5a 	bl	8000b6c <__aeabi_fsub>
 80084b8:	15ed      	asrs	r5, r5, #23
 80084ba:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80084be:	1aeb      	subs	r3, r5, r3
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	dc01      	bgt.n	80084c8 <__ieee754_rem_pio2f+0x134>
 80084c4:	6020      	str	r0, [r4, #0]
 80084c6:	e024      	b.n	8008512 <__ieee754_rem_pio2f+0x17e>
 80084c8:	4956      	ldr	r1, [pc, #344]	; (8008624 <__ieee754_rem_pio2f+0x290>)
 80084ca:	4650      	mov	r0, sl
 80084cc:	f7f8 fc58 	bl	8000d80 <__aeabi_fmul>
 80084d0:	4681      	mov	r9, r0
 80084d2:	4601      	mov	r1, r0
 80084d4:	4640      	mov	r0, r8
 80084d6:	f7f8 fb49 	bl	8000b6c <__aeabi_fsub>
 80084da:	4601      	mov	r1, r0
 80084dc:	4683      	mov	fp, r0
 80084de:	4640      	mov	r0, r8
 80084e0:	f7f8 fb44 	bl	8000b6c <__aeabi_fsub>
 80084e4:	4649      	mov	r1, r9
 80084e6:	f7f8 fb41 	bl	8000b6c <__aeabi_fsub>
 80084ea:	4680      	mov	r8, r0
 80084ec:	494e      	ldr	r1, [pc, #312]	; (8008628 <__ieee754_rem_pio2f+0x294>)
 80084ee:	4650      	mov	r0, sl
 80084f0:	f7f8 fc46 	bl	8000d80 <__aeabi_fmul>
 80084f4:	4641      	mov	r1, r8
 80084f6:	f7f8 fb39 	bl	8000b6c <__aeabi_fsub>
 80084fa:	4601      	mov	r1, r0
 80084fc:	4681      	mov	r9, r0
 80084fe:	4658      	mov	r0, fp
 8008500:	f7f8 fb34 	bl	8000b6c <__aeabi_fsub>
 8008504:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008508:	1aed      	subs	r5, r5, r3
 800850a:	2d19      	cmp	r5, #25
 800850c:	dc15      	bgt.n	800853a <__ieee754_rem_pio2f+0x1a6>
 800850e:	46d8      	mov	r8, fp
 8008510:	6020      	str	r0, [r4, #0]
 8008512:	6825      	ldr	r5, [r4, #0]
 8008514:	4640      	mov	r0, r8
 8008516:	4629      	mov	r1, r5
 8008518:	f7f8 fb28 	bl	8000b6c <__aeabi_fsub>
 800851c:	4649      	mov	r1, r9
 800851e:	f7f8 fb25 	bl	8000b6c <__aeabi_fsub>
 8008522:	2f00      	cmp	r7, #0
 8008524:	6060      	str	r0, [r4, #4]
 8008526:	f6bf af5f 	bge.w	80083e8 <__ieee754_rem_pio2f+0x54>
 800852a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800852e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008532:	6025      	str	r5, [r4, #0]
 8008534:	6060      	str	r0, [r4, #4]
 8008536:	4276      	negs	r6, r6
 8008538:	e756      	b.n	80083e8 <__ieee754_rem_pio2f+0x54>
 800853a:	493f      	ldr	r1, [pc, #252]	; (8008638 <__ieee754_rem_pio2f+0x2a4>)
 800853c:	4650      	mov	r0, sl
 800853e:	f7f8 fc1f 	bl	8000d80 <__aeabi_fmul>
 8008542:	4605      	mov	r5, r0
 8008544:	4601      	mov	r1, r0
 8008546:	4658      	mov	r0, fp
 8008548:	f7f8 fb10 	bl	8000b6c <__aeabi_fsub>
 800854c:	4601      	mov	r1, r0
 800854e:	4680      	mov	r8, r0
 8008550:	4658      	mov	r0, fp
 8008552:	f7f8 fb0b 	bl	8000b6c <__aeabi_fsub>
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 fb08 	bl	8000b6c <__aeabi_fsub>
 800855c:	4605      	mov	r5, r0
 800855e:	4937      	ldr	r1, [pc, #220]	; (800863c <__ieee754_rem_pio2f+0x2a8>)
 8008560:	4650      	mov	r0, sl
 8008562:	f7f8 fc0d 	bl	8000d80 <__aeabi_fmul>
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 fb00 	bl	8000b6c <__aeabi_fsub>
 800856c:	4681      	mov	r9, r0
 800856e:	e79a      	b.n	80084a6 <__ieee754_rem_pio2f+0x112>
 8008570:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008574:	db05      	blt.n	8008582 <__ieee754_rem_pio2f+0x1ee>
 8008576:	4601      	mov	r1, r0
 8008578:	f7f8 faf8 	bl	8000b6c <__aeabi_fsub>
 800857c:	6060      	str	r0, [r4, #4]
 800857e:	6020      	str	r0, [r4, #0]
 8008580:	e715      	b.n	80083ae <__ieee754_rem_pio2f+0x1a>
 8008582:	15ee      	asrs	r6, r5, #23
 8008584:	3e86      	subs	r6, #134	; 0x86
 8008586:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800858a:	4628      	mov	r0, r5
 800858c:	f7f8 fdd4 	bl	8001138 <__aeabi_f2iz>
 8008590:	f7f8 fba2 	bl	8000cd8 <__aeabi_i2f>
 8008594:	4601      	mov	r1, r0
 8008596:	9003      	str	r0, [sp, #12]
 8008598:	4628      	mov	r0, r5
 800859a:	f7f8 fae7 	bl	8000b6c <__aeabi_fsub>
 800859e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80085a2:	f7f8 fbed 	bl	8000d80 <__aeabi_fmul>
 80085a6:	4680      	mov	r8, r0
 80085a8:	f7f8 fdc6 	bl	8001138 <__aeabi_f2iz>
 80085ac:	f7f8 fb94 	bl	8000cd8 <__aeabi_i2f>
 80085b0:	4601      	mov	r1, r0
 80085b2:	9004      	str	r0, [sp, #16]
 80085b4:	4605      	mov	r5, r0
 80085b6:	4640      	mov	r0, r8
 80085b8:	f7f8 fad8 	bl	8000b6c <__aeabi_fsub>
 80085bc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80085c0:	f7f8 fbde 	bl	8000d80 <__aeabi_fmul>
 80085c4:	2100      	movs	r1, #0
 80085c6:	9005      	str	r0, [sp, #20]
 80085c8:	f7f8 fd6e 	bl	80010a8 <__aeabi_fcmpeq>
 80085cc:	b1e8      	cbz	r0, 800860a <__ieee754_rem_pio2f+0x276>
 80085ce:	2100      	movs	r1, #0
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7f8 fd69 	bl	80010a8 <__aeabi_fcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	bf14      	ite	ne
 80085da:	2301      	movne	r3, #1
 80085dc:	2302      	moveq	r3, #2
 80085de:	4a18      	ldr	r2, [pc, #96]	; (8008640 <__ieee754_rem_pio2f+0x2ac>)
 80085e0:	4621      	mov	r1, r4
 80085e2:	9201      	str	r2, [sp, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	a803      	add	r0, sp, #12
 80085e8:	9200      	str	r2, [sp, #0]
 80085ea:	4632      	mov	r2, r6
 80085ec:	f000 f910 	bl	8008810 <__kernel_rem_pio2f>
 80085f0:	2f00      	cmp	r7, #0
 80085f2:	4606      	mov	r6, r0
 80085f4:	f6bf aef8 	bge.w	80083e8 <__ieee754_rem_pio2f+0x54>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085fe:	6023      	str	r3, [r4, #0]
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	e795      	b.n	8008536 <__ieee754_rem_pio2f+0x1a2>
 800860a:	2303      	movs	r3, #3
 800860c:	e7e7      	b.n	80085de <__ieee754_rem_pio2f+0x24a>
 800860e:	bf00      	nop
 8008610:	3f490fd8 	.word	0x3f490fd8
 8008614:	4016cbe3 	.word	0x4016cbe3
 8008618:	3fc90f80 	.word	0x3fc90f80
 800861c:	3fc90fd0 	.word	0x3fc90fd0
 8008620:	37354443 	.word	0x37354443
 8008624:	37354400 	.word	0x37354400
 8008628:	2e85a308 	.word	0x2e85a308
 800862c:	43490f80 	.word	0x43490f80
 8008630:	3f22f984 	.word	0x3f22f984
 8008634:	080097f8 	.word	0x080097f8
 8008638:	2e85a300 	.word	0x2e85a300
 800863c:	248d3132 	.word	0x248d3132
 8008640:	08009878 	.word	0x08009878

08008644 <__ieee754_sqrtf>:
 8008644:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8008648:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800864c:	b570      	push	{r4, r5, r6, lr}
 800864e:	4603      	mov	r3, r0
 8008650:	4604      	mov	r4, r0
 8008652:	d309      	bcc.n	8008668 <__ieee754_sqrtf+0x24>
 8008654:	4601      	mov	r1, r0
 8008656:	f7f8 fb93 	bl	8000d80 <__aeabi_fmul>
 800865a:	4601      	mov	r1, r0
 800865c:	4620      	mov	r0, r4
 800865e:	f7f8 fa87 	bl	8000b70 <__addsf3>
 8008662:	4604      	mov	r4, r0
 8008664:	4620      	mov	r0, r4
 8008666:	bd70      	pop	{r4, r5, r6, pc}
 8008668:	2a00      	cmp	r2, #0
 800866a:	d0fb      	beq.n	8008664 <__ieee754_sqrtf+0x20>
 800866c:	2800      	cmp	r0, #0
 800866e:	da06      	bge.n	800867e <__ieee754_sqrtf+0x3a>
 8008670:	4601      	mov	r1, r0
 8008672:	f7f8 fa7b 	bl	8000b6c <__aeabi_fsub>
 8008676:	4601      	mov	r1, r0
 8008678:	f7f8 fc36 	bl	8000ee8 <__aeabi_fdiv>
 800867c:	e7f1      	b.n	8008662 <__ieee754_sqrtf+0x1e>
 800867e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008682:	ea4f 54e0 	mov.w	r4, r0, asr #23
 8008686:	d204      	bcs.n	8008692 <__ieee754_sqrtf+0x4e>
 8008688:	2200      	movs	r2, #0
 800868a:	0219      	lsls	r1, r3, #8
 800868c:	d529      	bpl.n	80086e2 <__ieee754_sqrtf+0x9e>
 800868e:	3a01      	subs	r2, #1
 8008690:	1aa4      	subs	r4, r4, r2
 8008692:	3c7f      	subs	r4, #127	; 0x7f
 8008694:	07e2      	lsls	r2, r4, #31
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	ea4f 0164 	mov.w	r1, r4, asr #1
 800869e:	4616      	mov	r6, r2
 80086a0:	f04f 0419 	mov.w	r4, #25
 80086a4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80086a8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80086ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086b0:	bf48      	it	mi
 80086b2:	005b      	lslmi	r3, r3, #1
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	1835      	adds	r5, r6, r0
 80086b8:	429d      	cmp	r5, r3
 80086ba:	bfde      	ittt	le
 80086bc:	182e      	addle	r6, r5, r0
 80086be:	1b5b      	suble	r3, r3, r5
 80086c0:	1812      	addle	r2, r2, r0
 80086c2:	3c01      	subs	r4, #1
 80086c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086c8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80086cc:	d1f3      	bne.n	80086b6 <__ieee754_sqrtf+0x72>
 80086ce:	b113      	cbz	r3, 80086d6 <__ieee754_sqrtf+0x92>
 80086d0:	3201      	adds	r2, #1
 80086d2:	f022 0201 	bic.w	r2, r2, #1
 80086d6:	1054      	asrs	r4, r2, #1
 80086d8:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80086dc:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 80086e0:	e7c0      	b.n	8008664 <__ieee754_sqrtf+0x20>
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	3201      	adds	r2, #1
 80086e6:	e7d0      	b.n	800868a <__ieee754_sqrtf+0x46>

080086e8 <__kernel_cosf>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80086f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80086f4:	4606      	mov	r6, r0
 80086f6:	460f      	mov	r7, r1
 80086f8:	da03      	bge.n	8008702 <__kernel_cosf+0x1a>
 80086fa:	f7f8 fd1d 	bl	8001138 <__aeabi_f2iz>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d070      	beq.n	80087e4 <__kernel_cosf+0xfc>
 8008702:	4631      	mov	r1, r6
 8008704:	4630      	mov	r0, r6
 8008706:	f7f8 fb3b 	bl	8000d80 <__aeabi_fmul>
 800870a:	4605      	mov	r5, r0
 800870c:	4937      	ldr	r1, [pc, #220]	; (80087ec <__kernel_cosf+0x104>)
 800870e:	f7f8 fb37 	bl	8000d80 <__aeabi_fmul>
 8008712:	4937      	ldr	r1, [pc, #220]	; (80087f0 <__kernel_cosf+0x108>)
 8008714:	f7f8 fa2c 	bl	8000b70 <__addsf3>
 8008718:	4629      	mov	r1, r5
 800871a:	f7f8 fb31 	bl	8000d80 <__aeabi_fmul>
 800871e:	4935      	ldr	r1, [pc, #212]	; (80087f4 <__kernel_cosf+0x10c>)
 8008720:	f7f8 fa24 	bl	8000b6c <__aeabi_fsub>
 8008724:	4629      	mov	r1, r5
 8008726:	f7f8 fb2b 	bl	8000d80 <__aeabi_fmul>
 800872a:	4933      	ldr	r1, [pc, #204]	; (80087f8 <__kernel_cosf+0x110>)
 800872c:	f7f8 fa20 	bl	8000b70 <__addsf3>
 8008730:	4629      	mov	r1, r5
 8008732:	f7f8 fb25 	bl	8000d80 <__aeabi_fmul>
 8008736:	4931      	ldr	r1, [pc, #196]	; (80087fc <__kernel_cosf+0x114>)
 8008738:	f7f8 fa18 	bl	8000b6c <__aeabi_fsub>
 800873c:	4629      	mov	r1, r5
 800873e:	f7f8 fb1f 	bl	8000d80 <__aeabi_fmul>
 8008742:	492f      	ldr	r1, [pc, #188]	; (8008800 <__kernel_cosf+0x118>)
 8008744:	f7f8 fa14 	bl	8000b70 <__addsf3>
 8008748:	4629      	mov	r1, r5
 800874a:	f7f8 fb19 	bl	8000d80 <__aeabi_fmul>
 800874e:	4b2d      	ldr	r3, [pc, #180]	; (8008804 <__kernel_cosf+0x11c>)
 8008750:	4680      	mov	r8, r0
 8008752:	429c      	cmp	r4, r3
 8008754:	dc1d      	bgt.n	8008792 <__kernel_cosf+0xaa>
 8008756:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800875a:	4628      	mov	r0, r5
 800875c:	f7f8 fb10 	bl	8000d80 <__aeabi_fmul>
 8008760:	4641      	mov	r1, r8
 8008762:	4604      	mov	r4, r0
 8008764:	4628      	mov	r0, r5
 8008766:	f7f8 fb0b 	bl	8000d80 <__aeabi_fmul>
 800876a:	4639      	mov	r1, r7
 800876c:	4605      	mov	r5, r0
 800876e:	4630      	mov	r0, r6
 8008770:	f7f8 fb06 	bl	8000d80 <__aeabi_fmul>
 8008774:	4601      	mov	r1, r0
 8008776:	4628      	mov	r0, r5
 8008778:	f7f8 f9f8 	bl	8000b6c <__aeabi_fsub>
 800877c:	4601      	mov	r1, r0
 800877e:	4620      	mov	r0, r4
 8008780:	f7f8 f9f4 	bl	8000b6c <__aeabi_fsub>
 8008784:	4601      	mov	r1, r0
 8008786:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800878a:	f7f8 f9ef 	bl	8000b6c <__aeabi_fsub>
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	4b1d      	ldr	r3, [pc, #116]	; (8008808 <__kernel_cosf+0x120>)
 8008794:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008798:	429c      	cmp	r4, r3
 800879a:	bfcc      	ite	gt
 800879c:	4c1b      	ldrgt	r4, [pc, #108]	; (800880c <__kernel_cosf+0x124>)
 800879e:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80087a2:	4621      	mov	r1, r4
 80087a4:	f7f8 f9e2 	bl	8000b6c <__aeabi_fsub>
 80087a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80087ac:	4681      	mov	r9, r0
 80087ae:	4628      	mov	r0, r5
 80087b0:	f7f8 fae6 	bl	8000d80 <__aeabi_fmul>
 80087b4:	4621      	mov	r1, r4
 80087b6:	f7f8 f9d9 	bl	8000b6c <__aeabi_fsub>
 80087ba:	4641      	mov	r1, r8
 80087bc:	4604      	mov	r4, r0
 80087be:	4628      	mov	r0, r5
 80087c0:	f7f8 fade 	bl	8000d80 <__aeabi_fmul>
 80087c4:	4639      	mov	r1, r7
 80087c6:	4605      	mov	r5, r0
 80087c8:	4630      	mov	r0, r6
 80087ca:	f7f8 fad9 	bl	8000d80 <__aeabi_fmul>
 80087ce:	4601      	mov	r1, r0
 80087d0:	4628      	mov	r0, r5
 80087d2:	f7f8 f9cb 	bl	8000b6c <__aeabi_fsub>
 80087d6:	4601      	mov	r1, r0
 80087d8:	4620      	mov	r0, r4
 80087da:	f7f8 f9c7 	bl	8000b6c <__aeabi_fsub>
 80087de:	4601      	mov	r1, r0
 80087e0:	4648      	mov	r0, r9
 80087e2:	e7d2      	b.n	800878a <__kernel_cosf+0xa2>
 80087e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80087e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ec:	ad47d74e 	.word	0xad47d74e
 80087f0:	310f74f6 	.word	0x310f74f6
 80087f4:	3493f27c 	.word	0x3493f27c
 80087f8:	37d00d01 	.word	0x37d00d01
 80087fc:	3ab60b61 	.word	0x3ab60b61
 8008800:	3d2aaaab 	.word	0x3d2aaaab
 8008804:	3e999999 	.word	0x3e999999
 8008808:	3f480000 	.word	0x3f480000
 800880c:	3e900000 	.word	0x3e900000

08008810 <__kernel_rem_pio2f>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	b0d9      	sub	sp, #356	; 0x164
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	9101      	str	r1, [sp, #4]
 800881a:	4bb4      	ldr	r3, [pc, #720]	; (8008aec <__kernel_rem_pio2f+0x2dc>)
 800881c:	9962      	ldr	r1, [sp, #392]	; 0x188
 800881e:	1ed4      	subs	r4, r2, #3
 8008820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008824:	2500      	movs	r5, #0
 8008826:	9302      	str	r3, [sp, #8]
 8008828:	9b04      	ldr	r3, [sp, #16]
 800882a:	f04f 0b00 	mov.w	fp, #0
 800882e:	3b01      	subs	r3, #1
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	2308      	movs	r3, #8
 8008834:	fb94 f4f3 	sdiv	r4, r4, r3
 8008838:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800883c:	1c66      	adds	r6, r4, #1
 800883e:	9b02      	ldr	r3, [sp, #8]
 8008840:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8008844:	9a03      	ldr	r2, [sp, #12]
 8008846:	9005      	str	r0, [sp, #20]
 8008848:	eb03 0802 	add.w	r8, r3, r2
 800884c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800884e:	1aa7      	subs	r7, r4, r2
 8008850:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008854:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8008858:	4545      	cmp	r5, r8
 800885a:	dd10      	ble.n	800887e <__kernel_rem_pio2f+0x6e>
 800885c:	2500      	movs	r5, #0
 800885e:	f04f 0b00 	mov.w	fp, #0
 8008862:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	429d      	cmp	r5, r3
 800886a:	dc28      	bgt.n	80088be <__kernel_rem_pio2f+0xae>
 800886c:	9b04      	ldr	r3, [sp, #16]
 800886e:	46d9      	mov	r9, fp
 8008870:	eb03 0805 	add.w	r8, r3, r5
 8008874:	ab1c      	add	r3, sp, #112	; 0x70
 8008876:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800887a:	2700      	movs	r7, #0
 800887c:	e018      	b.n	80088b0 <__kernel_rem_pio2f+0xa0>
 800887e:	42ef      	cmn	r7, r5
 8008880:	d407      	bmi.n	8008892 <__kernel_rem_pio2f+0x82>
 8008882:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008886:	f7f8 fa27 	bl	8000cd8 <__aeabi_i2f>
 800888a:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 800888e:	3501      	adds	r5, #1
 8008890:	e7e2      	b.n	8008858 <__kernel_rem_pio2f+0x48>
 8008892:	4658      	mov	r0, fp
 8008894:	e7f9      	b.n	800888a <__kernel_rem_pio2f+0x7a>
 8008896:	9b05      	ldr	r3, [sp, #20]
 8008898:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 800889c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80088a0:	f7f8 fa6e 	bl	8000d80 <__aeabi_fmul>
 80088a4:	4601      	mov	r1, r0
 80088a6:	4648      	mov	r0, r9
 80088a8:	f7f8 f962 	bl	8000b70 <__addsf3>
 80088ac:	4681      	mov	r9, r0
 80088ae:	3701      	adds	r7, #1
 80088b0:	9b03      	ldr	r3, [sp, #12]
 80088b2:	429f      	cmp	r7, r3
 80088b4:	ddef      	ble.n	8008896 <__kernel_rem_pio2f+0x86>
 80088b6:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 80088ba:	3501      	adds	r5, #1
 80088bc:	e7d3      	b.n	8008866 <__kernel_rem_pio2f+0x56>
 80088be:	9b02      	ldr	r3, [sp, #8]
 80088c0:	aa08      	add	r2, sp, #32
 80088c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80088ca:	9f02      	ldr	r7, [sp, #8]
 80088cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80088d0:	9306      	str	r3, [sp, #24]
 80088d2:	46ba      	mov	sl, r7
 80088d4:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 80088d8:	ab58      	add	r3, sp, #352	; 0x160
 80088da:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80088de:	f853 4c50 	ldr.w	r4, [r3, #-80]
 80088e2:	ad07      	add	r5, sp, #28
 80088e4:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80088e8:	f1ba 0f00 	cmp.w	sl, #0
 80088ec:	dc57      	bgt.n	800899e <__kernel_rem_pio2f+0x18e>
 80088ee:	4631      	mov	r1, r6
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fbeb 	bl	80090cc <scalbnf>
 80088f6:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7f8 fa40 	bl	8000d80 <__aeabi_fmul>
 8008900:	f000 fba0 	bl	8009044 <floorf>
 8008904:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008908:	f7f8 fa3a 	bl	8000d80 <__aeabi_fmul>
 800890c:	4601      	mov	r1, r0
 800890e:	4620      	mov	r0, r4
 8008910:	f7f8 f92c 	bl	8000b6c <__aeabi_fsub>
 8008914:	4604      	mov	r4, r0
 8008916:	f7f8 fc0f 	bl	8001138 <__aeabi_f2iz>
 800891a:	4680      	mov	r8, r0
 800891c:	f7f8 f9dc 	bl	8000cd8 <__aeabi_i2f>
 8008920:	4601      	mov	r1, r0
 8008922:	4620      	mov	r0, r4
 8008924:	f7f8 f922 	bl	8000b6c <__aeabi_fsub>
 8008928:	2e00      	cmp	r6, #0
 800892a:	4604      	mov	r4, r0
 800892c:	dd55      	ble.n	80089da <__kernel_rem_pio2f+0x1ca>
 800892e:	1e7b      	subs	r3, r7, #1
 8008930:	aa08      	add	r2, sp, #32
 8008932:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008936:	f1c6 0208 	rsb	r2, r6, #8
 800893a:	fa45 f002 	asr.w	r0, r5, r2
 800893e:	4480      	add	r8, r0
 8008940:	4090      	lsls	r0, r2
 8008942:	1a2d      	subs	r5, r5, r0
 8008944:	aa08      	add	r2, sp, #32
 8008946:	f1c6 0007 	rsb	r0, r6, #7
 800894a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800894e:	4105      	asrs	r5, r0
 8008950:	2d00      	cmp	r5, #0
 8008952:	dd50      	ble.n	80089f6 <__kernel_rem_pio2f+0x1e6>
 8008954:	2200      	movs	r2, #0
 8008956:	4691      	mov	r9, r2
 8008958:	f108 0801 	add.w	r8, r8, #1
 800895c:	4297      	cmp	r7, r2
 800895e:	f300 8085 	bgt.w	8008a6c <__kernel_rem_pio2f+0x25c>
 8008962:	2e00      	cmp	r6, #0
 8008964:	dd05      	ble.n	8008972 <__kernel_rem_pio2f+0x162>
 8008966:	2e01      	cmp	r6, #1
 8008968:	f000 8097 	beq.w	8008a9a <__kernel_rem_pio2f+0x28a>
 800896c:	2e02      	cmp	r6, #2
 800896e:	f000 809e 	beq.w	8008aae <__kernel_rem_pio2f+0x29e>
 8008972:	2d02      	cmp	r5, #2
 8008974:	d13f      	bne.n	80089f6 <__kernel_rem_pio2f+0x1e6>
 8008976:	4621      	mov	r1, r4
 8008978:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800897c:	f7f8 f8f6 	bl	8000b6c <__aeabi_fsub>
 8008980:	4604      	mov	r4, r0
 8008982:	f1b9 0f00 	cmp.w	r9, #0
 8008986:	d036      	beq.n	80089f6 <__kernel_rem_pio2f+0x1e6>
 8008988:	4631      	mov	r1, r6
 800898a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800898e:	f000 fb9d 	bl	80090cc <scalbnf>
 8008992:	4601      	mov	r1, r0
 8008994:	4620      	mov	r0, r4
 8008996:	f7f8 f8e9 	bl	8000b6c <__aeabi_fsub>
 800899a:	4604      	mov	r4, r0
 800899c:	e02b      	b.n	80089f6 <__kernel_rem_pio2f+0x1e6>
 800899e:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80089a2:	4620      	mov	r0, r4
 80089a4:	f7f8 f9ec 	bl	8000d80 <__aeabi_fmul>
 80089a8:	f7f8 fbc6 	bl	8001138 <__aeabi_f2iz>
 80089ac:	f7f8 f994 	bl	8000cd8 <__aeabi_i2f>
 80089b0:	4641      	mov	r1, r8
 80089b2:	4683      	mov	fp, r0
 80089b4:	f7f8 f9e4 	bl	8000d80 <__aeabi_fmul>
 80089b8:	4601      	mov	r1, r0
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7f8 f8d6 	bl	8000b6c <__aeabi_fsub>
 80089c0:	f7f8 fbba 	bl	8001138 <__aeabi_f2iz>
 80089c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089c8:	f845 0f04 	str.w	r0, [r5, #4]!
 80089cc:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80089d0:	4658      	mov	r0, fp
 80089d2:	f7f8 f8cd 	bl	8000b70 <__addsf3>
 80089d6:	4604      	mov	r4, r0
 80089d8:	e786      	b.n	80088e8 <__kernel_rem_pio2f+0xd8>
 80089da:	d105      	bne.n	80089e8 <__kernel_rem_pio2f+0x1d8>
 80089dc:	1e7b      	subs	r3, r7, #1
 80089de:	aa08      	add	r2, sp, #32
 80089e0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80089e4:	122d      	asrs	r5, r5, #8
 80089e6:	e7b3      	b.n	8008950 <__kernel_rem_pio2f+0x140>
 80089e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80089ec:	f7f8 fb7a 	bl	80010e4 <__aeabi_fcmpge>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d139      	bne.n	8008a68 <__kernel_rem_pio2f+0x258>
 80089f4:	4605      	mov	r5, r0
 80089f6:	2100      	movs	r1, #0
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7f8 fb55 	bl	80010a8 <__aeabi_fcmpeq>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f000 8098 	beq.w	8008b34 <__kernel_rem_pio2f+0x324>
 8008a04:	1e7c      	subs	r4, r7, #1
 8008a06:	4623      	mov	r3, r4
 8008a08:	2200      	movs	r2, #0
 8008a0a:	9902      	ldr	r1, [sp, #8]
 8008a0c:	428b      	cmp	r3, r1
 8008a0e:	da55      	bge.n	8008abc <__kernel_rem_pio2f+0x2ac>
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	d16e      	bne.n	8008af2 <__kernel_rem_pio2f+0x2e2>
 8008a14:	2301      	movs	r3, #1
 8008a16:	f06f 0103 	mvn.w	r1, #3
 8008a1a:	fb01 f203 	mul.w	r2, r1, r3
 8008a1e:	9807      	ldr	r0, [sp, #28]
 8008a20:	5882      	ldr	r2, [r0, r2]
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d050      	beq.n	8008ac8 <__kernel_rem_pio2f+0x2b8>
 8008a26:	f06f 0803 	mvn.w	r8, #3
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	1c7d      	adds	r5, r7, #1
 8008a2e:	19d4      	adds	r4, r2, r7
 8008a30:	aa58      	add	r2, sp, #352	; 0x160
 8008a32:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8008a36:	3cf4      	subs	r4, #244	; 0xf4
 8008a38:	441f      	add	r7, r3
 8008a3a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8008a3e:	42bd      	cmp	r5, r7
 8008a40:	f73f af47 	bgt.w	80088d2 <__kernel_rem_pio2f+0xc2>
 8008a44:	9b06      	ldr	r3, [sp, #24]
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a4e:	f7f8 f943 	bl	8000cd8 <__aeabi_i2f>
 8008a52:	f04f 0b00 	mov.w	fp, #0
 8008a56:	f844 0f04 	str.w	r0, [r4, #4]!
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	459a      	cmp	sl, r3
 8008a5e:	dd35      	ble.n	8008acc <__kernel_rem_pio2f+0x2bc>
 8008a60:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8008a64:	3501      	adds	r5, #1
 8008a66:	e7ea      	b.n	8008a3e <__kernel_rem_pio2f+0x22e>
 8008a68:	2502      	movs	r5, #2
 8008a6a:	e773      	b.n	8008954 <__kernel_rem_pio2f+0x144>
 8008a6c:	ab08      	add	r3, sp, #32
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	f1b9 0f00 	cmp.w	r9, #0
 8008a76:	d109      	bne.n	8008a8c <__kernel_rem_pio2f+0x27c>
 8008a78:	b12b      	cbz	r3, 8008a86 <__kernel_rem_pio2f+0x276>
 8008a7a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008a7e:	a908      	add	r1, sp, #32
 8008a80:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a84:	2301      	movs	r3, #1
 8008a86:	3201      	adds	r2, #1
 8008a88:	4699      	mov	r9, r3
 8008a8a:	e767      	b.n	800895c <__kernel_rem_pio2f+0x14c>
 8008a8c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8008a90:	a908      	add	r1, sp, #32
 8008a92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008a96:	464b      	mov	r3, r9
 8008a98:	e7f5      	b.n	8008a86 <__kernel_rem_pio2f+0x276>
 8008a9a:	1e7a      	subs	r2, r7, #1
 8008a9c:	ab08      	add	r3, sp, #32
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa6:	a908      	add	r1, sp, #32
 8008aa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008aac:	e761      	b.n	8008972 <__kernel_rem_pio2f+0x162>
 8008aae:	1e7a      	subs	r2, r7, #1
 8008ab0:	ab08      	add	r3, sp, #32
 8008ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008aba:	e7f4      	b.n	8008aa6 <__kernel_rem_pio2f+0x296>
 8008abc:	a908      	add	r1, sp, #32
 8008abe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	e7a0      	b.n	8008a0a <__kernel_rem_pio2f+0x1fa>
 8008ac8:	3301      	adds	r3, #1
 8008aca:	e7a6      	b.n	8008a1a <__kernel_rem_pio2f+0x20a>
 8008acc:	fb08 f30a 	mul.w	r3, r8, sl
 8008ad0:	9a05      	ldr	r2, [sp, #20]
 8008ad2:	58e0      	ldr	r0, [r4, r3]
 8008ad4:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8008ad8:	f7f8 f952 	bl	8000d80 <__aeabi_fmul>
 8008adc:	4601      	mov	r1, r0
 8008ade:	4658      	mov	r0, fp
 8008ae0:	f7f8 f846 	bl	8000b70 <__addsf3>
 8008ae4:	f10a 0a01 	add.w	sl, sl, #1
 8008ae8:	4683      	mov	fp, r0
 8008aea:	e7b6      	b.n	8008a5a <__kernel_rem_pio2f+0x24a>
 8008aec:	08009bbc 	.word	0x08009bbc
 8008af0:	3c01      	subs	r4, #1
 8008af2:	ab08      	add	r3, sp, #32
 8008af4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008af8:	3e08      	subs	r6, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f8      	beq.n	8008af0 <__kernel_rem_pio2f+0x2e0>
 8008afe:	4631      	mov	r1, r6
 8008b00:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008b04:	f000 fae2 	bl	80090cc <scalbnf>
 8008b08:	46a1      	mov	r9, r4
 8008b0a:	4682      	mov	sl, r0
 8008b0c:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 8008b10:	ae44      	add	r6, sp, #272	; 0x110
 8008b12:	f1b9 0f00 	cmp.w	r9, #0
 8008b16:	da3f      	bge.n	8008b98 <__kernel_rem_pio2f+0x388>
 8008b18:	2700      	movs	r7, #0
 8008b1a:	f04f 0b00 	mov.w	fp, #0
 8008b1e:	4b82      	ldr	r3, [pc, #520]	; (8008d28 <__kernel_rem_pio2f+0x518>)
 8008b20:	aa30      	add	r2, sp, #192	; 0xc0
 8008b22:	ebb4 0a07 	subs.w	sl, r4, r7
 8008b26:	d462      	bmi.n	8008bee <__kernel_rem_pio2f+0x3de>
 8008b28:	a944      	add	r1, sp, #272	; 0x110
 8008b2a:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 8008b2e:	46d9      	mov	r9, fp
 8008b30:	2600      	movs	r6, #0
 8008b32:	e053      	b.n	8008bdc <__kernel_rem_pio2f+0x3cc>
 8008b34:	4271      	negs	r1, r6
 8008b36:	4620      	mov	r0, r4
 8008b38:	f000 fac8 	bl	80090cc <scalbnf>
 8008b3c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008b40:	4604      	mov	r4, r0
 8008b42:	f7f8 facf 	bl	80010e4 <__aeabi_fcmpge>
 8008b46:	b1f8      	cbz	r0, 8008b88 <__kernel_rem_pio2f+0x378>
 8008b48:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f7f8 f917 	bl	8000d80 <__aeabi_fmul>
 8008b52:	f7f8 faf1 	bl	8001138 <__aeabi_f2iz>
 8008b56:	f7f8 f8bf 	bl	8000cd8 <__aeabi_i2f>
 8008b5a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8008b5e:	4681      	mov	r9, r0
 8008b60:	f7f8 f90e 	bl	8000d80 <__aeabi_fmul>
 8008b64:	4601      	mov	r1, r0
 8008b66:	4620      	mov	r0, r4
 8008b68:	f7f8 f800 	bl	8000b6c <__aeabi_fsub>
 8008b6c:	f7f8 fae4 	bl	8001138 <__aeabi_f2iz>
 8008b70:	ab08      	add	r3, sp, #32
 8008b72:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008b76:	4648      	mov	r0, r9
 8008b78:	f7f8 fade 	bl	8001138 <__aeabi_f2iz>
 8008b7c:	1c7c      	adds	r4, r7, #1
 8008b7e:	ab08      	add	r3, sp, #32
 8008b80:	3608      	adds	r6, #8
 8008b82:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008b86:	e7ba      	b.n	8008afe <__kernel_rem_pio2f+0x2ee>
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7f8 fad5 	bl	8001138 <__aeabi_f2iz>
 8008b8e:	ab08      	add	r3, sp, #32
 8008b90:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8008b94:	463c      	mov	r4, r7
 8008b96:	e7b2      	b.n	8008afe <__kernel_rem_pio2f+0x2ee>
 8008b98:	ab08      	add	r3, sp, #32
 8008b9a:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8008b9e:	f7f8 f89b 	bl	8000cd8 <__aeabi_i2f>
 8008ba2:	4651      	mov	r1, sl
 8008ba4:	f7f8 f8ec 	bl	8000d80 <__aeabi_fmul>
 8008ba8:	4639      	mov	r1, r7
 8008baa:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 8008bae:	4650      	mov	r0, sl
 8008bb0:	f7f8 f8e6 	bl	8000d80 <__aeabi_fmul>
 8008bb4:	f109 39ff 	add.w	r9, r9, #4294967295
 8008bb8:	4682      	mov	sl, r0
 8008bba:	e7aa      	b.n	8008b12 <__kernel_rem_pio2f+0x302>
 8008bbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008bc0:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8008bc4:	9204      	str	r2, [sp, #16]
 8008bc6:	9303      	str	r3, [sp, #12]
 8008bc8:	f7f8 f8da 	bl	8000d80 <__aeabi_fmul>
 8008bcc:	4601      	mov	r1, r0
 8008bce:	4648      	mov	r0, r9
 8008bd0:	f7f7 ffce 	bl	8000b70 <__addsf3>
 8008bd4:	4681      	mov	r9, r0
 8008bd6:	9a04      	ldr	r2, [sp, #16]
 8008bd8:	9b03      	ldr	r3, [sp, #12]
 8008bda:	3601      	adds	r6, #1
 8008bdc:	9902      	ldr	r1, [sp, #8]
 8008bde:	428e      	cmp	r6, r1
 8008be0:	dc01      	bgt.n	8008be6 <__kernel_rem_pio2f+0x3d6>
 8008be2:	42be      	cmp	r6, r7
 8008be4:	ddea      	ble.n	8008bbc <__kernel_rem_pio2f+0x3ac>
 8008be6:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 8008bea:	3701      	adds	r7, #1
 8008bec:	e799      	b.n	8008b22 <__kernel_rem_pio2f+0x312>
 8008bee:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d826      	bhi.n	8008c42 <__kernel_rem_pio2f+0x432>
 8008bf4:	e8df f003 	tbb	[pc, r3]
 8008bf8:	2a02021c 	.word	0x2a02021c
 8008bfc:	4626      	mov	r6, r4
 8008bfe:	2000      	movs	r0, #0
 8008c00:	af30      	add	r7, sp, #192	; 0xc0
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	da40      	bge.n	8008c88 <__kernel_rem_pio2f+0x478>
 8008c06:	2d00      	cmp	r5, #0
 8008c08:	d044      	beq.n	8008c94 <__kernel_rem_pio2f+0x484>
 8008c0a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8008c0e:	9a01      	ldr	r2, [sp, #4]
 8008c10:	af58      	add	r7, sp, #352	; 0x160
 8008c12:	4601      	mov	r1, r0
 8008c14:	6013      	str	r3, [r2, #0]
 8008c16:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8008c1a:	f7f7 ffa7 	bl	8000b6c <__aeabi_fsub>
 8008c1e:	2601      	movs	r6, #1
 8008c20:	42b4      	cmp	r4, r6
 8008c22:	da39      	bge.n	8008c98 <__kernel_rem_pio2f+0x488>
 8008c24:	b10d      	cbz	r5, 8008c2a <__kernel_rem_pio2f+0x41a>
 8008c26:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c2a:	9b01      	ldr	r3, [sp, #4]
 8008c2c:	6058      	str	r0, [r3, #4]
 8008c2e:	e008      	b.n	8008c42 <__kernel_rem_pio2f+0x432>
 8008c30:	2000      	movs	r0, #0
 8008c32:	ae30      	add	r6, sp, #192	; 0xc0
 8008c34:	2c00      	cmp	r4, #0
 8008c36:	da21      	bge.n	8008c7c <__kernel_rem_pio2f+0x46c>
 8008c38:	b10d      	cbz	r5, 8008c3e <__kernel_rem_pio2f+0x42e>
 8008c3a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	6018      	str	r0, [r3, #0]
 8008c42:	f008 0007 	and.w	r0, r8, #7
 8008c46:	b059      	add	sp, #356	; 0x164
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8008c50:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 8008c54:	4637      	mov	r7, r6
 8008c56:	46a1      	mov	r9, r4
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	dc22      	bgt.n	8008ca4 <__kernel_rem_pio2f+0x494>
 8008c5e:	4627      	mov	r7, r4
 8008c60:	2f01      	cmp	r7, #1
 8008c62:	dc38      	bgt.n	8008cd6 <__kernel_rem_pio2f+0x4c6>
 8008c64:	2000      	movs	r0, #0
 8008c66:	2c01      	cmp	r4, #1
 8008c68:	dc4c      	bgt.n	8008d04 <__kernel_rem_pio2f+0x4f4>
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	d150      	bne.n	8008d10 <__kernel_rem_pio2f+0x500>
 8008c6e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008c70:	9a01      	ldr	r2, [sp, #4]
 8008c72:	6013      	str	r3, [r2, #0]
 8008c74:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008c76:	6053      	str	r3, [r2, #4]
 8008c78:	6090      	str	r0, [r2, #8]
 8008c7a:	e7e2      	b.n	8008c42 <__kernel_rem_pio2f+0x432>
 8008c7c:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8008c80:	f7f7 ff76 	bl	8000b70 <__addsf3>
 8008c84:	3c01      	subs	r4, #1
 8008c86:	e7d5      	b.n	8008c34 <__kernel_rem_pio2f+0x424>
 8008c88:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8008c8c:	f7f7 ff70 	bl	8000b70 <__addsf3>
 8008c90:	3e01      	subs	r6, #1
 8008c92:	e7b6      	b.n	8008c02 <__kernel_rem_pio2f+0x3f2>
 8008c94:	4603      	mov	r3, r0
 8008c96:	e7ba      	b.n	8008c0e <__kernel_rem_pio2f+0x3fe>
 8008c98:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8008c9c:	f7f7 ff68 	bl	8000b70 <__addsf3>
 8008ca0:	3601      	adds	r6, #1
 8008ca2:	e7bd      	b.n	8008c20 <__kernel_rem_pio2f+0x410>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008caa:	4619      	mov	r1, r3
 8008cac:	4610      	mov	r0, r2
 8008cae:	9303      	str	r3, [sp, #12]
 8008cb0:	9202      	str	r2, [sp, #8]
 8008cb2:	f7f7 ff5d 	bl	8000b70 <__addsf3>
 8008cb6:	9a02      	ldr	r2, [sp, #8]
 8008cb8:	4601      	mov	r1, r0
 8008cba:	4683      	mov	fp, r0
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7f7 ff55 	bl	8000b6c <__aeabi_fsub>
 8008cc2:	9b03      	ldr	r3, [sp, #12]
 8008cc4:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f7f7 ff51 	bl	8000b70 <__addsf3>
 8008cce:	6038      	str	r0, [r7, #0]
 8008cd0:	f847 bd04 	str.w	fp, [r7, #-4]!
 8008cd4:	e7c0      	b.n	8008c58 <__kernel_rem_pio2f+0x448>
 8008cd6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cda:	f8d6 b000 	ldr.w	fp, [r6]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	4659      	mov	r1, fp
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	f7f7 ff44 	bl	8000b70 <__addsf3>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	4601      	mov	r1, r0
 8008cec:	4681      	mov	r9, r0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f7 ff3c 	bl	8000b6c <__aeabi_fsub>
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	f7f7 ff3b 	bl	8000b70 <__addsf3>
 8008cfa:	3f01      	subs	r7, #1
 8008cfc:	6030      	str	r0, [r6, #0]
 8008cfe:	f846 9d04 	str.w	r9, [r6, #-4]!
 8008d02:	e7ad      	b.n	8008c60 <__kernel_rem_pio2f+0x450>
 8008d04:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8008d08:	f7f7 ff32 	bl	8000b70 <__addsf3>
 8008d0c:	3c01      	subs	r4, #1
 8008d0e:	e7aa      	b.n	8008c66 <__kernel_rem_pio2f+0x456>
 8008d10:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8008d12:	9a01      	ldr	r2, [sp, #4]
 8008d14:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8008d1c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008d20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	6053      	str	r3, [r2, #4]
 8008d26:	e7a7      	b.n	8008c78 <__kernel_rem_pio2f+0x468>
 8008d28:	08009b90 	.word	0x08009b90

08008d2c <__kernel_sinf>:
 8008d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8008d34:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460f      	mov	r7, r1
 8008d3c:	4691      	mov	r9, r2
 8008d3e:	da03      	bge.n	8008d48 <__kernel_sinf+0x1c>
 8008d40:	f7f8 f9fa 	bl	8001138 <__aeabi_f2iz>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d035      	beq.n	8008db4 <__kernel_sinf+0x88>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7f8 f818 	bl	8000d80 <__aeabi_fmul>
 8008d50:	4605      	mov	r5, r0
 8008d52:	4601      	mov	r1, r0
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7f8 f813 	bl	8000d80 <__aeabi_fmul>
 8008d5a:	4929      	ldr	r1, [pc, #164]	; (8008e00 <__kernel_sinf+0xd4>)
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f7f8 f80e 	bl	8000d80 <__aeabi_fmul>
 8008d64:	4927      	ldr	r1, [pc, #156]	; (8008e04 <__kernel_sinf+0xd8>)
 8008d66:	f7f7 ff01 	bl	8000b6c <__aeabi_fsub>
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7f8 f808 	bl	8000d80 <__aeabi_fmul>
 8008d70:	4925      	ldr	r1, [pc, #148]	; (8008e08 <__kernel_sinf+0xdc>)
 8008d72:	f7f7 fefd 	bl	8000b70 <__addsf3>
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f8 f802 	bl	8000d80 <__aeabi_fmul>
 8008d7c:	4923      	ldr	r1, [pc, #140]	; (8008e0c <__kernel_sinf+0xe0>)
 8008d7e:	f7f7 fef5 	bl	8000b6c <__aeabi_fsub>
 8008d82:	4629      	mov	r1, r5
 8008d84:	f7f7 fffc 	bl	8000d80 <__aeabi_fmul>
 8008d88:	4921      	ldr	r1, [pc, #132]	; (8008e10 <__kernel_sinf+0xe4>)
 8008d8a:	f7f7 fef1 	bl	8000b70 <__addsf3>
 8008d8e:	4680      	mov	r8, r0
 8008d90:	f1b9 0f00 	cmp.w	r9, #0
 8008d94:	d111      	bne.n	8008dba <__kernel_sinf+0x8e>
 8008d96:	4601      	mov	r1, r0
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f7f7 fff1 	bl	8000d80 <__aeabi_fmul>
 8008d9e:	491d      	ldr	r1, [pc, #116]	; (8008e14 <__kernel_sinf+0xe8>)
 8008da0:	f7f7 fee4 	bl	8000b6c <__aeabi_fsub>
 8008da4:	4631      	mov	r1, r6
 8008da6:	f7f7 ffeb 	bl	8000d80 <__aeabi_fmul>
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	f7f7 fedf 	bl	8000b70 <__addsf3>
 8008db2:	4604      	mov	r4, r0
 8008db4:	4620      	mov	r0, r4
 8008db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	f7f7 ffde 	bl	8000d80 <__aeabi_fmul>
 8008dc4:	4641      	mov	r1, r8
 8008dc6:	4681      	mov	r9, r0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7f7 ffd9 	bl	8000d80 <__aeabi_fmul>
 8008dce:	4601      	mov	r1, r0
 8008dd0:	4648      	mov	r0, r9
 8008dd2:	f7f7 fecb 	bl	8000b6c <__aeabi_fsub>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f7f7 ffd2 	bl	8000d80 <__aeabi_fmul>
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 fec5 	bl	8000b6c <__aeabi_fsub>
 8008de2:	490c      	ldr	r1, [pc, #48]	; (8008e14 <__kernel_sinf+0xe8>)
 8008de4:	4605      	mov	r5, r0
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7f7 ffca 	bl	8000d80 <__aeabi_fmul>
 8008dec:	4601      	mov	r1, r0
 8008dee:	4628      	mov	r0, r5
 8008df0:	f7f7 febe 	bl	8000b70 <__addsf3>
 8008df4:	4601      	mov	r1, r0
 8008df6:	4620      	mov	r0, r4
 8008df8:	f7f7 feb8 	bl	8000b6c <__aeabi_fsub>
 8008dfc:	e7d9      	b.n	8008db2 <__kernel_sinf+0x86>
 8008dfe:	bf00      	nop
 8008e00:	2f2ec9d3 	.word	0x2f2ec9d3
 8008e04:	32d72f34 	.word	0x32d72f34
 8008e08:	3638ef1b 	.word	0x3638ef1b
 8008e0c:	39500d01 	.word	0x39500d01
 8008e10:	3c088889 	.word	0x3c088889
 8008e14:	3e2aaaab 	.word	0x3e2aaaab

08008e18 <fabs>:
 8008e18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008e1c:	4770      	bx	lr

08008e1e <finite>:
 8008e1e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8008e22:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8008e26:	0fc0      	lsrs	r0, r0, #31
 8008e28:	4770      	bx	lr

08008e2a <matherr>:
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	4770      	bx	lr
	...

08008e30 <nan>:
 8008e30:	2000      	movs	r0, #0
 8008e32:	4901      	ldr	r1, [pc, #4]	; (8008e38 <nan+0x8>)
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	7ff80000 	.word	0x7ff80000

08008e3c <rint>:
 8008e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3e:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8008e42:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8008e46:	2f13      	cmp	r7, #19
 8008e48:	4602      	mov	r2, r0
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	4684      	mov	ip, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	4605      	mov	r5, r0
 8008e52:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8008e56:	dc56      	bgt.n	8008f06 <rint+0xca>
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	da29      	bge.n	8008eb0 <rint+0x74>
 8008e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008e60:	4301      	orrs	r1, r0
 8008e62:	d021      	beq.n	8008ea8 <rint+0x6c>
 8008e64:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8008e68:	4305      	orrs	r5, r0
 8008e6a:	426b      	negs	r3, r5
 8008e6c:	432b      	orrs	r3, r5
 8008e6e:	0b1b      	lsrs	r3, r3, #12
 8008e70:	0c64      	lsrs	r4, r4, #17
 8008e72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e76:	0464      	lsls	r4, r4, #17
 8008e78:	ea43 0104 	orr.w	r1, r3, r4
 8008e7c:	4b31      	ldr	r3, [pc, #196]	; (8008f44 <rint+0x108>)
 8008e7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008e86:	4622      	mov	r2, r4
 8008e88:	462b      	mov	r3, r5
 8008e8a:	f7f7 f971 	bl	8000170 <__adddf3>
 8008e8e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e96:	4622      	mov	r2, r4
 8008e98:	462b      	mov	r3, r5
 8008e9a:	f7f7 f967 	bl	800016c <__aeabi_dsub>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008ea4:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4619      	mov	r1, r3
 8008eac:	b003      	add	sp, #12
 8008eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb0:	4925      	ldr	r1, [pc, #148]	; (8008f48 <rint+0x10c>)
 8008eb2:	4139      	asrs	r1, r7
 8008eb4:	ea03 0001 	and.w	r0, r3, r1
 8008eb8:	4310      	orrs	r0, r2
 8008eba:	d0f5      	beq.n	8008ea8 <rint+0x6c>
 8008ebc:	084b      	lsrs	r3, r1, #1
 8008ebe:	ea04 0203 	and.w	r2, r4, r3
 8008ec2:	ea52 050c 	orrs.w	r5, r2, ip
 8008ec6:	d00a      	beq.n	8008ede <rint+0xa2>
 8008ec8:	ea24 0303 	bic.w	r3, r4, r3
 8008ecc:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008ed0:	2f13      	cmp	r7, #19
 8008ed2:	bf0c      	ite	eq
 8008ed4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8008ed8:	2500      	movne	r5, #0
 8008eda:	413c      	asrs	r4, r7
 8008edc:	431c      	orrs	r4, r3
 8008ede:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <rint+0x108>)
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008eec:	4622      	mov	r2, r4
 8008eee:	462b      	mov	r3, r5
 8008ef0:	f7f7 f93e 	bl	8000170 <__adddf3>
 8008ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008efc:	4622      	mov	r2, r4
 8008efe:	462b      	mov	r3, r5
 8008f00:	f7f7 f934 	bl	800016c <__aeabi_dsub>
 8008f04:	e006      	b.n	8008f14 <rint+0xd8>
 8008f06:	2f33      	cmp	r7, #51	; 0x33
 8008f08:	dd07      	ble.n	8008f1a <rint+0xde>
 8008f0a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8008f0e:	d1cb      	bne.n	8008ea8 <rint+0x6c>
 8008f10:	f7f7 f92e 	bl	8000170 <__adddf3>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	e7c6      	b.n	8008ea8 <rint+0x6c>
 8008f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1e:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 8008f22:	fa21 f10e 	lsr.w	r1, r1, lr
 8008f26:	4208      	tst	r0, r1
 8008f28:	d0be      	beq.n	8008ea8 <rint+0x6c>
 8008f2a:	084b      	lsrs	r3, r1, #1
 8008f2c:	4218      	tst	r0, r3
 8008f2e:	bf1f      	itttt	ne
 8008f30:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8008f34:	ea20 0303 	bicne.w	r3, r0, r3
 8008f38:	fa45 fe0e 	asrne.w	lr, r5, lr
 8008f3c:	ea4e 0503 	orrne.w	r5, lr, r3
 8008f40:	e7cd      	b.n	8008ede <rint+0xa2>
 8008f42:	bf00      	nop
 8008f44:	08009bc8 	.word	0x08009bc8
 8008f48:	000fffff 	.word	0x000fffff
 8008f4c:	00000000 	.word	0x00000000

08008f50 <scalbn>:
 8008f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f52:	4616      	mov	r6, r2
 8008f54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f58:	4604      	mov	r4, r0
 8008f5a:	460d      	mov	r5, r1
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	b98a      	cbnz	r2, 8008f84 <scalbn+0x34>
 8008f60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f64:	4303      	orrs	r3, r0
 8008f66:	d035      	beq.n	8008fd4 <scalbn+0x84>
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4b2d      	ldr	r3, [pc, #180]	; (8009020 <scalbn+0xd0>)
 8008f6c:	f7f7 fab2 	bl	80004d4 <__aeabi_dmul>
 8008f70:	4a2c      	ldr	r2, [pc, #176]	; (8009024 <scalbn+0xd4>)
 8008f72:	4604      	mov	r4, r0
 8008f74:	4296      	cmp	r6, r2
 8008f76:	460d      	mov	r5, r1
 8008f78:	460b      	mov	r3, r1
 8008f7a:	da0e      	bge.n	8008f9a <scalbn+0x4a>
 8008f7c:	a324      	add	r3, pc, #144	; (adr r3, 8009010 <scalbn+0xc0>)
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	e01c      	b.n	8008fbe <scalbn+0x6e>
 8008f84:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8008f88:	42ba      	cmp	r2, r7
 8008f8a:	d109      	bne.n	8008fa0 <scalbn+0x50>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	f7f7 f8ee 	bl	8000170 <__adddf3>
 8008f94:	4604      	mov	r4, r0
 8008f96:	460d      	mov	r5, r1
 8008f98:	e01c      	b.n	8008fd4 <scalbn+0x84>
 8008f9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f9e:	3a36      	subs	r2, #54	; 0x36
 8008fa0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008fa4:	4432      	add	r2, r6
 8008fa6:	428a      	cmp	r2, r1
 8008fa8:	dd0c      	ble.n	8008fc4 <scalbn+0x74>
 8008faa:	4622      	mov	r2, r4
 8008fac:	462b      	mov	r3, r5
 8008fae:	a11a      	add	r1, pc, #104	; (adr r1, 8009018 <scalbn+0xc8>)
 8008fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb4:	f000 f8d6 	bl	8009164 <copysign>
 8008fb8:	a317      	add	r3, pc, #92	; (adr r3, 8009018 <scalbn+0xc8>)
 8008fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbe:	f7f7 fa89 	bl	80004d4 <__aeabi_dmul>
 8008fc2:	e7e7      	b.n	8008f94 <scalbn+0x44>
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	dd08      	ble.n	8008fda <scalbn+0x8a>
 8008fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008fd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fda:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008fde:	da0b      	bge.n	8008ff8 <scalbn+0xa8>
 8008fe0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008fe4:	429e      	cmp	r6, r3
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	462b      	mov	r3, r5
 8008fea:	dce0      	bgt.n	8008fae <scalbn+0x5e>
 8008fec:	a108      	add	r1, pc, #32	; (adr r1, 8009010 <scalbn+0xc0>)
 8008fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ff2:	f000 f8b7 	bl	8009164 <copysign>
 8008ff6:	e7c1      	b.n	8008f7c <scalbn+0x2c>
 8008ff8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ffc:	3236      	adds	r2, #54	; 0x36
 8008ffe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009002:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009006:	4620      	mov	r0, r4
 8009008:	4629      	mov	r1, r5
 800900a:	2200      	movs	r2, #0
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <scalbn+0xd8>)
 800900e:	e7d6      	b.n	8008fbe <scalbn+0x6e>
 8009010:	c2f8f359 	.word	0xc2f8f359
 8009014:	01a56e1f 	.word	0x01a56e1f
 8009018:	8800759c 	.word	0x8800759c
 800901c:	7e37e43c 	.word	0x7e37e43c
 8009020:	43500000 	.word	0x43500000
 8009024:	ffff3cb0 	.word	0xffff3cb0
 8009028:	3c900000 	.word	0x3c900000

0800902c <fabsf>:
 800902c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009030:	4770      	bx	lr

08009032 <finitef>:
 8009032:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009036:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800903a:	bfac      	ite	ge
 800903c:	2000      	movge	r0, #0
 800903e:	2001      	movlt	r0, #1
 8009040:	4770      	bx	lr
	...

08009044 <floorf>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800904a:	0df5      	lsrs	r5, r6, #23
 800904c:	3d7f      	subs	r5, #127	; 0x7f
 800904e:	2d16      	cmp	r5, #22
 8009050:	4601      	mov	r1, r0
 8009052:	4604      	mov	r4, r0
 8009054:	dc26      	bgt.n	80090a4 <floorf+0x60>
 8009056:	2d00      	cmp	r5, #0
 8009058:	da0e      	bge.n	8009078 <floorf+0x34>
 800905a:	4917      	ldr	r1, [pc, #92]	; (80090b8 <floorf+0x74>)
 800905c:	f7f7 fd88 	bl	8000b70 <__addsf3>
 8009060:	2100      	movs	r1, #0
 8009062:	f7f8 f849 	bl	80010f8 <__aeabi_fcmpgt>
 8009066:	b128      	cbz	r0, 8009074 <floorf+0x30>
 8009068:	2c00      	cmp	r4, #0
 800906a:	da23      	bge.n	80090b4 <floorf+0x70>
 800906c:	4b13      	ldr	r3, [pc, #76]	; (80090bc <floorf+0x78>)
 800906e:	2e00      	cmp	r6, #0
 8009070:	bf18      	it	ne
 8009072:	461c      	movne	r4, r3
 8009074:	4621      	mov	r1, r4
 8009076:	e01b      	b.n	80090b0 <floorf+0x6c>
 8009078:	4e11      	ldr	r6, [pc, #68]	; (80090c0 <floorf+0x7c>)
 800907a:	412e      	asrs	r6, r5
 800907c:	4230      	tst	r0, r6
 800907e:	d017      	beq.n	80090b0 <floorf+0x6c>
 8009080:	490d      	ldr	r1, [pc, #52]	; (80090b8 <floorf+0x74>)
 8009082:	f7f7 fd75 	bl	8000b70 <__addsf3>
 8009086:	2100      	movs	r1, #0
 8009088:	f7f8 f836 	bl	80010f8 <__aeabi_fcmpgt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d0f1      	beq.n	8009074 <floorf+0x30>
 8009090:	2c00      	cmp	r4, #0
 8009092:	bfbe      	ittt	lt
 8009094:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8009098:	fa43 f505 	asrlt.w	r5, r3, r5
 800909c:	1964      	addlt	r4, r4, r5
 800909e:	ea24 0406 	bic.w	r4, r4, r6
 80090a2:	e7e7      	b.n	8009074 <floorf+0x30>
 80090a4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80090a8:	d302      	bcc.n	80090b0 <floorf+0x6c>
 80090aa:	f7f7 fd61 	bl	8000b70 <__addsf3>
 80090ae:	4601      	mov	r1, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	bd70      	pop	{r4, r5, r6, pc}
 80090b4:	2400      	movs	r4, #0
 80090b6:	e7dd      	b.n	8009074 <floorf+0x30>
 80090b8:	7149f2ca 	.word	0x7149f2ca
 80090bc:	bf800000 	.word	0xbf800000
 80090c0:	007fffff 	.word	0x007fffff

080090c4 <nanf>:
 80090c4:	4800      	ldr	r0, [pc, #0]	; (80090c8 <nanf+0x4>)
 80090c6:	4770      	bx	lr
 80090c8:	7fc00000 	.word	0x7fc00000

080090cc <scalbnf>:
 80090cc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 80090d0:	b510      	push	{r4, lr}
 80090d2:	4602      	mov	r2, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	d028      	beq.n	800912a <scalbnf+0x5e>
 80090d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090dc:	d304      	bcc.n	80090e8 <scalbnf+0x1c>
 80090de:	4601      	mov	r1, r0
 80090e0:	f7f7 fd46 	bl	8000b70 <__addsf3>
 80090e4:	4602      	mov	r2, r0
 80090e6:	e020      	b.n	800912a <scalbnf+0x5e>
 80090e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090ec:	d215      	bcs.n	800911a <scalbnf+0x4e>
 80090ee:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80090f2:	f7f7 fe45 	bl	8000d80 <__aeabi_fmul>
 80090f6:	4b18      	ldr	r3, [pc, #96]	; (8009158 <scalbnf+0x8c>)
 80090f8:	4602      	mov	r2, r0
 80090fa:	429c      	cmp	r4, r3
 80090fc:	db22      	blt.n	8009144 <scalbnf+0x78>
 80090fe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009102:	3b19      	subs	r3, #25
 8009104:	4423      	add	r3, r4
 8009106:	2bfe      	cmp	r3, #254	; 0xfe
 8009108:	dd09      	ble.n	800911e <scalbnf+0x52>
 800910a:	4611      	mov	r1, r2
 800910c:	4813      	ldr	r0, [pc, #76]	; (800915c <scalbnf+0x90>)
 800910e:	f000 f830 	bl	8009172 <copysignf>
 8009112:	4912      	ldr	r1, [pc, #72]	; (800915c <scalbnf+0x90>)
 8009114:	f7f7 fe34 	bl	8000d80 <__aeabi_fmul>
 8009118:	e7e4      	b.n	80090e4 <scalbnf+0x18>
 800911a:	0ddb      	lsrs	r3, r3, #23
 800911c:	e7f2      	b.n	8009104 <scalbnf+0x38>
 800911e:	2b00      	cmp	r3, #0
 8009120:	dd05      	ble.n	800912e <scalbnf+0x62>
 8009122:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8009126:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800912a:	4610      	mov	r0, r2
 800912c:	bd10      	pop	{r4, pc}
 800912e:	f113 0f16 	cmn.w	r3, #22
 8009132:	da09      	bge.n	8009148 <scalbnf+0x7c>
 8009134:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009138:	429c      	cmp	r4, r3
 800913a:	4611      	mov	r1, r2
 800913c:	dce6      	bgt.n	800910c <scalbnf+0x40>
 800913e:	4808      	ldr	r0, [pc, #32]	; (8009160 <scalbnf+0x94>)
 8009140:	f000 f817 	bl	8009172 <copysignf>
 8009144:	4906      	ldr	r1, [pc, #24]	; (8009160 <scalbnf+0x94>)
 8009146:	e7e5      	b.n	8009114 <scalbnf+0x48>
 8009148:	3319      	adds	r3, #25
 800914a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800914e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8009152:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8009156:	e7dd      	b.n	8009114 <scalbnf+0x48>
 8009158:	ffff3cb0 	.word	0xffff3cb0
 800915c:	7149f2ca 	.word	0x7149f2ca
 8009160:	0da24260 	.word	0x0da24260

08009164 <copysign>:
 8009164:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800916c:	ea42 0103 	orr.w	r1, r2, r3
 8009170:	4770      	bx	lr

08009172 <copysignf>:
 8009172:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8009176:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800917a:	4308      	orrs	r0, r1
 800917c:	4770      	bx	lr

0800917e <abort>:
 800917e:	b508      	push	{r3, lr}
 8009180:	2006      	movs	r0, #6
 8009182:	f000 f94b 	bl	800941c <raise>
 8009186:	2001      	movs	r0, #1
 8009188:	f7fb f890 	bl	80042ac <_exit>

0800918c <calloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <calloc+0xc>)
 800918e:	460a      	mov	r2, r1
 8009190:	4601      	mov	r1, r0
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	f000 b852 	b.w	800923c <_calloc_r>
 8009198:	20000020 	.word	0x20000020

0800919c <__cxa_atexit>:
 800919c:	b510      	push	{r4, lr}
 800919e:	4c05      	ldr	r4, [pc, #20]	; (80091b4 <__cxa_atexit+0x18>)
 80091a0:	4613      	mov	r3, r2
 80091a2:	b12c      	cbz	r4, 80091b0 <__cxa_atexit+0x14>
 80091a4:	460a      	mov	r2, r1
 80091a6:	4601      	mov	r1, r0
 80091a8:	2002      	movs	r0, #2
 80091aa:	f3af 8000 	nop.w
 80091ae:	bd10      	pop	{r4, pc}
 80091b0:	4620      	mov	r0, r4
 80091b2:	bd10      	pop	{r4, pc}
 80091b4:	00000000 	.word	0x00000000

080091b8 <__errno>:
 80091b8:	4b01      	ldr	r3, [pc, #4]	; (80091c0 <__errno+0x8>)
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000020 	.word	0x20000020

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	2500      	movs	r5, #0
 80091c8:	4e0c      	ldr	r6, [pc, #48]	; (80091fc <__libc_init_array+0x38>)
 80091ca:	4c0d      	ldr	r4, [pc, #52]	; (8009200 <__libc_init_array+0x3c>)
 80091cc:	1ba4      	subs	r4, r4, r6
 80091ce:	10a4      	asrs	r4, r4, #2
 80091d0:	42a5      	cmp	r5, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	f000 f94c 	bl	8009470 <_init>
 80091d8:	2500      	movs	r5, #0
 80091da:	4e0a      	ldr	r6, [pc, #40]	; (8009204 <__libc_init_array+0x40>)
 80091dc:	4c0a      	ldr	r4, [pc, #40]	; (8009208 <__libc_init_array+0x44>)
 80091de:	1ba4      	subs	r4, r4, r6
 80091e0:	10a4      	asrs	r4, r4, #2
 80091e2:	42a5      	cmp	r5, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091ec:	4798      	blx	r3
 80091ee:	3501      	adds	r5, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091f6:	4798      	blx	r3
 80091f8:	3501      	adds	r5, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	08009f44 	.word	0x08009f44
 8009200:	08009f44 	.word	0x08009f44
 8009204:	08009f44 	.word	0x08009f44
 8009208:	08009f60 	.word	0x08009f60

0800920c <malloc>:
 800920c:	4b02      	ldr	r3, [pc, #8]	; (8009218 <malloc+0xc>)
 800920e:	4601      	mov	r1, r0
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f000 b86d 	b.w	80092f0 <_malloc_r>
 8009216:	bf00      	nop
 8009218:	20000020 	.word	0x20000020

0800921c <free>:
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <free+0xc>)
 800921e:	4601      	mov	r1, r0
 8009220:	6818      	ldr	r0, [r3, #0]
 8009222:	f000 b819 	b.w	8009258 <_free_r>
 8009226:	bf00      	nop
 8009228:	20000020 	.word	0x20000020

0800922c <memset>:
 800922c:	4603      	mov	r3, r0
 800922e:	4402      	add	r2, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <_calloc_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	fb02 f401 	mul.w	r4, r2, r1
 8009242:	4621      	mov	r1, r4
 8009244:	f000 f854 	bl	80092f0 <_malloc_r>
 8009248:	4605      	mov	r5, r0
 800924a:	b118      	cbz	r0, 8009254 <_calloc_r+0x18>
 800924c:	4622      	mov	r2, r4
 800924e:	2100      	movs	r1, #0
 8009250:	f7ff ffec 	bl	800922c <memset>
 8009254:	4628      	mov	r0, r5
 8009256:	bd38      	pop	{r3, r4, r5, pc}

08009258 <_free_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4605      	mov	r5, r0
 800925c:	2900      	cmp	r1, #0
 800925e:	d043      	beq.n	80092e8 <_free_r+0x90>
 8009260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009264:	1f0c      	subs	r4, r1, #4
 8009266:	2b00      	cmp	r3, #0
 8009268:	bfb8      	it	lt
 800926a:	18e4      	addlt	r4, r4, r3
 800926c:	f000 f8f2 	bl	8009454 <__malloc_lock>
 8009270:	4a1e      	ldr	r2, [pc, #120]	; (80092ec <_free_r+0x94>)
 8009272:	6813      	ldr	r3, [r2, #0]
 8009274:	4610      	mov	r0, r2
 8009276:	b933      	cbnz	r3, 8009286 <_free_r+0x2e>
 8009278:	6063      	str	r3, [r4, #4]
 800927a:	6014      	str	r4, [r2, #0]
 800927c:	4628      	mov	r0, r5
 800927e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009282:	f000 b8e8 	b.w	8009456 <__malloc_unlock>
 8009286:	42a3      	cmp	r3, r4
 8009288:	d90b      	bls.n	80092a2 <_free_r+0x4a>
 800928a:	6821      	ldr	r1, [r4, #0]
 800928c:	1862      	adds	r2, r4, r1
 800928e:	4293      	cmp	r3, r2
 8009290:	bf01      	itttt	eq
 8009292:	681a      	ldreq	r2, [r3, #0]
 8009294:	685b      	ldreq	r3, [r3, #4]
 8009296:	1852      	addeq	r2, r2, r1
 8009298:	6022      	streq	r2, [r4, #0]
 800929a:	6063      	str	r3, [r4, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	e7ed      	b.n	800927c <_free_r+0x24>
 80092a0:	4613      	mov	r3, r2
 80092a2:	685a      	ldr	r2, [r3, #4]
 80092a4:	b10a      	cbz	r2, 80092aa <_free_r+0x52>
 80092a6:	42a2      	cmp	r2, r4
 80092a8:	d9fa      	bls.n	80092a0 <_free_r+0x48>
 80092aa:	6819      	ldr	r1, [r3, #0]
 80092ac:	1858      	adds	r0, r3, r1
 80092ae:	42a0      	cmp	r0, r4
 80092b0:	d10b      	bne.n	80092ca <_free_r+0x72>
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	4401      	add	r1, r0
 80092b6:	1858      	adds	r0, r3, r1
 80092b8:	4282      	cmp	r2, r0
 80092ba:	6019      	str	r1, [r3, #0]
 80092bc:	d1de      	bne.n	800927c <_free_r+0x24>
 80092be:	6810      	ldr	r0, [r2, #0]
 80092c0:	6852      	ldr	r2, [r2, #4]
 80092c2:	4401      	add	r1, r0
 80092c4:	6019      	str	r1, [r3, #0]
 80092c6:	605a      	str	r2, [r3, #4]
 80092c8:	e7d8      	b.n	800927c <_free_r+0x24>
 80092ca:	d902      	bls.n	80092d2 <_free_r+0x7a>
 80092cc:	230c      	movs	r3, #12
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	e7d4      	b.n	800927c <_free_r+0x24>
 80092d2:	6820      	ldr	r0, [r4, #0]
 80092d4:	1821      	adds	r1, r4, r0
 80092d6:	428a      	cmp	r2, r1
 80092d8:	bf01      	itttt	eq
 80092da:	6811      	ldreq	r1, [r2, #0]
 80092dc:	6852      	ldreq	r2, [r2, #4]
 80092de:	1809      	addeq	r1, r1, r0
 80092e0:	6021      	streq	r1, [r4, #0]
 80092e2:	6062      	str	r2, [r4, #4]
 80092e4:	605c      	str	r4, [r3, #4]
 80092e6:	e7c9      	b.n	800927c <_free_r+0x24>
 80092e8:	bd38      	pop	{r3, r4, r5, pc}
 80092ea:	bf00      	nop
 80092ec:	200001bc 	.word	0x200001bc

080092f0 <_malloc_r>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	1ccd      	adds	r5, r1, #3
 80092f4:	f025 0503 	bic.w	r5, r5, #3
 80092f8:	3508      	adds	r5, #8
 80092fa:	2d0c      	cmp	r5, #12
 80092fc:	bf38      	it	cc
 80092fe:	250c      	movcc	r5, #12
 8009300:	2d00      	cmp	r5, #0
 8009302:	4606      	mov	r6, r0
 8009304:	db01      	blt.n	800930a <_malloc_r+0x1a>
 8009306:	42a9      	cmp	r1, r5
 8009308:	d903      	bls.n	8009312 <_malloc_r+0x22>
 800930a:	230c      	movs	r3, #12
 800930c:	6033      	str	r3, [r6, #0]
 800930e:	2000      	movs	r0, #0
 8009310:	bd70      	pop	{r4, r5, r6, pc}
 8009312:	f000 f89f 	bl	8009454 <__malloc_lock>
 8009316:	4a23      	ldr	r2, [pc, #140]	; (80093a4 <_malloc_r+0xb4>)
 8009318:	6814      	ldr	r4, [r2, #0]
 800931a:	4621      	mov	r1, r4
 800931c:	b991      	cbnz	r1, 8009344 <_malloc_r+0x54>
 800931e:	4c22      	ldr	r4, [pc, #136]	; (80093a8 <_malloc_r+0xb8>)
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	b91b      	cbnz	r3, 800932c <_malloc_r+0x3c>
 8009324:	4630      	mov	r0, r6
 8009326:	f000 f841 	bl	80093ac <_sbrk_r>
 800932a:	6020      	str	r0, [r4, #0]
 800932c:	4629      	mov	r1, r5
 800932e:	4630      	mov	r0, r6
 8009330:	f000 f83c 	bl	80093ac <_sbrk_r>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	d126      	bne.n	8009386 <_malloc_r+0x96>
 8009338:	230c      	movs	r3, #12
 800933a:	4630      	mov	r0, r6
 800933c:	6033      	str	r3, [r6, #0]
 800933e:	f000 f88a 	bl	8009456 <__malloc_unlock>
 8009342:	e7e4      	b.n	800930e <_malloc_r+0x1e>
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	1b5b      	subs	r3, r3, r5
 8009348:	d41a      	bmi.n	8009380 <_malloc_r+0x90>
 800934a:	2b0b      	cmp	r3, #11
 800934c:	d90f      	bls.n	800936e <_malloc_r+0x7e>
 800934e:	600b      	str	r3, [r1, #0]
 8009350:	18cc      	adds	r4, r1, r3
 8009352:	50cd      	str	r5, [r1, r3]
 8009354:	4630      	mov	r0, r6
 8009356:	f000 f87e 	bl	8009456 <__malloc_unlock>
 800935a:	f104 000b 	add.w	r0, r4, #11
 800935e:	1d23      	adds	r3, r4, #4
 8009360:	f020 0007 	bic.w	r0, r0, #7
 8009364:	1ac3      	subs	r3, r0, r3
 8009366:	d01b      	beq.n	80093a0 <_malloc_r+0xb0>
 8009368:	425a      	negs	r2, r3
 800936a:	50e2      	str	r2, [r4, r3]
 800936c:	bd70      	pop	{r4, r5, r6, pc}
 800936e:	428c      	cmp	r4, r1
 8009370:	bf0b      	itete	eq
 8009372:	6863      	ldreq	r3, [r4, #4]
 8009374:	684b      	ldrne	r3, [r1, #4]
 8009376:	6013      	streq	r3, [r2, #0]
 8009378:	6063      	strne	r3, [r4, #4]
 800937a:	bf18      	it	ne
 800937c:	460c      	movne	r4, r1
 800937e:	e7e9      	b.n	8009354 <_malloc_r+0x64>
 8009380:	460c      	mov	r4, r1
 8009382:	6849      	ldr	r1, [r1, #4]
 8009384:	e7ca      	b.n	800931c <_malloc_r+0x2c>
 8009386:	1cc4      	adds	r4, r0, #3
 8009388:	f024 0403 	bic.w	r4, r4, #3
 800938c:	42a0      	cmp	r0, r4
 800938e:	d005      	beq.n	800939c <_malloc_r+0xac>
 8009390:	1a21      	subs	r1, r4, r0
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f80a 	bl	80093ac <_sbrk_r>
 8009398:	3001      	adds	r0, #1
 800939a:	d0cd      	beq.n	8009338 <_malloc_r+0x48>
 800939c:	6025      	str	r5, [r4, #0]
 800939e:	e7d9      	b.n	8009354 <_malloc_r+0x64>
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
 80093a2:	bf00      	nop
 80093a4:	200001bc 	.word	0x200001bc
 80093a8:	200001c0 	.word	0x200001c0

080093ac <_sbrk_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	2300      	movs	r3, #0
 80093b0:	4c05      	ldr	r4, [pc, #20]	; (80093c8 <_sbrk_r+0x1c>)
 80093b2:	4605      	mov	r5, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	6023      	str	r3, [r4, #0]
 80093b8:	f7fa ff7e 	bl	80042b8 <_sbrk>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d102      	bne.n	80093c6 <_sbrk_r+0x1a>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	b103      	cbz	r3, 80093c6 <_sbrk_r+0x1a>
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	200002e8 	.word	0x200002e8

080093cc <_raise_r>:
 80093cc:	291f      	cmp	r1, #31
 80093ce:	b538      	push	{r3, r4, r5, lr}
 80093d0:	4604      	mov	r4, r0
 80093d2:	460d      	mov	r5, r1
 80093d4:	d904      	bls.n	80093e0 <_raise_r+0x14>
 80093d6:	2316      	movs	r3, #22
 80093d8:	6003      	str	r3, [r0, #0]
 80093da:	f04f 30ff 	mov.w	r0, #4294967295
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093e2:	b112      	cbz	r2, 80093ea <_raise_r+0x1e>
 80093e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093e8:	b94b      	cbnz	r3, 80093fe <_raise_r+0x32>
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 f830 	bl	8009450 <_getpid_r>
 80093f0:	462a      	mov	r2, r5
 80093f2:	4601      	mov	r1, r0
 80093f4:	4620      	mov	r0, r4
 80093f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fa:	f000 b817 	b.w	800942c <_kill_r>
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d00a      	beq.n	8009418 <_raise_r+0x4c>
 8009402:	1c59      	adds	r1, r3, #1
 8009404:	d103      	bne.n	800940e <_raise_r+0x42>
 8009406:	2316      	movs	r3, #22
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	2001      	movs	r0, #1
 800940c:	bd38      	pop	{r3, r4, r5, pc}
 800940e:	2400      	movs	r4, #0
 8009410:	4628      	mov	r0, r5
 8009412:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009416:	4798      	blx	r3
 8009418:	2000      	movs	r0, #0
 800941a:	bd38      	pop	{r3, r4, r5, pc}

0800941c <raise>:
 800941c:	4b02      	ldr	r3, [pc, #8]	; (8009428 <raise+0xc>)
 800941e:	4601      	mov	r1, r0
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	f7ff bfd3 	b.w	80093cc <_raise_r>
 8009426:	bf00      	nop
 8009428:	20000020 	.word	0x20000020

0800942c <_kill_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	2300      	movs	r3, #0
 8009430:	4c06      	ldr	r4, [pc, #24]	; (800944c <_kill_r+0x20>)
 8009432:	4605      	mov	r5, r0
 8009434:	4608      	mov	r0, r1
 8009436:	4611      	mov	r1, r2
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	f7fa ff2f 	bl	800429c <_kill>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d102      	bne.n	8009448 <_kill_r+0x1c>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	b103      	cbz	r3, 8009448 <_kill_r+0x1c>
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	bd38      	pop	{r3, r4, r5, pc}
 800944a:	bf00      	nop
 800944c:	200002e8 	.word	0x200002e8

08009450 <_getpid_r>:
 8009450:	f7fa bf22 	b.w	8004298 <_getpid>

08009454 <__malloc_lock>:
 8009454:	4770      	bx	lr

08009456 <__malloc_unlock>:
 8009456:	4770      	bx	lr

08009458 <memcpy>:
 8009458:	b510      	push	{r4, lr}
 800945a:	1e43      	subs	r3, r0, #1
 800945c:	440a      	add	r2, r1
 800945e:	4291      	cmp	r1, r2
 8009460:	d100      	bne.n	8009464 <memcpy+0xc>
 8009462:	bd10      	pop	{r4, pc}
 8009464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946c:	e7f7      	b.n	800945e <memcpy+0x6>
	...

08009470 <_init>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr

0800947c <_fini>:
 800947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947e:	bf00      	nop
 8009480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009482:	bc08      	pop	{r3}
 8009484:	469e      	mov	lr, r3
 8009486:	4770      	bx	lr
