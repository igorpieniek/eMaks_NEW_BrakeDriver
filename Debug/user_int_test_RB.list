
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  08008490  08008490  00018490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000188  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000001f8  08008d30  08008d30  00018d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008f44  08008f44  00018f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08008f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000268  20000084  08008fcc  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002ec  08008fcc  000202ec  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018fe6  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000044d8  00000000  00000000  00039093  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000ef0  00000000  00000000  0003d570  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001130  00000000  00000000  0003e460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00009007  00000000  00000000  0003f590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005c96  00000000  00000000  00048597  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004e22d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004554  00000000  00000000  0004e2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007f6f  00000000  00000000  00052800  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08008474 	.word	0x08008474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08008474 	.word	0x08008474

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_d2iz>:
 8000a08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a10:	d215      	bcs.n	8000a3e <__aeabi_d2iz+0x36>
 8000a12:	d511      	bpl.n	8000a38 <__aeabi_d2iz+0x30>
 8000a14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a1c:	d912      	bls.n	8000a44 <__aeabi_d2iz+0x3c>
 8000a1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	bf18      	it	ne
 8000a34:	4240      	negne	r0, r0
 8000a36:	4770      	bx	lr
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	4770      	bx	lr
 8000a3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a42:	d105      	bne.n	8000a50 <__aeabi_d2iz+0x48>
 8000a44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	bf08      	it	eq
 8000a4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_d2f>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a60:	bf24      	itt	cs
 8000a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6a:	d90d      	bls.n	8000a88 <__aeabi_d2f+0x30>
 8000a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a80:	bf08      	it	eq
 8000a82:	f020 0001 	biceq.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a8c:	d121      	bne.n	8000ad2 <__aeabi_d2f+0x7a>
 8000a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a92:	bfbc      	itt	lt
 8000a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	4770      	bxlt	lr
 8000a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa2:	f1c2 0218 	rsb	r2, r2, #24
 8000aa6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aaa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aae:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab2:	bf18      	it	ne
 8000ab4:	f040 0001 	orrne.w	r0, r0, #1
 8000ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac4:	ea40 000c 	orr.w	r0, r0, ip
 8000ac8:	fa23 f302 	lsr.w	r3, r3, r2
 8000acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad0:	e7cc      	b.n	8000a6c <__aeabi_d2f+0x14>
 8000ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ad6:	d107      	bne.n	8000ae8 <__aeabi_d2f+0x90>
 8000ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000adc:	bf1e      	ittt	ne
 8000ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ae6:	4770      	bxne	lr
 8000ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_frsub>:
 8000af8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	e002      	b.n	8000b04 <__addsf3>
 8000afe:	bf00      	nop

08000b00 <__aeabi_fsub>:
 8000b00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b04 <__addsf3>:
 8000b04:	0042      	lsls	r2, r0, #1
 8000b06:	bf1f      	itttt	ne
 8000b08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b0c:	ea92 0f03 	teqne	r2, r3
 8000b10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b18:	d06a      	beq.n	8000bf0 <__addsf3+0xec>
 8000b1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b22:	bfc1      	itttt	gt
 8000b24:	18d2      	addgt	r2, r2, r3
 8000b26:	4041      	eorgt	r1, r0
 8000b28:	4048      	eorgt	r0, r1
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	bfb8      	it	lt
 8000b2e:	425b      	neglt	r3, r3
 8000b30:	2b19      	cmp	r3, #25
 8000b32:	bf88      	it	hi
 8000b34:	4770      	bxhi	lr
 8000b36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4249      	negne	r1, r1
 8000b56:	ea92 0f03 	teq	r2, r3
 8000b5a:	d03f      	beq.n	8000bdc <__addsf3+0xd8>
 8000b5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b60:	fa41 fc03 	asr.w	ip, r1, r3
 8000b64:	eb10 000c 	adds.w	r0, r0, ip
 8000b68:	f1c3 0320 	rsb	r3, r3, #32
 8000b6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b74:	d502      	bpl.n	8000b7c <__addsf3+0x78>
 8000b76:	4249      	negs	r1, r1
 8000b78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b80:	d313      	bcc.n	8000baa <__addsf3+0xa6>
 8000b82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b86:	d306      	bcc.n	8000b96 <__addsf3+0x92>
 8000b88:	0840      	lsrs	r0, r0, #1
 8000b8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b8e:	f102 0201 	add.w	r2, r2, #1
 8000b92:	2afe      	cmp	r2, #254	; 0xfe
 8000b94:	d251      	bcs.n	8000c3a <__addsf3+0x136>
 8000b96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b9e:	bf08      	it	eq
 8000ba0:	f020 0001 	biceq.w	r0, r0, #1
 8000ba4:	ea40 0003 	orr.w	r0, r0, r3
 8000ba8:	4770      	bx	lr
 8000baa:	0049      	lsls	r1, r1, #1
 8000bac:	eb40 0000 	adc.w	r0, r0, r0
 8000bb0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	d1ed      	bne.n	8000b96 <__addsf3+0x92>
 8000bba:	fab0 fc80 	clz	ip, r0
 8000bbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bca:	bfaa      	itet	ge
 8000bcc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd0:	4252      	neglt	r2, r2
 8000bd2:	4318      	orrge	r0, r3
 8000bd4:	bfbc      	itt	lt
 8000bd6:	40d0      	lsrlt	r0, r2
 8000bd8:	4318      	orrlt	r0, r3
 8000bda:	4770      	bx	lr
 8000bdc:	f092 0f00 	teq	r2, #0
 8000be0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be4:	bf06      	itte	eq
 8000be6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bea:	3201      	addeq	r2, #1
 8000bec:	3b01      	subne	r3, #1
 8000bee:	e7b5      	b.n	8000b5c <__addsf3+0x58>
 8000bf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bf8:	bf18      	it	ne
 8000bfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bfe:	d021      	beq.n	8000c44 <__addsf3+0x140>
 8000c00:	ea92 0f03 	teq	r2, r3
 8000c04:	d004      	beq.n	8000c10 <__addsf3+0x10c>
 8000c06:	f092 0f00 	teq	r2, #0
 8000c0a:	bf08      	it	eq
 8000c0c:	4608      	moveq	r0, r1
 8000c0e:	4770      	bx	lr
 8000c10:	ea90 0f01 	teq	r0, r1
 8000c14:	bf1c      	itt	ne
 8000c16:	2000      	movne	r0, #0
 8000c18:	4770      	bxne	lr
 8000c1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c1e:	d104      	bne.n	8000c2a <__addsf3+0x126>
 8000c20:	0040      	lsls	r0, r0, #1
 8000c22:	bf28      	it	cs
 8000c24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c28:	4770      	bx	lr
 8000c2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c2e:	bf3c      	itt	cc
 8000c30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bxcc	lr
 8000c36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c42:	4770      	bx	lr
 8000c44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c48:	bf16      	itet	ne
 8000c4a:	4608      	movne	r0, r1
 8000c4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c50:	4601      	movne	r1, r0
 8000c52:	0242      	lsls	r2, r0, #9
 8000c54:	bf06      	itte	eq
 8000c56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5a:	ea90 0f01 	teqeq	r0, r1
 8000c5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c62:	4770      	bx	lr

08000c64 <__aeabi_ui2f>:
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e004      	b.n	8000c74 <__aeabi_i2f+0x8>
 8000c6a:	bf00      	nop

08000c6c <__aeabi_i2f>:
 8000c6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c70:	bf48      	it	mi
 8000c72:	4240      	negmi	r0, r0
 8000c74:	ea5f 0c00 	movs.w	ip, r0
 8000c78:	bf08      	it	eq
 8000c7a:	4770      	bxeq	lr
 8000c7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c80:	4601      	mov	r1, r0
 8000c82:	f04f 0000 	mov.w	r0, #0
 8000c86:	e01c      	b.n	8000cc2 <__aeabi_l2f+0x2a>

08000c88 <__aeabi_ul2f>:
 8000c88:	ea50 0201 	orrs.w	r2, r0, r1
 8000c8c:	bf08      	it	eq
 8000c8e:	4770      	bxeq	lr
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e00a      	b.n	8000cac <__aeabi_l2f+0x14>
 8000c96:	bf00      	nop

08000c98 <__aeabi_l2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__aeabi_l2f+0x14>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	ea5f 0c01 	movs.w	ip, r1
 8000cb0:	bf02      	ittt	eq
 8000cb2:	4684      	moveq	ip, r0
 8000cb4:	4601      	moveq	r1, r0
 8000cb6:	2000      	moveq	r0, #0
 8000cb8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cbc:	bf08      	it	eq
 8000cbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cc6:	fabc f28c 	clz	r2, ip
 8000cca:	3a08      	subs	r2, #8
 8000ccc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd0:	db10      	blt.n	8000cf4 <__aeabi_l2f+0x5c>
 8000cd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	f020 0001 	biceq.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	f102 0220 	add.w	r2, r2, #32
 8000cf8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d04:	fa21 f202 	lsr.w	r2, r1, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_fmul>:
 8000d14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d1c:	bf1e      	ittt	ne
 8000d1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d22:	ea92 0f0c 	teqne	r2, ip
 8000d26:	ea93 0f0c 	teqne	r3, ip
 8000d2a:	d06f      	beq.n	8000e0c <__aeabi_fmul+0xf8>
 8000d2c:	441a      	add	r2, r3
 8000d2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d32:	0240      	lsls	r0, r0, #9
 8000d34:	bf18      	it	ne
 8000d36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3a:	d01e      	beq.n	8000d7a <__aeabi_fmul+0x66>
 8000d3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d48:	fba0 3101 	umull	r3, r1, r0, r1
 8000d4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d54:	bf3e      	ittt	cc
 8000d56:	0049      	lslcc	r1, r1, #1
 8000d58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	ea40 0001 	orr.w	r0, r0, r1
 8000d62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d66:	2afd      	cmp	r2, #253	; 0xfd
 8000d68:	d81d      	bhi.n	8000da6 <__aeabi_fmul+0x92>
 8000d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d72:	bf08      	it	eq
 8000d74:	f020 0001 	biceq.w	r0, r0, #1
 8000d78:	4770      	bx	lr
 8000d7a:	f090 0f00 	teq	r0, #0
 8000d7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	0249      	lsleq	r1, r1, #9
 8000d86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d8e:	3a7f      	subs	r2, #127	; 0x7f
 8000d90:	bfc2      	ittt	gt
 8000d92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9a:	4770      	bxgt	lr
 8000d9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	3a01      	subs	r2, #1
 8000da6:	dc5d      	bgt.n	8000e64 <__aeabi_fmul+0x150>
 8000da8:	f112 0f19 	cmn.w	r2, #25
 8000dac:	bfdc      	itt	le
 8000dae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db2:	4770      	bxle	lr
 8000db4:	f1c2 0200 	rsb	r2, r2, #0
 8000db8:	0041      	lsls	r1, r0, #1
 8000dba:	fa21 f102 	lsr.w	r1, r1, r2
 8000dbe:	f1c2 0220 	rsb	r2, r2, #32
 8000dc2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dca:	f140 0000 	adc.w	r0, r0, #0
 8000dce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd2:	bf08      	it	eq
 8000dd4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd8:	4770      	bx	lr
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fmul+0xce>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fmul+0xe6>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e78f      	b.n	8000d2c <__aeabi_fmul+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	bf18      	it	ne
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d00a      	beq.n	8000e32 <__aeabi_fmul+0x11e>
 8000e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e20:	bf18      	it	ne
 8000e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	d1d8      	bne.n	8000dda <__aeabi_fmul+0xc6>
 8000e28:	ea80 0001 	eor.w	r0, r0, r1
 8000e2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e30:	4770      	bx	lr
 8000e32:	f090 0f00 	teq	r0, #0
 8000e36:	bf17      	itett	ne
 8000e38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e3c:	4608      	moveq	r0, r1
 8000e3e:	f091 0f00 	teqne	r1, #0
 8000e42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e46:	d014      	beq.n	8000e72 <__aeabi_fmul+0x15e>
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	d101      	bne.n	8000e52 <__aeabi_fmul+0x13e>
 8000e4e:	0242      	lsls	r2, r0, #9
 8000e50:	d10f      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e52:	ea93 0f0c 	teq	r3, ip
 8000e56:	d103      	bne.n	8000e60 <__aeabi_fmul+0x14c>
 8000e58:	024b      	lsls	r3, r1, #9
 8000e5a:	bf18      	it	ne
 8000e5c:	4608      	movne	r0, r1
 8000e5e:	d108      	bne.n	8000e72 <__aeabi_fmul+0x15e>
 8000e60:	ea80 0001 	eor.w	r0, r0, r1
 8000e64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e70:	4770      	bx	lr
 8000e72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7a:	4770      	bx	lr

08000e7c <__aeabi_fdiv>:
 8000e7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e84:	bf1e      	ittt	ne
 8000e86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8a:	ea92 0f0c 	teqne	r2, ip
 8000e8e:	ea93 0f0c 	teqne	r3, ip
 8000e92:	d069      	beq.n	8000f68 <__aeabi_fdiv+0xec>
 8000e94:	eba2 0203 	sub.w	r2, r2, r3
 8000e98:	ea80 0c01 	eor.w	ip, r0, r1
 8000e9c:	0249      	lsls	r1, r1, #9
 8000e9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea2:	d037      	beq.n	8000f14 <__aeabi_fdiv+0x98>
 8000ea4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ea8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	bf38      	it	cc
 8000eb8:	005b      	lslcc	r3, r3, #1
 8000eba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ebe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	bf24      	itt	cs
 8000ec6:	1a5b      	subcs	r3, r3, r1
 8000ec8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ecc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed0:	bf24      	itt	cs
 8000ed2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ed6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ede:	bf24      	itt	cs
 8000ee0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ee8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	bf18      	it	ne
 8000efa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000efe:	d1e0      	bne.n	8000ec2 <__aeabi_fdiv+0x46>
 8000f00:	2afd      	cmp	r2, #253	; 0xfd
 8000f02:	f63f af50 	bhi.w	8000da6 <__aeabi_fmul+0x92>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f0c:	bf08      	it	eq
 8000f0e:	f020 0001 	biceq.w	r0, r0, #1
 8000f12:	4770      	bx	lr
 8000f14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f1c:	327f      	adds	r2, #127	; 0x7f
 8000f1e:	bfc2      	ittt	gt
 8000f20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f28:	4770      	bxgt	lr
 8000f2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	3a01      	subs	r2, #1
 8000f34:	e737      	b.n	8000da6 <__aeabi_fmul+0x92>
 8000f36:	f092 0f00 	teq	r2, #0
 8000f3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f3e:	bf02      	ittt	eq
 8000f40:	0040      	lsleq	r0, r0, #1
 8000f42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f46:	3a01      	subeq	r2, #1
 8000f48:	d0f9      	beq.n	8000f3e <__aeabi_fdiv+0xc2>
 8000f4a:	ea40 000c 	orr.w	r0, r0, ip
 8000f4e:	f093 0f00 	teq	r3, #0
 8000f52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f56:	bf02      	ittt	eq
 8000f58:	0049      	lsleq	r1, r1, #1
 8000f5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f5e:	3b01      	subeq	r3, #1
 8000f60:	d0f9      	beq.n	8000f56 <__aeabi_fdiv+0xda>
 8000f62:	ea41 010c 	orr.w	r1, r1, ip
 8000f66:	e795      	b.n	8000e94 <__aeabi_fdiv+0x18>
 8000f68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f6c:	ea92 0f0c 	teq	r2, ip
 8000f70:	d108      	bne.n	8000f84 <__aeabi_fdiv+0x108>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	f47f af7d 	bne.w	8000e72 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	f47f af70 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e776      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f84:	ea93 0f0c 	teq	r3, ip
 8000f88:	d104      	bne.n	8000f94 <__aeabi_fdiv+0x118>
 8000f8a:	024b      	lsls	r3, r1, #9
 8000f8c:	f43f af4c 	beq.w	8000e28 <__aeabi_fmul+0x114>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e76e      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000f94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f98:	bf18      	it	ne
 8000f9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f9e:	d1ca      	bne.n	8000f36 <__aeabi_fdiv+0xba>
 8000fa0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa4:	f47f af5c 	bne.w	8000e60 <__aeabi_fmul+0x14c>
 8000fa8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fac:	f47f af3c 	bne.w	8000e28 <__aeabi_fmul+0x114>
 8000fb0:	e75f      	b.n	8000e72 <__aeabi_fmul+0x15e>
 8000fb2:	bf00      	nop

08000fb4 <__gesf2>:
 8000fb4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fb8:	e006      	b.n	8000fc8 <__cmpsf2+0x4>
 8000fba:	bf00      	nop

08000fbc <__lesf2>:
 8000fbc:	f04f 0c01 	mov.w	ip, #1
 8000fc0:	e002      	b.n	8000fc8 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__cmpsf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	bf18      	it	ne
 8000fda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fde:	d011      	beq.n	8001004 <__cmpsf2+0x40>
 8000fe0:	b001      	add	sp, #4
 8000fe2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fe6:	bf18      	it	ne
 8000fe8:	ea90 0f01 	teqne	r0, r1
 8000fec:	bf58      	it	pl
 8000fee:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff2:	bf88      	it	hi
 8000ff4:	17c8      	asrhi	r0, r1, #31
 8000ff6:	bf38      	it	cc
 8000ff8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ffc:	bf18      	it	ne
 8000ffe:	f040 0001 	orrne.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	d102      	bne.n	8001010 <__cmpsf2+0x4c>
 800100a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800100e:	d105      	bne.n	800101c <__cmpsf2+0x58>
 8001010:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001014:	d1e4      	bne.n	8000fe0 <__cmpsf2+0x1c>
 8001016:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101a:	d0e1      	beq.n	8000fe0 <__cmpsf2+0x1c>
 800101c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__aeabi_cfrcmple>:
 8001024:	4684      	mov	ip, r0
 8001026:	4608      	mov	r0, r1
 8001028:	4661      	mov	r1, ip
 800102a:	e7ff      	b.n	800102c <__aeabi_cfcmpeq>

0800102c <__aeabi_cfcmpeq>:
 800102c:	b50f      	push	{r0, r1, r2, r3, lr}
 800102e:	f7ff ffc9 	bl	8000fc4 <__cmpsf2>
 8001032:	2800      	cmp	r0, #0
 8001034:	bf48      	it	mi
 8001036:	f110 0f00 	cmnmi.w	r0, #0
 800103a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800103c <__aeabi_fcmpeq>:
 800103c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001040:	f7ff fff4 	bl	800102c <__aeabi_cfcmpeq>
 8001044:	bf0c      	ite	eq
 8001046:	2001      	moveq	r0, #1
 8001048:	2000      	movne	r0, #0
 800104a:	f85d fb08 	ldr.w	pc, [sp], #8
 800104e:	bf00      	nop

08001050 <__aeabi_fcmplt>:
 8001050:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001054:	f7ff ffea 	bl	800102c <__aeabi_cfcmpeq>
 8001058:	bf34      	ite	cc
 800105a:	2001      	movcc	r0, #1
 800105c:	2000      	movcs	r0, #0
 800105e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001062:	bf00      	nop

08001064 <__aeabi_fcmple>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff ffe0 	bl	800102c <__aeabi_cfcmpeq>
 800106c:	bf94      	ite	ls
 800106e:	2001      	movls	r0, #1
 8001070:	2000      	movhi	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmpge>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffd2 	bl	8001024 <__aeabi_cfrcmple>
 8001080:	bf94      	ite	ls
 8001082:	2001      	movls	r0, #1
 8001084:	2000      	movhi	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmpgt>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffc8 	bl	8001024 <__aeabi_cfrcmple>
 8001094:	bf34      	ite	cc
 8001096:	2001      	movcc	r0, #1
 8001098:	2000      	movcs	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpun>:
 80010a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	d102      	bne.n	80010b4 <__aeabi_fcmpun+0x14>
 80010ae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b2:	d108      	bne.n	80010c6 <__aeabi_fcmpun+0x26>
 80010b4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b8:	d102      	bne.n	80010c0 <__aeabi_fcmpun+0x20>
 80010ba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010be:	d102      	bne.n	80010c6 <__aeabi_fcmpun+0x26>
 80010c0:	f04f 0000 	mov.w	r0, #0
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0001 	mov.w	r0, #1
 80010ca:	4770      	bx	lr

080010cc <__aeabi_f2iz>:
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d4:	d30f      	bcc.n	80010f6 <__aeabi_f2iz+0x2a>
 80010d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010de:	d90d      	bls.n	80010fc <__aeabi_f2iz+0x30>
 80010e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	bf18      	it	ne
 80010f2:	4240      	negne	r0, r0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0000 	mov.w	r0, #0
 80010fa:	4770      	bx	lr
 80010fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001100:	d101      	bne.n	8001106 <__aeabi_f2iz+0x3a>
 8001102:	0242      	lsls	r2, r0, #9
 8001104:	d105      	bne.n	8001112 <__aeabi_f2iz+0x46>
 8001106:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110a:	bf08      	it	eq
 800110c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr

08001118 <__aeabi_f2uiz>:
 8001118:	0042      	lsls	r2, r0, #1
 800111a:	d20e      	bcs.n	800113a <__aeabi_f2uiz+0x22>
 800111c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001120:	d30b      	bcc.n	800113a <__aeabi_f2uiz+0x22>
 8001122:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001126:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112a:	d409      	bmi.n	8001140 <__aeabi_f2uiz+0x28>
 800112c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2uiz+0x32>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d102      	bne.n	8001150 <__aeabi_f2uiz+0x38>
 800114a:	f04f 30ff 	mov.w	r0, #4294967295
 800114e:	4770      	bx	lr
 8001150:	f04f 0000 	mov.w	r0, #0
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <selfrel_offset31>:
 8001158:	6803      	ldr	r3, [r0, #0]
 800115a:	005a      	lsls	r2, r3, #1
 800115c:	bf4c      	ite	mi
 800115e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8001162:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8001166:	4418      	add	r0, r3
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <search_EIT_table>:
 800116c:	b361      	cbz	r1, 80011c8 <search_EIT_table+0x5c>
 800116e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001172:	f101 3aff 	add.w	sl, r1, #4294967295
 8001176:	4690      	mov	r8, r2
 8001178:	4606      	mov	r6, r0
 800117a:	46d1      	mov	r9, sl
 800117c:	2700      	movs	r7, #0
 800117e:	eb07 0409 	add.w	r4, r7, r9
 8001182:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001186:	1064      	asrs	r4, r4, #1
 8001188:	00e5      	lsls	r5, r4, #3
 800118a:	1971      	adds	r1, r6, r5
 800118c:	4608      	mov	r0, r1
 800118e:	f7ff ffe3 	bl	8001158 <selfrel_offset31>
 8001192:	45a2      	cmp	sl, r4
 8001194:	4683      	mov	fp, r0
 8001196:	f105 0008 	add.w	r0, r5, #8
 800119a:	4430      	add	r0, r6
 800119c:	d009      	beq.n	80011b2 <search_EIT_table+0x46>
 800119e:	f7ff ffdb 	bl	8001158 <selfrel_offset31>
 80011a2:	45c3      	cmp	fp, r8
 80011a4:	f100 30ff 	add.w	r0, r0, #4294967295
 80011a8:	d805      	bhi.n	80011b6 <search_EIT_table+0x4a>
 80011aa:	4540      	cmp	r0, r8
 80011ac:	d209      	bcs.n	80011c2 <search_EIT_table+0x56>
 80011ae:	1c67      	adds	r7, r4, #1
 80011b0:	e7e5      	b.n	800117e <search_EIT_table+0x12>
 80011b2:	45c3      	cmp	fp, r8
 80011b4:	d905      	bls.n	80011c2 <search_EIT_table+0x56>
 80011b6:	42a7      	cmp	r7, r4
 80011b8:	d002      	beq.n	80011c0 <search_EIT_table+0x54>
 80011ba:	f104 39ff 	add.w	r9, r4, #4294967295
 80011be:	e7de      	b.n	800117e <search_EIT_table+0x12>
 80011c0:	2100      	movs	r1, #0
 80011c2:	4608      	mov	r0, r1
 80011c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011c8:	4608      	mov	r0, r1
 80011ca:	4770      	bx	lr

080011cc <__gnu_unwind_get_pr_addr>:
 80011cc:	2801      	cmp	r0, #1
 80011ce:	d007      	beq.n	80011e0 <__gnu_unwind_get_pr_addr+0x14>
 80011d0:	2802      	cmp	r0, #2
 80011d2:	d007      	beq.n	80011e4 <__gnu_unwind_get_pr_addr+0x18>
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__gnu_unwind_get_pr_addr+0x1c>)
 80011d6:	2800      	cmp	r0, #0
 80011d8:	bf0c      	ite	eq
 80011da:	4618      	moveq	r0, r3
 80011dc:	2000      	movne	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <__gnu_unwind_get_pr_addr+0x20>)
 80011e2:	4770      	bx	lr
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <__gnu_unwind_get_pr_addr+0x24>)
 80011e6:	4770      	bx	lr
 80011e8:	080018dd 	.word	0x080018dd
 80011ec:	080018e1 	.word	0x080018e1
 80011f0:	080018e5 	.word	0x080018e5

080011f4 <get_eit_entry>:
 80011f4:	b530      	push	{r4, r5, lr}
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <get_eit_entry+0x98>)
 80011f8:	b083      	sub	sp, #12
 80011fa:	4604      	mov	r4, r0
 80011fc:	1e8d      	subs	r5, r1, #2
 80011fe:	b373      	cbz	r3, 800125e <get_eit_entry+0x6a>
 8001200:	a901      	add	r1, sp, #4
 8001202:	4628      	mov	r0, r5
 8001204:	f3af 8000 	nop.w
 8001208:	b318      	cbz	r0, 8001252 <get_eit_entry+0x5e>
 800120a:	9901      	ldr	r1, [sp, #4]
 800120c:	462a      	mov	r2, r5
 800120e:	f7ff ffad 	bl	800116c <search_EIT_table>
 8001212:	4601      	mov	r1, r0
 8001214:	b1e8      	cbz	r0, 8001252 <get_eit_entry+0x5e>
 8001216:	f7ff ff9f 	bl	8001158 <selfrel_offset31>
 800121a:	684b      	ldr	r3, [r1, #4]
 800121c:	64a0      	str	r0, [r4, #72]	; 0x48
 800121e:	2b01      	cmp	r3, #1
 8001220:	d011      	beq.n	8001246 <get_eit_entry+0x52>
 8001222:	2b00      	cmp	r3, #0
 8001224:	db22      	blt.n	800126c <get_eit_entry+0x78>
 8001226:	1d08      	adds	r0, r1, #4
 8001228:	f7ff ff96 	bl	8001158 <selfrel_offset31>
 800122c:	2300      	movs	r3, #0
 800122e:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001230:	6523      	str	r3, [r4, #80]	; 0x50
 8001232:	6803      	ldr	r3, [r0, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db1e      	blt.n	8001276 <get_eit_entry+0x82>
 8001238:	f7ff ff8e 	bl	8001158 <selfrel_offset31>
 800123c:	2300      	movs	r3, #0
 800123e:	6120      	str	r0, [r4, #16]
 8001240:	4618      	mov	r0, r3
 8001242:	b003      	add	sp, #12
 8001244:	bd30      	pop	{r4, r5, pc}
 8001246:	2305      	movs	r3, #5
 8001248:	2200      	movs	r2, #0
 800124a:	4618      	mov	r0, r3
 800124c:	6122      	str	r2, [r4, #16]
 800124e:	b003      	add	sp, #12
 8001250:	bd30      	pop	{r4, r5, pc}
 8001252:	2309      	movs	r3, #9
 8001254:	2200      	movs	r2, #0
 8001256:	4618      	mov	r0, r3
 8001258:	6122      	str	r2, [r4, #16]
 800125a:	b003      	add	sp, #12
 800125c:	bd30      	pop	{r4, r5, pc}
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <get_eit_entry+0x9c>)
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <get_eit_entry+0xa0>)
 8001262:	4618      	mov	r0, r3
 8001264:	1ac9      	subs	r1, r1, r3
 8001266:	10c9      	asrs	r1, r1, #3
 8001268:	9101      	str	r1, [sp, #4]
 800126a:	e7cf      	b.n	800120c <get_eit_entry+0x18>
 800126c:	2301      	movs	r3, #1
 800126e:	1d08      	adds	r0, r1, #4
 8001270:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001272:	6523      	str	r3, [r4, #80]	; 0x50
 8001274:	e7dd      	b.n	8001232 <get_eit_entry+0x3e>
 8001276:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800127a:	f7ff ffa7 	bl	80011cc <__gnu_unwind_get_pr_addr>
 800127e:	2800      	cmp	r0, #0
 8001280:	6120      	str	r0, [r4, #16]
 8001282:	bf14      	ite	ne
 8001284:	2300      	movne	r3, #0
 8001286:	2309      	moveq	r3, #9
 8001288:	e7da      	b.n	8001240 <get_eit_entry+0x4c>
 800128a:	bf00      	nop
 800128c:	00000000 	.word	0x00000000
 8001290:	08008d30 	.word	0x08008d30
 8001294:	08008f28 	.word	0x08008f28

08001298 <restore_non_core_regs>:
 8001298:	6803      	ldr	r3, [r0, #0]
 800129a:	b510      	push	{r4, lr}
 800129c:	07da      	lsls	r2, r3, #31
 800129e:	4604      	mov	r4, r0
 80012a0:	d406      	bmi.n	80012b0 <restore_non_core_regs+0x18>
 80012a2:	079b      	lsls	r3, r3, #30
 80012a4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80012a8:	d509      	bpl.n	80012be <restore_non_core_regs+0x26>
 80012aa:	f000 fc57 	bl	8001b5c <__gnu_Unwind_Restore_VFP_D>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	0759      	lsls	r1, r3, #29
 80012b2:	d509      	bpl.n	80012c8 <restore_non_core_regs+0x30>
 80012b4:	071a      	lsls	r2, r3, #28
 80012b6:	d50e      	bpl.n	80012d6 <restore_non_core_regs+0x3e>
 80012b8:	06db      	lsls	r3, r3, #27
 80012ba:	d513      	bpl.n	80012e4 <restore_non_core_regs+0x4c>
 80012bc:	bd10      	pop	{r4, pc}
 80012be:	f000 fc45 	bl	8001b4c <__gnu_Unwind_Restore_VFP>
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	0759      	lsls	r1, r3, #29
 80012c6:	d4f5      	bmi.n	80012b4 <restore_non_core_regs+0x1c>
 80012c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80012cc:	f000 fc4e 	bl	8001b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	071a      	lsls	r2, r3, #28
 80012d4:	d4f0      	bmi.n	80012b8 <restore_non_core_regs+0x20>
 80012d6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80012da:	f000 fc4f 	bl	8001b7c <__gnu_Unwind_Restore_WMMXD>
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	06db      	lsls	r3, r3, #27
 80012e2:	d4eb      	bmi.n	80012bc <restore_non_core_regs+0x24>
 80012e4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80012e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012ec:	f000 bc8a 	b.w	8001c04 <__gnu_Unwind_Restore_WMMXC>

080012f0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	b103      	cbz	r3, 80012f6 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80012f4:	4403      	add	r3, r0
 80012f6:	4618      	mov	r0, r3
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop

080012fc <__gnu_unwind_24bit.isra.1>:
 80012fc:	2009      	movs	r0, #9
 80012fe:	4770      	bx	lr

08001300 <_Unwind_DebugHook>:
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <unwind_phase2>:
 8001304:	b570      	push	{r4, r5, r6, lr}
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	e008      	b.n	800131e <unwind_phase2+0x1a>
 800130c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800130e:	6923      	ldr	r3, [r4, #16]
 8001310:	6162      	str	r2, [r4, #20]
 8001312:	4621      	mov	r1, r4
 8001314:	462a      	mov	r2, r5
 8001316:	2001      	movs	r0, #1
 8001318:	4798      	blx	r3
 800131a:	2808      	cmp	r0, #8
 800131c:	d108      	bne.n	8001330 <unwind_phase2+0x2c>
 800131e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff ff67 	bl	80011f4 <get_eit_entry>
 8001326:	4606      	mov	r6, r0
 8001328:	2800      	cmp	r0, #0
 800132a:	d0ef      	beq.n	800130c <unwind_phase2+0x8>
 800132c:	f006 ff3e 	bl	80081ac <abort>
 8001330:	2807      	cmp	r0, #7
 8001332:	d1fb      	bne.n	800132c <unwind_phase2+0x28>
 8001334:	4630      	mov	r0, r6
 8001336:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001338:	f7ff ffe2 	bl	8001300 <_Unwind_DebugHook>
 800133c:	1d28      	adds	r0, r5, #4
 800133e:	f000 fbf9 	bl	8001b34 <__restore_core_regs>
 8001342:	bf00      	nop

08001344 <unwind_phase2_forced>:
 8001344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001348:	4605      	mov	r5, r0
 800134a:	2700      	movs	r7, #0
 800134c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001350:	ac03      	add	r4, sp, #12
 8001352:	1d0e      	adds	r6, r1, #4
 8001354:	4692      	mov	sl, r2
 8001356:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001362:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001366:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800136a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800136e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001372:	ac02      	add	r4, sp, #8
 8001374:	4628      	mov	r0, r5
 8001376:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001378:	6027      	str	r7, [r4, #0]
 800137a:	f7ff ff3b 	bl	80011f4 <get_eit_entry>
 800137e:	f1ba 0f00 	cmp.w	sl, #0
 8001382:	4607      	mov	r7, r0
 8001384:	bf14      	ite	ne
 8001386:	260a      	movne	r6, #10
 8001388:	2609      	moveq	r6, #9
 800138a:	b17f      	cbz	r7, 80013ac <unwind_phase2_forced+0x68>
 800138c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800138e:	f046 0110 	orr.w	r1, r6, #16
 8001392:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001396:	462a      	mov	r2, r5
 8001398:	6463      	str	r3, [r4, #68]	; 0x44
 800139a:	2001      	movs	r0, #1
 800139c:	462b      	mov	r3, r5
 800139e:	47c0      	blx	r8
 80013a0:	bb78      	cbnz	r0, 8001402 <unwind_phase2_forced+0xbe>
 80013a2:	4638      	mov	r0, r7
 80013a4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013b2:	616b      	str	r3, [r5, #20]
 80013b4:	4621      	mov	r1, r4
 80013b6:	a87a      	add	r0, sp, #488	; 0x1e8
 80013b8:	f007 f850 	bl	800845c <memcpy>
 80013bc:	692b      	ldr	r3, [r5, #16]
 80013be:	aa7a      	add	r2, sp, #488	; 0x1e8
 80013c0:	4629      	mov	r1, r5
 80013c2:	4630      	mov	r0, r6
 80013c4:	4798      	blx	r3
 80013c6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80013c8:	4682      	mov	sl, r0
 80013ca:	e88d 0210 	stmia.w	sp, {r4, r9}
 80013ce:	4631      	mov	r1, r6
 80013d0:	6463      	str	r3, [r4, #68]	; 0x44
 80013d2:	462a      	mov	r2, r5
 80013d4:	462b      	mov	r3, r5
 80013d6:	2001      	movs	r0, #1
 80013d8:	47c0      	blx	r8
 80013da:	b990      	cbnz	r0, 8001402 <unwind_phase2_forced+0xbe>
 80013dc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013e0:	a97a      	add	r1, sp, #488	; 0x1e8
 80013e2:	4620      	mov	r0, r4
 80013e4:	f007 f83a 	bl	800845c <memcpy>
 80013e8:	f1ba 0f08 	cmp.w	sl, #8
 80013ec:	d106      	bne.n	80013fc <unwind_phase2_forced+0xb8>
 80013ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013f0:	4628      	mov	r0, r5
 80013f2:	f7ff feff 	bl	80011f4 <get_eit_entry>
 80013f6:	2609      	movs	r6, #9
 80013f8:	4607      	mov	r7, r0
 80013fa:	e7c6      	b.n	800138a <unwind_phase2_forced+0x46>
 80013fc:	f1ba 0f07 	cmp.w	sl, #7
 8001400:	d005      	beq.n	800140e <unwind_phase2_forced+0xca>
 8001402:	2709      	movs	r7, #9
 8001404:	4638      	mov	r0, r7
 8001406:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800140e:	4638      	mov	r0, r7
 8001410:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001412:	f7ff ff75 	bl	8001300 <_Unwind_DebugHook>
 8001416:	a803      	add	r0, sp, #12
 8001418:	f000 fb8c 	bl	8001b34 <__restore_core_regs>

0800141c <_Unwind_GetCFA>:
 800141c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800141e:	4770      	bx	lr

08001420 <__gnu_Unwind_RaiseException>:
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	f04f 3eff 	mov.w	lr, #4294967295
 8001426:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001428:	b0f9      	sub	sp, #484	; 0x1e4
 800142a:	640b      	str	r3, [r1, #64]	; 0x40
 800142c:	1d0e      	adds	r6, r1, #4
 800142e:	ad01      	add	r5, sp, #4
 8001430:	460f      	mov	r7, r1
 8001432:	4604      	mov	r4, r0
 8001434:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001438:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800143e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001440:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001444:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001448:	f8cd e000 	str.w	lr, [sp]
 800144c:	e006      	b.n	800145c <__gnu_Unwind_RaiseException+0x3c>
 800144e:	6923      	ldr	r3, [r4, #16]
 8001450:	466a      	mov	r2, sp
 8001452:	4621      	mov	r1, r4
 8001454:	4798      	blx	r3
 8001456:	2808      	cmp	r0, #8
 8001458:	4605      	mov	r5, r0
 800145a:	d108      	bne.n	800146e <__gnu_Unwind_RaiseException+0x4e>
 800145c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff fec8 	bl	80011f4 <get_eit_entry>
 8001464:	2800      	cmp	r0, #0
 8001466:	d0f2      	beq.n	800144e <__gnu_Unwind_RaiseException+0x2e>
 8001468:	2009      	movs	r0, #9
 800146a:	b079      	add	sp, #484	; 0x1e4
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	4668      	mov	r0, sp
 8001470:	f7ff ff12 	bl	8001298 <restore_non_core_regs>
 8001474:	2d06      	cmp	r5, #6
 8001476:	d1f7      	bne.n	8001468 <__gnu_Unwind_RaiseException+0x48>
 8001478:	4639      	mov	r1, r7
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff ff42 	bl	8001304 <unwind_phase2>

08001480 <__gnu_Unwind_ForcedUnwind>:
 8001480:	b430      	push	{r4, r5}
 8001482:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001484:	60c1      	str	r1, [r0, #12]
 8001486:	6182      	str	r2, [r0, #24]
 8001488:	4619      	mov	r1, r3
 800148a:	641d      	str	r5, [r3, #64]	; 0x40
 800148c:	2200      	movs	r2, #0
 800148e:	bc30      	pop	{r4, r5}
 8001490:	e758      	b.n	8001344 <unwind_phase2_forced>
 8001492:	bf00      	nop

08001494 <__gnu_Unwind_Resume>:
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	6943      	ldr	r3, [r0, #20]
 8001498:	68c6      	ldr	r6, [r0, #12]
 800149a:	640b      	str	r3, [r1, #64]	; 0x40
 800149c:	b126      	cbz	r6, 80014a8 <__gnu_Unwind_Resume+0x14>
 800149e:	2201      	movs	r2, #1
 80014a0:	f7ff ff50 	bl	8001344 <unwind_phase2_forced>
 80014a4:	f006 fe82 	bl	80081ac <abort>
 80014a8:	6903      	ldr	r3, [r0, #16]
 80014aa:	460a      	mov	r2, r1
 80014ac:	4604      	mov	r4, r0
 80014ae:	460d      	mov	r5, r1
 80014b0:	4601      	mov	r1, r0
 80014b2:	2002      	movs	r0, #2
 80014b4:	4798      	blx	r3
 80014b6:	2807      	cmp	r0, #7
 80014b8:	d007      	beq.n	80014ca <__gnu_Unwind_Resume+0x36>
 80014ba:	2808      	cmp	r0, #8
 80014bc:	d103      	bne.n	80014c6 <__gnu_Unwind_Resume+0x32>
 80014be:	4629      	mov	r1, r5
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff ff1f 	bl	8001304 <unwind_phase2>
 80014c6:	f006 fe71 	bl	80081ac <abort>
 80014ca:	4630      	mov	r0, r6
 80014cc:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80014ce:	f7ff ff17 	bl	8001300 <_Unwind_DebugHook>
 80014d2:	1d28      	adds	r0, r5, #4
 80014d4:	f000 fb2e 	bl	8001b34 <__restore_core_regs>

080014d8 <__gnu_Unwind_Resume_or_Rethrow>:
 80014d8:	68c2      	ldr	r2, [r0, #12]
 80014da:	b12a      	cbz	r2, 80014e8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80014dc:	b410      	push	{r4}
 80014de:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80014e0:	2200      	movs	r2, #0
 80014e2:	640c      	str	r4, [r1, #64]	; 0x40
 80014e4:	bc10      	pop	{r4}
 80014e6:	e72d      	b.n	8001344 <unwind_phase2_forced>
 80014e8:	e79a      	b.n	8001420 <__gnu_Unwind_RaiseException>
 80014ea:	bf00      	nop

080014ec <_Unwind_Complete>:
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <_Unwind_DeleteException>:
 80014f0:	6883      	ldr	r3, [r0, #8]
 80014f2:	b113      	cbz	r3, 80014fa <_Unwind_DeleteException+0xa>
 80014f4:	4601      	mov	r1, r0
 80014f6:	2001      	movs	r0, #1
 80014f8:	4718      	bx	r3
 80014fa:	4770      	bx	lr

080014fc <_Unwind_VRS_Get>:
 80014fc:	b500      	push	{lr}
 80014fe:	2904      	cmp	r1, #4
 8001500:	d807      	bhi.n	8001512 <_Unwind_VRS_Get+0x16>
 8001502:	e8df f001 	tbb	[pc, r1]
 8001506:	0903      	.short	0x0903
 8001508:	0906      	.short	0x0906
 800150a:	09          	.byte	0x09
 800150b:	00          	.byte	0x00
 800150c:	b90b      	cbnz	r3, 8001512 <_Unwind_VRS_Get+0x16>
 800150e:	2a0f      	cmp	r2, #15
 8001510:	d905      	bls.n	800151e <_Unwind_VRS_Get+0x22>
 8001512:	2002      	movs	r0, #2
 8001514:	f85d fb04 	ldr.w	pc, [sp], #4
 8001518:	2001      	movs	r0, #1
 800151a:	f85d fb04 	ldr.w	pc, [sp], #4
 800151e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001522:	6852      	ldr	r2, [r2, #4]
 8001524:	4618      	mov	r0, r3
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4
 800152e:	bf00      	nop

08001530 <_Unwind_GetGR>:
 8001530:	2300      	movs	r3, #0
 8001532:	b510      	push	{r4, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	ac03      	add	r4, sp, #12
 8001538:	460a      	mov	r2, r1
 800153a:	9400      	str	r4, [sp, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff ffdd 	bl	80014fc <_Unwind_VRS_Get>
 8001542:	9803      	ldr	r0, [sp, #12]
 8001544:	b004      	add	sp, #16
 8001546:	bd10      	pop	{r4, pc}

08001548 <_Unwind_VRS_Set>:
 8001548:	b500      	push	{lr}
 800154a:	2904      	cmp	r1, #4
 800154c:	d807      	bhi.n	800155e <_Unwind_VRS_Set+0x16>
 800154e:	e8df f001 	tbb	[pc, r1]
 8001552:	0903      	.short	0x0903
 8001554:	0906      	.short	0x0906
 8001556:	09          	.byte	0x09
 8001557:	00          	.byte	0x00
 8001558:	b90b      	cbnz	r3, 800155e <_Unwind_VRS_Set+0x16>
 800155a:	2a0f      	cmp	r2, #15
 800155c:	d905      	bls.n	800156a <_Unwind_VRS_Set+0x22>
 800155e:	2002      	movs	r0, #2
 8001560:	f85d fb04 	ldr.w	pc, [sp], #4
 8001564:	2001      	movs	r0, #1
 8001566:	f85d fb04 	ldr.w	pc, [sp], #4
 800156a:	9901      	ldr	r1, [sp, #4]
 800156c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001570:	6809      	ldr	r1, [r1, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	6051      	str	r1, [r2, #4]
 8001576:	f85d fb04 	ldr.w	pc, [sp], #4
 800157a:	bf00      	nop

0800157c <_Unwind_SetGR>:
 800157c:	2300      	movs	r3, #0
 800157e:	b510      	push	{r4, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	ac04      	add	r4, sp, #16
 8001584:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	460a      	mov	r2, r1
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff ffdb 	bl	8001548 <_Unwind_VRS_Set>
 8001592:	b004      	add	sp, #16
 8001594:	bd10      	pop	{r4, pc}
 8001596:	bf00      	nop

08001598 <__gnu_Unwind_Backtrace>:
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	f04f 3eff 	mov.w	lr, #4294967295
 800159e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80015a0:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	1d15      	adds	r5, r2, #4
 80015a8:	ac17      	add	r4, sp, #92	; 0x5c
 80015aa:	4607      	mov	r7, r0
 80015ac:	460e      	mov	r6, r1
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80015c2:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80015c6:	e012      	b.n	80015ee <__gnu_Unwind_Backtrace+0x56>
 80015c8:	210c      	movs	r1, #12
 80015ca:	a816      	add	r0, sp, #88	; 0x58
 80015cc:	466a      	mov	r2, sp
 80015ce:	f7ff ffd5 	bl	800157c <_Unwind_SetGR>
 80015d2:	4631      	mov	r1, r6
 80015d4:	a816      	add	r0, sp, #88	; 0x58
 80015d6:	47b8      	blx	r7
 80015d8:	b978      	cbnz	r0, 80015fa <__gnu_Unwind_Backtrace+0x62>
 80015da:	9b04      	ldr	r3, [sp, #16]
 80015dc:	aa16      	add	r2, sp, #88	; 0x58
 80015de:	4669      	mov	r1, sp
 80015e0:	2008      	movs	r0, #8
 80015e2:	4798      	blx	r3
 80015e4:	2805      	cmp	r0, #5
 80015e6:	4604      	mov	r4, r0
 80015e8:	d008      	beq.n	80015fc <__gnu_Unwind_Backtrace+0x64>
 80015ea:	2809      	cmp	r0, #9
 80015ec:	d005      	beq.n	80015fa <__gnu_Unwind_Backtrace+0x62>
 80015ee:	9926      	ldr	r1, [sp, #152]	; 0x98
 80015f0:	4668      	mov	r0, sp
 80015f2:	f7ff fdff 	bl	80011f4 <get_eit_entry>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	d0e6      	beq.n	80015c8 <__gnu_Unwind_Backtrace+0x30>
 80015fa:	2409      	movs	r4, #9
 80015fc:	a816      	add	r0, sp, #88	; 0x58
 80015fe:	f7ff fe4b 	bl	8001298 <restore_non_core_regs>
 8001602:	4620      	mov	r0, r4
 8001604:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	bf00      	nop

0800160c <__gnu_unwind_pr_common>:
 800160c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001610:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001612:	4691      	mov	r9, r2
 8001614:	6822      	ldr	r2, [r4, #0]
 8001616:	b08b      	sub	sp, #44	; 0x2c
 8001618:	3404      	adds	r4, #4
 800161a:	460d      	mov	r5, r1
 800161c:	9207      	str	r2, [sp, #28]
 800161e:	9408      	str	r4, [sp, #32]
 8001620:	f000 0b03 	and.w	fp, r0, #3
 8001624:	461e      	mov	r6, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d160      	bne.n	80016ec <__gnu_unwind_pr_common+0xe0>
 800162a:	2303      	movs	r3, #3
 800162c:	0212      	lsls	r2, r2, #8
 800162e:	9207      	str	r2, [sp, #28]
 8001630:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001634:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001638:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800163a:	f1bb 0f02 	cmp.w	fp, #2
 800163e:	bf08      	it	eq
 8001640:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001642:	f013 0301 	ands.w	r3, r3, #1
 8001646:	d140      	bne.n	80016ca <__gnu_unwind_pr_common+0xbe>
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	f000 0308 	and.w	r3, r0, #8
 800164e:	9303      	str	r3, [sp, #12]
 8001650:	f8d4 8000 	ldr.w	r8, [r4]
 8001654:	f1b8 0f00 	cmp.w	r8, #0
 8001658:	d039      	beq.n	80016ce <__gnu_unwind_pr_common+0xc2>
 800165a:	2e02      	cmp	r6, #2
 800165c:	d043      	beq.n	80016e6 <__gnu_unwind_pr_common+0xda>
 800165e:	f8b4 8000 	ldrh.w	r8, [r4]
 8001662:	8867      	ldrh	r7, [r4, #2]
 8001664:	3404      	adds	r4, #4
 8001666:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001668:	f027 0a01 	bic.w	sl, r7, #1
 800166c:	210f      	movs	r1, #15
 800166e:	4648      	mov	r0, r9
 8001670:	449a      	add	sl, r3
 8001672:	f7ff ff5d 	bl	8001530 <_Unwind_GetGR>
 8001676:	4582      	cmp	sl, r0
 8001678:	d833      	bhi.n	80016e2 <__gnu_unwind_pr_common+0xd6>
 800167a:	f028 0301 	bic.w	r3, r8, #1
 800167e:	449a      	add	sl, r3
 8001680:	4550      	cmp	r0, sl
 8001682:	bf2c      	ite	cs
 8001684:	2000      	movcs	r0, #0
 8001686:	2001      	movcc	r0, #1
 8001688:	007f      	lsls	r7, r7, #1
 800168a:	f007 0702 	and.w	r7, r7, #2
 800168e:	f008 0801 	and.w	r8, r8, #1
 8001692:	ea47 0708 	orr.w	r7, r7, r8
 8001696:	2f01      	cmp	r7, #1
 8001698:	d03e      	beq.n	8001718 <__gnu_unwind_pr_common+0x10c>
 800169a:	d335      	bcc.n	8001708 <__gnu_unwind_pr_common+0xfc>
 800169c:	2f02      	cmp	r7, #2
 800169e:	d11c      	bne.n	80016da <__gnu_unwind_pr_common+0xce>
 80016a0:	6823      	ldr	r3, [r4, #0]
 80016a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016a6:	9202      	str	r2, [sp, #8]
 80016a8:	f1bb 0f00 	cmp.w	fp, #0
 80016ac:	d176      	bne.n	800179c <__gnu_unwind_pr_common+0x190>
 80016ae:	b128      	cbz	r0, 80016bc <__gnu_unwind_pr_common+0xb0>
 80016b0:	9903      	ldr	r1, [sp, #12]
 80016b2:	2900      	cmp	r1, #0
 80016b4:	d07e      	beq.n	80017b4 <__gnu_unwind_pr_common+0x1a8>
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	f000 80a6 	beq.w	8001808 <__gnu_unwind_pr_common+0x1fc>
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db77      	blt.n	80017b0 <__gnu_unwind_pr_common+0x1a4>
 80016c0:	9b02      	ldr	r3, [sp, #8]
 80016c2:	3301      	adds	r3, #1
 80016c4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80016c8:	e7c2      	b.n	8001650 <__gnu_unwind_pr_common+0x44>
 80016ca:	2300      	movs	r3, #0
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	2e02      	cmp	r6, #2
 80016d0:	dd3e      	ble.n	8001750 <__gnu_unwind_pr_common+0x144>
 80016d2:	f7ff fe13 	bl	80012fc <__gnu_unwind_24bit.isra.1>
 80016d6:	2800      	cmp	r0, #0
 80016d8:	d040      	beq.n	800175c <__gnu_unwind_pr_common+0x150>
 80016da:	2009      	movs	r0, #9
 80016dc:	b00b      	add	sp, #44	; 0x2c
 80016de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016e2:	2000      	movs	r0, #0
 80016e4:	e7d0      	b.n	8001688 <__gnu_unwind_pr_common+0x7c>
 80016e6:	6867      	ldr	r7, [r4, #4]
 80016e8:	3408      	adds	r4, #8
 80016ea:	e7bc      	b.n	8001666 <__gnu_unwind_pr_common+0x5a>
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	dca3      	bgt.n	8001638 <__gnu_unwind_pr_common+0x2c>
 80016f0:	2102      	movs	r1, #2
 80016f2:	0c13      	lsrs	r3, r2, #16
 80016f4:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80016f8:	0412      	lsls	r2, r2, #16
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001700:	9207      	str	r2, [sp, #28]
 8001702:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8001706:	e797      	b.n	8001638 <__gnu_unwind_pr_common+0x2c>
 8001708:	f1bb 0f00 	cmp.w	fp, #0
 800170c:	d002      	beq.n	8001714 <__gnu_unwind_pr_common+0x108>
 800170e:	2800      	cmp	r0, #0
 8001710:	f040 80bd 	bne.w	800188e <__gnu_unwind_pr_common+0x282>
 8001714:	3404      	adds	r4, #4
 8001716:	e79b      	b.n	8001650 <__gnu_unwind_pr_common+0x44>
 8001718:	f1bb 0f00 	cmp.w	fp, #0
 800171c:	d125      	bne.n	800176a <__gnu_unwind_pr_common+0x15e>
 800171e:	b1a8      	cbz	r0, 800174c <__gnu_unwind_pr_common+0x140>
 8001720:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001724:	1c99      	adds	r1, r3, #2
 8001726:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800172a:	d0d6      	beq.n	80016da <__gnu_unwind_pr_common+0xce>
 800172c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001730:	3301      	adds	r3, #1
 8001732:	9106      	str	r1, [sp, #24]
 8001734:	f000 80a3 	beq.w	800187e <__gnu_unwind_pr_common+0x272>
 8001738:	1d20      	adds	r0, r4, #4
 800173a:	f7ff fdd9 	bl	80012f0 <_Unwind_decode_typeinfo_ptr.isra.0>
 800173e:	ab06      	add	r3, sp, #24
 8001740:	4601      	mov	r1, r0
 8001742:	4628      	mov	r0, r5
 8001744:	f004 fb50 	bl	8005de8 <__cxa_type_match>
 8001748:	2800      	cmp	r0, #0
 800174a:	d177      	bne.n	800183c <__gnu_unwind_pr_common+0x230>
 800174c:	3408      	adds	r4, #8
 800174e:	e77f      	b.n	8001650 <__gnu_unwind_pr_common+0x44>
 8001750:	a907      	add	r1, sp, #28
 8001752:	4648      	mov	r0, r9
 8001754:	f000 faf0 	bl	8001d38 <__gnu_unwind_execute>
 8001758:	2800      	cmp	r0, #0
 800175a:	d1be      	bne.n	80016da <__gnu_unwind_pr_common+0xce>
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d15c      	bne.n	800181c <__gnu_unwind_pr_common+0x210>
 8001762:	2008      	movs	r0, #8
 8001764:	b00b      	add	sp, #44	; 0x2c
 8001766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800176a:	210d      	movs	r1, #13
 800176c:	4648      	mov	r0, r9
 800176e:	6a2f      	ldr	r7, [r5, #32]
 8001770:	f7ff fede 	bl	8001530 <_Unwind_GetGR>
 8001774:	4287      	cmp	r7, r0
 8001776:	d1e9      	bne.n	800174c <__gnu_unwind_pr_common+0x140>
 8001778:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800177a:	429c      	cmp	r4, r3
 800177c:	d1e6      	bne.n	800174c <__gnu_unwind_pr_common+0x140>
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fcea 	bl	8001158 <selfrel_offset31>
 8001784:	210f      	movs	r1, #15
 8001786:	4602      	mov	r2, r0
 8001788:	4648      	mov	r0, r9
 800178a:	f7ff fef7 	bl	800157c <_Unwind_SetGR>
 800178e:	4648      	mov	r0, r9
 8001790:	462a      	mov	r2, r5
 8001792:	2100      	movs	r1, #0
 8001794:	f7ff fef2 	bl	800157c <_Unwind_SetGR>
 8001798:	2007      	movs	r0, #7
 800179a:	e79f      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 800179c:	210d      	movs	r1, #13
 800179e:	4648      	mov	r0, r9
 80017a0:	6a2f      	ldr	r7, [r5, #32]
 80017a2:	f7ff fec5 	bl	8001530 <_Unwind_GetGR>
 80017a6:	4287      	cmp	r7, r0
 80017a8:	d058      	beq.n	800185c <__gnu_unwind_pr_common+0x250>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da87      	bge.n	80016c0 <__gnu_unwind_pr_common+0xb4>
 80017b0:	3404      	adds	r4, #4
 80017b2:	e785      	b.n	80016c0 <__gnu_unwind_pr_common+0xb4>
 80017b4:	9b02      	ldr	r3, [sp, #8]
 80017b6:	b33b      	cbz	r3, 8001808 <__gnu_unwind_pr_common+0x1fc>
 80017b8:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80017bc:	1d27      	adds	r7, r4, #4
 80017be:	f8cd b010 	str.w	fp, [sp, #16]
 80017c2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80017c6:	46a3      	mov	fp, r4
 80017c8:	f8dd a008 	ldr.w	sl, [sp, #8]
 80017cc:	461c      	mov	r4, r3
 80017ce:	9605      	str	r6, [sp, #20]
 80017d0:	e002      	b.n	80017d8 <__gnu_unwind_pr_common+0x1cc>
 80017d2:	45b2      	cmp	sl, r6
 80017d4:	46b0      	mov	r8, r6
 80017d6:	d016      	beq.n	8001806 <__gnu_unwind_pr_common+0x1fa>
 80017d8:	4638      	mov	r0, r7
 80017da:	9406      	str	r4, [sp, #24]
 80017dc:	f7ff fd88 	bl	80012f0 <_Unwind_decode_typeinfo_ptr.isra.0>
 80017e0:	ab06      	add	r3, sp, #24
 80017e2:	4601      	mov	r1, r0
 80017e4:	2200      	movs	r2, #0
 80017e6:	4628      	mov	r0, r5
 80017e8:	f004 fafe 	bl	8005de8 <__cxa_type_match>
 80017ec:	f108 0601 	add.w	r6, r8, #1
 80017f0:	3704      	adds	r7, #4
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d0ed      	beq.n	80017d2 <__gnu_unwind_pr_common+0x1c6>
 80017f6:	9b02      	ldr	r3, [sp, #8]
 80017f8:	465c      	mov	r4, fp
 80017fa:	4543      	cmp	r3, r8
 80017fc:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001800:	9e05      	ldr	r6, [sp, #20]
 8001802:	d1d2      	bne.n	80017aa <__gnu_unwind_pr_common+0x19e>
 8001804:	e000      	b.n	8001808 <__gnu_unwind_pr_common+0x1fc>
 8001806:	465c      	mov	r4, fp
 8001808:	4648      	mov	r0, r9
 800180a:	210d      	movs	r1, #13
 800180c:	f7ff fe90 	bl	8001530 <_Unwind_GetGR>
 8001810:	9b06      	ldr	r3, [sp, #24]
 8001812:	6228      	str	r0, [r5, #32]
 8001814:	62ac      	str	r4, [r5, #40]	; 0x28
 8001816:	626b      	str	r3, [r5, #36]	; 0x24
 8001818:	2006      	movs	r0, #6
 800181a:	e75f      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 800181c:	210f      	movs	r1, #15
 800181e:	4648      	mov	r0, r9
 8001820:	f7ff fe86 	bl	8001530 <_Unwind_GetGR>
 8001824:	210e      	movs	r1, #14
 8001826:	4602      	mov	r2, r0
 8001828:	4648      	mov	r0, r9
 800182a:	f7ff fea7 	bl	800157c <_Unwind_SetGR>
 800182e:	4648      	mov	r0, r9
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <__gnu_unwind_pr_common+0x2cc>)
 8001832:	210f      	movs	r1, #15
 8001834:	f7ff fea2 	bl	800157c <_Unwind_SetGR>
 8001838:	2007      	movs	r0, #7
 800183a:	e74f      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 800183c:	4607      	mov	r7, r0
 800183e:	210d      	movs	r1, #13
 8001840:	4648      	mov	r0, r9
 8001842:	f7ff fe75 	bl	8001530 <_Unwind_GetGR>
 8001846:	2f02      	cmp	r7, #2
 8001848:	6228      	str	r0, [r5, #32]
 800184a:	d11d      	bne.n	8001888 <__gnu_unwind_pr_common+0x27c>
 800184c:	462b      	mov	r3, r5
 800184e:	9a06      	ldr	r2, [sp, #24]
 8001850:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001854:	626b      	str	r3, [r5, #36]	; 0x24
 8001856:	62ac      	str	r4, [r5, #40]	; 0x28
 8001858:	2006      	movs	r0, #6
 800185a:	e73f      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 800185c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800185e:	429c      	cmp	r4, r3
 8001860:	d1a3      	bne.n	80017aa <__gnu_unwind_pr_common+0x19e>
 8001862:	2204      	movs	r2, #4
 8001864:	2700      	movs	r7, #0
 8001866:	9902      	ldr	r1, [sp, #8]
 8001868:	18a3      	adds	r3, r4, r2
 800186a:	62a9      	str	r1, [r5, #40]	; 0x28
 800186c:	62ef      	str	r7, [r5, #44]	; 0x2c
 800186e:	632a      	str	r2, [r5, #48]	; 0x30
 8001870:	636b      	str	r3, [r5, #52]	; 0x34
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	42bb      	cmp	r3, r7
 8001876:	db1d      	blt.n	80018b4 <__gnu_unwind_pr_common+0x2a8>
 8001878:	2301      	movs	r3, #1
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	e720      	b.n	80016c0 <__gnu_unwind_pr_common+0xb4>
 800187e:	4648      	mov	r0, r9
 8001880:	210d      	movs	r1, #13
 8001882:	f7ff fe55 	bl	8001530 <_Unwind_GetGR>
 8001886:	6228      	str	r0, [r5, #32]
 8001888:	9b06      	ldr	r3, [sp, #24]
 800188a:	626b      	str	r3, [r5, #36]	; 0x24
 800188c:	e7e3      	b.n	8001856 <__gnu_unwind_pr_common+0x24a>
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff fc62 	bl	8001158 <selfrel_offset31>
 8001894:	3404      	adds	r4, #4
 8001896:	4606      	mov	r6, r0
 8001898:	63ac      	str	r4, [r5, #56]	; 0x38
 800189a:	4628      	mov	r0, r5
 800189c:	f004 fb02 	bl	8005ea4 <__cxa_begin_cleanup>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	f43f af1a 	beq.w	80016da <__gnu_unwind_pr_common+0xce>
 80018a6:	4648      	mov	r0, r9
 80018a8:	4632      	mov	r2, r6
 80018aa:	210f      	movs	r1, #15
 80018ac:	f7ff fe66 	bl	800157c <_Unwind_SetGR>
 80018b0:	2007      	movs	r0, #7
 80018b2:	e713      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 80018b4:	4608      	mov	r0, r1
 80018b6:	3001      	adds	r0, #1
 80018b8:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80018bc:	f7ff fc4c 	bl	8001158 <selfrel_offset31>
 80018c0:	210f      	movs	r1, #15
 80018c2:	4602      	mov	r2, r0
 80018c4:	4648      	mov	r0, r9
 80018c6:	f7ff fe59 	bl	800157c <_Unwind_SetGR>
 80018ca:	4648      	mov	r0, r9
 80018cc:	462a      	mov	r2, r5
 80018ce:	4639      	mov	r1, r7
 80018d0:	f7ff fe54 	bl	800157c <_Unwind_SetGR>
 80018d4:	2007      	movs	r0, #7
 80018d6:	e701      	b.n	80016dc <__gnu_unwind_pr_common+0xd0>
 80018d8:	080065b5 	.word	0x080065b5

080018dc <__aeabi_unwind_cpp_pr0>:
 80018dc:	2300      	movs	r3, #0
 80018de:	e695      	b.n	800160c <__gnu_unwind_pr_common>

080018e0 <__aeabi_unwind_cpp_pr1>:
 80018e0:	2301      	movs	r3, #1
 80018e2:	e693      	b.n	800160c <__gnu_unwind_pr_common>

080018e4 <__aeabi_unwind_cpp_pr2>:
 80018e4:	2302      	movs	r3, #2
 80018e6:	e691      	b.n	800160c <__gnu_unwind_pr_common>

080018e8 <_Unwind_VRS_Pop>:
 80018e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ea:	4604      	mov	r4, r0
 80018ec:	b0c5      	sub	sp, #276	; 0x114
 80018ee:	2904      	cmp	r1, #4
 80018f0:	d80d      	bhi.n	800190e <_Unwind_VRS_Pop+0x26>
 80018f2:	e8df f001 	tbb	[pc, r1]
 80018f6:	0355      	.short	0x0355
 80018f8:	310c      	.short	0x310c
 80018fa:	0f          	.byte	0x0f
 80018fb:	00          	.byte	0x00
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001902:	b295      	uxth	r5, r2
 8001904:	d164      	bne.n	80019d0 <_Unwind_VRS_Pop+0xe8>
 8001906:	1972      	adds	r2, r6, r5
 8001908:	2a10      	cmp	r2, #16
 800190a:	f240 809d 	bls.w	8001a48 <_Unwind_VRS_Pop+0x160>
 800190e:	2002      	movs	r0, #2
 8001910:	b045      	add	sp, #276	; 0x114
 8001912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1fa      	bne.n	800190e <_Unwind_VRS_Pop+0x26>
 8001918:	2a10      	cmp	r2, #16
 800191a:	d8f8      	bhi.n	800190e <_Unwind_VRS_Pop+0x26>
 800191c:	6823      	ldr	r3, [r4, #0]
 800191e:	06d8      	lsls	r0, r3, #27
 8001920:	f100 80c8 	bmi.w	8001ab4 <_Unwind_VRS_Pop+0x1cc>
 8001924:	ae22      	add	r6, sp, #136	; 0x88
 8001926:	4630      	mov	r0, r6
 8001928:	9201      	str	r2, [sp, #4]
 800192a:	2501      	movs	r5, #1
 800192c:	f000 f974 	bl	8001c18 <__gnu_Unwind_Save_WMMXC>
 8001930:	2300      	movs	r3, #0
 8001932:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001934:	9a01      	ldr	r2, [sp, #4]
 8001936:	fa05 f103 	lsl.w	r1, r5, r3
 800193a:	4211      	tst	r1, r2
 800193c:	d003      	beq.n	8001946 <_Unwind_VRS_Pop+0x5e>
 800193e:	6801      	ldr	r1, [r0, #0]
 8001940:	3004      	adds	r0, #4
 8001942:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001946:	3301      	adds	r3, #1
 8001948:	2b04      	cmp	r3, #4
 800194a:	d1f4      	bne.n	8001936 <_Unwind_VRS_Pop+0x4e>
 800194c:	63a0      	str	r0, [r4, #56]	; 0x38
 800194e:	4630      	mov	r0, r6
 8001950:	f000 f958 	bl	8001c04 <__gnu_Unwind_Restore_WMMXC>
 8001954:	2000      	movs	r0, #0
 8001956:	e7db      	b.n	8001910 <_Unwind_VRS_Pop+0x28>
 8001958:	2b03      	cmp	r3, #3
 800195a:	d1d8      	bne.n	800190e <_Unwind_VRS_Pop+0x26>
 800195c:	0c15      	lsrs	r5, r2, #16
 800195e:	b297      	uxth	r7, r2
 8001960:	19eb      	adds	r3, r5, r7
 8001962:	2b10      	cmp	r3, #16
 8001964:	d8d3      	bhi.n	800190e <_Unwind_VRS_Pop+0x26>
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	071e      	lsls	r6, r3, #28
 800196a:	f100 80b7 	bmi.w	8001adc <_Unwind_VRS_Pop+0x1f4>
 800196e:	ae22      	add	r6, sp, #136	; 0x88
 8001970:	4630      	mov	r0, r6
 8001972:	f000 f925 	bl	8001bc0 <__gnu_Unwind_Save_WMMXD>
 8001976:	00ed      	lsls	r5, r5, #3
 8001978:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800197a:	b15f      	cbz	r7, 8001994 <_Unwind_VRS_Pop+0xac>
 800197c:	3d04      	subs	r5, #4
 800197e:	4603      	mov	r3, r0
 8001980:	1971      	adds	r1, r6, r5
 8001982:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 8001986:	f853 2b04 	ldr.w	r2, [r3], #4
 800198a:	4283      	cmp	r3, r0
 800198c:	f841 2f04 	str.w	r2, [r1, #4]!
 8001990:	d1f9      	bne.n	8001986 <_Unwind_VRS_Pop+0x9e>
 8001992:	4618      	mov	r0, r3
 8001994:	63a0      	str	r0, [r4, #56]	; 0x38
 8001996:	4630      	mov	r0, r6
 8001998:	f000 f8f0 	bl	8001b7c <__gnu_Unwind_Restore_WMMXD>
 800199c:	2000      	movs	r0, #0
 800199e:	e7b7      	b.n	8001910 <_Unwind_VRS_Pop+0x28>
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1b4      	bne.n	800190e <_Unwind_VRS_Pop+0x26>
 80019a4:	2701      	movs	r7, #1
 80019a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80019a8:	b296      	uxth	r6, r2
 80019aa:	1d20      	adds	r0, r4, #4
 80019ac:	fa07 f103 	lsl.w	r1, r7, r3
 80019b0:	4231      	tst	r1, r6
 80019b2:	f103 0301 	add.w	r3, r3, #1
 80019b6:	d002      	beq.n	80019be <_Unwind_VRS_Pop+0xd6>
 80019b8:	6829      	ldr	r1, [r5, #0]
 80019ba:	3504      	adds	r5, #4
 80019bc:	6001      	str	r1, [r0, #0]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	f100 0004 	add.w	r0, r0, #4
 80019c4:	d1f2      	bne.n	80019ac <_Unwind_VRS_Pop+0xc4>
 80019c6:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80019ca:	d13b      	bne.n	8001a44 <_Unwind_VRS_Pop+0x15c>
 80019cc:	63a5      	str	r5, [r4, #56]	; 0x38
 80019ce:	e79f      	b.n	8001910 <_Unwind_VRS_Pop+0x28>
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d19c      	bne.n	800190e <_Unwind_VRS_Pop+0x26>
 80019d4:	1977      	adds	r7, r6, r5
 80019d6:	2f20      	cmp	r7, #32
 80019d8:	d899      	bhi.n	800190e <_Unwind_VRS_Pop+0x26>
 80019da:	2e0f      	cmp	r6, #15
 80019dc:	d966      	bls.n	8001aac <_Unwind_VRS_Pop+0x1c4>
 80019de:	462f      	mov	r7, r5
 80019e0:	2d00      	cmp	r5, #0
 80019e2:	d13a      	bne.n	8001a5a <_Unwind_VRS_Pop+0x172>
 80019e4:	462a      	mov	r2, r5
 80019e6:	2700      	movs	r7, #0
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019ec:	dd72      	ble.n	8001ad4 <_Unwind_VRS_Pop+0x1ec>
 80019ee:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80019f2:	4601      	mov	r1, r0
 80019f4:	a844      	add	r0, sp, #272	; 0x110
 80019f6:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80019fa:	388c      	subs	r0, #140	; 0x8c
 80019fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8001a00:	4291      	cmp	r1, r2
 8001a02:	f840 5f04 	str.w	r5, [r0, #4]!
 8001a06:	d1f9      	bne.n	80019fc <_Unwind_VRS_Pop+0x114>
 8001a08:	4608      	mov	r0, r1
 8001a0a:	b197      	cbz	r7, 8001a32 <_Unwind_VRS_Pop+0x14a>
 8001a0c:	2e10      	cmp	r6, #16
 8001a0e:	4632      	mov	r2, r6
 8001a10:	bf38      	it	cc
 8001a12:	2210      	movcc	r2, #16
 8001a14:	a944      	add	r1, sp, #272	; 0x110
 8001a16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001a1a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001a1e:	0079      	lsls	r1, r7, #1
 8001a20:	3a04      	subs	r2, #4
 8001a22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001a26:	f850 5b04 	ldr.w	r5, [r0], #4
 8001a2a:	4288      	cmp	r0, r1
 8001a2c:	f842 5f04 	str.w	r5, [r2, #4]!
 8001a30:	d1f9      	bne.n	8001a26 <_Unwind_VRS_Pop+0x13e>
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d048      	beq.n	8001ac8 <_Unwind_VRS_Pop+0x1e0>
 8001a36:	2e0f      	cmp	r6, #15
 8001a38:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a3a:	d933      	bls.n	8001aa4 <_Unwind_VRS_Pop+0x1bc>
 8001a3c:	b117      	cbz	r7, 8001a44 <_Unwind_VRS_Pop+0x15c>
 8001a3e:	a802      	add	r0, sp, #8
 8001a40:	f000 f894 	bl	8001b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001a44:	2000      	movs	r0, #0
 8001a46:	e763      	b.n	8001910 <_Unwind_VRS_Pop+0x28>
 8001a48:	2e0f      	cmp	r6, #15
 8001a4a:	f63f af60 	bhi.w	800190e <_Unwind_VRS_Pop+0x26>
 8001a4e:	2700      	movs	r7, #0
 8001a50:	6822      	ldr	r2, [r4, #0]
 8001a52:	07d1      	lsls	r1, r2, #31
 8001a54:	d417      	bmi.n	8001a86 <_Unwind_VRS_Pop+0x19e>
 8001a56:	2f00      	cmp	r7, #0
 8001a58:	d060      	beq.n	8001b1c <_Unwind_VRS_Pop+0x234>
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	0751      	lsls	r1, r2, #29
 8001a5e:	d445      	bmi.n	8001aec <_Unwind_VRS_Pop+0x204>
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d04d      	beq.n	8001b00 <_Unwind_VRS_Pop+0x218>
 8001a64:	2e0f      	cmp	r6, #15
 8001a66:	d806      	bhi.n	8001a76 <_Unwind_VRS_Pop+0x18e>
 8001a68:	a822      	add	r0, sp, #136	; 0x88
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	f000 f87a 	bl	8001b64 <__gnu_Unwind_Save_VFP_D>
 8001a70:	9b01      	ldr	r3, [sp, #4]
 8001a72:	2f00      	cmp	r7, #0
 8001a74:	d0b6      	beq.n	80019e4 <_Unwind_VRS_Pop+0xfc>
 8001a76:	a802      	add	r0, sp, #8
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	f000 f87b 	bl	8001b74 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001a7e:	9b01      	ldr	r3, [sp, #4]
 8001a80:	f1c6 0210 	rsb	r2, r6, #16
 8001a84:	e7b0      	b.n	80019e8 <_Unwind_VRS_Pop+0x100>
 8001a86:	f022 0101 	bic.w	r1, r2, #1
 8001a8a:	2b05      	cmp	r3, #5
 8001a8c:	6021      	str	r1, [r4, #0]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	4620      	mov	r0, r4
 8001a92:	d03b      	beq.n	8001b0c <_Unwind_VRS_Pop+0x224>
 8001a94:	f022 0203 	bic.w	r2, r2, #3
 8001a98:	f840 2b48 	str.w	r2, [r0], #72
 8001a9c:	f000 f85a 	bl	8001b54 <__gnu_Unwind_Save_VFP>
 8001aa0:	9b01      	ldr	r3, [sp, #4]
 8001aa2:	e7d8      	b.n	8001a56 <_Unwind_VRS_Pop+0x16e>
 8001aa4:	a822      	add	r0, sp, #136	; 0x88
 8001aa6:	f000 f859 	bl	8001b5c <__gnu_Unwind_Restore_VFP_D>
 8001aaa:	e7c7      	b.n	8001a3c <_Unwind_VRS_Pop+0x154>
 8001aac:	2f10      	cmp	r7, #16
 8001aae:	d9ce      	bls.n	8001a4e <_Unwind_VRS_Pop+0x166>
 8001ab0:	3f10      	subs	r7, #16
 8001ab2:	e7cd      	b.n	8001a50 <_Unwind_VRS_Pop+0x168>
 8001ab4:	f023 0310 	bic.w	r3, r3, #16
 8001ab8:	6023      	str	r3, [r4, #0]
 8001aba:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	f000 f8aa 	bl	8001c18 <__gnu_Unwind_Save_WMMXC>
 8001ac4:	9a01      	ldr	r2, [sp, #4]
 8001ac6:	e72d      	b.n	8001924 <_Unwind_VRS_Pop+0x3c>
 8001ac8:	3104      	adds	r1, #4
 8001aca:	63a1      	str	r1, [r4, #56]	; 0x38
 8001acc:	a822      	add	r0, sp, #136	; 0x88
 8001ace:	f000 f83d 	bl	8001b4c <__gnu_Unwind_Restore_VFP>
 8001ad2:	e7b7      	b.n	8001a44 <_Unwind_VRS_Pop+0x15c>
 8001ad4:	2f00      	cmp	r7, #0
 8001ad6:	d199      	bne.n	8001a0c <_Unwind_VRS_Pop+0x124>
 8001ad8:	4601      	mov	r1, r0
 8001ada:	e7aa      	b.n	8001a32 <_Unwind_VRS_Pop+0x14a>
 8001adc:	f023 0308 	bic.w	r3, r3, #8
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001ae6:	f000 f86b 	bl	8001bc0 <__gnu_Unwind_Save_WMMXD>
 8001aea:	e740      	b.n	800196e <_Unwind_VRS_Pop+0x86>
 8001aec:	4620      	mov	r0, r4
 8001aee:	f022 0204 	bic.w	r2, r2, #4
 8001af2:	f840 2bd0 	str.w	r2, [r0], #208
 8001af6:	9301      	str	r3, [sp, #4]
 8001af8:	f000 f83c 	bl	8001b74 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001afc:	9b01      	ldr	r3, [sp, #4]
 8001afe:	e7af      	b.n	8001a60 <_Unwind_VRS_Pop+0x178>
 8001b00:	a822      	add	r0, sp, #136	; 0x88
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f000 f826 	bl	8001b54 <__gnu_Unwind_Save_VFP>
 8001b08:	9b01      	ldr	r3, [sp, #4]
 8001b0a:	e7b9      	b.n	8001a80 <_Unwind_VRS_Pop+0x198>
 8001b0c:	f041 0102 	orr.w	r1, r1, #2
 8001b10:	f840 1b48 	str.w	r1, [r0], #72
 8001b14:	f000 f826 	bl	8001b64 <__gnu_Unwind_Save_VFP_D>
 8001b18:	9b01      	ldr	r3, [sp, #4]
 8001b1a:	e79c      	b.n	8001a56 <_Unwind_VRS_Pop+0x16e>
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d003      	beq.n	8001b28 <_Unwind_VRS_Pop+0x240>
 8001b20:	2e0f      	cmp	r6, #15
 8001b22:	f63f af5f 	bhi.w	80019e4 <_Unwind_VRS_Pop+0xfc>
 8001b26:	e79f      	b.n	8001a68 <_Unwind_VRS_Pop+0x180>
 8001b28:	a822      	add	r0, sp, #136	; 0x88
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	f000 f812 	bl	8001b54 <__gnu_Unwind_Save_VFP>
 8001b30:	9b01      	ldr	r3, [sp, #4]
 8001b32:	e757      	b.n	80019e4 <_Unwind_VRS_Pop+0xfc>

08001b34 <__restore_core_regs>:
 8001b34:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001b38:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001b3c:	469c      	mov	ip, r3
 8001b3e:	46a6      	mov	lr, r4
 8001b40:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001b44:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001b48:	46e5      	mov	sp, ip
 8001b4a:	bd00      	pop	{pc}

08001b4c <__gnu_Unwind_Restore_VFP>:
 8001b4c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <__gnu_Unwind_Save_VFP>:
 8001b54:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop

08001b5c <__gnu_Unwind_Restore_VFP_D>:
 8001b5c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <__gnu_Unwind_Save_VFP_D>:
 8001b64:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001b6c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop

08001b74 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001b74:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop

08001b7c <__gnu_Unwind_Restore_WMMXD>:
 8001b7c:	ecf0 0102 	ldfe	f0, [r0], #8
 8001b80:	ecf0 1102 	ldfe	f1, [r0], #8
 8001b84:	ecf0 2102 	ldfe	f2, [r0], #8
 8001b88:	ecf0 3102 	ldfe	f3, [r0], #8
 8001b8c:	ecf0 4102 	ldfe	f4, [r0], #8
 8001b90:	ecf0 5102 	ldfe	f5, [r0], #8
 8001b94:	ecf0 6102 	ldfe	f6, [r0], #8
 8001b98:	ecf0 7102 	ldfe	f7, [r0], #8
 8001b9c:	ecf0 8102 	ldfp	f0, [r0], #8
 8001ba0:	ecf0 9102 	ldfp	f1, [r0], #8
 8001ba4:	ecf0 a102 	ldfp	f2, [r0], #8
 8001ba8:	ecf0 b102 	ldfp	f3, [r0], #8
 8001bac:	ecf0 c102 	ldfp	f4, [r0], #8
 8001bb0:	ecf0 d102 	ldfp	f5, [r0], #8
 8001bb4:	ecf0 e102 	ldfp	f6, [r0], #8
 8001bb8:	ecf0 f102 	ldfp	f7, [r0], #8
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <__gnu_Unwind_Save_WMMXD>:
 8001bc0:	ece0 0102 	stfe	f0, [r0], #8
 8001bc4:	ece0 1102 	stfe	f1, [r0], #8
 8001bc8:	ece0 2102 	stfe	f2, [r0], #8
 8001bcc:	ece0 3102 	stfe	f3, [r0], #8
 8001bd0:	ece0 4102 	stfe	f4, [r0], #8
 8001bd4:	ece0 5102 	stfe	f5, [r0], #8
 8001bd8:	ece0 6102 	stfe	f6, [r0], #8
 8001bdc:	ece0 7102 	stfe	f7, [r0], #8
 8001be0:	ece0 8102 	stfp	f0, [r0], #8
 8001be4:	ece0 9102 	stfp	f1, [r0], #8
 8001be8:	ece0 a102 	stfp	f2, [r0], #8
 8001bec:	ece0 b102 	stfp	f3, [r0], #8
 8001bf0:	ece0 c102 	stfp	f4, [r0], #8
 8001bf4:	ece0 d102 	stfp	f5, [r0], #8
 8001bf8:	ece0 e102 	stfp	f6, [r0], #8
 8001bfc:	ece0 f102 	stfp	f7, [r0], #8
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <__gnu_Unwind_Restore_WMMXC>:
 8001c04:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001c08:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001c0c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001c10:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <__gnu_Unwind_Save_WMMXC>:
 8001c18:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001c1c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001c20:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001c24:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <_Unwind_RaiseException>:
 8001c2c:	46ec      	mov	ip, sp
 8001c2e:	b500      	push	{lr}
 8001c30:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c34:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c38:	f04f 0300 	mov.w	r3, #0
 8001c3c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c40:	a901      	add	r1, sp, #4
 8001c42:	f7ff fbed 	bl	8001420 <__gnu_Unwind_RaiseException>
 8001c46:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c4a:	b012      	add	sp, #72	; 0x48
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <_Unwind_Resume>:
 8001c50:	46ec      	mov	ip, sp
 8001c52:	b500      	push	{lr}
 8001c54:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c58:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c64:	a901      	add	r1, sp, #4
 8001c66:	f7ff fc15 	bl	8001494 <__gnu_Unwind_Resume>
 8001c6a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c6e:	b012      	add	sp, #72	; 0x48
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop

08001c74 <_Unwind_Resume_or_Rethrow>:
 8001c74:	46ec      	mov	ip, sp
 8001c76:	b500      	push	{lr}
 8001c78:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c7c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c88:	a901      	add	r1, sp, #4
 8001c8a:	f7ff fc25 	bl	80014d8 <__gnu_Unwind_Resume_or_Rethrow>
 8001c8e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c92:	b012      	add	sp, #72	; 0x48
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <_Unwind_ForcedUnwind>:
 8001c98:	46ec      	mov	ip, sp
 8001c9a:	b500      	push	{lr}
 8001c9c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001ca0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cac:	ab01      	add	r3, sp, #4
 8001cae:	f7ff fbe7 	bl	8001480 <__gnu_Unwind_ForcedUnwind>
 8001cb2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cb6:	b012      	add	sp, #72	; 0x48
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <_Unwind_Backtrace>:
 8001cbc:	46ec      	mov	ip, sp
 8001cbe:	b500      	push	{lr}
 8001cc0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001cc4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001cd0:	aa01      	add	r2, sp, #4
 8001cd2:	f7ff fc61 	bl	8001598 <__gnu_Unwind_Backtrace>
 8001cd6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001cda:	b012      	add	sp, #72	; 0x48
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <next_unwind_byte>:
 8001ce0:	7a02      	ldrb	r2, [r0, #8]
 8001ce2:	b91a      	cbnz	r2, 8001cec <next_unwind_byte+0xc>
 8001ce4:	7a43      	ldrb	r3, [r0, #9]
 8001ce6:	b943      	cbnz	r3, 8001cfa <next_unwind_byte+0x1a>
 8001ce8:	20b0      	movs	r0, #176	; 0xb0
 8001cea:	4770      	bx	lr
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	7202      	strb	r2, [r0, #8]
 8001cf2:	021a      	lsls	r2, r3, #8
 8001cf4:	6002      	str	r2, [r0, #0]
 8001cf6:	0e18      	lsrs	r0, r3, #24
 8001cf8:	4770      	bx	lr
 8001cfa:	2103      	movs	r1, #3
 8001cfc:	6842      	ldr	r2, [r0, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b410      	push	{r4}
 8001d02:	7243      	strb	r3, [r0, #9]
 8001d04:	6813      	ldr	r3, [r2, #0]
 8001d06:	1d14      	adds	r4, r2, #4
 8001d08:	7201      	strb	r1, [r0, #8]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	6044      	str	r4, [r0, #4]
 8001d0e:	6002      	str	r2, [r0, #0]
 8001d10:	bc10      	pop	{r4}
 8001d12:	0e18      	lsrs	r0, r3, #24
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop

08001d18 <_Unwind_GetGR.constprop.0>:
 8001d18:	2300      	movs	r3, #0
 8001d1a:	b500      	push	{lr}
 8001d1c:	b085      	sub	sp, #20
 8001d1e:	aa03      	add	r2, sp, #12
 8001d20:	9200      	str	r2, [sp, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	220c      	movs	r2, #12
 8001d26:	f7ff fbe9 	bl	80014fc <_Unwind_VRS_Get>
 8001d2a:	9803      	ldr	r0, [sp, #12]
 8001d2c:	b005      	add	sp, #20
 8001d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d32:	bf00      	nop

08001d34 <unwind_UCB_from_context>:
 8001d34:	e7f0      	b.n	8001d18 <_Unwind_GetGR.constprop.0>
 8001d36:	bf00      	nop

08001d38 <__gnu_unwind_execute>:
 8001d38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d3c:	4606      	mov	r6, r0
 8001d3e:	460f      	mov	r7, r1
 8001d40:	f04f 0800 	mov.w	r8, #0
 8001d44:	b085      	sub	sp, #20
 8001d46:	4638      	mov	r0, r7
 8001d48:	f7ff ffca 	bl	8001ce0 <next_unwind_byte>
 8001d4c:	28b0      	cmp	r0, #176	; 0xb0
 8001d4e:	4604      	mov	r4, r0
 8001d50:	d023      	beq.n	8001d9a <__gnu_unwind_execute+0x62>
 8001d52:	0605      	lsls	r5, r0, #24
 8001d54:	d427      	bmi.n	8001da6 <__gnu_unwind_execute+0x6e>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f10d 090c 	add.w	r9, sp, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	0085      	lsls	r5, r0, #2
 8001d60:	220d      	movs	r2, #13
 8001d62:	f8cd 9000 	str.w	r9, [sp]
 8001d66:	4630      	mov	r0, r6
 8001d68:	f7ff fbc8 	bl	80014fc <_Unwind_VRS_Get>
 8001d6c:	b2ed      	uxtb	r5, r5
 8001d6e:	9b03      	ldr	r3, [sp, #12]
 8001d70:	0660      	lsls	r0, r4, #25
 8001d72:	f105 0504 	add.w	r5, r5, #4
 8001d76:	bf4c      	ite	mi
 8001d78:	1b5d      	submi	r5, r3, r5
 8001d7a:	18ed      	addpl	r5, r5, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	220d      	movs	r2, #13
 8001d80:	4619      	mov	r1, r3
 8001d82:	f8cd 9000 	str.w	r9, [sp]
 8001d86:	4630      	mov	r0, r6
 8001d88:	9503      	str	r5, [sp, #12]
 8001d8a:	f7ff fbdd 	bl	8001548 <_Unwind_VRS_Set>
 8001d8e:	4638      	mov	r0, r7
 8001d90:	f7ff ffa6 	bl	8001ce0 <next_unwind_byte>
 8001d94:	28b0      	cmp	r0, #176	; 0xb0
 8001d96:	4604      	mov	r4, r0
 8001d98:	d1db      	bne.n	8001d52 <__gnu_unwind_execute+0x1a>
 8001d9a:	f1b8 0f00 	cmp.w	r8, #0
 8001d9e:	f000 8094 	beq.w	8001eca <__gnu_unwind_execute+0x192>
 8001da2:	2000      	movs	r0, #0
 8001da4:	e01c      	b.n	8001de0 <__gnu_unwind_execute+0xa8>
 8001da6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	d05c      	beq.n	8001e68 <__gnu_unwind_execute+0x130>
 8001dae:	2b90      	cmp	r3, #144	; 0x90
 8001db0:	d019      	beq.n	8001de6 <__gnu_unwind_execute+0xae>
 8001db2:	2ba0      	cmp	r3, #160	; 0xa0
 8001db4:	d02c      	beq.n	8001e10 <__gnu_unwind_execute+0xd8>
 8001db6:	2bb0      	cmp	r3, #176	; 0xb0
 8001db8:	d03e      	beq.n	8001e38 <__gnu_unwind_execute+0x100>
 8001dba:	2bc0      	cmp	r3, #192	; 0xc0
 8001dbc:	d06b      	beq.n	8001e96 <__gnu_unwind_execute+0x15e>
 8001dbe:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001dc2:	2bd0      	cmp	r3, #208	; 0xd0
 8001dc4:	d10b      	bne.n	8001dde <__gnu_unwind_execute+0xa6>
 8001dc6:	f000 0207 	and.w	r2, r0, #7
 8001dca:	3201      	adds	r2, #1
 8001dcc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f7ff fd87 	bl	80018e8 <_Unwind_VRS_Pop>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d0b3      	beq.n	8001d46 <__gnu_unwind_execute+0xe>
 8001dde:	2009      	movs	r0, #9
 8001de0:	b005      	add	sp, #20
 8001de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001de6:	f000 030d 	and.w	r3, r0, #13
 8001dea:	2b0d      	cmp	r3, #13
 8001dec:	d0f7      	beq.n	8001dde <__gnu_unwind_execute+0xa6>
 8001dee:	2300      	movs	r3, #0
 8001df0:	ad03      	add	r5, sp, #12
 8001df2:	f000 020f 	and.w	r2, r0, #15
 8001df6:	4619      	mov	r1, r3
 8001df8:	9500      	str	r5, [sp, #0]
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f7ff fb7e 	bl	80014fc <_Unwind_VRS_Get>
 8001e00:	2300      	movs	r3, #0
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	220d      	movs	r2, #13
 8001e08:	4630      	mov	r0, r6
 8001e0a:	f7ff fb9d 	bl	8001548 <_Unwind_VRS_Set>
 8001e0e:	e79a      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001e10:	43c3      	mvns	r3, r0
 8001e12:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	411a      	asrs	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	0701      	lsls	r1, r0, #28
 8001e20:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001e24:	bf48      	it	mi
 8001e26:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f7ff fd5b 	bl	80018e8 <_Unwind_VRS_Pop>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d1d3      	bne.n	8001dde <__gnu_unwind_execute+0xa6>
 8001e36:	e786      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001e38:	28b1      	cmp	r0, #177	; 0xb1
 8001e3a:	d057      	beq.n	8001eec <__gnu_unwind_execute+0x1b4>
 8001e3c:	28b2      	cmp	r0, #178	; 0xb2
 8001e3e:	d068      	beq.n	8001f12 <__gnu_unwind_execute+0x1da>
 8001e40:	28b3      	cmp	r0, #179	; 0xb3
 8001e42:	f000 8095 	beq.w	8001f70 <__gnu_unwind_execute+0x238>
 8001e46:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001e4a:	2bb4      	cmp	r3, #180	; 0xb4
 8001e4c:	d0c7      	beq.n	8001dde <__gnu_unwind_execute+0xa6>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 0207 	and.w	r2, r0, #7
 8001e54:	441a      	add	r2, r3
 8001e56:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4630      	mov	r0, r6
 8001e5e:	f7ff fd43 	bl	80018e8 <_Unwind_VRS_Pop>
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d1bb      	bne.n	8001dde <__gnu_unwind_execute+0xa6>
 8001e66:	e76e      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001e68:	4638      	mov	r0, r7
 8001e6a:	f7ff ff39 	bl	8001ce0 <next_unwind_byte>
 8001e6e:	0224      	lsls	r4, r4, #8
 8001e70:	4304      	orrs	r4, r0
 8001e72:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001e76:	d0b2      	beq.n	8001dde <__gnu_unwind_execute+0xa6>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	0124      	lsls	r4, r4, #4
 8001e7c:	b2a2      	uxth	r2, r4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4630      	mov	r0, r6
 8001e82:	f7ff fd31 	bl	80018e8 <_Unwind_VRS_Pop>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d1a9      	bne.n	8001dde <__gnu_unwind_execute+0xa6>
 8001e8a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001e8e:	bf18      	it	ne
 8001e90:	f04f 0801 	movne.w	r8, #1
 8001e94:	e757      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001e96:	28c6      	cmp	r0, #198	; 0xc6
 8001e98:	d07d      	beq.n	8001f96 <__gnu_unwind_execute+0x25e>
 8001e9a:	28c7      	cmp	r0, #199	; 0xc7
 8001e9c:	f000 8086 	beq.w	8001fac <__gnu_unwind_execute+0x274>
 8001ea0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8001ea6:	f000 8094 	beq.w	8001fd2 <__gnu_unwind_execute+0x29a>
 8001eaa:	28c8      	cmp	r0, #200	; 0xc8
 8001eac:	f000 809f 	beq.w	8001fee <__gnu_unwind_execute+0x2b6>
 8001eb0:	28c9      	cmp	r0, #201	; 0xc9
 8001eb2:	d194      	bne.n	8001dde <__gnu_unwind_execute+0xa6>
 8001eb4:	4638      	mov	r0, r7
 8001eb6:	f7ff ff13 	bl	8001ce0 <next_unwind_byte>
 8001eba:	0302      	lsls	r2, r0, #12
 8001ebc:	f000 000f 	and.w	r0, r0, #15
 8001ec0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001ec4:	3001      	adds	r0, #1
 8001ec6:	4302      	orrs	r2, r0
 8001ec8:	e782      	b.n	8001dd0 <__gnu_unwind_execute+0x98>
 8001eca:	ac03      	add	r4, sp, #12
 8001ecc:	4643      	mov	r3, r8
 8001ece:	220e      	movs	r2, #14
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	9400      	str	r4, [sp, #0]
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	f7ff fb11 	bl	80014fc <_Unwind_VRS_Get>
 8001eda:	9400      	str	r4, [sp, #0]
 8001edc:	4630      	mov	r0, r6
 8001ede:	4643      	mov	r3, r8
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	f7ff fb30 	bl	8001548 <_Unwind_VRS_Set>
 8001ee8:	4640      	mov	r0, r8
 8001eea:	e779      	b.n	8001de0 <__gnu_unwind_execute+0xa8>
 8001eec:	4638      	mov	r0, r7
 8001eee:	f7ff fef7 	bl	8001ce0 <next_unwind_byte>
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	f43f af73 	beq.w	8001dde <__gnu_unwind_execute+0xa6>
 8001ef8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001efc:	f47f af6f 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4630      	mov	r0, r6
 8001f06:	f7ff fcef 	bl	80018e8 <_Unwind_VRS_Pop>
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	f47f af67 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001f10:	e719      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001f12:	2300      	movs	r3, #0
 8001f14:	f10d 090c 	add.w	r9, sp, #12
 8001f18:	220d      	movs	r2, #13
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f8cd 9000 	str.w	r9, [sp]
 8001f20:	4630      	mov	r0, r6
 8001f22:	f7ff faeb 	bl	80014fc <_Unwind_VRS_Get>
 8001f26:	4638      	mov	r0, r7
 8001f28:	f7ff feda 	bl	8001ce0 <next_unwind_byte>
 8001f2c:	0602      	lsls	r2, r0, #24
 8001f2e:	f04f 0402 	mov.w	r4, #2
 8001f32:	d50c      	bpl.n	8001f4e <__gnu_unwind_execute+0x216>
 8001f34:	9b03      	ldr	r3, [sp, #12]
 8001f36:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001f3a:	40a0      	lsls	r0, r4
 8001f3c:	4403      	add	r3, r0
 8001f3e:	4638      	mov	r0, r7
 8001f40:	9303      	str	r3, [sp, #12]
 8001f42:	f7ff fecd 	bl	8001ce0 <next_unwind_byte>
 8001f46:	0603      	lsls	r3, r0, #24
 8001f48:	f104 0407 	add.w	r4, r4, #7
 8001f4c:	d4f2      	bmi.n	8001f34 <__gnu_unwind_execute+0x1fc>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9903      	ldr	r1, [sp, #12]
 8001f52:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001f56:	40a2      	lsls	r2, r4
 8001f58:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001f5c:	188c      	adds	r4, r1, r2
 8001f5e:	f8cd 9000 	str.w	r9, [sp]
 8001f62:	4619      	mov	r1, r3
 8001f64:	220d      	movs	r2, #13
 8001f66:	4630      	mov	r0, r6
 8001f68:	9403      	str	r4, [sp, #12]
 8001f6a:	f7ff faed 	bl	8001548 <_Unwind_VRS_Set>
 8001f6e:	e6ea      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001f70:	4638      	mov	r0, r7
 8001f72:	f7ff feb5 	bl	8001ce0 <next_unwind_byte>
 8001f76:	2301      	movs	r3, #1
 8001f78:	0301      	lsls	r1, r0, #12
 8001f7a:	f000 000f 	and.w	r0, r0, #15
 8001f7e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001f82:	18c2      	adds	r2, r0, r3
 8001f84:	430a      	orrs	r2, r1
 8001f86:	4630      	mov	r0, r6
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f7ff fcad 	bl	80018e8 <_Unwind_VRS_Pop>
 8001f8e:	2800      	cmp	r0, #0
 8001f90:	f47f af25 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001f94:	e6d7      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001f96:	4638      	mov	r0, r7
 8001f98:	f7ff fea2 	bl	8001ce0 <next_unwind_byte>
 8001f9c:	0301      	lsls	r1, r0, #12
 8001f9e:	f000 000f 	and.w	r0, r0, #15
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001fa8:	1c42      	adds	r2, r0, #1
 8001faa:	e7eb      	b.n	8001f84 <__gnu_unwind_execute+0x24c>
 8001fac:	4638      	mov	r0, r7
 8001fae:	f7ff fe97 	bl	8001ce0 <next_unwind_byte>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	f43f af13 	beq.w	8001dde <__gnu_unwind_execute+0xa6>
 8001fb8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001fbc:	f47f af0f 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	2104      	movs	r1, #4
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	f7ff fc8f 	bl	80018e8 <_Unwind_VRS_Pop>
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	f47f af07 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001fd0:	e6b9      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f000 020f 	and.w	r2, r0, #15
 8001fd8:	3201      	adds	r2, #1
 8001fda:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4630      	mov	r0, r6
 8001fe2:	f7ff fc81 	bl	80018e8 <_Unwind_VRS_Pop>
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	f47f aef9 	bne.w	8001dde <__gnu_unwind_execute+0xa6>
 8001fec:	e6ab      	b.n	8001d46 <__gnu_unwind_execute+0xe>
 8001fee:	4638      	mov	r0, r7
 8001ff0:	f7ff fe76 	bl	8001ce0 <next_unwind_byte>
 8001ff4:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001ff8:	f000 030f 	and.w	r3, r0, #15
 8001ffc:	3210      	adds	r2, #16
 8001ffe:	3301      	adds	r3, #1
 8002000:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8002004:	e6e4      	b.n	8001dd0 <__gnu_unwind_execute+0x98>
 8002006:	bf00      	nop

08002008 <__gnu_unwind_frame>:
 8002008:	b530      	push	{r4, r5, lr}
 800200a:	2403      	movs	r4, #3
 800200c:	460d      	mov	r5, r1
 800200e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002010:	b085      	sub	sp, #20
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	f88d 400c 	strb.w	r4, [sp, #12]
 8002018:	79dc      	ldrb	r4, [r3, #7]
 800201a:	0212      	lsls	r2, r2, #8
 800201c:	3308      	adds	r3, #8
 800201e:	a901      	add	r1, sp, #4
 8002020:	4628      	mov	r0, r5
 8002022:	9201      	str	r2, [sp, #4]
 8002024:	f88d 400d 	strb.w	r4, [sp, #13]
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	f7ff fe85 	bl	8001d38 <__gnu_unwind_execute>
 800202e:	b005      	add	sp, #20
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	bf00      	nop

08002034 <_Unwind_GetRegionStart>:
 8002034:	b508      	push	{r3, lr}
 8002036:	f7ff fe7d 	bl	8001d34 <unwind_UCB_from_context>
 800203a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800203c:	bd08      	pop	{r3, pc}
 800203e:	bf00      	nop

08002040 <_Unwind_GetLanguageSpecificData>:
 8002040:	b508      	push	{r3, lr}
 8002042:	f7ff fe77 	bl	8001d34 <unwind_UCB_from_context>
 8002046:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002048:	79c3      	ldrb	r3, [r0, #7]
 800204a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800204e:	3008      	adds	r0, #8
 8002050:	bd08      	pop	{r3, pc}
 8002052:	bf00      	nop

08002054 <_Unwind_GetTextRelBase>:
 8002054:	b508      	push	{r3, lr}
 8002056:	f006 f8a9 	bl	80081ac <abort>
 800205a:	bf00      	nop

0800205c <_Unwind_GetDataRelBase>:
 800205c:	b508      	push	{r3, lr}
 800205e:	f7ff fff9 	bl	8002054 <_Unwind_GetTextRelBase>
 8002062:	bf00      	nop

08002064 <_ZN8AllTasksC1Ev>:
#include <AllTasks.h>


AllTasks allTasks;

AllTasks::AllTasks() {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <_ZN8AllTasksC1Ev+0x1c>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	08008498 	.word	0x08008498

08002084 <_ZN8AllTasks4initEv>:

void AllTasks::init(void){
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
//	init_latt_driver();
	tools.Init();
 800208c:	4809      	ldr	r0, [pc, #36]	; (80020b4 <_ZN8AllTasks4initEv+0x30>)
 800208e:	f001 fe21 	bl	8003cd4 <_ZN5Tools4InitEv>
	futaba.Init();
 8002092:	4809      	ldr	r0, [pc, #36]	; (80020b8 <_ZN8AllTasks4initEv+0x34>)
 8002094:	f000 ff30 	bl	8002ef8 <_ZN6Futaba4InitEv>
	mode_manager.init();
 8002098:	4808      	ldr	r0, [pc, #32]	; (80020bc <_ZN8AllTasks4initEv+0x38>)
 800209a:	f001 fb1d 	bl	80036d8 <_ZN11ModeManager4initEv>
	motor_manager.init();
 800209e:	4808      	ldr	r0, [pc, #32]	; (80020c0 <_ZN8AllTasks4initEv+0x3c>)
 80020a0:	f001 fc94 	bl	80039cc <_ZN12MotorManager4initEv>
	canSendManager.init();
 80020a4:	4807      	ldr	r0, [pc, #28]	; (80020c4 <_ZN8AllTasks4initEv+0x40>)
 80020a6:	f000 f869 	bl	800217c <_ZN14CanSendManager4initEv>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200001a0 	.word	0x200001a0
 80020b8:	200000cc 	.word	0x200000cc
 80020bc:	20000180 	.word	0x20000180
 80020c0:	20000194 	.word	0x20000194
 80020c4:	200000a4 	.word	0x200000a4

080020c8 <_ZN8AllTasks7processEv>:

void AllTasks::process(void){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	//futaba.Process();
	mode_manager.proccess();
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <_ZN8AllTasks7processEv+0x1c>)
 80020d2:	f001 fb2d 	bl	8003730 <_ZN11ModeManager8proccessEv>
	motor_manager.process();
 80020d6:	4804      	ldr	r0, [pc, #16]	; (80020e8 <_ZN8AllTasks7processEv+0x20>)
 80020d8:	f001 fc86 	bl	80039e8 <_ZN12MotorManager7processEv>

}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000180 	.word	0x20000180
 80020e8:	20000194 	.word	0x20000194

080020ec <_ZN8AllTasksD1Ev>:

AllTasks::~AllTasks() {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <_ZN8AllTasksD1Ev+0x1c>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	08008498 	.word	0x08008498

0800210c <_ZN8AllTasksD0Ev>:
AllTasks::~AllTasks() {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
}
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffe9 	bl	80020ec <_ZN8AllTasksD1Ev>
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f003 fdfd 	bl	8005d1a <_ZdlPv>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <_Z41__static_initialization_and_destruction_0ii>:
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d10c      	bne.n	8002156 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002142:	4293      	cmp	r3, r2
 8002144:	d107      	bne.n	8002156 <_Z41__static_initialization_and_destruction_0ii+0x2a>
AllTasks allTasks;
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002148:	f7ff ff8c 	bl	8002064 <_ZN8AllTasksC1Ev>
 800214c:	4a05      	ldr	r2, [pc, #20]	; (8002164 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800214e:	4906      	ldr	r1, [pc, #24]	; (8002168 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002150:	4803      	ldr	r0, [pc, #12]	; (8002160 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002152:	f003 fde6 	bl	8005d22 <__aeabi_atexit>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200000a0 	.word	0x200000a0
 8002164:	20000000 	.word	0x20000000
 8002168:	080020ed 	.word	0x080020ed

0800216c <_GLOBAL__sub_I_allTasks>:
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
 8002170:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002174:	2001      	movs	r0, #1
 8002176:	f7ff ffd9 	bl	800212c <_Z41__static_initialization_and_destruction_0ii>
 800217a:	bd80      	pop	{r7, pc}

0800217c <_ZN14CanSendManager4initEv>:

#include "CanSendManager.h"

CanSendManager canSendManager;

void CanSendManager::init(){
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

	canMsgTx.header.RTR = CAN_RTR_DATA;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
	canMsgTx.header.IDE  = CAN_ID_STD;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
	canMsgTx.header.ExtId = 0x01;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	609a      	str	r2, [r3, #8]
	canMsgTx.header.TransmitGlobalTime = DISABLE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	761a      	strb	r2, [r3, #24]
	clearTxBuff();
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f804 	bl	80021aa <_ZN14CanSendManager11clearTxBuffEv>
}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_ZN14CanSendManager11clearTxBuffEv>:

void CanSendManager::clearTxBuff(){ for(uint8_t i = 0; i<8; i++) canMsgTx.data[i]=0;}
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	2300      	movs	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	dc09      	bgt.n	80021d0 <_ZN14CanSendManager11clearTxBuffEv+0x26>
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2020 	strb.w	r2, [r3, #32]
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	3301      	adds	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	e7f2      	b.n	80021b6 <_ZN14CanSendManager11clearTxBuffEv+0xc>
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>:


void CanSendManager::sendMsg(SEND_MODE mode){
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]


	if (mode == TURN ){
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x20>
		hal_can_send( VELOCITY_FRAME_ID, STEERING_FRAME_LENGTH );
 80021ec:	2204      	movs	r2, #4
 80021ee:	f240 213e 	movw	r1, #574	; 0x23e
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f938 	bl	8002468 <_ZN14CanSendManager12hal_can_sendEmm>
 80021f8:	e012      	b.n	8002220 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
	}
	else if (mode == VELOCITY) {
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d106      	bne.n	800220e <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x34>
		hal_can_send( TURN_FRAME_ID,  STEERING_FRAME_LENGTH);
 8002200:	2204      	movs	r2, #4
 8002202:	f240 214d 	movw	r1, #589	; 0x24d
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f92e 	bl	8002468 <_ZN14CanSendManager12hal_can_sendEmm>
 800220c:	e008      	b.n	8002220 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
	}
	else if (mode == STATUS ){
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d105      	bne.n	8002220 <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE+0x46>
		hal_can_send( STATUS_FRAME_ID,  STATUS_FRAME_LENGTH);
 8002214:	2204      	movs	r2, #4
 8002216:	f240 215d 	movw	r1, #605	; 0x25d
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f924 	bl	8002468 <_ZN14CanSendManager12hal_can_sendEmm>
	}

	clearTxBuff();
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ffc2 	bl	80021aa <_ZN14CanSendManager11clearTxBuffEv>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_ZN14CanSendManager7getSignEf>:

uint8_t CanSendManager::getSign(float value){
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
	if (value >=0) return POSITIVE_SIGN;
 8002238:	f04f 0100 	mov.w	r1, #0
 800223c:	6838      	ldr	r0, [r7, #0]
 800223e:	f7fe ff1b 	bl	8001078 <__aeabi_fcmpge>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_ZN14CanSendManager7getSignEf+0x1e>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <_ZN14CanSendManager7getSignEf+0x20>
	else return NEGATIVE_SIGN;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZN14CanSendManager21convertFloatToUint16tEf>:

uint16_t CanSendManager::convertFloatToUint16t(float value){
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
	float range = 128;
 8002260:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 8002264:	60fb      	str	r3, [r7, #12]
	if( value > range){
 8002266:	68f9      	ldr	r1, [r7, #12]
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	f7fe ff0f 	bl	800108c <__aeabi_fcmpgt>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <_ZN14CanSendManager21convertFloatToUint16tEf+0x2a>
		return range;
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7fe ff4f 	bl	8001118 <__aeabi_f2uiz>
 800227a:	4603      	mov	r3, r0
 800227c:	b29b      	uxth	r3, r3
 800227e:	e00a      	b.n	8002296 <_ZN14CanSendManager21convertFloatToUint16tEf+0x40>
	}
	return(uint16_t)(value * 512);
 8002280:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8002284:	6838      	ldr	r0, [r7, #0]
 8002286:	f7fe fd45 	bl	8000d14 <__aeabi_fmul>
 800228a:	4603      	mov	r3, r0
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe ff43 	bl	8001118 <__aeabi_f2uiz>
 8002292:	4603      	mov	r3, r0
 8002294:	b29b      	uxth	r3, r3
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_ZN14CanSendManager23encode_frame_big_endianEh>:
	encode_frame_big_endian(STEERING_FRAME_LENGTH);


}

void CanSendManager::encode_frame_big_endian(uint8_t data_length){
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	70fb      	strb	r3, [r7, #3]
	 //uint8_t* encoded_data = (uint8_t*)calloc(data_length, sizeof(uint8_t));
	 uint8_t* encoded_data = new uint8_t[data_length];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fd75 	bl	8005d9c <_Znaj>
 80022b2:	4603      	mov	r3, r0
 80022b4:	60bb      	str	r3, [r7, #8]
	 if (encoded_data != NULL){
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d029      	beq.n	8002310 <_ZN14CanSendManager23encode_frame_big_endianEh+0x72>
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	78fb      	ldrb	r3, [r7, #3]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	dc0f      	bgt.n	80022e8 <_ZN14CanSendManager23encode_frame_big_endianEh+0x4a>
			encoded_data[i-1] = canMsgTx.data[data_length-i];
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	4413      	add	r3, r2
 80022d0:	78f9      	ldrb	r1, [r7, #3]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	1a8a      	subs	r2, r1, r2
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	440a      	add	r2, r1
 80022da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022de:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	3301      	adds	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e7eb      	b.n	80022c0 <_ZN14CanSendManager23encode_frame_big_endianEh+0x22>
		}
		for( uint8_t i = 0 ; i < data_length  ;i++) canMsgTx.data[i] = encoded_data[i];
 80022e8:	2300      	movs	r3, #0
 80022ea:	73bb      	strb	r3, [r7, #14]
 80022ec:	7bba      	ldrb	r2, [r7, #14]
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	da0d      	bge.n	8002310 <_ZN14CanSendManager23encode_frame_big_endianEh+0x72>
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	7bba      	ldrb	r2, [r7, #14]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	440a      	add	r2, r1
 80022fc:	7811      	ldrb	r1, [r2, #0]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	460a      	mov	r2, r1
 8002304:	f883 2020 	strb.w	r2, [r3, #32]
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	3301      	adds	r3, #1
 800230c:	73bb      	strb	r3, [r7, #14]
 800230e:	e7ed      	b.n	80022ec <_ZN14CanSendManager23encode_frame_big_endianEh+0x4e>
	 }
	 delete[] encoded_data;
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <_ZN14CanSendManager23encode_frame_big_endianEh+0x7e>
 8002316:	68b8      	ldr	r0, [r7, #8]
 8002318:	f003 fd01 	bl	8005d1e <_ZdaPv>
	 //free(encoded_data);

}
 800231c:	bf00      	nop
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>:


void CanSendManager::process(float maxvalue, float value,SEND_MODE mode){
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	70fb      	strb	r3, [r7, #3]
	uint8_t sign = getSign(value) ;
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ff7a 	bl	800222e <_ZN14CanSendManager7getSignEf>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]
	if (sign == NEGATIVE_SIGN){ value *= -1; } //Change sign to positive after check
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <_ZN14CanSendManager7processEffNS_9SEND_MODEE+0x28>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800234a:	607b      	str	r3, [r7, #4]
	uint16_t convertedData = convertFloatToUint16t(value);
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff81 	bl	8002256 <_ZN14CanSendManager21convertFloatToUint16tEf>
 8002354:	4603      	mov	r3, r0
 8002356:	82bb      	strh	r3, [r7, #20]
	//uint8_t * frameData = convertToFrame(sign, convertedData);
	canMsgTx.data[0] = (uint8_t)(sign >> 8);
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	121b      	asrs	r3, r3, #8
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f883 2020 	strb.w	r2, [r3, #32]
	canMsgTx.data[1] = (uint8_t) sign;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	7dfa      	ldrb	r2, [r7, #23]
 8002368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	canMsgTx.data[2] = (uint8_t)(convertedData >> 8 );
 800236c:	8abb      	ldrh	r3, [r7, #20]
 800236e:	121b      	asrs	r3, r3, #8
 8002370:	b2da      	uxtb	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	canMsgTx.data[3] = (uint8_t) (convertedData);
 8002378:	8abb      	ldrh	r3, [r7, #20]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	encode_frame_big_endian(STEERING_FRAME_LENGTH);
 8002382:	2104      	movs	r1, #4
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff ff8a 	bl	800229e <_ZN14CanSendManager23encode_frame_big_endianEh>
	sendMsg(mode);
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	4619      	mov	r1, r3
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff ff23 	bl	80021da <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>
}
 8002394:	bf00      	nop
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN14CanSendManager11setVelocityEff>:

void CanSendManager::setVelocity(float maxVel,float vel){
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	process(maxVel, vel, VELOCITY);
 80023a8:	2301      	movs	r3, #1
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f7ff ffb8 	bl	8002324 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN14CanSendManager7setTurnEff>:

void CanSendManager::setTurn(float maxAngle, float angle){
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	process(maxAngle, angle, TURN);
 80023c8:	2300      	movs	r3, #0
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f7ff ffa8 	bl	8002324 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>:
void CanSendManager::setStatus(ModeManager::RC_MODE RCmode, ModeManager::DRIVE_MODE drive_mode){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	70fb      	strb	r3, [r7, #3]
 80023e8:	4613      	mov	r3, r2
 80023ea:	70bb      	strb	r3, [r7, #2]
	uint8_t RCstatus, driveStatus;
	if 		(RCmode == ModeManager::DISARMED)  		 RCstatus =  JOYSTICK_MODE_MSG;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x1c>
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e010      	b.n	800241a <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_ACRO) 		 RCstatus =  ACRO_MODE_MSG;
 80023f8:	78fb      	ldrb	r3, [r7, #3]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d102      	bne.n	8002404 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x28>
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e00a      	b.n	800241a <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_SEMI) 		 RCstatus =  SEMI_MODE_MSG;
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d102      	bne.n	8002410 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x34>
 800240a:	2302      	movs	r3, #2
 800240c:	73fb      	strb	r3, [r7, #15]
 800240e:	e004      	b.n	800241a <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_AUTONOMOUS) RCstatus =  AUTONOMOUS_MODE_MSG;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d101      	bne.n	800241a <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
 8002416:	2303      	movs	r3, #3
 8002418:	73fb      	strb	r3, [r7, #15]

	if 		(drive_mode == ModeManager::ENABLE)  	 driveStatus =  ENABLE_DRIVE_MSG;
 800241a:	78bb      	ldrb	r3, [r7, #2]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d102      	bne.n	8002426 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x4a>
 8002420:	2301      	movs	r3, #1
 8002422:	73bb      	strb	r3, [r7, #14]
 8002424:	e004      	b.n	8002430 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
	else if (drive_mode == ModeManager::DISABLE)     driveStatus =  DISABLE_DRIVE_MSG;
 8002426:	78bb      	ldrb	r3, [r7, #2]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
 800242c:	2300      	movs	r3, #0
 800242e:	73bb      	strb	r3, [r7, #14]

	canMsgTx.data[0] = 0;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2020 	strb.w	r2, [r3, #32]
	canMsgTx.data[1] = RCstatus;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7bfa      	ldrb	r2, [r7, #15]
 800243c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	canMsgTx.data[2] = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	canMsgTx.data[3] = driveStatus;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7bba      	ldrb	r2, [r7, #14]
 800244c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
//	uint8_t data_to_encode[]={
//			(uint8_t) NULL,
//			(uint8_t) RCstatus,
//			(uint8_t) NULL,
//			(uint8_t) driveStatus };
	encode_frame_big_endian(STEERING_FRAME_LENGTH);
 8002450:	2104      	movs	r1, #4
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ff23 	bl	800229e <_ZN14CanSendManager23encode_frame_big_endianEh>
	sendMsg(STATUS);
 8002458:	2102      	movs	r1, #2
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff febd 	bl	80021da <_ZN14CanSendManager7sendMsgENS_9SEND_MODEE>

}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN14CanSendManager12hal_can_sendEmm>:

void CanSendManager::hal_can_send(uint32_t frame_id, uint32_t dlc){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]

		canMsgTx.header.DLC = (uint32_t)dlc;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	615a      	str	r2, [r3, #20]
		canMsgTx.header.StdId = (uint32_t)frame_id;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	605a      	str	r2, [r3, #4]
		HAL_CAN_AddTxMessage(&hcan, &(canMsgTx.header),canMsgTx.data,&(canMsgTx.mailbox));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1d19      	adds	r1, r3, #4
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f103 0220 	add.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	331c      	adds	r3, #28
 800248e:	4803      	ldr	r0, [pc, #12]	; (800249c <_ZN14CanSendManager12hal_can_sendEmm+0x34>)
 8002490:	f002 f934 	bl	80046fc <HAL_CAN_AddTxMessage>


}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200001c4 	.word	0x200001c4

080024a0 <_ZN14CanSendManagerC1Ev>:
CanSendManager::CanSendManager() {
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <_ZN14CanSendManagerC1Ev+0x1c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	080084bc 	.word	0x080084bc

080024c0 <_ZN14CanSendManagerD1Ev>:

CanSendManager::~CanSendManager() {
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	4a04      	ldr	r2, [pc, #16]	; (80024dc <_ZN14CanSendManagerD1Ev+0x1c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	080084bc 	.word	0x080084bc

080024e0 <_ZN14CanSendManagerD0Ev>:
CanSendManager::~CanSendManager() {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
}
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe9 	bl	80024c0 <_ZN14CanSendManagerD1Ev>
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f003 fc13 	bl	8005d1a <_ZdlPv>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <_Z41__static_initialization_and_destruction_0ii>:
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10c      	bne.n	800252a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002516:	4293      	cmp	r3, r2
 8002518:	d107      	bne.n	800252a <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanSendManager canSendManager;
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800251c:	f7ff ffc0 	bl	80024a0 <_ZN14CanSendManagerC1Ev>
 8002520:	4a05      	ldr	r2, [pc, #20]	; (8002538 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002522:	4906      	ldr	r1, [pc, #24]	; (800253c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002526:	f003 fbfc 	bl	8005d22 <__aeabi_atexit>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200000a4 	.word	0x200000a4
 8002538:	20000000 	.word	0x20000000
 800253c:	080024c1 	.word	0x080024c1

08002540 <_GLOBAL__sub_I_canSendManager>:
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
 8002544:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffd9 	bl	8002500 <_Z41__static_initialization_and_destruction_0ii>
 800254e:	bd80      	pop	{r7, pc}

08002550 <_ZN6FilterC1Ev>:
class Filter {

public:
	virtual float apply(float input) = 0;

	Filter(){};
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <_ZN6FilterC1Ev+0x1c>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	08008644 	.word	0x08008644

08002570 <_ZN6FilterD1Ev>:
	virtual ~Filter(){};
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <_ZN6FilterD1Ev+0x1c>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	08008644 	.word	0x08008644

08002590 <_ZN6FilterD0Ev>:
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ffe9 	bl	8002570 <_ZN6FilterD1Ev>
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f003 fbbb 	bl	8005d1a <_ZdlPv>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <_ZN10NullFilterD1Ev>:
public:
	float apply(float input);
	void init(void);

	NullFilter(){};
	virtual ~NullFilter(){};
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_ZN10NullFilterD1Ev+0x20>)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ffd5 	bl	8002570 <_ZN6FilterD1Ev>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	080084e8 	.word	0x080084e8

080025d4 <_ZN10NullFilterD0Ev>:
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ffe7 	bl	80025b0 <_ZN10NullFilterD1Ev>
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f003 fb99 	bl	8005d1a <_ZdlPv>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <_ZN9PT1Filter5applyEf>:
 */

#include <Filters.h>

/* PT1 */
float PT1Filter::apply(float input) {
 80025f2:	b5b0      	push	{r4, r5, r7, lr}
 80025f4:	b082      	sub	sp, #8
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	6039      	str	r1, [r7, #0]
    state += k * (input - state);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685c      	ldr	r4, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689d      	ldr	r5, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4619      	mov	r1, r3
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f7fe fa78 	bl	8000b00 <__aeabi_fsub>
 8002610:	4603      	mov	r3, r0
 8002612:	4619      	mov	r1, r3
 8002614:	4628      	mov	r0, r5
 8002616:	f7fe fb7d 	bl	8000d14 <__aeabi_fmul>
 800261a:	4603      	mov	r3, r0
 800261c:	4619      	mov	r1, r3
 800261e:	4620      	mov	r0, r4
 8002620:	f7fe fa70 	bl	8000b04 <__addsf3>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	605a      	str	r2, [r3, #4]
    return state;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bdb0      	pop	{r4, r5, r7, pc}

08002638 <_ZN9PT1FilterD1Ev>:
PT1Filter::PT1Filter(uint8_t f_cut, float dT){
    float RC = 1.0f / ( 2.0f * M_PI_FLOAT * f_cut );
    k = dT / (RC + dT);
    state = 0;
}
PT1Filter::~PT1Filter() {
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	4a05      	ldr	r2, [pc, #20]	; (8002658 <_ZN9PT1FilterD1Ev+0x20>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff91 	bl	8002570 <_ZN6FilterD1Ev>
}
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	08008524 	.word	0x08008524

0800265c <_ZN9PT1FilterD0Ev>:
PT1Filter::~PT1Filter() {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
}
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffe7 	bl	8002638 <_ZN9PT1FilterD1Ev>
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f003 fb55 	bl	8005d1a <_ZdlPv>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_ZN12BiquadFilter5applyEf>:

/* Biquad */
float BiquadFilter::apply(float input) {
 800267a:	b590      	push	{r4, r7, lr}
 800267c:	b085      	sub	sp, #20
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	6039      	str	r1, [r7, #0]
    float result = b0 * input + x1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe fb42 	bl	8000d14 <__aeabi_fmul>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7fe fa32 	bl	8000b04 <__addsf3>
 80026a0:	4603      	mov	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
    x1 = b1 * input - a1 * result + x2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fb32 	bl	8000d14 <__aeabi_fmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	461c      	mov	r4, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fb2a 	bl	8000d14 <__aeabi_fmul>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	4620      	mov	r0, r4
 80026c6:	f7fe fa1b 	bl	8000b00 <__aeabi_fsub>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7fe fa15 	bl	8000b04 <__addsf3>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	621a      	str	r2, [r3, #32]
    x2 = b2 * input - a2 * result;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	6839      	ldr	r1, [r7, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fb13 	bl	8000d14 <__aeabi_fmul>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461c      	mov	r4, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe fb0b 	bl	8000d14 <__aeabi_fmul>
 80026fe:	4603      	mov	r3, r0
 8002700:	4619      	mov	r1, r3
 8002702:	4620      	mov	r0, r4
 8002704:	f7fe f9fc 	bl	8000b00 <__aeabi_fsub>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    return result;
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
	...

0800271c <_ZN12BiquadFilterC1E18biquadFilterType_efff>:
BiquadFilter::BiquadFilter( biquadFilterType_e type, float dT, float filterFreq,  float cutoff) {
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b08d      	sub	sp, #52	; 0x34
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	460b      	mov	r3, r1
 800272a:	72fb      	strb	r3, [r7, #11]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff0e 	bl	8002550 <_ZN6FilterC1Ev>
 8002734:	4a74      	ldr	r2, [pc, #464]	; (8002908 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1ec>)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4a73      	ldr	r2, [pc, #460]	; (800290c <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f0>)
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a73      	ldr	r2, [pc, #460]	; (8002910 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f4>)
 8002744:	609a      	str	r2, [r3, #8]

	const float omega = 2.0f * M_PI_FLOAT * filterFreq * dT;
 8002746:	4973      	ldr	r1, [pc, #460]	; (8002914 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1f8>)
 8002748:	6838      	ldr	r0, [r7, #0]
 800274a:	f7fe fae3 	bl	8000d14 <__aeabi_fmul>
 800274e:	4603      	mov	r3, r0
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fade 	bl	8000d14 <__aeabi_fmul>
 8002758:	4603      	mov	r3, r0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
	const float sn = sin_approx(omega);
 800275c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800275e:	f003 ffc7 	bl	80066f0 <sinf>
 8002762:	4603      	mov	r3, r0
 8002764:	623b      	str	r3, [r7, #32]
	const float cs = cos_approx(omega);
 8002766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002768:	f003 ff84 	bl	8006674 <cosf>
 800276c:	4603      	mov	r3, r0
 800276e:	61fb      	str	r3, [r7, #28]
	float Q;
	if (type == FILTER_NOTCH) {
 8002770:	7afb      	ldrb	r3, [r7, #11]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d12b      	bne.n	80027ce <_ZN12BiquadFilterC1E18biquadFilterType_efff+0xb2>
		float octaves = log2f((float) filterFreq / (float) cutoff) * 2;
 8002776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002778:	6838      	ldr	r0, [r7, #0]
 800277a:	f7fe fb7f 	bl	8000e7c <__aeabi_fdiv>
 800277e:	4603      	mov	r3, r0
 8002780:	4618      	mov	r0, r3
 8002782:	f003 ffab 	bl	80066dc <log2f>
 8002786:	4603      	mov	r3, r0
 8002788:	4619      	mov	r1, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe f9ba 	bl	8000b04 <__addsf3>
 8002790:	4603      	mov	r3, r0
 8002792:	61bb      	str	r3, [r7, #24]
		Q = sqrtf(powf(2, octaves)) / (powf(2, octaves) - 1);
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800279a:	f004 f851 	bl	8006840 <powf>
 800279e:	4603      	mov	r3, r0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 f9b9 	bl	8006b18 <sqrtf>
 80027a6:	4604      	mov	r4, r0
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80027ae:	f004 f847 	bl	8006840 <powf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe f9a1 	bl	8000b00 <__aeabi_fsub>
 80027be:	4603      	mov	r3, r0
 80027c0:	4619      	mov	r1, r3
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7fe fb5a 	bl	8000e7c <__aeabi_fdiv>
 80027c8:	4603      	mov	r3, r0
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027cc:	e002      	b.n	80027d4 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0xb8>
	} else
		Q = BIQUAD_Q;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	const float alpha = sn / (2.0f * Q);
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	4619      	mov	r1, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fe f993 	bl	8000b04 <__addsf3>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	6a38      	ldr	r0, [r7, #32]
 80027e4:	f7fe fb4a 	bl	8000e7c <__aeabi_fdiv>
 80027e8:	4603      	mov	r3, r0
 80027ea:	617b      	str	r3, [r7, #20]

	float a0 = 0;
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
	b0 = 0; b1 = 0; b2 = 0; a0 = 0; a1 = 0; a2 = 0;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	615a      	str	r2, [r3, #20]
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	61da      	str	r2, [r3, #28]

	switch (type) {
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d045      	beq.n	80028b2 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x196>
 8002826:	2b02      	cmp	r3, #2
 8002828:	d076      	beq.n	8002918 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x1fc>
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 809a 	bne.w	8002964 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
	case FILTER_LPF:
		b0 = (1 - cs) * 0.5f;
 8002830:	69f9      	ldr	r1, [r7, #28]
 8002832:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002836:	f7fe f963 	bl	8000b00 <__aeabi_fsub>
 800283a:	4603      	mov	r3, r0
 800283c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe fa67 	bl	8000d14 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	60da      	str	r2, [r3, #12]
		b1 = 1 - cs;
 800284e:	69f9      	ldr	r1, [r7, #28]
 8002850:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002854:	f7fe f954 	bl	8000b00 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	611a      	str	r2, [r3, #16]
		b2 = (1 - cs) * 0.5f;
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002866:	f7fe f94b 	bl	8000b00 <__aeabi_fsub>
 800286a:	4603      	mov	r3, r0
 800286c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fa4f 	bl	8000d14 <__aeabi_fmul>
 8002876:	4603      	mov	r3, r0
 8002878:	461a      	mov	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 800287e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7fe f93e 	bl	8000b04 <__addsf3>
 8002888:	4603      	mov	r3, r0
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 800288c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002890:	69f8      	ldr	r0, [r7, #28]
 8002892:	f7fe fa3f 	bl	8000d14 <__aeabi_fmul>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 800289e:	6979      	ldr	r1, [r7, #20]
 80028a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80028a4:	f7fe f92c 	bl	8000b00 <__aeabi_fsub>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	61da      	str	r2, [r3, #28]
		break;
 80028b0:	e058      	b.n	8002964 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
	case FILTER_NOTCH:
		b0 =  1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028b8:	60da      	str	r2, [r3, #12]
		b1 = -2 * cs;
 80028ba:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80028be:	69f8      	ldr	r0, [r7, #28]
 80028c0:	f7fe fa28 	bl	8000d14 <__aeabi_fmul>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	611a      	str	r2, [r3, #16]
		b2 = 1;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028d2:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 80028d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80028d8:	6978      	ldr	r0, [r7, #20]
 80028da:	f7fe f913 	bl	8000b04 <__addsf3>
 80028de:	4603      	mov	r3, r0
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 80028e2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80028e6:	69f8      	ldr	r0, [r7, #28]
 80028e8:	f7fe fa14 	bl	8000d14 <__aeabi_fmul>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 80028f4:	6979      	ldr	r1, [r7, #20]
 80028f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80028fa:	f7fe f901 	bl	8000b00 <__aeabi_fsub>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	61da      	str	r2, [r3, #28]
		break;
 8002906:	e02d      	b.n	8002964 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x248>
 8002908:	08008510 	.word	0x08008510
 800290c:	3ff33333 	.word	0x3ff33333
 8002910:	3f3504f3 	.word	0x3f3504f3
 8002914:	40c90fdb 	.word	0x40c90fdb
	case FILTER_BPF:
		b0 = alpha;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	60da      	str	r2, [r3, #12]
		b1 = 0;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
		b2 = -alpha;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	615a      	str	r2, [r3, #20]
		a0 = 1 + alpha;
 8002930:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002934:	6978      	ldr	r0, [r7, #20]
 8002936:	f7fe f8e5 	bl	8000b04 <__addsf3>
 800293a:	4603      	mov	r3, r0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
		a1 = -2 * cs;
 800293e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002942:	69f8      	ldr	r0, [r7, #28]
 8002944:	f7fe f9e6 	bl	8000d14 <__aeabi_fmul>
 8002948:	4603      	mov	r3, r0
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	619a      	str	r2, [r3, #24]
		a2 = 1 - alpha;
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002956:	f7fe f8d3 	bl	8000b00 <__aeabi_fsub>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	61da      	str	r2, [r3, #28]
		break;
 8002962:	bf00      	nop
	}

	// precompute the coefficients
	b0 = b0 / a0;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe fa86 	bl	8000e7c <__aeabi_fdiv>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	60da      	str	r2, [r3, #12]
	b1 = b1 / a0;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fa7c 	bl	8000e7c <__aeabi_fdiv>
 8002984:	4603      	mov	r3, r0
 8002986:	461a      	mov	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	611a      	str	r2, [r3, #16]
	b2 = b2 / a0;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fa72 	bl	8000e7c <__aeabi_fdiv>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	615a      	str	r2, [r3, #20]
	a1 = a1 / a0;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fa68 	bl	8000e7c <__aeabi_fdiv>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	619a      	str	r2, [r3, #24]
	a2 = a2 / a0;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fe fa5e 	bl	8000e7c <__aeabi_fdiv>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	61da      	str	r2, [r3, #28]

	// zero initial samples
	x1 = x2 = 0;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	621a      	str	r2, [r3, #32]
	y1 = y2 = 0;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	62da      	str	r2, [r3, #44]	; 0x2c
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	e005      	b.n	80029f8 <_ZN12BiquadFilterC1E18biquadFilterType_efff+0x2dc>
BiquadFilter::BiquadFilter( biquadFilterType_e type, float dT, float filterFreq,  float cutoff) {
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fdbe 	bl	8002570 <_ZN6FilterD1Ev>
 80029f4:	f003 f9d4 	bl	8005da0 <__cxa_end_cleanup>
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3734      	adds	r7, #52	; 0x34
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <_ZN12BiquadFilterD1Ev>:
BiquadFilter::~BiquadFilter() {}
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	4a05      	ldr	r2, [pc, #20]	; (8002a20 <_ZN12BiquadFilterD1Ev+0x20>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fdad 	bl	8002570 <_ZN6FilterD1Ev>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	08008510 	.word	0x08008510

08002a24 <_ZN12BiquadFilterD0Ev>:
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ffe7 	bl	8002a00 <_ZN12BiquadFilterD1Ev>
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f003 f971 	bl	8005d1a <_ZdlPv>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZN12KalmanFilter5applyEf>:

/* Kalman */
float KalmanFilter::apply(float input){
 8002a42:	b5b0      	push	{r4, r5, r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]

	//project the state ahead using acceleration
	x += (x - lastX);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695c      	ldr	r4, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe f850 	bl	8000b00 <__aeabi_fsub>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4619      	mov	r1, r3
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7fe f84d 	bl	8000b04 <__addsf3>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	615a      	str	r2, [r3, #20]

	//update last state
	lastX = x;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	619a      	str	r2, [r3, #24]

	//prediction update
	p += q;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7fe f83d 	bl	8000b04 <__addsf3>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60da      	str	r2, [r3, #12]

	//measurement update
	k = p / (p + r);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68dc      	ldr	r4, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	f7fe f82f 	bl	8000b04 <__addsf3>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f9e6 	bl	8000e7c <__aeabi_fdiv>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
	x += k * (input - x);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695c      	ldr	r4, [r3, #20]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691d      	ldr	r5, [r3, #16]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f7fe f81a 	bl	8000b00 <__aeabi_fsub>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f7fe f91f 	bl	8000d14 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4620      	mov	r0, r4
 8002adc:	f7fe f812 	bl	8000b04 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	615a      	str	r2, [r3, #20]
	p = (1.f - k) * p;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	4619      	mov	r1, r3
 8002aee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002af2:	f7fe f805 	bl	8000b00 <__aeabi_fsub>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4610      	mov	r0, r2
 8002b02:	f7fe f907 	bl	8000d14 <__aeabi_fmul>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]

	return x;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b1c <_ZN12KalmanFilterD1Ev>:
	p     = ppar * 0.001f;		//add multiplier to make tuning easier
	x     = intialValue;		//set intial value, can be zero if unknown
	lastX = intialValue;		//set intial value, can be zero if unknown
	k = 0.0f;					//kalman gain,
}
KalmanFilter::~KalmanFilter(){}
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_ZN12KalmanFilterD1Ev+0x20>)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fd1f 	bl	8002570 <_ZN6FilterD1Ev>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	080084fc 	.word	0x080084fc

08002b40 <_ZN12KalmanFilterD0Ev>:
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ffe7 	bl	8002b1c <_ZN12KalmanFilterD1Ev>
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f003 f8e3 	bl	8005d1a <_ZdlPv>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZN10NullFilter5applyEf>:

/* NullFilter */
float NullFilter::apply(float input){
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
    return input;
 8002b68:	683b      	ldr	r3, [r7, #0]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <_ZN6Futaba15sbusDataReceiveEh>:

#define SBUS_DIGITAL_CHANNEL_MIN 173
#define SBUS_DIGITAL_CHANNEL_MAX 1812

Futaba futaba;
void Futaba::sbusDataReceive(uint8_t c){
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]

	const uint32_t nowUs = tools.GetMicros();
 8002b80:	4826      	ldr	r0, [pc, #152]	; (8002c1c <_ZN6Futaba15sbusDataReceiveEh+0xa8>)
 8002b82:	f001 f89b 	bl	8003cbc <_ZN5Tools9GetMicrosEv>
 8002b86:	4603      	mov	r3, r0
 8002b88:	60fb      	str	r3, [r7, #12]
	const int32_t sbusFrameTime = abs(nowUs - startAtUs);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fd67 	bl	8003666 <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	460c      	mov	r4, r1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	f7fd ff32 	bl	8000a08 <__aeabi_d2iz>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]

	if (sbusFrameTime > (long) (SBUS_TIME_NEEDED_PER_FRAME + 500)) {
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	dd03      	ble.n	8002bba <_ZN6Futaba15sbusDataReceiveEh+0x46>
		position = 0;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if (position == 0) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <_ZN6Futaba15sbusDataReceiveEh+0x5c>
		if (c != SBUS_FRAME_BEGIN_BYTE) {
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	d123      	bne.n	8002c12 <_ZN6Futaba15sbusDataReceiveEh+0x9e>
			return;
		}
		startAtUs = nowUs;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (position < SBUS_FRAME_SIZE) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002bd6:	2b18      	cmp	r3, #24
 8002bd8:	d81c      	bhi.n	8002c14 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		frame.bytes[position++] = (uint8_t) c;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	b2d1      	uxtb	r1, r2
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8002bea:	461a      	mov	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	731a      	strb	r2, [r3, #12]
		if (position < SBUS_FRAME_SIZE) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002bfa:	2b18      	cmp	r3, #24
 8002bfc:	d804      	bhi.n	8002c08 <_ZN6Futaba15sbusDataReceiveEh+0x94>
			done = 0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002c06:	e005      	b.n	8002c14 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		} else {
			done = 1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002c10:	e000      	b.n	8002c14 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
			return;
 8002c12:	bf00      	nop
		}
	}
}
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200001a0 	.word	0x200001a0

08002c20 <_ZN6Futaba15sbusFrameStatusEv>:
uint8_t Futaba::sbusFrameStatus(void){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

	    if (!done) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <_ZN6Futaba15sbusFrameStatusEv+0x16>
	        return RX_FRAME_PENDING;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e023      	b.n	8002c7e <_ZN6Futaba15sbusFrameStatusEv+0x5e>
	    }
	    done = 0;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	    if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <_ZN6Futaba15sbusFrameStatusEv+0x3a>
	        stateFlags |= SBUS_STATE_SIGNALLOSS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c50:	f043 0302 	orr.w	r3, r3, #2
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }
	    if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002c60:	f003 0308 	and.w	r3, r3, #8
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <_ZN6Futaba15sbusFrameStatusEv+0x56>
	        stateFlags |= SBUS_STATE_FAILSAFE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }

	    return sbusChannelsDecode();
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f805 	bl	8002c86 <_ZN6Futaba18sbusChannelsDecodeEv>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_ZN6Futaba18sbusChannelsDecodeEv>:
uint8_t Futaba::sbusChannelsDecode(void) {
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
	sbusChannelData[0] = frame.frame.channels.chan0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbusChannelData[1] = frame.frame.channels.chan1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	89db      	ldrh	r3, [r3, #14]
 8002ca4:	f3c3 03ca 	ubfx	r3, r3, #3, #11
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbusChannelData[2] = frame.frame.channels.chan2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7bda      	ldrb	r2, [r3, #15]
 8002cb6:	0992      	lsrs	r2, r2, #6
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	8a1b      	ldrh	r3, [r3, #16]
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbusChannelData[3] = frame.frame.channels.chan3;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbusChannelData[4] = frame.frame.channels.chan4;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8a5b      	ldrh	r3, [r3, #18]
 8002ce4:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	sbusChannelData[5] = frame.frame.channels.chan5;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7cda      	ldrb	r2, [r3, #19]
 8002cf6:	09d2      	lsrs	r2, r2, #7
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	8a9b      	ldrh	r3, [r3, #20]
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	sbusChannelData[6] = frame.frame.channels.chan6;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	sbusChannelData[7] = frame.frame.channels.chan7;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8adb      	ldrh	r3, [r3, #22]
 8002d24:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	sbusChannelData[8] = frame.frame.channels.chan8;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8b1b      	ldrh	r3, [r3, #24]
 8002d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sbusChannelData[9] = frame.frame.channels.chan9;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f3c3 23ca 	ubfx	r3, r3, #11, #11
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	sbusChannelData[10] = frame.frame.channels.chan10;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	8b5a      	ldrh	r2, [r3, #26]
 8002d5a:	0992      	lsrs	r2, r2, #6
 8002d5c:	b292      	uxth	r2, r2
 8002d5e:	7f1b      	ldrb	r3, [r3, #28]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	029b      	lsls	r3, r3, #10
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	sbusChannelData[11] = frame.frame.channels.chan11;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8b9b      	ldrh	r3, [r3, #28]
 8002d76:	f3c3 034a 	ubfx	r3, r3, #1, #11
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	sbusChannelData[12] = frame.frame.channels.chan12;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f3c3 330a 	ubfx	r3, r3, #12, #11
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	sbusChannelData[13] = frame.frame.channels.chan13;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8bda      	ldrh	r2, [r3, #30]
 8002d9a:	09d2      	lsrs	r2, r2, #7
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	sbusChannelData[14] = frame.frame.channels.chan14;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8c1b      	ldrh	r3, [r3, #32]
 8002db8:	f3c3 038a 	ubfx	r3, r3, #2, #11
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	sbusChannelData[15] = frame.frame.channels.chan15;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	f3c3 334a 	ubfx	r3, r3, #13, #11
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_17) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d005      	beq.n	8002df2 <_ZN6Futaba18sbusChannelsDecodeEv+0x16c>
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MAX;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f240 7214 	movw	r2, #1812	; 0x714
 8002dec:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8002df0:	e003      	b.n	8002dfa <_ZN6Futaba18sbusChannelsDecodeEv+0x174>
	} else {
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MIN;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	22ad      	movs	r2, #173	; 0xad
 8002df6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	}

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_18) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <_ZN6Futaba18sbusChannelsDecodeEv+0x18e>
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MAX;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f240 7214 	movw	r2, #1812	; 0x714
 8002e0e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8002e12:	e003      	b.n	8002e1c <_ZN6Futaba18sbusChannelsDecodeEv+0x196>
	} else {
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MIN;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	22ad      	movs	r2, #173	; 0xad
 8002e18:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}

	if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <_ZN6Futaba18sbusChannelsDecodeEv+0x1a8>
		// internal failsafe enabled and rx failsafe flag set
		// RX *should* still be sending valid channel data (repeated), so use it.
		return RX_FRAME_COMPLETE | RX_FRAME_FAILSAFE;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e009      	b.n	8002e42 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <_ZN6Futaba18sbusChannelsDecodeEv+0x1ba>
		// The received data is a repeat of the last valid data so can be considered complete.
		return RX_FRAME_COMPLETE | RX_FRAME_DROPPED;
 8002e3c:	2309      	movs	r3, #9
 8002e3e:	e000      	b.n	8002e42 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	return RX_FRAME_COMPLETE;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <_ZN6Futaba16sbusChannelsInitEv>:
    // http://www.wolframalpha.com/input/?i=linear+fit+%7B173%2C+988%7D%2C+%7B1812%2C+2012%7D%2C+%7B993%2C+1500%7D
    return (5 * sbusChannelData[chan] / 8) + 880;
}

void Futaba::sbusChannelsInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b11      	cmp	r3, #17
 8002e5c:	dc1d      	bgt.n	8002e9a <_ZN6Futaba16sbusChannelsInitEv+0x4e>
    	sbusChannelData[b] = (16 * midrc) / 10 - 1408;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4a23      	ldr	r2, [pc, #140]	; (8002ef4 <_ZN6Futaba16sbusChannelsInitEv+0xa8>)
 8002e66:	fb82 1203 	smull	r1, r2, r2, r3
 8002e6a:	1092      	asrs	r2, r2, #2
 8002e6c:	17db      	asrs	r3, r3, #31
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 8002e76:	b299      	uxth	r1, r3
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	3324      	adds	r3, #36	; 0x24
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	460a      	mov	r2, r1
 8002e84:	809a      	strh	r2, [r3, #4]
    	Stick_Command[b] = 0;
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3396      	adds	r3, #150	; 0x96
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	3301      	adds	r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	e7de      	b.n	8002e58 <_ZN6Futaba16sbusChannelsInitEv+0xc>
    }
	StickDeflection[ROLL] = 0.f;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = 0.f;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = 0.f;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = 0.f;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f04f 0200 	mov.w	r2, #0
 8002eb8:	67da      	str	r2, [r3, #124]	; 0x7c

	SwitchA = SWITCH_UP;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	SwitchB = SWITCH_UP;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	SwitchC = SWITCH_UP;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	SwitchD = SWITCH_UP;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	SwitchE = SWITCH_UP;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SwitchF = SWITCH_UP;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	66666667 	.word	0x66666667

08002ef8 <_ZN6Futaba4InitEv>:
void Futaba::Init(void) {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	MX_USART2_UART_Init();
 8002f00:	f001 fa26 	bl	8004350 <MX_USART2_UART_Init>
	tools.Init();
 8002f04:	4808      	ldr	r0, [pc, #32]	; (8002f28 <_ZN6Futaba4InitEv+0x30>)
 8002f06:	f000 fee5 	bl	8003cd4 <_ZN5Tools4InitEv>
	sbusChannelsInit();
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ff9e 	bl	8002e4c <_ZN6Futaba16sbusChannelsInitEv>
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	2201      	movs	r2, #1
 8002f16:	4619      	mov	r1, r3
 8002f18:	4804      	ldr	r0, [pc, #16]	; (8002f2c <_ZN6Futaba4InitEv+0x34>)
 8002f1a:	f002 fd49 	bl	80059b0 <HAL_UART_Receive_IT>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200001a0 	.word	0x200001a0
 8002f2c:	200002a4 	.word	0x200002a4

08002f30 <_ZN6Futaba11Get_RCStateEv>:
uint16_t Futaba::Get_RCState(void) {
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	return RCState;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f3e:	b29b      	uxth	r3, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr
	...

08002f4c <_ZN6Futaba7ProcessEv>:
void Futaba::Process(void) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	static uint8_t even_once = 1;
//	osEvent evt = osSignalWait(RxSignal, 1000);
//	if (evt.status == osEventSignal) { //ODPALANE CO OKRESLONY CZAS
//		even_once = 0;
	sbusDataReceive(RxBuffer[0]);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff fe0a 	bl	8002b74 <_ZN6Futaba15sbusDataReceiveEh>
	frameStatus = sbusFrameStatus();
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fe5d 	bl	8002c20 <_ZN6Futaba15sbusFrameStatusEv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (frameStatus & RX_FRAME_COMPLETE) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d025      	beq.n	8002fca <_ZN6Futaba7ProcessEv+0x7e>
		if (frameStatus & RX_FRAME_FAILSAFE) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d007      	beq.n	8002f9c <_ZN6Futaba7ProcessEv+0x50>
			RCState = 1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			sbusChannelsInit();
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff59 	bl	8002e4c <_ZN6Futaba16sbusChannelsInitEv>
 8002f9a:	e016      	b.n	8002fca <_ZN6Futaba7ProcessEv+0x7e>
		} else if (frameStatus & RX_FRAME_DROPPED) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <_ZN6Futaba7ProcessEv+0x6a>
			frames_dropped++;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
 8002fb4:	e009      	b.n	8002fca <_ZN6Futaba7ProcessEv+0x7e>
//				RCState = 2;
//				sbusChannelsInit();
		} else {
			Conversions();
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f872 	bl	80030a0 <_ZN6Futaba11ConversionsEv>
			RCCommands();
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f967 	bl	8003290 <_ZN6Futaba10RCCommandsEv>
			RCState = 0;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
	}
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2201      	movs	r2, #1
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <_ZN6Futaba7ProcessEv+0xbc>)
 8002fd4:	f002 fcec 	bl	80059b0 <HAL_UART_Receive_IT>
//	}
//	else if(even_once){
	if(even_once){
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <_ZN6Futaba7ProcessEv+0xc0>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00f      	beq.n	8003000 <_ZN6Futaba7ProcessEv+0xb4>
		// FAILSAFE!
		even_once = 0;
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <_ZN6Futaba7ProcessEv+0xc0>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
		RCState = 3;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		sbusChannelsInit();
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ff2c 	bl	8002e4c <_ZN6Futaba16sbusChannelsInitEv>
		HAL_UART_DeInit(&huart2);
 8002ff4:	4804      	ldr	r0, [pc, #16]	; (8003008 <_ZN6Futaba7ProcessEv+0xbc>)
 8002ff6:	f002 fcc3 	bl	8005980 <HAL_UART_DeInit>
		Init();
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff7c 	bl	8002ef8 <_ZN6Futaba4InitEv>

	}
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200002a4 	.word	0x200002a4
 800300c:	20000004 	.word	0x20000004

08003010 <_ZN6Futaba18ConfigureSmoothingEff>:
void Futaba::ConfigureSmoothing(float cutoff, float _dt) {
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
	for (uint8_t i = 0; i < 4; i++){
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b03      	cmp	r3, #3
 8003024:	dc1c      	bgt.n	8003060 <_ZN6Futaba18ConfigureSmoothingEff+0x50>
		lpf[i] = new BiquadFilter(FILTER_LPF, _dt, cutoff);
 8003026:	2030      	movs	r0, #48	; 0x30
 8003028:	f002 fea7 	bl	8005d7a <_Znwj>
 800302c:	4603      	mov	r3, r0
 800302e:	461c      	mov	r4, r3
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	2100      	movs	r1, #0
 800303c:	4620      	mov	r0, r4
 800303e:	f7ff fb6d 	bl	800271c <_ZN12BiquadFilterC1E18biquadFilterType_efff>
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	330c      	adds	r3, #12
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	605c      	str	r4, [r3, #4]
	for (uint8_t i = 0; i < 4; i++){
 800304e:	7dfb      	ldrb	r3, [r7, #23]
 8003050:	3301      	adds	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
 8003054:	e7e4      	b.n	8003020 <_ZN6Futaba18ConfigureSmoothingEff+0x10>
		lpf[i] = new BiquadFilter(FILTER_LPF, _dt, cutoff);
 8003056:	4620      	mov	r0, r4
 8003058:	f002 fe5f 	bl	8005d1a <_ZdlPv>
 800305c:	f002 fea0 	bl	8005da0 <__cxa_end_cleanup>
	}
}
 8003060:	bf00      	nop
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	bd90      	pop	{r4, r7, pc}

08003068 <_ZN6Futaba16ProcessSmoothingEv>:
void Futaba::ProcessSmoothing(void) {
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b03      	cmp	r3, #3
 8003078:	dc0d      	bgt.n	8003096 <_ZN6Futaba16ProcessSmoothingEv+0x2e>
//		SmoothDeflection[i] = lpf[i]->apply(StickDeflection[i]);//WYRZUCA HARDFAULT
		SmoothDeflection[i] = StickDeflection[i];
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	321c      	adds	r2, #28
 8003080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	3220      	adds	r2, #32
 800308a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 4; i++){
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e7ee      	b.n	8003074 <_ZN6Futaba16ProcessSmoothingEv+0xc>
	}
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <_ZN6Futaba11ConversionsEv>:
void Futaba::Conversions(void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	StickDeflection[ROLL] = (sbusChannelData[0] - RX_OFFSET_AER) / 800.f;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80030ae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd fdda 	bl	8000c6c <__aeabi_i2f>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4973      	ldr	r1, [pc, #460]	; (8003288 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fedd 	bl	8000e7c <__aeabi_fdiv>
 80030c2:	4603      	mov	r3, r0
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = (sbusChannelData[1] - RX_OFFSET_AER) / 800.f;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80030d0:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fd fdc9 	bl	8000c6c <__aeabi_i2f>
 80030da:	4603      	mov	r3, r0
 80030dc:	496a      	ldr	r1, [pc, #424]	; (8003288 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fecc 	bl	8000e7c <__aeabi_fdiv>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = (sbusChannelData[2] - RX_OFFSET_T) / 1600.f;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f2:	3bc0      	subs	r3, #192	; 0xc0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fdb9 	bl	8000c6c <__aeabi_i2f>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4963      	ldr	r1, [pc, #396]	; (800328c <_ZN6Futaba11ConversionsEv+0x1ec>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd febc 	bl	8000e7c <__aeabi_fdiv>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = (sbusChannelData[3] - RX_OFFSET_AER) / 800.f;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003112:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fda8 	bl	8000c6c <__aeabi_i2f>
 800311c:	4603      	mov	r3, r0
 800311e:	495a      	ldr	r1, [pc, #360]	; (8003288 <_ZN6Futaba11ConversionsEv+0x1e8>)
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd feab 	bl	8000e7c <__aeabi_fdiv>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	67da      	str	r2, [r3, #124]	; 0x7c

	if (sbusChannelData[AUX4] < 500) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003134:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003138:	da04      	bge.n	8003144 <_ZN6Futaba11ConversionsEv+0xa4>
		SwitchA = SWITCH_UP;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8003142:	e010      	b.n	8003166 <_ZN6Futaba11ConversionsEv+0xc6>
	} else if (sbusChannelData[AUX4] > 1500) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800314a:	461a      	mov	r2, r3
 800314c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003150:	429a      	cmp	r2, r3
 8003152:	dd04      	ble.n	800315e <_ZN6Futaba11ConversionsEv+0xbe>
		SwitchA = SWITCH_DOWN;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800315c:	e003      	b.n	8003166 <_ZN6Futaba11ConversionsEv+0xc6>
	} else {
		SwitchA = SWITCH_MIDDLE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	}
	if (sbusChannelData[AUX2] < 500) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800316c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003170:	da04      	bge.n	800317c <_ZN6Futaba11ConversionsEv+0xdc>
		SwitchB = SWITCH_UP;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800317a:	e010      	b.n	800319e <_ZN6Futaba11ConversionsEv+0xfe>
	} else if (sbusChannelData[AUX2] > 1500) {
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003182:	461a      	mov	r2, r3
 8003184:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003188:	429a      	cmp	r2, r3
 800318a:	dd04      	ble.n	8003196 <_ZN6Futaba11ConversionsEv+0xf6>
		SwitchB = SWITCH_MIDDLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8003194:	e003      	b.n	800319e <_ZN6Futaba11ConversionsEv+0xfe>
	} else {
		SwitchB = SWITCH_DOWN;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}

	if (sbusChannelData[AUX3] < 500) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031a8:	da04      	bge.n	80031b4 <_ZN6Futaba11ConversionsEv+0x114>
		SwitchC = SWITCH_UP;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80031b2:	e010      	b.n	80031d6 <_ZN6Futaba11ConversionsEv+0x136>
	} else if (sbusChannelData[AUX3] > 1500) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031ba:	461a      	mov	r2, r3
 80031bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80031c0:	429a      	cmp	r2, r3
 80031c2:	dd04      	ble.n	80031ce <_ZN6Futaba11ConversionsEv+0x12e>
		SwitchC = SWITCH_DOWN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80031cc:	e003      	b.n	80031d6 <_ZN6Futaba11ConversionsEv+0x136>
	} else {
		SwitchC = SWITCH_MIDDLE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}

	if (sbusChannelData[AUX5] < 500) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031e0:	da04      	bge.n	80031ec <_ZN6Futaba11ConversionsEv+0x14c>
		SwitchD = SWITCH_UP;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80031ea:	e010      	b.n	800320e <_ZN6Futaba11ConversionsEv+0x16e>
	} else if (sbusChannelData[AUX5] > 1500) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031f2:	461a      	mov	r2, r3
 80031f4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80031f8:	429a      	cmp	r2, r3
 80031fa:	dd04      	ble.n	8003206 <_ZN6Futaba11ConversionsEv+0x166>
		SwitchD = SWITCH_DOWN;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003204:	e003      	b.n	800320e <_ZN6Futaba11ConversionsEv+0x16e>
	} else {
		SwitchD = SWITCH_MIDDLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	}

	if (sbusChannelData[AUX1] < 500) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003214:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003218:	da04      	bge.n	8003224 <_ZN6Futaba11ConversionsEv+0x184>
		SwitchE = SWITCH_UP;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8003222:	e010      	b.n	8003246 <_ZN6Futaba11ConversionsEv+0x1a6>
	} else if (sbusChannelData[AUX1] > 1500) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800322a:	461a      	mov	r2, r3
 800322c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003230:	429a      	cmp	r2, r3
 8003232:	dd04      	ble.n	800323e <_ZN6Futaba11ConversionsEv+0x19e>
		SwitchE = SWITCH_DOWN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800323c:	e003      	b.n	8003246 <_ZN6Futaba11ConversionsEv+0x1a6>
	} else {
		SwitchE = SWITCH_MIDDLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}

	if (sbusChannelData[AUX6] < 500) {
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800324c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003250:	da04      	bge.n	800325c <_ZN6Futaba11ConversionsEv+0x1bc>
		SwitchF = SWITCH_UP;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	} else if (sbusChannelData[AUX6] > 1500) {
		SwitchF = SWITCH_MIDDLE;
	} else {
		SwitchF = SWITCH_DOWN;
	}
}
 800325a:	e010      	b.n	800327e <_ZN6Futaba11ConversionsEv+0x1de>
	} else if (sbusChannelData[AUX6] > 1500) {
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003262:	461a      	mov	r2, r3
 8003264:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003268:	429a      	cmp	r2, r3
 800326a:	dd04      	ble.n	8003276 <_ZN6Futaba11ConversionsEv+0x1d6>
		SwitchF = SWITCH_MIDDLE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8003274:	e003      	b.n	800327e <_ZN6Futaba11ConversionsEv+0x1de>
		SwitchF = SWITCH_DOWN;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	44480000 	.word	0x44480000
 800328c:	44c80000 	.word	0x44c80000

08003290 <_ZN6Futaba10RCCommandsEv>:
void Futaba::RCCommands(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	if (RCState == 0) {
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 815f 	bne.w	8003562 <_ZN6Futaba10RCCommandsEv+0x2d2>
		/* STICK COMMAND 0 (   .)    (   .) */
		static uint16_t counter0 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a8:	4983      	ldr	r1, [pc, #524]	; (80034b8 <_ZN6Futaba10RCCommandsEv+0x228>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd fed0 	bl	8001050 <__aeabi_fcmplt>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <_ZN6Futaba10RCCommandsEv+0x94>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ba:	4980      	ldr	r1, [pc, #512]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fd fee5 	bl	800108c <__aeabi_fcmpgt>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d02d      	beq.n	8003324 <_ZN6Futaba10RCCommandsEv+0x94>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032cc:	497c      	ldr	r1, [pc, #496]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd febe 	bl	8001050 <__aeabi_fcmplt>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d024      	beq.n	8003324 <_ZN6Futaba10RCCommandsEv+0x94>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032de:	4977      	ldr	r1, [pc, #476]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fed3 	bl	800108c <__aeabi_fcmpgt>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <_ZN6Futaba10RCCommandsEv+0x94>
			if (++counter0 == 111) {
 80032ec:	4b75      	ldr	r3, [pc, #468]	; (80034c4 <_ZN6Futaba10RCCommandsEv+0x234>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	4b73      	ldr	r3, [pc, #460]	; (80034c4 <_ZN6Futaba10RCCommandsEv+0x234>)
 80032f6:	801a      	strh	r2, [r3, #0]
 80032f8:	4b72      	ldr	r3, [pc, #456]	; (80034c4 <_ZN6Futaba10RCCommandsEv+0x234>)
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	2b6f      	cmp	r3, #111	; 0x6f
 80032fe:	bf0c      	ite	eq
 8003300:	2301      	moveq	r3, #1
 8003302:	2300      	movne	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00f      	beq.n	800332a <_ZN6Futaba10RCCommandsEv+0x9a>
				Stick_Command[0] = Stick_Command[0] ? 0 : 1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if (++counter0 == 111) {
 8003322:	e002      	b.n	800332a <_ZN6Futaba10RCCommandsEv+0x9a>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter0 = 0;
 8003324:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <_ZN6Futaba10RCCommandsEv+0x234>)
 8003326:	2200      	movs	r2, #0
 8003328:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 1 (.   )    (.   ) */
		static uint16_t counter1 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] < -0.95f) {
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4962      	ldr	r1, [pc, #392]	; (80034b8 <_ZN6Futaba10RCCommandsEv+0x228>)
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd fe8d 	bl	8001050 <__aeabi_fcmplt>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d036      	beq.n	80033aa <_ZN6Futaba10RCCommandsEv+0x11a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003340:	495f      	ldr	r1, [pc, #380]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe84 	bl	8001050 <__aeabi_fcmplt>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d02d      	beq.n	80033aa <_ZN6Futaba10RCCommandsEv+0x11a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003352:	495b      	ldr	r1, [pc, #364]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd fe7b 	bl	8001050 <__aeabi_fcmplt>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d024      	beq.n	80033aa <_ZN6Futaba10RCCommandsEv+0x11a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	4956      	ldr	r1, [pc, #344]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd fe72 	bl	8001050 <__aeabi_fcmplt>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01b      	beq.n	80033aa <_ZN6Futaba10RCCommandsEv+0x11a>
			if (++counter1 == 111) {
 8003372:	4b55      	ldr	r3, [pc, #340]	; (80034c8 <_ZN6Futaba10RCCommandsEv+0x238>)
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <_ZN6Futaba10RCCommandsEv+0x238>)
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <_ZN6Futaba10RCCommandsEv+0x238>)
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	2b6f      	cmp	r3, #111	; 0x6f
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00f      	beq.n	80033b0 <_ZN6Futaba10RCCommandsEv+0x120>
				Stick_Command[1] = Stick_Command[1] ? 0 : 1;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf0c      	ite	eq
 800339a:	2301      	moveq	r3, #1
 800339c:	2300      	movne	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			if (++counter1 == 111) {
 80033a8:	e002      	b.n	80033b0 <_ZN6Futaba10RCCommandsEv+0x120>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter1 = 0;
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <_ZN6Futaba10RCCommandsEv+0x238>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 2 ('   )    ('   ) */
		static uint16_t counter2 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] < -0.95f) {
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4941      	ldr	r1, [pc, #260]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fe68 	bl	800108c <__aeabi_fcmpgt>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d036      	beq.n	8003430 <_ZN6Futaba10RCCommandsEv+0x1a0>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033c6:	493e      	ldr	r1, [pc, #248]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fd fe41 	bl	8001050 <__aeabi_fcmplt>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d02d      	beq.n	8003430 <_ZN6Futaba10RCCommandsEv+0x1a0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	4938      	ldr	r1, [pc, #224]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fe56 	bl	800108c <__aeabi_fcmpgt>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d024      	beq.n	8003430 <_ZN6Futaba10RCCommandsEv+0x1a0>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	4935      	ldr	r1, [pc, #212]	; (80034c0 <_ZN6Futaba10RCCommandsEv+0x230>)
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fe2f 	bl	8001050 <__aeabi_fcmplt>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <_ZN6Futaba10RCCommandsEv+0x1a0>
			if (++counter2 == 111) {
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <_ZN6Futaba10RCCommandsEv+0x23c>)
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	3301      	adds	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <_ZN6Futaba10RCCommandsEv+0x23c>)
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <_ZN6Futaba10RCCommandsEv+0x23c>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	2b6f      	cmp	r3, #111	; 0x6f
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00f      	beq.n	8003436 <_ZN6Futaba10RCCommandsEv+0x1a6>
				Stick_Command[2] = Stick_Command[2] ?  0 : 1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			if (++counter2 == 111) {
 800342e:	e002      	b.n	8003436 <_ZN6Futaba10RCCommandsEv+0x1a6>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter2 = 0;
 8003430:	4b26      	ldr	r3, [pc, #152]	; (80034cc <_ZN6Futaba10RCCommandsEv+0x23c>)
 8003432:	2200      	movs	r2, #0
 8003434:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 3 (   ')    (   ') */
		static uint16_t counter3 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] > 0.95f) {
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4920      	ldr	r1, [pc, #128]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fe25 	bl	800108c <__aeabi_fcmpgt>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d045      	beq.n	80034d4 <_ZN6Futaba10RCCommandsEv+0x244>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800344c:	491b      	ldr	r1, [pc, #108]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fe1c 	bl	800108c <__aeabi_fcmpgt>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d03c      	beq.n	80034d4 <_ZN6Futaba10RCCommandsEv+0x244>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	4917      	ldr	r1, [pc, #92]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd fe13 	bl	800108c <__aeabi_fcmpgt>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d033      	beq.n	80034d4 <_ZN6Futaba10RCCommandsEv+0x244>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	4912      	ldr	r1, [pc, #72]	; (80034bc <_ZN6Futaba10RCCommandsEv+0x22c>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fe0a 	bl	800108c <__aeabi_fcmpgt>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d02a      	beq.n	80034d4 <_ZN6Futaba10RCCommandsEv+0x244>
			if (++counter3 == 111) {
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <_ZN6Futaba10RCCommandsEv+0x240>)
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <_ZN6Futaba10RCCommandsEv+0x240>)
 8003488:	801a      	strh	r2, [r3, #0]
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <_ZN6Futaba10RCCommandsEv+0x240>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	2b6f      	cmp	r3, #111	; 0x6f
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01e      	beq.n	80034da <_ZN6Futaba10RCCommandsEv+0x24a>
				Stick_Command[3] = Stick_Command[3] ?  0 : 1;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			if (++counter3 == 111) {
 80034b4:	e011      	b.n	80034da <_ZN6Futaba10RCCommandsEv+0x24a>
 80034b6:	bf00      	nop
 80034b8:	3d4ccccd 	.word	0x3d4ccccd
 80034bc:	3f733333 	.word	0x3f733333
 80034c0:	bf733333 	.word	0xbf733333
 80034c4:	20000174 	.word	0x20000174
 80034c8:	20000176 	.word	0x20000176
 80034cc:	20000178 	.word	0x20000178
 80034d0:	2000017a 	.word	0x2000017a
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter3 = 0;
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <_ZN6Futaba10RCCommandsEv+0x2dc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 4 (.   )    (   .) */
		static uint16_t counter4 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	4924      	ldr	r1, [pc, #144]	; (8003570 <_ZN6Futaba10RCCommandsEv+0x2e0>)
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fdb5 	bl	8001050 <__aeabi_fcmplt>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d036      	beq.n	800355a <_ZN6Futaba10RCCommandsEv+0x2ca>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034f0:	4920      	ldr	r1, [pc, #128]	; (8003574 <_ZN6Futaba10RCCommandsEv+0x2e4>)
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fd fdac 	bl	8001050 <__aeabi_fcmplt>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02d      	beq.n	800355a <_ZN6Futaba10RCCommandsEv+0x2ca>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	491c      	ldr	r1, [pc, #112]	; (8003574 <_ZN6Futaba10RCCommandsEv+0x2e4>)
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fda3 	bl	8001050 <__aeabi_fcmplt>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d024      	beq.n	800355a <_ZN6Futaba10RCCommandsEv+0x2ca>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	4918      	ldr	r1, [pc, #96]	; (8003578 <_ZN6Futaba10RCCommandsEv+0x2e8>)
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fdb8 	bl	800108c <__aeabi_fcmpgt>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d01b      	beq.n	800355a <_ZN6Futaba10RCCommandsEv+0x2ca>
			if (++counter4 == 111) {
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	2b6f      	cmp	r3, #111	; 0x6f
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <_ZN6Futaba10RCCommandsEv+0x2d2>
				Stick_Command[4] = Stick_Command[4] ?  0 : 1;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8003546:	2b00      	cmp	r3, #0
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			if (++counter4 == 111) {
 8003558:	e003      	b.n	8003562 <_ZN6Futaba10RCCommandsEv+0x2d2>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter4 = 0;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <_ZN6Futaba10RCCommandsEv+0x2ec>)
 800355c:	2200      	movs	r2, #0
 800355e:	801a      	strh	r2, [r3, #0]
	}
}
 8003560:	e7ff      	b.n	8003562 <_ZN6Futaba10RCCommandsEv+0x2d2>
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000017a 	.word	0x2000017a
 8003570:	3d4ccccd 	.word	0x3d4ccccd
 8003574:	bf733333 	.word	0xbf733333
 8003578:	3f733333 	.word	0x3f733333
 800357c:	2000017c 	.word	0x2000017c

08003580 <_ZN6Futaba10RxCallbackEv>:
void Futaba::RxCallback(void) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
//	osSignalSet(FutabaTaskHandle, RxSignal);
	Process();
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fcdf 	bl	8002f4c <_ZN6Futaba7ProcessEv>
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <_ZN6FutabaC1Ev>:

Futaba::Futaba() {
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	4a20      	ldr	r2, [pc, #128]	; (8003624 <_ZN6FutabaC1Ev+0x8c>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	629a      	str	r2, [r3, #40]	; 0x28
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	859a      	strh	r2, [r3, #44]	; 0x2c
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80035d8:	861a      	strh	r2, [r3, #48]	; 0x30
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	649a      	str	r2, [r3, #72]	; 0x48
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	// TODO Auto-generated constructor stub

}
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	080085a4 	.word	0x080085a4

08003628 <_ZN6FutabaD1Ev>:

Futaba::~Futaba() {
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <_ZN6FutabaD1Ev+0x1c>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	080085a4 	.word	0x080085a4

08003648 <_ZN6FutabaD0Ev>:
Futaba::~Futaba() {
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
}
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffe9 	bl	8003628 <_ZN6FutabaD1Ev>
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f002 fb5f 	bl	8005d1a <_ZdlPv>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
 8003666:	b590      	push	{r4, r7, lr}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7fc feba 	bl	80003e8 <__aeabi_ui2d>
 8003674:	4603      	mov	r3, r0
 8003676:	460c      	mov	r4, r1
 8003678:	4618      	mov	r0, r3
 800367a:	4621      	mov	r1, r4
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
	...

08003684 <_Z41__static_initialization_and_destruction_0ii>:
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10c      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800369a:	4293      	cmp	r3, r2
 800369c:	d107      	bne.n	80036ae <_Z41__static_initialization_and_destruction_0ii+0x2a>
Futaba futaba;
 800369e:	4806      	ldr	r0, [pc, #24]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80036a0:	f7ff ff7a 	bl	8003598 <_ZN6FutabaC1Ev>
 80036a4:	4a05      	ldr	r2, [pc, #20]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80036a6:	4906      	ldr	r1, [pc, #24]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80036a8:	4803      	ldr	r0, [pc, #12]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80036aa:	f002 fb3a 	bl	8005d22 <__aeabi_atexit>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	200000cc 	.word	0x200000cc
 80036bc:	20000000 	.word	0x20000000
 80036c0:	08003629 	.word	0x08003629

080036c4 <_GLOBAL__sub_I_futaba>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7ff ffd9 	bl	8003684 <_Z41__static_initialization_and_destruction_0ii>
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	0000      	movs	r0, r0
	...

080036d8 <_ZN11ModeManager4initEv>:
//		last_cmd = futaba.Stick_Command[4];
//
//	}
//}

void ModeManager::init(){
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]

	futaba.ConfigureSmoothing(50.f, task_dt * 1e-3); /* Nyquist frequency - 1/2 Radio frequency * 0.9; 8CH - 9ms, 16CH - 18ms,*/
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fe7f 	bl	80003e8 <__aeabi_ui2d>
 80036ea:	a30d      	add	r3, pc, #52	; (adr r3, 8003720 <_ZN11ModeManager4initEv+0x48>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc fef0 	bl	80004d4 <__aeabi_dmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	4618      	mov	r0, r3
 80036fa:	4621      	mov	r1, r4
 80036fc:	f7fd f9ac 	bl	8000a58 <__aeabi_d2f>
 8003700:	4603      	mov	r3, r0
 8003702:	461a      	mov	r2, r3
 8003704:	4908      	ldr	r1, [pc, #32]	; (8003728 <_ZN11ModeManager4initEv+0x50>)
 8003706:	4809      	ldr	r0, [pc, #36]	; (800372c <_ZN11ModeManager4initEv+0x54>)
 8003708:	f7ff fc82 	bl	8003010 <_ZN6Futaba18ConfigureSmoothingEff>

//	MX_TIM13_Init();

	isUnlockDriveTimerRunning = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	71da      	strb	r2, [r3, #7]

//	osDelay(init_task_dt);
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	d2f1a9fc 	.word	0xd2f1a9fc
 8003724:	3f50624d 	.word	0x3f50624d
 8003728:	42480000 	.word	0x42480000
 800372c:	200000cc 	.word	0x200000cc

08003730 <_ZN11ModeManager8proccessEv>:

void ModeManager::proccess(){
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	futaba.ProcessSmoothing(); //check
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <_ZN11ModeManager8proccessEv+0x3c>)
 800373a:	f7ff fc95 	bl	8003068 <_ZN6Futaba16ProcessSmoothingEv>

	if(futaba.SwitchC == SWITCH_DOWN) ride_mode = COMPETITION;
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <_ZN11ModeManager8proccessEv+0x3c>)
 8003740:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8003744:	2b02      	cmp	r3, #2
 8003746:	d103      	bne.n	8003750 <_ZN11ModeManager8proccessEv+0x20>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	719a      	strb	r2, [r3, #6]
 800374e:	e002      	b.n	8003756 <_ZN11ModeManager8proccessEv+0x26>
	else 							  ride_mode = FREERUN;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	719a      	strb	r2, [r3, #6]

	setModes();
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f80a 	bl	8003770 <_ZN11ModeManager8setModesEv>

	checkRideMode();
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f84d 	bl	80037fc <_ZN11ModeManager13checkRideModeEv>
//	rc_mode = MODE_ACRO;
//	drive_mode = ENABLE;

}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	200000cc 	.word	0x200000cc

08003770 <_ZN11ModeManager8setModesEv>:

void ModeManager::setModes(){
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	if (futaba.Get_RCState() || futaba.SwitchA < SWITCH_DOWN) {
 8003778:	481f      	ldr	r0, [pc, #124]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 800377a:	f7ff fbd9 	bl	8002f30 <_ZN6Futaba11Get_RCStateEv>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <_ZN11ModeManager8setModesEv+0x1e>
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 8003786:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800378a:	2b01      	cmp	r3, #1
 800378c:	dc01      	bgt.n	8003792 <_ZN11ModeManager8setModesEv+0x22>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <_ZN11ModeManager8setModesEv+0x24>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d006      	beq.n	80037a6 <_ZN11ModeManager8setModesEv+0x36>
		rc_mode = DISARMED;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	711a      	strb	r2, [r3, #4]
		drive_mode = DISABLE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	715a      	strb	r2, [r3, #5]
			rc_mode = MODE_AUTONOMOUS;
			drive_mode = ENABLE;

		}
	}
}
 80037a4:	e024      	b.n	80037f0 <_ZN11ModeManager8setModesEv+0x80>
	} else if (futaba.SwitchA == SWITCH_DOWN) {
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 80037a8:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d11f      	bne.n	80037f0 <_ZN11ModeManager8setModesEv+0x80>
		if (futaba.SwitchB == SWITCH_UP) {
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 80037b2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <_ZN11ModeManager8setModesEv+0x52>
			rc_mode = MODE_ACRO;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	711a      	strb	r2, [r3, #4]
}
 80037c0:	e016      	b.n	80037f0 <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_MIDDLE) {
 80037c2:	4b0d      	ldr	r3, [pc, #52]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 80037c4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <_ZN11ModeManager8setModesEv+0x6a>
			rc_mode = MODE_SEMI;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	715a      	strb	r2, [r3, #5]
}
 80037d8:	e00a      	b.n	80037f0 <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_DOWN) {
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <_ZN11ModeManager8setModesEv+0x88>)
 80037dc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d105      	bne.n	80037f0 <_ZN11ModeManager8setModesEv+0x80>
			rc_mode = MODE_AUTONOMOUS;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	715a      	strb	r2, [r3, #5]
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200000cc 	.word	0x200000cc

080037fc <_ZN11ModeManager13checkRideModeEv>:

void ModeManager::checkRideMode(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	switch(ride_mode){
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	799b      	ldrb	r3, [r3, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <_ZN11ModeManager13checkRideModeEv+0x26>
 800380c:	2b01      	cmp	r3, #1
 800380e:	d000      	beq.n	8003812 <_ZN11ModeManager13checkRideModeEv+0x16>
		break;
	case COMPETITION:
		checkUnlockDriveTimer();
		break;
	}
}
 8003810:	e00c      	b.n	800382c <_ZN11ModeManager13checkRideModeEv+0x30>
		if (rc_mode != DISARMED) drive_mode = ENABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	791b      	ldrb	r3, [r3, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <_ZN11ModeManager13checkRideModeEv+0x2e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	715a      	strb	r2, [r3, #5]
		break;
 8003820:	e003      	b.n	800382a <_ZN11ModeManager13checkRideModeEv+0x2e>
		checkUnlockDriveTimer();
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f806 	bl	8003834 <_ZN11ModeManager21checkUnlockDriveTimerEv>
		break;
 8003828:	e000      	b.n	800382c <_ZN11ModeManager13checkRideModeEv+0x30>
		break;
 800382a:	bf00      	nop
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZN11ModeManager21checkUnlockDriveTimerEv>:

void ModeManager::checkUnlockDriveTimer(){
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	switch(rc_mode){
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	791b      	ldrb	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db1a      	blt.n	800387a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
 8003844:	2b02      	cmp	r3, #2
 8003846:	dd0d      	ble.n	8003864 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x30>
 8003848:	2b03      	cmp	r3, #3
 800384a:	d000      	beq.n	800384e <_ZN11ModeManager21checkUnlockDriveTimerEv+0x1a>
		if(isUnlockDriveTimerRunning){
			breakUnlockDriveTimer();
		}
		break;
	}
}
 800384c:	e015      	b.n	800387a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		if(!isUnlockDriveTimerRunning){
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	79db      	ldrb	r3, [r3, #7]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10e      	bne.n	8003874 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
			drive_mode = DISABLE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	715a      	strb	r2, [r3, #5]
			startUnlockDriveTimer();
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f810 	bl	8003882 <_ZN11ModeManager21startUnlockDriveTimerEv>
		break;
 8003862:	e007      	b.n	8003874 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
		if(isUnlockDriveTimerRunning){
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	79db      	ldrb	r3, [r3, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
			breakUnlockDriveTimer();
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 f814 	bl	800389a <_ZN11ModeManager21breakUnlockDriveTimerEv>
		break;
 8003872:	e001      	b.n	8003878 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
		break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		break;
 8003878:	bf00      	nop
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZN11ModeManager21startUnlockDriveTimerEv>:
	} else {
		drive_mode = ENABLE;
	}
}

void ModeManager::startUnlockDriveTimer(){
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Start_IT(&UNLOCK_DRIVE_TIM);
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	bc80      	pop	{r7}
 8003898:	4770      	bx	lr

0800389a <_ZN11ModeManager21breakUnlockDriveTimerEv>:

void ModeManager::breakUnlockDriveTimer(){
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Stop_IT(&UNLOCK_DRIVE_TIM);
//	__HAL_TIM_SET_COUNTER(&UNLOCK_DRIVE_TIM, 0);
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <_ZN11ModeManager9getRCmodeEv>:

ModeManager::RC_MODE ModeManager::getRCmode(){
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
	return rc_mode;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	791b      	ldrb	r3, [r3, #4]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	return drive_mode;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	795b      	ldrb	r3, [r3, #5]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <_ZN11ModeManager11getRideModeEv>:

ModeManager::RIDE_MODE ModeManager::getRideMode(){
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
	return ride_mode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	799b      	ldrb	r3, [r3, #6]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr

080038f4 <_ZN11ModeManagerC1Ev>:

//UNUSED(rc_mode); //should be checked

ModeManager::ModeManager() {
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <_ZN11ModeManagerC1Ev+0x44>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	711a      	strb	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	715a      	strb	r2, [r3, #5]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	719a      	strb	r2, [r3, #6]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	71da      	strb	r2, [r3, #7]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	721a      	strb	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2264      	movs	r2, #100	; 0x64
 800392a:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	080085c4 	.word	0x080085c4

0800393c <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <_ZN11ModeManagerD1Ev+0x1c>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4618      	mov	r0, r3
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	080085c4 	.word	0x080085c4

0800395c <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
}
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ffe9 	bl	800393c <_ZN11ModeManagerD1Ev>
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f002 f9d5 	bl	8005d1a <_ZdlPv>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <_Z41__static_initialization_and_destruction_0ii>:
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10c      	bne.n	80039a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003992:	4293      	cmp	r3, r2
 8003994:	d107      	bne.n	80039a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager mode_manager;
 8003996:	4806      	ldr	r0, [pc, #24]	; (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003998:	f7ff ffac 	bl	80038f4 <_ZN11ModeManagerC1Ev>
 800399c:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80039a0:	4803      	ldr	r0, [pc, #12]	; (80039b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80039a2:	f002 f9be 	bl	8005d22 <__aeabi_atexit>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000180 	.word	0x20000180
 80039b4:	20000000 	.word	0x20000000
 80039b8:	0800393d 	.word	0x0800393d

080039bc <_GLOBAL__sub_I_mode_manager>:
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7ff ffd9 	bl	800397c <_Z41__static_initialization_and_destruction_0ii>
 80039ca:	bd80      	pop	{r7, pc}

080039cc <_ZN12MotorManager4initEv>:

#include <MotorManager.h>

MotorManager motor_manager;

void MotorManager::init(){
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
//	motor.SetPassthroughState(false);
	//motor.setMaxVelocity(3500.f);
	maxVelocity = ACRO_MAX_VELOCITY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a03      	ldr	r2, [pc, #12]	; (80039e4 <_ZN12MotorManager4initEv+0x18>)
 80039d8:	609a      	str	r2, [r3, #8]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	42be0000 	.word	0x42be0000

080039e8 <_ZN12MotorManager7processEv>:

void MotorManager::process(){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	setMaxVelocity();
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8c1 	bl	8003b78 <_ZN12MotorManager14setMaxVelocityEv>
	DriveModeCheck();
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f808 	bl	8003a0c <_ZN12MotorManager14DriveModeCheckEv>
	RCModeCheck();
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f817 	bl	8003a30 <_ZN12MotorManager11RCModeCheckEv>
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <_ZN12MotorManager14DriveModeCheckEv>:

void MotorManager::DriveModeCheck(){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
		driveMode = mode_manager.getDriveMode();
 8003a14:	4805      	ldr	r0, [pc, #20]	; (8003a2c <_ZN12MotorManager14DriveModeCheckEv+0x20>)
 8003a16:	f7ff ff57 	bl	80038c8 <_ZN11ModeManager12getDriveModeEv>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	711a      	strb	r2, [r3, #4]
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000180 	.word	0x20000180

08003a30 <_ZN12MotorManager11RCModeCheckEv>:
void MotorManager::RCModeCheck(){
 8003a30:	b590      	push	{r4, r7, lr}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
	switch(mode_manager.getRCmode()){
 8003a38:	484a      	ldr	r0, [pc, #296]	; (8003b64 <_ZN12MotorManager11RCModeCheckEv+0x134>)
 8003a3a:	f7ff ff3a 	bl	80038b2 <_ZN11ModeManager9getRCmodeEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	f200 808b 	bhi.w	8003b5c <_ZN12MotorManager11RCModeCheckEv+0x12c>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <_ZN12MotorManager11RCModeCheckEv+0x1c>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003b35 	.word	0x08003b35
 8003a54:	08003ae3 	.word	0x08003ae3
 8003a58:	08003a77 	.word	0x08003a77

		case ModeManager::DISARMED:
			// TO TEST
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a62:	4841      	ldr	r0, [pc, #260]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003a64:	f001 fa40 	bl	8004ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a6e:	483e      	ldr	r0, [pc, #248]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003a70:	f001 fa3a 	bl	8004ee8 <HAL_GPIO_WritePin>
//			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
//			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[YAW] * MAX_TURN_ANGLE) ;
			break;
 8003a74:	e072      	b.n	8003b5c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_ACRO:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a76:	2200      	movs	r2, #0
 8003a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a7c:	483a      	ldr	r0, [pc, #232]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003a7e:	f001 fa33 	bl	8004ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003a82:	2201      	movs	r2, #1
 8003a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a88:	4837      	ldr	r0, [pc, #220]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003a8a:	f001 fa2d 	bl	8004ee8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	791b      	ldrb	r3, [r3, #4]
 8003a92:	461a      	mov	r2, r3
 8003a94:	2103      	movs	r1, #3
 8003a96:	4835      	ldr	r0, [pc, #212]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003a98:	f7fe fca0 	bl	80023dc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[YAW]);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8a7 	bl	8003bf0 <_ZN12MotorManager14getMaxVelocityEv>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f8a3 	bl	8003bf0 <_ZN12MotorManager14getMaxVelocityEv>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b30      	ldr	r3, [pc, #192]	; (8003b70 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	f7fd f92d 	bl	8000d14 <__aeabi_fmul>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	4621      	mov	r1, r4
 8003ac0:	482a      	ldr	r0, [pc, #168]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003ac2:	f7fe fc6b 	bl	800239c <_ZN14CanSendManager11setVelocityEff>
			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[PITCH] * MAX_TURN_ANGLE) ;
 8003ac6:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	4929      	ldr	r1, [pc, #164]	; (8003b74 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd f920 	bl	8000d14 <__aeabi_fmul>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4926      	ldr	r1, [pc, #152]	; (8003b74 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 8003ada:	4824      	ldr	r0, [pc, #144]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003adc:	f7fe fc6e 	bl	80023bc <_ZN14CanSendManager7setTurnEff>
			break;
 8003ae0:	e03c      	b.n	8003b5c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_SEMI:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ae8:	481f      	ldr	r0, [pc, #124]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003aea:	f001 f9fd 	bl	8004ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003aee:	2200      	movs	r2, #0
 8003af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003af4:	481c      	ldr	r0, [pc, #112]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003af6:	f001 f9f7 	bl	8004ee8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_SEMI, driveMode);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	791b      	ldrb	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	2102      	movs	r1, #2
 8003b02:	481a      	ldr	r0, [pc, #104]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003b04:	f7fe fc6a 	bl	80023dc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[YAW]);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f871 	bl	8003bf0 <_ZN12MotorManager14getMaxVelocityEv>
 8003b0e:	4604      	mov	r4, r0
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f86d 	bl	8003bf0 <_ZN12MotorManager14getMaxVelocityEv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7fd f8f7 	bl	8000d14 <__aeabi_fmul>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	480f      	ldr	r0, [pc, #60]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003b2e:	f7fe fc35 	bl	800239c <_ZN14CanSendManager11setVelocityEff>

			break;
 8003b32:	e013      	b.n	8003b5c <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_AUTONOMOUS:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b3a:	480b      	ldr	r0, [pc, #44]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b3c:	f001 f9d4 	bl	8004ee8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003b40:	2200      	movs	r2, #0
 8003b42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b46:	4808      	ldr	r0, [pc, #32]	; (8003b68 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003b48:	f001 f9ce 	bl	8004ee8 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_AUTONOMOUS, driveMode);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	791b      	ldrb	r3, [r3, #4]
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	4805      	ldr	r0, [pc, #20]	; (8003b6c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003b56:	f7fe fc41 	bl	80023dc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			break;
 8003b5a:	bf00      	nop
		}
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd90      	pop	{r4, r7, pc}
 8003b64:	20000180 	.word	0x20000180
 8003b68:	40011000 	.word	0x40011000
 8003b6c:	200000a4 	.word	0x200000a4
 8003b70:	200000cc 	.word	0x200000cc
 8003b74:	42340000 	.word	0x42340000

08003b78 <_ZN12MotorManager14setMaxVelocityEv>:
void MotorManager::setMaxVelocity(){
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	if(mode_manager.getRideMode() == ModeManager::COMPETITION){
 8003b80:	4818      	ldr	r0, [pc, #96]	; (8003be4 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003b82:	f7ff feac 	bl	80038de <_ZN11ModeManager11getRideModeEv>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf0c      	ite	eq
 8003b8c:	2301      	moveq	r3, #1
 8003b8e:	2300      	movne	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01d      	beq.n	8003bd2 <_ZN12MotorManager14setMaxVelocityEv+0x5a>
		switch(mode_manager.getRCmode()){
 8003b96:	4813      	ldr	r0, [pc, #76]	; (8003be4 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003b98:	f7ff fe8b 	bl	80038b2 <_ZN11ModeManager9getRCmodeEv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d81c      	bhi.n	8003bdc <_ZN12MotorManager14setMaxVelocityEv+0x64>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <_ZN12MotorManager14setMaxVelocityEv+0x30>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bdb 	.word	0x08003bdb
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bb9 	.word	0x08003bb9
		case ModeManager::DISARMED:
			break;
		case ModeManager::MODE_ACRO:
			maxVelocity = ACRO_MAX_VELOCITY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 8003bbc:	609a      	str	r2, [r3, #8]
			break;
 8003bbe:	e00d      	b.n	8003bdc <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_SEMI:
			maxVelocity = SEMI_MAX_VELOCITY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 8003bc4:	609a      	str	r2, [r3, #8]
			break;
 8003bc6:	e009      	b.n	8003bdc <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_AUTONOMOUS:
			maxVelocity = AUTONOMOUS_MAX_VELOCITY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a08      	ldr	r2, [pc, #32]	; (8003bec <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 8003bcc:	609a      	str	r2, [r3, #8]
			break;
 8003bce:	bf00      	nop
 8003bd0:	e004      	b.n	8003bdc <_ZN12MotorManager14setMaxVelocityEv+0x64>
		}
	}else{
		maxVelocity = SERVICE_MAX_VELOCITY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 8003bd6:	609a      	str	r2, [r3, #8]
	}
}
 8003bd8:	e000      	b.n	8003bdc <_ZN12MotorManager14setMaxVelocityEv+0x64>
			break;
 8003bda:	bf00      	nop
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000180 	.word	0x20000180
 8003be8:	42be0000 	.word	0x42be0000
 8003bec:	42a00000 	.word	0x42a00000

08003bf0 <_ZN12MotorManager14getMaxVelocityEv>:

float MotorManager::getMaxVelocity(){
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	return maxVelocity;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
	...

08003c08 <_ZN12MotorManagerC1Ev>:
MotorManager::MotorManager() {
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <_ZN12MotorManagerC1Ev+0x20>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	080085ec 	.word	0x080085ec

08003c2c <_ZN12MotorManagerD1Ev>:

MotorManager::~MotorManager() {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <_ZN12MotorManagerD1Ev+0x1c>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	080085ec 	.word	0x080085ec

08003c4c <_ZN12MotorManagerD0Ev>:
MotorManager::~MotorManager() {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
}
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffe9 	bl	8003c2c <_ZN12MotorManagerD1Ev>
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f002 f85d 	bl	8005d1a <_ZdlPv>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <_Z41__static_initialization_and_destruction_0ii>:
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d10c      	bne.n	8003c96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d107      	bne.n	8003c96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MotorManager motor_manager;
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003c88:	f7ff ffbe 	bl	8003c08 <_ZN12MotorManagerC1Ev>
 8003c8c:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003c8e:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003c90:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003c92:	f002 f846 	bl	8005d22 <__aeabi_atexit>
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000194 	.word	0x20000194
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	08003c2d 	.word	0x08003c2d

08003cac <_GLOBAL__sub_I_motor_manager>:
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	f7ff ffd9 	bl	8003c6c <_Z41__static_initialization_and_destruction_0ii>
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <_ZN5Tools9GetMicrosEv>:
Tools tools;

uint8_t Tools::GetMicrosState(void){
	return MicrosInitDone;
}
uint32_t Tools::GetMicros(void){
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	return TIM2->CNT;
 8003cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN5Tools4InitEv>:
int32_t Tools::CompareMicros(uint32_t a, uint32_t b) {
	return (int32_t)(a - b);
}
uint8_t Tools::Init(void) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	if (MicrosInitDone) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <_ZN5Tools4InitEv+0x14>
		return 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e008      	b.n	8003cfa <_ZN5Tools4InitEv+0x26>
	} else {
		MX_TIM2_Init();
 8003ce8:	f000 fa9a 	bl	8004220 <MX_TIM2_Init>
		HAL_TIM_Base_Start(&htim2);
 8003cec:	4805      	ldr	r0, [pc, #20]	; (8003d04 <_ZN5Tools4InitEv+0x30>)
 8003cee:	f001 fba5 	bl	800543c <HAL_TIM_Base_Start>
		MicrosInitDone = 1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	711a      	strb	r2, [r3, #4]

	}
	return 1;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	2000025c 	.word	0x2000025c

08003d08 <_ZN5ToolsC1Ev>:


Tools::Tools() {
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <_ZN5ToolsC1Ev+0x20>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	08008614 	.word	0x08008614

08003d2c <_ZN5ToolsD1Ev>:

Tools::~Tools() {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <_ZN5ToolsD1Ev+0x1c>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	08008614 	.word	0x08008614

08003d4c <_ZN5ToolsD0Ev>:
Tools::~Tools() {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
}
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ffe9 	bl	8003d2c <_ZN5ToolsD1Ev>
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f001 ffdd 	bl	8005d1a <_ZdlPv>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <_Z41__static_initialization_and_destruction_0ii>:
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d10c      	bne.n	8003d96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d107      	bne.n	8003d96 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Tools tools;
 8003d86:	4806      	ldr	r0, [pc, #24]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d88:	f7ff ffbe 	bl	8003d08 <_ZN5ToolsC1Ev>
 8003d8c:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003d8e:	4906      	ldr	r1, [pc, #24]	; (8003da8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003d90:	4803      	ldr	r0, [pc, #12]	; (8003da0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003d92:	f001 ffc6 	bl	8005d22 <__aeabi_atexit>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	200001a0 	.word	0x200001a0
 8003da4:	20000000 	.word	0x20000000
 8003da8:	08003d2d 	.word	0x08003d2d

08003dac <_GLOBAL__sub_I_tools>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff ffd9 	bl	8003d6c <_Z41__static_initialization_and_destruction_0ii>
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003dbc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8003dc0:	480e      	ldr	r0, [pc, #56]	; (8003dfc <MX_CAN_Init+0x40>)
{
 8003dc2:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8003dc4:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003dc8:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003dca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 8003dce:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003dd0:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8003dd2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8003dd6:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003dd8:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 8003dda:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003ddc:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003dde:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003de0:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003de2:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003de4:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003de6:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003de8:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003dea:	f000 fb75 	bl	80044d8 <HAL_CAN_Init>
 8003dee:	b118      	cbz	r0, 8003df8 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8003df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003df4:	f000 b99b 	b.w	800412e <Error_Handler>
 8003df8:	bd08      	pop	{r3, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200001c4 	.word	0x200001c4
 8003e00:	40006400 	.word	0x40006400

08003e04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4604      	mov	r4, r0
 8003e08:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	a802      	add	r0, sp, #8
 8003e10:	f004 fa1c 	bl	800824c <memset>
  if(canHandle->Instance==CAN1)
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <HAL_CAN_MspInit+0x98>)
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d13d      	bne.n	8003e98 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003e1c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8003e20:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003e22:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003e24:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003e2c:	481c      	ldr	r0, [pc, #112]	; (8003ea0 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003e2e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003e32:	9200      	str	r2, [sp, #0]
 8003e34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	f042 0204 	orr.w	r2, r2, #4
 8003e3c:	619a      	str	r2, [r3, #24]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8003e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e4c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8003e4e:	f000 fefb 	bl	8004c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8003e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e5c:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003e5e:	a902      	add	r1, sp, #8
 8003e60:	480f      	ldr	r0, [pc, #60]	; (8003ea0 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e62:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003e64:	f000 fef0 	bl	8004c48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2013      	movs	r0, #19
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	f000 fe37 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003e72:	2013      	movs	r0, #19
 8003e74:	f000 fe68 	bl	8004b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003e78:	2200      	movs	r2, #0
 8003e7a:	2014      	movs	r0, #20
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	f000 fe2f 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003e82:	2014      	movs	r0, #20
 8003e84:	f000 fe60 	bl	8004b48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2015      	movs	r0, #21
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	f000 fe27 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003e92:	2015      	movs	r0, #21
 8003e94:	f000 fe58 	bl	8004b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003e98:	b006      	add	sp, #24
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	40006400 	.word	0x40006400
 8003ea0:	40010800 	.word	0x40010800

08003ea4 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003ea8:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 8003eaa:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003eac:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 8003eae:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 8003eb0:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8003eb2:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8003eb4:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003eb6:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8003eb8:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8003eba:	4804      	ldr	r0, [pc, #16]	; (8003ecc <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003ebc:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 8003ebe:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 8003ec0:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8003ec2:	f000 bb84 	b.w	80045ce <HAL_CAN_ConfigFilter>
 8003ec6:	bf00      	nop
 8003ec8:	200001ec 	.word	0x200001ec
 8003ecc:	200001c4 	.word	0x200001c4

08003ed0 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
//	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
//}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 8003ed0:	b500      	push	{lr}
 8003ed2:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 8003ed4:	ab08      	add	r3, sp, #32
 8003ed6:	466a      	mov	r2, sp
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f000 fc5d 	bl	8004798 <HAL_CAN_GetRxMessage>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 8003ede:	b00b      	add	sp, #44	; 0x2c
 8003ee0:	f85d fb04 	ldr.w	pc, [sp], #4

08003ee4 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	2210      	movs	r2, #16
{
 8003ee6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eea:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eec:	eb0d 0002 	add.w	r0, sp, r2
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f004 f9ab 	bl	800824c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003ef8:	4f3c      	ldr	r7, [pc, #240]	; (8003fec <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003efc:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	f042 0210 	orr.w	r2, r2, #16
 8003f02:	619a      	str	r2, [r3, #24]
 8003f04:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003f06:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f0a:	f002 0210 	and.w	r2, r2, #16
 8003f0e:	9200      	str	r2, [sp, #0]
 8003f10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f12:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f14:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f16:	f042 0220 	orr.w	r2, r2, #32
 8003f1a:	619a      	str	r2, [r3, #24]
 8003f1c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003f1e:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f20:	f002 0220 	and.w	r2, r2, #32
 8003f24:	9201      	str	r2, [sp, #4]
 8003f26:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2c:	f042 0204 	orr.w	r2, r2, #4
 8003f30:	619a      	str	r2, [r3, #24]
 8003f32:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8003f34:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f38:	f002 0204 	and.w	r2, r2, #4
 8003f3c:	9202      	str	r2, [sp, #8]
 8003f3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f40:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f42:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8004000 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f46:	f042 0208 	orr.w	r2, r2, #8
 8003f4a:	619a      	str	r2, [r3, #24]
 8003f4c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003f4e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003f58:	f000 ffc6 	bl	8004ee8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003f5c:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f60:	a904      	add	r1, sp, #16
 8003f62:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003f64:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f66:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f68:	f000 fe6e 	bl	8004c48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f6c:	a904      	add	r1, sp, #16
 8003f6e:	4820      	ldr	r0, [pc, #128]	; (8003ff0 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003f70:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f72:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f74:	f000 fe68 	bl	8004c48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003f78:	f248 73f1 	movw	r3, #34801	; 0x87f1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7c:	a904      	add	r1, sp, #16
 8003f7e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003f80:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f82:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f000 fe60 	bl	8004c48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f88:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f8a:	a904      	add	r1, sp, #16
 8003f8c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f8e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8003f90:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f96:	f000 fe57 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	a904      	add	r1, sp, #16
 8003fa0:	4815      	ldr	r0, [pc, #84]	; (8003ff8 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003fa2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa6:	f000 fe4f 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 8003faa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb2:	a904      	add	r1, sp, #16
 8003fb4:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fb6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fba:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fbe:	f000 fe43 	bl	8004c48 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003fc4:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003fc6:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003fc8:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003fca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fd2:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003fd4:	4632      	mov	r2, r6
 8003fd6:	f000 fd83 	bl	8004ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f000 fdb4 	bl	8004b48 <HAL_NVIC_EnableIRQ>

}
 8003fe0:	b009      	add	sp, #36	; 0x24
 8003fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40011000 	.word	0x40011000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	10110000 	.word	0x10110000
 8003ff8:	40010c00 	.word	0x40010c00
 8003ffc:	40010000 	.word	0x40010000
 8004000:	40010800 	.word	0x40010800

08004004 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a04      	ldr	r2, [pc, #16]	; (8004024 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d102      	bne.n	800401c <HAL_TIM_PeriodElapsedCallback+0x18>
    allTasks.process();
 8004016:	4804      	ldr	r0, [pc, #16]	; (8004028 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004018:	f7fe f856 	bl	80020c8 <_ZN8AllTasks7processEv>
  }
}
 800401c:	bf00      	nop
 800401e:	3708      	adds	r7, #8
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40000400 	.word	0x40000400
 8004028:	200000a0 	.word	0x200000a0

0800402c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) //aparatura
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_UART_RxCpltCallback+0x20>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d102      	bne.n	8004044 <HAL_UART_RxCpltCallback+0x18>
	{
		futaba.RxCallback();
 800403e:	4804      	ldr	r0, [pc, #16]	; (8004050 <HAL_UART_RxCpltCallback+0x24>)
 8004040:	f7ff fa9e 	bl	8003580 <_ZN6Futaba10RxCallbackEv>
	}
}
 8004044:	bf00      	nop
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40004400 	.word	0x40004400
 8004050:	200000cc 	.word	0x200000cc

08004054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800405a:	f000 fa19 	bl	8004490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800405e:	f000 f821 	bl	80040a4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004062:	f7ff ff3f 	bl	8003ee4 <MX_GPIO_Init>
  MX_CAN_Init();
 8004066:	f7ff fea9 	bl	8003dbc <MX_CAN_Init>
  MX_TIM3_Init();
 800406a:	f000 f90d 	bl	8004288 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hal_can_filter_init();
 800406e:	f7ff ff19 	bl	8003ea4 <hal_can_filter_init>

  HAL_CAN_Start(&hcan);
 8004072:	4809      	ldr	r0, [pc, #36]	; (8004098 <main+0x44>)
 8004074:	f000 fb17 	bl	80046a6 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 8004078:	2102      	movs	r1, #2
 800407a:	4807      	ldr	r0, [pc, #28]	; (8004098 <main+0x44>)
 800407c:	f000 fc02 	bl	8004884 <HAL_CAN_ActivateNotification>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }

  HAL_TIM_Base_Start_IT(&htim3);
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <main+0x48>)
 8004086:	f001 f9ff 	bl	8005488 <HAL_TIM_Base_Start_IT>
  allTasks.init();
 800408a:	4805      	ldr	r0, [pc, #20]	; (80040a0 <main+0x4c>)
 800408c:	f7fd fffa 	bl	8002084 <_ZN8AllTasks4initEv>

  uint8_t data = 1;
 8004090:	2301      	movs	r3, #1
 8004092:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004094:	e7fe      	b.n	8004094 <main+0x40>
 8004096:	bf00      	nop
 8004098:	200001c4 	.word	0x200001c4
 800409c:	20000214 	.word	0x20000214
 80040a0:	200000a0 	.word	0x200000a0

080040a4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b090      	sub	sp, #64	; 0x40
 80040a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040aa:	f107 0318 	add.w	r3, r7, #24
 80040ae:	2228      	movs	r2, #40	; 0x28
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f004 f8ca 	bl	800824c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040c6:	2302      	movs	r3, #2
 80040c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040ca:	2301      	movs	r3, #1
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040ce:	2310      	movs	r3, #16
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040d6:	f107 0318 	add.w	r3, r7, #24
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 ff16 	bl	8004f0c <HAL_RCC_OscConfig>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80040f0:	f000 f81d 	bl	800412e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f4:	230f      	movs	r3, #15
 80040f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004100:	2300      	movs	r3, #0
 8004102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f8d7 	bl	80052c0 <HAL_RCC_ClockConfig>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8004122:	f000 f804 	bl	800412e <Error_Handler>
  }
}
 8004126:	bf00      	nop
 8004128:	3740      	adds	r7, #64	; 0x40
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr
	...

0800413c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800413c:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_MspInit+0x3c>)
{
 800413e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	619a      	str	r2, [r3, #24]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	f002 0201 	and.w	r2, r2, #1
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004158:	61da      	str	r2, [r3, #28]
 800415a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004166:	6853      	ldr	r3, [r2, #4]
 8004168:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800416c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004170:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004172:	b002      	add	sp, #8
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	40010000 	.word	0x40010000

08004180 <NMI_Handler>:
 8004180:	4770      	bx	lr

08004182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004182:	e7fe      	b.n	8004182 <HardFault_Handler>

08004184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004184:	e7fe      	b.n	8004184 <MemManage_Handler>

08004186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004186:	e7fe      	b.n	8004186 <BusFault_Handler>

08004188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004188:	e7fe      	b.n	8004188 <UsageFault_Handler>

0800418a <SVC_Handler>:
 800418a:	4770      	bx	lr

0800418c <DebugMon_Handler>:
 800418c:	4770      	bx	lr

0800418e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800418e:	4770      	bx	lr

08004190 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004190:	f000 b990 	b.w	80044b4 <HAL_IncTick>

08004194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004194:	2002      	movs	r0, #2
 8004196:	f000 bead 	b.w	8004ef4 <HAL_GPIO_EXTI_IRQHandler>
	...

0800419c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800419c:	4801      	ldr	r0, [pc, #4]	; (80041a4 <CAN1_RX1_IRQHandler+0x8>)
 800419e:	f000 bb8e 	b.w	80048be <HAL_CAN_IRQHandler>
 80041a2:	bf00      	nop
 80041a4:	200001c4 	.word	0x200001c4

080041a8 <USB_LP_CAN1_RX0_IRQHandler>:
 80041a8:	f7ff bff8 	b.w	800419c <CAN1_RX1_IRQHandler>

080041ac <USB_HP_CAN1_TX_IRQHandler>:
 80041ac:	f7ff bff6 	b.w	800419c <CAN1_RX1_IRQHandler>

080041b0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041b0:	4801      	ldr	r0, [pc, #4]	; (80041b8 <TIM3_IRQHandler+0x8>)
 80041b2:	f001 b997 	b.w	80054e4 <HAL_TIM_IRQHandler>
 80041b6:	bf00      	nop
 80041b8:	20000214 	.word	0x20000214

080041bc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041bc:	4801      	ldr	r0, [pc, #4]	; (80041c4 <USART2_IRQHandler+0x8>)
 80041be:	f001 bc5b 	b.w	8005a78 <HAL_UART_IRQHandler>
 80041c2:	bf00      	nop
 80041c4:	200002a4 	.word	0x200002a4

080041c8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80041c8:	2001      	movs	r0, #1
 80041ca:	4770      	bx	lr

080041cc <_kill>:

int _kill(int pid, int sig)
{
 80041cc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80041ce:	f004 f803 	bl	80081d8 <__errno>
 80041d2:	2316      	movs	r3, #22
 80041d4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80041d6:	f04f 30ff 	mov.w	r0, #4294967295
 80041da:	bd08      	pop	{r3, pc}

080041dc <_exit>:

void _exit (int status)
{
 80041dc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80041de:	f003 fffb 	bl	80081d8 <__errno>
 80041e2:	2316      	movs	r3, #22
 80041e4:	6003      	str	r3, [r0, #0]
 80041e6:	e7fe      	b.n	80041e6 <_exit+0xa>

080041e8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80041e8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <_sbrk+0x2c>)
{
 80041ec:	4602      	mov	r2, r0
	if (heap_end == 0)
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	b909      	cbnz	r1, 80041f6 <_sbrk+0xe>
		heap_end = &end;
 80041f2:	4909      	ldr	r1, [pc, #36]	; (8004218 <_sbrk+0x30>)
 80041f4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80041f6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80041f8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80041fa:	4402      	add	r2, r0
 80041fc:	428a      	cmp	r2, r1
 80041fe:	d906      	bls.n	800420e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004200:	f003 ffea 	bl	80081d8 <__errno>
 8004204:	230c      	movs	r3, #12
 8004206:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004208:	f04f 30ff 	mov.w	r0, #4294967295
 800420c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800420e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004210:	bd08      	pop	{r3, pc}
 8004212:	bf00      	nop
 8004214:	200001a8 	.word	0x200001a8
 8004218:	200002ec 	.word	0x200002ec

0800421c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800421c:	4770      	bx	lr
	...

08004220 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004222:	2210      	movs	r2, #16
 8004224:	2100      	movs	r1, #0
 8004226:	a802      	add	r0, sp, #8
 8004228:	f004 f810 	bl	800824c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8;
 800422c:	2208      	movs	r2, #8
 800422e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8004232:	4814      	ldr	r0, [pc, #80]	; (8004284 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004234:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 8;
 8004236:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xffff;
 800423a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004242:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xffff;
 8004244:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004246:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004248:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800424a:	f001 fa25 	bl	8005698 <HAL_TIM_Base_Init>
 800424e:	b108      	cbz	r0, 8004254 <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 8004250:	f7ff ff6d 	bl	800412e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004258:	a902      	add	r1, sp, #8
 800425a:	480a      	ldr	r0, [pc, #40]	; (8004284 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800425c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800425e:	f001 fa51 	bl	8005704 <HAL_TIM_ConfigClockSource>
 8004262:	b108      	cbz	r0, 8004268 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 8004264:	f7ff ff63 	bl	800412e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004268:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800426a:	4669      	mov	r1, sp
 800426c:	4805      	ldr	r0, [pc, #20]	; (8004284 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800426e:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004270:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004272:	f001 fadb 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8004276:	b108      	cbz	r0, 800427c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8004278:	f7ff ff59 	bl	800412e <Error_Handler>
  }

}
 800427c:	b007      	add	sp, #28
 800427e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004282:	bf00      	nop
 8004284:	2000025c 	.word	0x2000025c

08004288 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800428a:	2210      	movs	r2, #16
 800428c:	2100      	movs	r1, #0
 800428e:	a802      	add	r0, sp, #8
 8004290:	f003 ffdc 	bl	800824c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004294:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 800-1;
 8004296:	f240 321f 	movw	r2, #799	; 0x31f
  htim3.Instance = TIM3;
 800429a:	4814      	ldr	r0, [pc, #80]	; (80042ec <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 800-1;
 800429c:	4914      	ldr	r1, [pc, #80]	; (80042f0 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 800-1;
 80042a2:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042a6:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80042a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ac:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042ae:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80042b0:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042b2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80042b4:	f001 f9f0 	bl	8005698 <HAL_TIM_Base_Init>
 80042b8:	b108      	cbz	r0, 80042be <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 80042ba:	f7ff ff38 	bl	800412e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042c2:	a902      	add	r1, sp, #8
 80042c4:	4809      	ldr	r0, [pc, #36]	; (80042ec <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042c6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042c8:	f001 fa1c 	bl	8005704 <HAL_TIM_ConfigClockSource>
 80042cc:	b108      	cbz	r0, 80042d2 <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 80042ce:	f7ff ff2e 	bl	800412e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042d4:	4669      	mov	r1, sp
 80042d6:	4805      	ldr	r0, [pc, #20]	; (80042ec <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042da:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042dc:	f001 faa6 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 80042e0:	b108      	cbz	r0, 80042e6 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 80042e2:	f7ff ff24 	bl	800412e <Error_Handler>
  }

}
 80042e6:	b007      	add	sp, #28
 80042e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80042ec:	20000214 	.word	0x20000214
 80042f0:	40000400 	.word	0x40000400

080042f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80042f4:	6803      	ldr	r3, [r0, #0]
{
 80042f6:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 80042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fc:	d10d      	bne.n	800431a <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	61da      	str	r2, [r3, #28]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004314:	b003      	add	sp, #12
 8004316:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 800431a:	4a0b      	ldr	r2, [pc, #44]	; (8004348 <HAL_TIM_Base_MspInit+0x54>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d1f9      	bne.n	8004314 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004320:	4b0a      	ldr	r3, [pc, #40]	; (800434c <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004322:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	f042 0202 	orr.w	r2, r2, #2
 800432a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800432e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004330:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	9301      	str	r3, [sp, #4]
 8004338:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800433a:	f000 fbd1 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800433e:	201d      	movs	r0, #29
 8004340:	f000 fc02 	bl	8004b48 <HAL_NVIC_EnableIRQ>
}
 8004344:	e7e6      	b.n	8004314 <HAL_TIM_Base_MspInit+0x20>
 8004346:	bf00      	nop
 8004348:	40000400 	.word	0x40000400
 800434c:	40021000 	.word	0x40021000

08004350 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004350:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 100000;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
  huart2.Init.StopBits = UART_STOPBITS_2;
 8004352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004356:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  huart2.Instance = USART2;
 800435a:	480a      	ldr	r0, [pc, #40]	; (8004384 <MX_USART2_UART_Init+0x34>)
  huart2.Init.StopBits = UART_STOPBITS_2;
 800435c:	490a      	ldr	r1, [pc, #40]	; (8004388 <MX_USART2_UART_Init+0x38>)
 800435e:	4a0b      	ldr	r2, [pc, #44]	; (800438c <MX_USART2_UART_Init+0x3c>)
 8004360:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004368:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800436a:	230c      	movs	r3, #12
 800436c:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800436e:	2300      	movs	r3, #0
 8004370:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004372:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004374:	f001 fad6 	bl	8005924 <HAL_UART_Init>
 8004378:	b118      	cbz	r0, 8004382 <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 800437a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800437e:	f7ff bed6 	b.w	800412e <Error_Handler>
 8004382:	bd08      	pop	{r3, pc}
 8004384:	200002a4 	.word	0x200002a4
 8004388:	40004400 	.word	0x40004400
 800438c:	000186a0 	.word	0x000186a0

08004390 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004390:	b510      	push	{r4, lr}
 8004392:	4604      	mov	r4, r0
 8004394:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004396:	2210      	movs	r2, #16
 8004398:	2100      	movs	r1, #0
 800439a:	a802      	add	r0, sp, #8
 800439c:	f003 ff56 	bl	800824c <memset>
  if(uartHandle->Instance==USART2)
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_UART_MspInit+0x7c>)
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d12f      	bne.n	8004408 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80043a8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80043ac:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ae:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80043b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80043b4:	61da      	str	r2, [r3, #28]
 80043b6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b8:	4815      	ldr	r0, [pc, #84]	; (8004410 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80043ba:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80043be:	9200      	str	r2, [sp, #0]
 80043c0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c2:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c4:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c6:	f042 0204 	orr.w	r2, r2, #4
 80043ca:	619a      	str	r2, [r3, #24]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	9301      	str	r3, [sp, #4]
 80043d4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043d6:	2304      	movs	r3, #4
 80043d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043da:	2302      	movs	r3, #2
 80043dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043de:	2303      	movs	r3, #3
 80043e0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e2:	f000 fc31 	bl	8004c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043e6:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e8:	4809      	ldr	r0, [pc, #36]	; (8004410 <HAL_UART_MspInit+0x80>)
 80043ea:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043ee:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f4:	f000 fc28 	bl	8004c48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80043f8:	2026      	movs	r0, #38	; 0x26
 80043fa:	4622      	mov	r2, r4
 80043fc:	4621      	mov	r1, r4
 80043fe:	f000 fb6f 	bl	8004ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004402:	2026      	movs	r0, #38	; 0x26
 8004404:	f000 fba0 	bl	8004b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004408:	b006      	add	sp, #24
 800440a:	bd10      	pop	{r4, pc}
 800440c:	40004400 	.word	0x40004400
 8004410:	40010800 	.word	0x40010800

08004414 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004414:	b508      	push	{r3, lr}

  if(uartHandle->Instance==USART2)
 8004416:	6802      	ldr	r2, [r0, #0]
 8004418:	4b08      	ldr	r3, [pc, #32]	; (800443c <HAL_UART_MspDeInit+0x28>)
 800441a:	429a      	cmp	r2, r3
 800441c:	d10d      	bne.n	800443a <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800441e:	4a08      	ldr	r2, [pc, #32]	; (8004440 <HAL_UART_MspDeInit+0x2c>)
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004420:	4808      	ldr	r0, [pc, #32]	; (8004444 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8004422:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004424:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8004426:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800442a:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800442c:	f000 fcee 	bl	8004e0c <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
} 
 8004430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004434:	2026      	movs	r0, #38	; 0x26
 8004436:	f000 bb95 	b.w	8004b64 <HAL_NVIC_DisableIRQ>
 800443a:	bd08      	pop	{r3, pc}
 800443c:	40004400 	.word	0x40004400
 8004440:	40021000 	.word	0x40021000
 8004444:	40010800 	.word	0x40010800

08004448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800444a:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <HAL_InitTick+0x3c>)
{
 800444c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800444e:	7818      	ldrb	r0, [r3, #0]
 8004450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004454:	fbb3 f3f0 	udiv	r3, r3, r0
 8004458:	4a0b      	ldr	r2, [pc, #44]	; (8004488 <HAL_InitTick+0x40>)
 800445a:	6810      	ldr	r0, [r2, #0]
 800445c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004460:	f000 fb94 	bl	8004b8c <HAL_SYSTICK_Config>
 8004464:	4604      	mov	r4, r0
 8004466:	b958      	cbnz	r0, 8004480 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004468:	2d0f      	cmp	r5, #15
 800446a:	d809      	bhi.n	8004480 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800446c:	4602      	mov	r2, r0
 800446e:	4629      	mov	r1, r5
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	f000 fb34 	bl	8004ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <HAL_InitTick+0x44>)
 800447a:	4620      	mov	r0, r4
 800447c:	601d      	str	r5, [r3, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004480:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	2000000c 	.word	0x2000000c
 8004488:	20000008 	.word	0x20000008
 800448c:	20000010 	.word	0x20000010

08004490 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004490:	4a07      	ldr	r2, [pc, #28]	; (80044b0 <HAL_Init+0x20>)
{
 8004492:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004494:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004496:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004498:	f043 0310 	orr.w	r3, r3, #16
 800449c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800449e:	f000 fb0d 	bl	8004abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80044a2:	2000      	movs	r0, #0
 80044a4:	f7ff ffd0 	bl	8004448 <HAL_InitTick>
  HAL_MspInit();
 80044a8:	f7ff fe48 	bl	800413c <HAL_MspInit>
}
 80044ac:	2000      	movs	r0, #0
 80044ae:	bd08      	pop	{r3, pc}
 80044b0:	40022000 	.word	0x40022000

080044b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <HAL_IncTick+0x10>)
 80044b6:	4b04      	ldr	r3, [pc, #16]	; (80044c8 <HAL_IncTick+0x14>)
 80044b8:	6811      	ldr	r1, [r2, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	440b      	add	r3, r1
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	200002e4 	.word	0x200002e4
 80044c8:	2000000c 	.word	0x2000000c

080044cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80044cc:	4b01      	ldr	r3, [pc, #4]	; (80044d4 <HAL_GetTick+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	200002e4 	.word	0x200002e4

080044d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80044d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80044da:	4604      	mov	r4, r0
 80044dc:	2800      	cmp	r0, #0
 80044de:	d06e      	beq.n	80045be <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80044e0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80044e4:	b90b      	cbnz	r3, 80044ea <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80044e6:	f7ff fc8d 	bl	8003e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f023 0302 	bic.w	r3, r3, #2
 80044f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f4:	f7ff ffea 	bl	80044cc <HAL_GetTick>
 80044f8:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	0791      	lsls	r1, r2, #30
 8004500:	d451      	bmi.n	80045a6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800450a:	f7ff ffdf 	bl	80044cc <HAL_GetTick>
 800450e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	07d2      	lsls	r2, r2, #31
 8004516:	d554      	bpl.n	80045c2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004518:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800451a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800451c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	bf0c      	ite	eq
 8004522:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004526:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800452a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800452c:	7e62      	ldrb	r2, [r4, #25]
 800452e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	bf0c      	ite	eq
 8004534:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004538:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800453c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800453e:	7ea2      	ldrb	r2, [r4, #26]
 8004540:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	bf0c      	ite	eq
 8004546:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800454a:	f022 0220 	bicne.w	r2, r2, #32
 800454e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004550:	7ee2      	ldrb	r2, [r4, #27]
 8004552:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	bf0c      	ite	eq
 8004558:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800455c:	f042 0210 	orrne.w	r2, r2, #16
 8004560:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004562:	7f22      	ldrb	r2, [r4, #28]
 8004564:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	bf0c      	ite	eq
 800456a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800456e:	f022 0208 	bicne.w	r2, r2, #8
 8004572:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004574:	7f62      	ldrb	r2, [r4, #29]
 8004576:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	bf0c      	ite	eq
 800457c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004580:	f022 0204 	bicne.w	r2, r2, #4
 8004584:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004586:	68e1      	ldr	r1, [r4, #12]
 8004588:	68a2      	ldr	r2, [r4, #8]
 800458a:	430a      	orrs	r2, r1
 800458c:	6921      	ldr	r1, [r4, #16]
 800458e:	430a      	orrs	r2, r1
 8004590:	6961      	ldr	r1, [r4, #20]
 8004592:	430a      	orrs	r2, r1
 8004594:	6861      	ldr	r1, [r4, #4]
 8004596:	3901      	subs	r1, #1
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800459c:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800459e:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80045a0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80045a4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045a6:	f7ff ff91 	bl	80044cc <HAL_GetTick>
 80045aa:	1b40      	subs	r0, r0, r5
 80045ac:	280a      	cmp	r0, #10
 80045ae:	d9a4      	bls.n	80044fa <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045b6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80045b8:	2305      	movs	r3, #5
 80045ba:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80045be:	2001      	movs	r0, #1
}
 80045c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80045c2:	f7ff ff83 	bl	80044cc <HAL_GetTick>
 80045c6:	1b40      	subs	r0, r0, r5
 80045c8:	280a      	cmp	r0, #10
 80045ca:	d9a1      	bls.n	8004510 <HAL_CAN_Init+0x38>
 80045cc:	e7f0      	b.n	80045b0 <HAL_CAN_Init+0xd8>

080045ce <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80045ce:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80045d2:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 80045d4:	3b01      	subs	r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d85f      	bhi.n	800469a <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045da:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 80045dc:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045de:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80045ec:	f000 021f 	and.w	r2, r0, #31
 80045f0:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80045f4:	43d4      	mvns	r4, r2
 80045f6:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 80045fa:	4025      	ands	r5, r4
 80045fc:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004600:	69cd      	ldr	r5, [r1, #28]
 8004602:	bb85      	cbnz	r5, 8004666 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004604:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004608:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800460a:	4025      	ands	r5, r4
 800460c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004610:	888d      	ldrh	r5, [r1, #4]
 8004612:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004616:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800461a:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800461e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004620:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004622:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004626:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800462a:	6988      	ldr	r0, [r1, #24]
 800462c:	bb68      	cbnz	r0, 800468a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800462e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8004632:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004634:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004638:	6908      	ldr	r0, [r1, #16]
 800463a:	bb50      	cbnz	r0, 8004692 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800463c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004640:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004642:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004646:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8004648:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800464a:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800464c:	bf02      	ittt	eq
 800464e:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8004652:	430a      	orreq	r2, r1
 8004654:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004658:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8004664:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004666:	2d01      	cmp	r5, #1
 8004668:	d1df      	bne.n	800462a <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800466a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800466e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004670:	4315      	orrs	r5, r2
 8004672:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004676:	888d      	ldrh	r5, [r1, #4]
 8004678:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800467c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004680:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004684:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004686:	898d      	ldrh	r5, [r1, #12]
 8004688:	e7cb      	b.n	8004622 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800468a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800468e:	4310      	orrs	r0, r2
 8004690:	e7d0      	b.n	8004634 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004692:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8004696:	4310      	orrs	r0, r2
 8004698:	e7d3      	b.n	8004642 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800469a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800469c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80046a2:	2001      	movs	r0, #1
  }
}
 80046a4:	bd70      	pop	{r4, r5, r6, pc}

080046a6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80046a6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80046a8:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80046ac:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d11f      	bne.n	80046f2 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80046b2:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046b4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80046b6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046ba:	6813      	ldr	r3, [r2, #0]
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046c2:	f7ff ff03 	bl	80044cc <HAL_GetTick>
 80046c6:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	6858      	ldr	r0, [r3, #4]
 80046cc:	f010 0001 	ands.w	r0, r0, #1
 80046d0:	d101      	bne.n	80046d6 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046d2:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046d6:	f7ff fef9 	bl	80044cc <HAL_GetTick>
 80046da:	1b40      	subs	r0, r0, r5
 80046dc:	280a      	cmp	r0, #10
 80046de:	d9f3      	bls.n	80046c8 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80046e8:	2305      	movs	r3, #5
 80046ea:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 80046ee:	2001      	movs	r0, #1
  }
}
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80046f2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046f8:	6243      	str	r3, [r0, #36]	; 0x24
 80046fa:	e7f8      	b.n	80046ee <HAL_CAN_Start+0x48>

080046fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046fe:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004702:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004704:	3d01      	subs	r5, #1
 8004706:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004708:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800470a:	d841      	bhi.n	8004790 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800470c:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8004710:	d03a      	beq.n	8004788 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004712:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004716:	2c03      	cmp	r4, #3
 8004718:	f04f 0501 	mov.w	r5, #1
 800471c:	d105      	bne.n	800472a <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800471e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004720:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004724:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004726:	2001      	movs	r0, #1
  }
}
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800472a:	40a5      	lsls	r5, r4
 800472c:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 800472e:	6888      	ldr	r0, [r1, #8]
 8004730:	68cf      	ldr	r7, [r1, #12]
 8004732:	f104 0318 	add.w	r3, r4, #24
 8004736:	bb10      	cbnz	r0, 800477e <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004738:	6808      	ldr	r0, [r1, #0]
 800473a:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004742:	6908      	ldr	r0, [r1, #16]
 8004744:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004746:	7d09      	ldrb	r1, [r1, #20]
 8004748:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800474a:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 800474e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004750:	bf08      	it	eq
 8004752:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004756:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004758:	bf04      	itt	eq
 800475a:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 800475e:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004762:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8004764:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004766:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004770:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004774:	f042 0201 	orr.w	r2, r2, #1
 8004778:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 800477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800477e:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8004780:	4338      	orrs	r0, r7
 8004782:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8004786:	e7da      	b.n	800473e <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004788:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800478a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800478e:	e7c9      	b.n	8004724 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004790:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004796:	e7c5      	b.n	8004724 <HAL_CAN_AddTxMessage+0x28>

08004798 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004798:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800479a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800479e:	3c01      	subs	r4, #1
 80047a0:	2c01      	cmp	r4, #1
 80047a2:	d86b      	bhi.n	800487c <HAL_CAN_GetRxMessage+0xe4>
 80047a4:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80047a6:	b941      	cbnz	r1, 80047ba <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80047a8:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80047aa:	07a4      	lsls	r4, r4, #30
 80047ac:	d107      	bne.n	80047be <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80047ae:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047b4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80047b6:	2001      	movs	r0, #1
  }
}
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80047ba:	6934      	ldr	r4, [r6, #16]
 80047bc:	e7f5      	b.n	80047aa <HAL_CAN_GetRxMessage+0x12>
 80047be:	010c      	lsls	r4, r1, #4
 80047c0:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80047c2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80047c6:	f007 0704 	and.w	r7, r7, #4
 80047ca:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	d14b      	bne.n	8004868 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80047d0:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80047d4:	0d7f      	lsrs	r7, r7, #21
 80047d6:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80047d8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80047dc:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80047de:	f007 0702 	and.w	r7, r7, #2
 80047e2:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80047e4:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 80047e8:	f007 070f 	and.w	r7, r7, #15
 80047ec:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047ee:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047f2:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047fa:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80047fc:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80047fe:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004800:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004804:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004806:	6802      	ldr	r2, [r0, #0]
 8004808:	4422      	add	r2, r4
 800480a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800480e:	0a12      	lsrs	r2, r2, #8
 8004810:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004812:	6802      	ldr	r2, [r0, #0]
 8004814:	4422      	add	r2, r4
 8004816:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800481a:	0c12      	lsrs	r2, r2, #16
 800481c:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800481e:	6802      	ldr	r2, [r0, #0]
 8004820:	4422      	add	r2, r4
 8004822:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004826:	0e12      	lsrs	r2, r2, #24
 8004828:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800482a:	6802      	ldr	r2, [r0, #0]
 800482c:	4422      	add	r2, r4
 800482e:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004832:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004834:	6802      	ldr	r2, [r0, #0]
 8004836:	4422      	add	r2, r4
 8004838:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800483c:	0a12      	lsrs	r2, r2, #8
 800483e:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004840:	6802      	ldr	r2, [r0, #0]
 8004842:	4422      	add	r2, r4
 8004844:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004848:	0c12      	lsrs	r2, r2, #16
 800484a:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800484c:	6802      	ldr	r2, [r0, #0]
 800484e:	4414      	add	r4, r2
 8004850:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8004854:	0e12      	lsrs	r2, r2, #24
 8004856:	71da      	strb	r2, [r3, #7]
 8004858:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800485a:	b951      	cbnz	r1, 8004872 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	f042 0220 	orr.w	r2, r2, #32
 8004862:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8004864:	2000      	movs	r0, #0
 8004866:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004868:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800486c:	08ff      	lsrs	r7, r7, #3
 800486e:	6057      	str	r7, [r2, #4]
 8004870:	e7b2      	b.n	80047d8 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004872:	691a      	ldr	r2, [r3, #16]
 8004874:	f042 0220 	orr.w	r2, r2, #32
 8004878:	611a      	str	r2, [r3, #16]
 800487a:	e7f3      	b.n	8004864 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800487c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800487e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004882:	e797      	b.n	80047b4 <HAL_CAN_GetRxMessage+0x1c>

08004884 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8004884:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004888:	3b01      	subs	r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d805      	bhi.n	800489a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800488e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8004890:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004892:	6953      	ldr	r3, [r2, #20]
 8004894:	4319      	orrs	r1, r3
 8004896:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8004898:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800489a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800489c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80048a2:	2001      	movs	r0, #1
  }
}
 80048a4:	4770      	bx	lr

080048a6 <HAL_CAN_TxMailbox0CompleteCallback>:
 80048a6:	4770      	bx	lr

080048a8 <HAL_CAN_TxMailbox1CompleteCallback>:
 80048a8:	4770      	bx	lr

080048aa <HAL_CAN_TxMailbox2CompleteCallback>:
 80048aa:	4770      	bx	lr

080048ac <HAL_CAN_TxMailbox0AbortCallback>:
 80048ac:	4770      	bx	lr

080048ae <HAL_CAN_TxMailbox1AbortCallback>:
 80048ae:	4770      	bx	lr

080048b0 <HAL_CAN_TxMailbox2AbortCallback>:
 80048b0:	4770      	bx	lr

080048b2 <HAL_CAN_RxFifo0FullCallback>:
 80048b2:	4770      	bx	lr

080048b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80048b4:	4770      	bx	lr

080048b6 <HAL_CAN_RxFifo1FullCallback>:
 80048b6:	4770      	bx	lr

080048b8 <HAL_CAN_SleepCallback>:
 80048b8:	4770      	bx	lr

080048ba <HAL_CAN_WakeUpFromRxMsgCallback>:
 80048ba:	4770      	bx	lr

080048bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048bc:	4770      	bx	lr

080048be <HAL_CAN_IRQHandler>:
{
 80048be:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048c2:	6803      	ldr	r3, [r0, #0]
{
 80048c4:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80048c6:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80048c8:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80048cc:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80048d0:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80048d2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80048d6:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80048da:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80048de:	d022      	beq.n	8004926 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80048e0:	f017 0401 	ands.w	r4, r7, #1
 80048e4:	d007      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80048e6:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048e8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80048ea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80048ec:	f140 80a3 	bpl.w	8004a36 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80048f0:	f7ff ffd9 	bl	80048a6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80048f4:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80048f6:	05fb      	lsls	r3, r7, #23
 80048f8:	d509      	bpl.n	800490e <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80048fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fe:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004900:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004902:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004904:	f140 80a5 	bpl.w	8004a52 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004908:	4628      	mov	r0, r5
 800490a:	f7ff ffcd 	bl	80048a8 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800490e:	03fb      	lsls	r3, r7, #15
 8004910:	d509      	bpl.n	8004926 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004912:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004916:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004918:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800491a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800491c:	f140 80a7 	bpl.w	8004a6e <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004920:	4628      	mov	r0, r5
 8004922:	f7ff ffc2 	bl	80048aa <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004926:	0733      	lsls	r3, r6, #28
 8004928:	d507      	bpl.n	800493a <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800492a:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800492e:	bf1f      	itttt	ne
 8004930:	2210      	movne	r2, #16
 8004932:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004934:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004938:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800493a:	0777      	lsls	r7, r6, #29
 800493c:	d508      	bpl.n	8004950 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800493e:	f01b 0f08 	tst.w	fp, #8
 8004942:	d005      	beq.n	8004950 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004944:	2208      	movs	r2, #8
 8004946:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004948:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800494a:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800494c:	f7ff ffb1 	bl	80048b2 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004950:	07b0      	lsls	r0, r6, #30
 8004952:	d506      	bpl.n	8004962 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0799      	lsls	r1, r3, #30
 800495a:	d002      	beq.n	8004962 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800495c:	4628      	mov	r0, r5
 800495e:	f7ff fab7 	bl	8003ed0 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004962:	0672      	lsls	r2, r6, #25
 8004964:	d507      	bpl.n	8004976 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004966:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800496a:	bf1f      	itttt	ne
 800496c:	2210      	movne	r2, #16
 800496e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004970:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004974:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004976:	06b3      	lsls	r3, r6, #26
 8004978:	d508      	bpl.n	800498c <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800497a:	f01a 0f08 	tst.w	sl, #8
 800497e:	d005      	beq.n	800498c <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004980:	2208      	movs	r2, #8
 8004982:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004984:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004986:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004988:	f7ff ff95 	bl	80048b6 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800498c:	06f7      	lsls	r7, r6, #27
 800498e:	d506      	bpl.n	800499e <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	0798      	lsls	r0, r3, #30
 8004996:	d002      	beq.n	800499e <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004998:	4628      	mov	r0, r5
 800499a:	f7ff ff8b 	bl	80048b4 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800499e:	03b1      	lsls	r1, r6, #14
 80049a0:	d508      	bpl.n	80049b4 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80049a2:	f019 0f10 	tst.w	r9, #16
 80049a6:	d005      	beq.n	80049b4 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80049a8:	2210      	movs	r2, #16
 80049aa:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80049ac:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80049ae:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80049b0:	f7ff ff82 	bl	80048b8 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80049b4:	03f2      	lsls	r2, r6, #15
 80049b6:	d508      	bpl.n	80049ca <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80049b8:	f019 0f08 	tst.w	r9, #8
 80049bc:	d005      	beq.n	80049ca <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049be:	2208      	movs	r2, #8
 80049c0:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049c2:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80049c4:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80049c6:	f7ff ff78 	bl	80048ba <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80049ca:	0433      	lsls	r3, r6, #16
 80049cc:	d52a      	bpl.n	8004a24 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80049ce:	f019 0f04 	tst.w	r9, #4
 80049d2:	682a      	ldr	r2, [r5, #0]
 80049d4:	d024      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80049d6:	05f7      	lsls	r7, r6, #23
 80049d8:	d504      	bpl.n	80049e4 <HAL_CAN_IRQHandler+0x126>
 80049da:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80049de:	bf18      	it	ne
 80049e0:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80049e4:	05b0      	lsls	r0, r6, #22
 80049e6:	d504      	bpl.n	80049f2 <HAL_CAN_IRQHandler+0x134>
 80049e8:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80049ec:	bf18      	it	ne
 80049ee:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049f2:	0571      	lsls	r1, r6, #21
 80049f4:	d504      	bpl.n	8004a00 <HAL_CAN_IRQHandler+0x142>
 80049f6:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80049fa:	bf18      	it	ne
 80049fc:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004a00:	0533      	lsls	r3, r6, #20
 8004a02:	d50d      	bpl.n	8004a20 <HAL_CAN_IRQHandler+0x162>
 8004a04:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8004a08:	d00a      	beq.n	8004a20 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8004a0a:	2b30      	cmp	r3, #48	; 0x30
 8004a0c:	d04c      	beq.n	8004aa8 <HAL_CAN_IRQHandler+0x1ea>
 8004a0e:	d83c      	bhi.n	8004a8a <HAL_CAN_IRQHandler+0x1cc>
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d043      	beq.n	8004a9c <HAL_CAN_IRQHandler+0x1de>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d044      	beq.n	8004aa2 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a18:	6993      	ldr	r3, [r2, #24]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a20:	2304      	movs	r3, #4
 8004a22:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a24:	b12c      	cbz	r4, 8004a32 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8004a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004a28:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8004a2a:	431c      	orrs	r4, r3
 8004a2c:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004a2e:	f7ff ff45 	bl	80048bc <HAL_CAN_ErrorCallback>
 8004a32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004a36:	077a      	lsls	r2, r7, #29
 8004a38:	d405      	bmi.n	8004a46 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004a3a:	f017 0408 	ands.w	r4, r7, #8
 8004a3e:	d105      	bne.n	8004a4c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004a40:	f7ff ff34 	bl	80048ac <HAL_CAN_TxMailbox0AbortCallback>
 8004a44:	e757      	b.n	80048f6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004a46:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004a4a:	e754      	b.n	80048f6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004a4c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8004a50:	e751      	b.n	80048f6 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004a52:	0579      	lsls	r1, r7, #21
 8004a54:	d502      	bpl.n	8004a5c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004a56:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004a5a:	e758      	b.n	800490e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004a5c:	053a      	lsls	r2, r7, #20
 8004a5e:	d502      	bpl.n	8004a66 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004a60:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004a64:	e753      	b.n	800490e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004a66:	4628      	mov	r0, r5
 8004a68:	f7ff ff21 	bl	80048ae <HAL_CAN_TxMailbox1AbortCallback>
 8004a6c:	e74f      	b.n	800490e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004a6e:	0379      	lsls	r1, r7, #13
 8004a70:	d502      	bpl.n	8004a78 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004a72:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004a76:	e756      	b.n	8004926 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004a78:	033a      	lsls	r2, r7, #12
 8004a7a:	d502      	bpl.n	8004a82 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004a7c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8004a80:	e751      	b.n	8004926 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7ff ff14 	bl	80048b0 <HAL_CAN_TxMailbox2AbortCallback>
 8004a88:	e74d      	b.n	8004926 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8004a8a:	2b50      	cmp	r3, #80	; 0x50
 8004a8c:	d00f      	beq.n	8004aae <HAL_CAN_IRQHandler+0x1f0>
 8004a8e:	2b60      	cmp	r3, #96	; 0x60
 8004a90:	d010      	beq.n	8004ab4 <HAL_CAN_IRQHandler+0x1f6>
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d1c0      	bne.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a96:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8004a9a:	e7bd      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a9c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8004aa0:	e7ba      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004aa2:	f044 0410 	orr.w	r4, r4, #16
            break;
 8004aa6:	e7b7      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004aa8:	f044 0420 	orr.w	r4, r4, #32
            break;
 8004aac:	e7b4      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8004aae:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8004ab2:	e7b1      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004ab4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8004ab8:	e7ae      	b.n	8004a18 <HAL_CAN_IRQHandler+0x15a>
	...

08004abc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	4a07      	ldr	r2, [pc, #28]	; (8004adc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004abe:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ac0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004ac2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004ad6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004ad8:	60d3      	str	r3, [r2, #12]
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae2:	b530      	push	{r4, r5, lr}
 8004ae4:	68dc      	ldr	r4, [r3, #12]
 8004ae6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	bf28      	it	cs
 8004af4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afc:	bf98      	it	ls
 8004afe:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b00:	fa05 f303 	lsl.w	r3, r5, r3
 8004b04:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b08:	bf88      	it	hi
 8004b0a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b0c:	4019      	ands	r1, r3
 8004b0e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b10:	fa05 f404 	lsl.w	r4, r5, r4
 8004b14:	3c01      	subs	r4, #1
 8004b16:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004b18:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b1a:	ea42 0201 	orr.w	r2, r2, r1
 8004b1e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b22:	bfa9      	itett	ge
 8004b24:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	4b06      	ldrlt	r3, [pc, #24]	; (8004b44 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2a:	b2d2      	uxtbge	r2, r2
 8004b2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b30:	bfbb      	ittet	lt
 8004b32:	f000 000f 	andlt.w	r0, r0, #15
 8004b36:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b38:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b3c:	541a      	strblt	r2, [r3, r0]
 8004b3e:	bd30      	pop	{r4, r5, pc}
 8004b40:	e000ed00 	.word	0xe000ed00
 8004b44:	e000ed14 	.word	0xe000ed14

08004b48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	db08      	blt.n	8004b5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	0942      	lsrs	r2, r0, #5
 8004b50:	f000 001f 	and.w	r0, r0, #31
 8004b54:	fa03 f000 	lsl.w	r0, r3, r0
 8004b58:	4b01      	ldr	r3, [pc, #4]	; (8004b60 <HAL_NVIC_EnableIRQ+0x18>)
 8004b5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b64:	2800      	cmp	r0, #0
 8004b66:	db0d      	blt.n	8004b84 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b68:	2201      	movs	r2, #1
 8004b6a:	0943      	lsrs	r3, r0, #5
 8004b6c:	f000 001f 	and.w	r0, r0, #31
 8004b70:	fa02 f000 	lsl.w	r0, r2, r0
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_NVIC_DisableIRQ+0x24>)
 8004b76:	3320      	adds	r3, #32
 8004b78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b8c:	3801      	subs	r0, #1
 8004b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004b92:	d20a      	bcs.n	8004baa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b94:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b98:	4a06      	ldr	r2, [pc, #24]	; (8004bb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b9a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ba4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004baa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	e000e010 	.word	0xe000e010
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bb8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8004bbc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc2:	2304      	movs	r3, #4
 8004bc4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bca:	6803      	ldr	r3, [r0, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f022 020e 	bic.w	r2, r2, #14
 8004bd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004bdc:	4a18      	ldr	r2, [pc, #96]	; (8004c40 <HAL_DMA_Abort_IT+0x88>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <HAL_DMA_Abort_IT+0x6a>
 8004be2:	3214      	adds	r2, #20
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d01e      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x6e>
 8004be8:	3214      	adds	r2, #20
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <HAL_DMA_Abort_IT+0x72>
 8004bee:	3214      	adds	r2, #20
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d01d      	beq.n	8004c30 <HAL_DMA_Abort_IT+0x78>
 8004bf4:	3214      	adds	r2, #20
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d01d      	beq.n	8004c36 <HAL_DMA_Abort_IT+0x7e>
 8004bfa:	3214      	adds	r2, #20
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	bf0c      	ite	eq
 8004c00:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004c04:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8004c08:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c0a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c0c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c14:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8004c16:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8004c1a:	b17b      	cbz	r3, 8004c3c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8004c1c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	4620      	mov	r0, r4
 8004c20:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c22:	2301      	movs	r3, #1
 8004c24:	e7f0      	b.n	8004c08 <HAL_DMA_Abort_IT+0x50>
 8004c26:	2310      	movs	r3, #16
 8004c28:	e7ee      	b.n	8004c08 <HAL_DMA_Abort_IT+0x50>
 8004c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c2e:	e7eb      	b.n	8004c08 <HAL_DMA_Abort_IT+0x50>
 8004c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c34:	e7e8      	b.n	8004c08 <HAL_DMA_Abort_IT+0x50>
 8004c36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3a:	e7e5      	b.n	8004c08 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8004c3c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8004c3e:	bd10      	pop	{r4, pc}
 8004c40:	40020008 	.word	0x40020008
 8004c44:	40020000 	.word	0x40020000

08004c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c4c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8004c4e:	4626      	mov	r6, r4
 8004c50:	4b66      	ldr	r3, [pc, #408]	; (8004dec <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c52:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004dfc <HAL_GPIO_Init+0x1b4>
 8004c56:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8004e00 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c5a:	680a      	ldr	r2, [r1, #0]
 8004c5c:	fa32 f506 	lsrs.w	r5, r2, r6
 8004c60:	d102      	bne.n	8004c68 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8004c62:	b003      	add	sp, #12
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004c68:	f04f 0801 	mov.w	r8, #1
 8004c6c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c70:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8004c74:	4590      	cmp	r8, r2
 8004c76:	d17f      	bne.n	8004d78 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8004c78:	684d      	ldr	r5, [r1, #4]
 8004c7a:	2d12      	cmp	r5, #18
 8004c7c:	f000 80aa 	beq.w	8004dd4 <HAL_GPIO_Init+0x18c>
 8004c80:	f200 8083 	bhi.w	8004d8a <HAL_GPIO_Init+0x142>
 8004c84:	2d02      	cmp	r5, #2
 8004c86:	f000 80a2 	beq.w	8004dce <HAL_GPIO_Init+0x186>
 8004c8a:	d877      	bhi.n	8004d7c <HAL_GPIO_Init+0x134>
 8004c8c:	2d00      	cmp	r5, #0
 8004c8e:	f000 8089 	beq.w	8004da4 <HAL_GPIO_Init+0x15c>
 8004c92:	2d01      	cmp	r5, #1
 8004c94:	f000 8099 	beq.w	8004dca <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004c98:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004c9c:	2aff      	cmp	r2, #255	; 0xff
 8004c9e:	bf93      	iteet	ls
 8004ca0:	4682      	movls	sl, r0
 8004ca2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8004ca6:	3d08      	subhi	r5, #8
 8004ca8:	f8d0 b000 	ldrls.w	fp, [r0]
 8004cac:	bf92      	itee	ls
 8004cae:	00b5      	lslls	r5, r6, #2
 8004cb0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8004cb4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004cb6:	fa09 f805 	lsl.w	r8, r9, r5
 8004cba:	ea2b 0808 	bic.w	r8, fp, r8
 8004cbe:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004cc2:	bf88      	it	hi
 8004cc4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004cc8:	ea48 0505 	orr.w	r5, r8, r5
 8004ccc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cd0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004cd4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8004cd8:	d04e      	beq.n	8004d78 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004cda:	4d45      	ldr	r5, [pc, #276]	; (8004df0 <HAL_GPIO_Init+0x1a8>)
 8004cdc:	4f44      	ldr	r7, [pc, #272]	; (8004df0 <HAL_GPIO_Init+0x1a8>)
 8004cde:	69ad      	ldr	r5, [r5, #24]
 8004ce0:	f026 0803 	bic.w	r8, r6, #3
 8004ce4:	f045 0501 	orr.w	r5, r5, #1
 8004ce8:	61bd      	str	r5, [r7, #24]
 8004cea:	69bd      	ldr	r5, [r7, #24]
 8004cec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004cf0:	f005 0501 	and.w	r5, r5, #1
 8004cf4:	9501      	str	r5, [sp, #4]
 8004cf6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004cfa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004cfe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004d04:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004d08:	fa09 f90b 	lsl.w	r9, r9, fp
 8004d0c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004d10:	4d38      	ldr	r5, [pc, #224]	; (8004df4 <HAL_GPIO_Init+0x1ac>)
 8004d12:	42a8      	cmp	r0, r5
 8004d14:	d063      	beq.n	8004dde <HAL_GPIO_Init+0x196>
 8004d16:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d1a:	42a8      	cmp	r0, r5
 8004d1c:	d061      	beq.n	8004de2 <HAL_GPIO_Init+0x19a>
 8004d1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d22:	42a8      	cmp	r0, r5
 8004d24:	d05f      	beq.n	8004de6 <HAL_GPIO_Init+0x19e>
 8004d26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d2a:	42a8      	cmp	r0, r5
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2503      	moveq	r5, #3
 8004d30:	2504      	movne	r5, #4
 8004d32:	fa05 f50b 	lsl.w	r5, r5, fp
 8004d36:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004d3a:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004d3e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d40:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004d44:	bf14      	ite	ne
 8004d46:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004d48:	4395      	biceq	r5, r2
 8004d4a:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8004d4c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d4e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8004d52:	bf14      	ite	ne
 8004d54:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004d56:	4395      	biceq	r5, r2
 8004d58:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d5a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d5c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8004d60:	bf14      	ite	ne
 8004d62:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004d64:	4395      	biceq	r5, r2
 8004d66:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d68:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d6a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8004d6e:	bf14      	ite	ne
 8004d70:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004d72:	ea25 0202 	biceq.w	r2, r5, r2
 8004d76:	60da      	str	r2, [r3, #12]
	position++;
 8004d78:	3601      	adds	r6, #1
 8004d7a:	e76e      	b.n	8004c5a <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8004d7c:	2d03      	cmp	r5, #3
 8004d7e:	d022      	beq.n	8004dc6 <HAL_GPIO_Init+0x17e>
 8004d80:	2d11      	cmp	r5, #17
 8004d82:	d189      	bne.n	8004c98 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d84:	68cc      	ldr	r4, [r1, #12]
 8004d86:	3404      	adds	r4, #4
          break;
 8004d88:	e786      	b.n	8004c98 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8004d8a:	4f1b      	ldr	r7, [pc, #108]	; (8004df8 <HAL_GPIO_Init+0x1b0>)
 8004d8c:	42bd      	cmp	r5, r7
 8004d8e:	d009      	beq.n	8004da4 <HAL_GPIO_Init+0x15c>
 8004d90:	d812      	bhi.n	8004db8 <HAL_GPIO_Init+0x170>
 8004d92:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004e04 <HAL_GPIO_Init+0x1bc>
 8004d96:	454d      	cmp	r5, r9
 8004d98:	d004      	beq.n	8004da4 <HAL_GPIO_Init+0x15c>
 8004d9a:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8004d9e:	454d      	cmp	r5, r9
 8004da0:	f47f af7a 	bne.w	8004c98 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004da4:	688c      	ldr	r4, [r1, #8]
 8004da6:	b1c4      	cbz	r4, 8004dda <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004da8:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8004daa:	bf0c      	ite	eq
 8004dac:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8004db0:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004db4:	2408      	movs	r4, #8
 8004db6:	e76f      	b.n	8004c98 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8004db8:	4575      	cmp	r5, lr
 8004dba:	d0f3      	beq.n	8004da4 <HAL_GPIO_Init+0x15c>
 8004dbc:	4565      	cmp	r5, ip
 8004dbe:	d0f1      	beq.n	8004da4 <HAL_GPIO_Init+0x15c>
 8004dc0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004e08 <HAL_GPIO_Init+0x1c0>
 8004dc4:	e7eb      	b.n	8004d9e <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004dc6:	2400      	movs	r4, #0
 8004dc8:	e766      	b.n	8004c98 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004dca:	68cc      	ldr	r4, [r1, #12]
          break;
 8004dcc:	e764      	b.n	8004c98 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004dce:	68cc      	ldr	r4, [r1, #12]
 8004dd0:	3408      	adds	r4, #8
          break;
 8004dd2:	e761      	b.n	8004c98 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dd4:	68cc      	ldr	r4, [r1, #12]
 8004dd6:	340c      	adds	r4, #12
          break;
 8004dd8:	e75e      	b.n	8004c98 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004dda:	2404      	movs	r4, #4
 8004ddc:	e75c      	b.n	8004c98 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004dde:	2500      	movs	r5, #0
 8004de0:	e7a7      	b.n	8004d32 <HAL_GPIO_Init+0xea>
 8004de2:	2501      	movs	r5, #1
 8004de4:	e7a5      	b.n	8004d32 <HAL_GPIO_Init+0xea>
 8004de6:	2502      	movs	r5, #2
 8004de8:	e7a3      	b.n	8004d32 <HAL_GPIO_Init+0xea>
 8004dea:	bf00      	nop
 8004dec:	40010400 	.word	0x40010400
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40010800 	.word	0x40010800
 8004df8:	10210000 	.word	0x10210000
 8004dfc:	10310000 	.word	0x10310000
 8004e00:	10320000 	.word	0x10320000
 8004e04:	10110000 	.word	0x10110000
 8004e08:	10220000 	.word	0x10220000

08004e0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004e10:	f04f 0a04 	mov.w	sl, #4
  uint32_t position = 0x00u;
 8004e14:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004e16:	f04f 0901 	mov.w	r9, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004e1a:	f04f 0c0f 	mov.w	ip, #15
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004e1e:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <HAL_GPIO_DeInit+0xd4>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e20:	eb00 0b0a 	add.w	fp, r0, sl
  while ((GPIO_Pin >> position) != 0u)
 8004e24:	fa31 f403 	lsrs.w	r4, r1, r3
 8004e28:	d101      	bne.n	8004e2e <HAL_GPIO_DeInit+0x22>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004e2e:	fa09 f603 	lsl.w	r6, r9, r3
    if (iocurrent)
 8004e32:	400e      	ands	r6, r1
 8004e34:	d04c      	beq.n	8004ed0 <HAL_GPIO_DeInit+0xc4>
 8004e36:	f023 0403 	bic.w	r4, r3, #3
 8004e3a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8004e3e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004e42:	f003 0703 	and.w	r7, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8004e46:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004e48:	00bf      	lsls	r7, r7, #2
 8004e4a:	fa0c f807 	lsl.w	r8, ip, r7
 8004e4e:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004e52:	4d24      	ldr	r5, [pc, #144]	; (8004ee4 <HAL_GPIO_DeInit+0xd8>)
 8004e54:	42a8      	cmp	r0, r5
 8004e56:	d03d      	beq.n	8004ed4 <HAL_GPIO_DeInit+0xc8>
 8004e58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e5c:	42a8      	cmp	r0, r5
 8004e5e:	d03b      	beq.n	8004ed8 <HAL_GPIO_DeInit+0xcc>
 8004e60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e64:	42a8      	cmp	r0, r5
 8004e66:	d039      	beq.n	8004edc <HAL_GPIO_DeInit+0xd0>
 8004e68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e6c:	42a8      	cmp	r0, r5
 8004e6e:	bf0c      	ite	eq
 8004e70:	2503      	moveq	r5, #3
 8004e72:	2504      	movne	r5, #4
 8004e74:	40bd      	lsls	r5, r7
 8004e76:	45ae      	cmp	lr, r5
 8004e78:	ea6f 0506 	mvn.w	r5, r6
 8004e7c:	d10f      	bne.n	8004e9e <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004e7e:	68a7      	ldr	r7, [r4, #8]
 8004e80:	ea27 0708 	bic.w	r7, r7, r8
 8004e84:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8004e86:	6814      	ldr	r4, [r2, #0]
 8004e88:	402c      	ands	r4, r5
 8004e8a:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8004e8c:	6854      	ldr	r4, [r2, #4]
 8004e8e:	402c      	ands	r4, r5
 8004e90:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004e92:	6894      	ldr	r4, [r2, #8]
 8004e94:	402c      	ands	r4, r5
 8004e96:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8004e98:	68d4      	ldr	r4, [r2, #12]
 8004e9a:	402c      	ands	r4, r5
 8004e9c:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e9e:	2eff      	cmp	r6, #255	; 0xff
 8004ea0:	bf91      	iteee	ls
 8004ea2:	4607      	movls	r7, r0
 8004ea4:	465f      	movhi	r7, fp
 8004ea6:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 8004eaa:	3c08      	subhi	r4, #8
 8004eac:	bf95      	itete	ls
 8004eae:	f8d0 e000 	ldrls.w	lr, [r0]
 8004eb2:	f8d0 e004 	ldrhi.w	lr, [r0, #4]
 8004eb6:	009c      	lslls	r4, r3, #2
 8004eb8:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004eba:	fa0c f604 	lsl.w	r6, ip, r4
 8004ebe:	ea2e 0606 	bic.w	r6, lr, r6
 8004ec2:	fa0a f404 	lsl.w	r4, sl, r4
 8004ec6:	4326      	orrs	r6, r4
 8004ec8:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004eca:	68c4      	ldr	r4, [r0, #12]
 8004ecc:	4025      	ands	r5, r4
 8004ece:	60c5      	str	r5, [r0, #12]
    position++;
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	e7a7      	b.n	8004e24 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004ed4:	2500      	movs	r5, #0
 8004ed6:	e7cd      	b.n	8004e74 <HAL_GPIO_DeInit+0x68>
 8004ed8:	2501      	movs	r5, #1
 8004eda:	e7cb      	b.n	8004e74 <HAL_GPIO_DeInit+0x68>
 8004edc:	2502      	movs	r5, #2
 8004ede:	e7c9      	b.n	8004e74 <HAL_GPIO_DeInit+0x68>
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40010800 	.word	0x40010800

08004ee8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ee8:	b10a      	cbz	r2, 8004eee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004eea:	6101      	str	r1, [r0, #16]
 8004eec:	4770      	bx	lr
 8004eee:	0409      	lsls	r1, r1, #16
 8004ef0:	e7fb      	b.n	8004eea <HAL_GPIO_WritePin+0x2>

08004ef2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004ef4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ef6:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004ef8:	6959      	ldr	r1, [r3, #20]
 8004efa:	4201      	tst	r1, r0
 8004efc:	d002      	beq.n	8004f04 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004efe:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f00:	f7ff fff7 	bl	8004ef2 <HAL_GPIO_EXTI_Callback>
 8004f04:	bd08      	pop	{r3, pc}
 8004f06:	bf00      	nop
 8004f08:	40010400 	.word	0x40010400

08004f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f10:	4605      	mov	r5, r0
 8004f12:	b908      	cbnz	r0, 8004f18 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004f14:	2001      	movs	r0, #1
 8004f16:	e03c      	b.n	8004f92 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f18:	6803      	ldr	r3, [r0, #0]
 8004f1a:	07db      	lsls	r3, r3, #31
 8004f1c:	d410      	bmi.n	8004f40 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	079f      	lsls	r7, r3, #30
 8004f22:	d45d      	bmi.n	8004fe0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	0719      	lsls	r1, r3, #28
 8004f28:	f100 8094 	bmi.w	8005054 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2c:	682b      	ldr	r3, [r5, #0]
 8004f2e:	075a      	lsls	r2, r3, #29
 8004f30:	f100 80be 	bmi.w	80050b0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f34:	69e8      	ldr	r0, [r5, #28]
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f040 812c 	bne.w	8005194 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e028      	b.n	8004f92 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f40:	4c8f      	ldr	r4, [pc, #572]	; (8005180 <HAL_RCC_OscConfig+0x274>)
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d007      	beq.n	8004f5c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	f003 030c 	and.w	r3, r3, #12
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d109      	bne.n	8004f6a <HAL_RCC_OscConfig+0x5e>
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	03de      	lsls	r6, r3, #15
 8004f5a:	d506      	bpl.n	8004f6a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	039c      	lsls	r4, r3, #14
 8004f60:	d5dd      	bpl.n	8004f1e <HAL_RCC_OscConfig+0x12>
 8004f62:	686b      	ldr	r3, [r5, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1da      	bne.n	8004f1e <HAL_RCC_OscConfig+0x12>
 8004f68:	e7d4      	b.n	8004f14 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6a:	686b      	ldr	r3, [r5, #4]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d112      	bne.n	8004f98 <HAL_RCC_OscConfig+0x8c>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f78:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004f7a:	f7ff faa7 	bl	80044cc <HAL_GetTick>
 8004f7e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	0398      	lsls	r0, r3, #14
 8004f84:	d4cb      	bmi.n	8004f1e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f86:	f7ff faa1 	bl	80044cc <HAL_GetTick>
 8004f8a:	1b80      	subs	r0, r0, r6
 8004f8c:	2864      	cmp	r0, #100	; 0x64
 8004f8e:	d9f7      	bls.n	8004f80 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8004f90:	2003      	movs	r0, #3
}
 8004f92:	b002      	add	sp, #8
 8004f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f98:	b99b      	cbnz	r3, 8004fc2 <HAL_RCC_OscConfig+0xb6>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004faa:	f7ff fa8f 	bl	80044cc <HAL_GetTick>
 8004fae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	0399      	lsls	r1, r3, #14
 8004fb4:	d5b3      	bpl.n	8004f1e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb6:	f7ff fa89 	bl	80044cc <HAL_GetTick>
 8004fba:	1b80      	subs	r0, r0, r6
 8004fbc:	2864      	cmp	r0, #100	; 0x64
 8004fbe:	d9f7      	bls.n	8004fb0 <HAL_RCC_OscConfig+0xa4>
 8004fc0:	e7e6      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	d103      	bne.n	8004fd2 <HAL_RCC_OscConfig+0xc6>
 8004fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fce:	6023      	str	r3, [r4, #0]
 8004fd0:	e7cf      	b.n	8004f72 <HAL_RCC_OscConfig+0x66>
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fde:	e7cb      	b.n	8004f78 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fe0:	4c67      	ldr	r4, [pc, #412]	; (8005180 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	6863      	ldr	r3, [r4, #4]
 8004fe4:	f013 0f0c 	tst.w	r3, #12
 8004fe8:	d007      	beq.n	8004ffa <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	f003 030c 	and.w	r3, r3, #12
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d110      	bne.n	8005016 <HAL_RCC_OscConfig+0x10a>
 8004ff4:	6863      	ldr	r3, [r4, #4]
 8004ff6:	03da      	lsls	r2, r3, #15
 8004ff8:	d40d      	bmi.n	8005016 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	079b      	lsls	r3, r3, #30
 8004ffe:	d502      	bpl.n	8005006 <HAL_RCC_OscConfig+0xfa>
 8005000:	692b      	ldr	r3, [r5, #16]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d186      	bne.n	8004f14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	696a      	ldr	r2, [r5, #20]
 800500a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800500e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	e786      	b.n	8004f24 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005016:	692a      	ldr	r2, [r5, #16]
 8005018:	4b5a      	ldr	r3, [pc, #360]	; (8005184 <HAL_RCC_OscConfig+0x278>)
 800501a:	b16a      	cbz	r2, 8005038 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005020:	f7ff fa54 	bl	80044cc <HAL_GetTick>
 8005024:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079f      	lsls	r7, r3, #30
 800502a:	d4ec      	bmi.n	8005006 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502c:	f7ff fa4e 	bl	80044cc <HAL_GetTick>
 8005030:	1b80      	subs	r0, r0, r6
 8005032:	2802      	cmp	r0, #2
 8005034:	d9f7      	bls.n	8005026 <HAL_RCC_OscConfig+0x11a>
 8005036:	e7ab      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8005038:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800503a:	f7ff fa47 	bl	80044cc <HAL_GetTick>
 800503e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005040:	6823      	ldr	r3, [r4, #0]
 8005042:	0798      	lsls	r0, r3, #30
 8005044:	f57f af6e 	bpl.w	8004f24 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7ff fa40 	bl	80044cc <HAL_GetTick>
 800504c:	1b80      	subs	r0, r0, r6
 800504e:	2802      	cmp	r0, #2
 8005050:	d9f6      	bls.n	8005040 <HAL_RCC_OscConfig+0x134>
 8005052:	e79d      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005054:	69aa      	ldr	r2, [r5, #24]
 8005056:	4c4a      	ldr	r4, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x274>)
 8005058:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <HAL_RCC_OscConfig+0x27c>)
 800505a:	b1da      	cbz	r2, 8005094 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800505c:	2201      	movs	r2, #1
 800505e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005060:	f7ff fa34 	bl	80044cc <HAL_GetTick>
 8005064:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005068:	079b      	lsls	r3, r3, #30
 800506a:	d50d      	bpl.n	8005088 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800506c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005070:	4b46      	ldr	r3, [pc, #280]	; (800518c <HAL_RCC_OscConfig+0x280>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	fbb3 f3f2 	udiv	r3, r3, r2
 8005078:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800507a:	bf00      	nop
  }
  while (Delay --);
 800507c:	9b01      	ldr	r3, [sp, #4]
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	9201      	str	r2, [sp, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f9      	bne.n	800507a <HAL_RCC_OscConfig+0x16e>
 8005086:	e751      	b.n	8004f2c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7ff fa20 	bl	80044cc <HAL_GetTick>
 800508c:	1b80      	subs	r0, r0, r6
 800508e:	2802      	cmp	r0, #2
 8005090:	d9e9      	bls.n	8005066 <HAL_RCC_OscConfig+0x15a>
 8005092:	e77d      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8005094:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005096:	f7ff fa19 	bl	80044cc <HAL_GetTick>
 800509a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800509c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800509e:	079f      	lsls	r7, r3, #30
 80050a0:	f57f af44 	bpl.w	8004f2c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050a4:	f7ff fa12 	bl	80044cc <HAL_GetTick>
 80050a8:	1b80      	subs	r0, r0, r6
 80050aa:	2802      	cmp	r0, #2
 80050ac:	d9f6      	bls.n	800509c <HAL_RCC_OscConfig+0x190>
 80050ae:	e76f      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b0:	4c33      	ldr	r4, [pc, #204]	; (8005180 <HAL_RCC_OscConfig+0x274>)
 80050b2:	69e3      	ldr	r3, [r4, #28]
 80050b4:	00d8      	lsls	r0, r3, #3
 80050b6:	d424      	bmi.n	8005102 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80050b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ba:	69e3      	ldr	r3, [r4, #28]
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	61e3      	str	r3, [r4, #28]
 80050c2:	69e3      	ldr	r3, [r4, #28]
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050cc:	4e30      	ldr	r6, [pc, #192]	; (8005190 <HAL_RCC_OscConfig+0x284>)
 80050ce:	6833      	ldr	r3, [r6, #0]
 80050d0:	05d9      	lsls	r1, r3, #23
 80050d2:	d518      	bpl.n	8005106 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d4:	68eb      	ldr	r3, [r5, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d126      	bne.n	8005128 <HAL_RCC_OscConfig+0x21c>
 80050da:	6a23      	ldr	r3, [r4, #32]
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80050e2:	f7ff f9f3 	bl	80044cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80050ea:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	6a23      	ldr	r3, [r4, #32]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d53f      	bpl.n	8005172 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80050f2:	2f00      	cmp	r7, #0
 80050f4:	f43f af1e 	beq.w	8004f34 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f8:	69e3      	ldr	r3, [r4, #28]
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fe:	61e3      	str	r3, [r4, #28]
 8005100:	e718      	b.n	8004f34 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8005102:	2700      	movs	r7, #0
 8005104:	e7e2      	b.n	80050cc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005106:	6833      	ldr	r3, [r6, #0]
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800510e:	f7ff f9dd 	bl	80044cc <HAL_GetTick>
 8005112:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	6833      	ldr	r3, [r6, #0]
 8005116:	05da      	lsls	r2, r3, #23
 8005118:	d4dc      	bmi.n	80050d4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7ff f9d7 	bl	80044cc <HAL_GetTick>
 800511e:	eba0 0008 	sub.w	r0, r0, r8
 8005122:	2864      	cmp	r0, #100	; 0x64
 8005124:	d9f6      	bls.n	8005114 <HAL_RCC_OscConfig+0x208>
 8005126:	e733      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005128:	b9ab      	cbnz	r3, 8005156 <HAL_RCC_OscConfig+0x24a>
 800512a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	6223      	str	r3, [r4, #32]
 8005136:	6a23      	ldr	r3, [r4, #32]
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800513e:	f7ff f9c5 	bl	80044cc <HAL_GetTick>
 8005142:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	6a23      	ldr	r3, [r4, #32]
 8005146:	0798      	lsls	r0, r3, #30
 8005148:	d5d3      	bpl.n	80050f2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7ff f9bf 	bl	80044cc <HAL_GetTick>
 800514e:	1b80      	subs	r0, r0, r6
 8005150:	4540      	cmp	r0, r8
 8005152:	d9f7      	bls.n	8005144 <HAL_RCC_OscConfig+0x238>
 8005154:	e71c      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005156:	2b05      	cmp	r3, #5
 8005158:	6a23      	ldr	r3, [r4, #32]
 800515a:	d103      	bne.n	8005164 <HAL_RCC_OscConfig+0x258>
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6223      	str	r3, [r4, #32]
 8005162:	e7ba      	b.n	80050da <HAL_RCC_OscConfig+0x1ce>
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	6223      	str	r3, [r4, #32]
 800516a:	6a23      	ldr	r3, [r4, #32]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	e7b6      	b.n	80050e0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005172:	f7ff f9ab 	bl	80044cc <HAL_GetTick>
 8005176:	eba0 0008 	sub.w	r0, r0, r8
 800517a:	42b0      	cmp	r0, r6
 800517c:	d9b6      	bls.n	80050ec <HAL_RCC_OscConfig+0x1e0>
 800517e:	e707      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
 8005180:	40021000 	.word	0x40021000
 8005184:	42420000 	.word	0x42420000
 8005188:	42420480 	.word	0x42420480
 800518c:	20000008 	.word	0x20000008
 8005190:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCC_OscConfig+0x334>)
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	461c      	mov	r4, r3
 800519a:	f002 020c 	and.w	r2, r2, #12
 800519e:	2a08      	cmp	r2, #8
 80051a0:	d03d      	beq.n	800521e <HAL_RCC_OscConfig+0x312>
 80051a2:	2300      	movs	r3, #0
 80051a4:	4e27      	ldr	r6, [pc, #156]	; (8005244 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80051a8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051aa:	d12b      	bne.n	8005204 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80051ac:	f7ff f98e 	bl	80044cc <HAL_GetTick>
 80051b0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0199      	lsls	r1, r3, #6
 80051b6:	d41f      	bmi.n	80051f8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051b8:	6a2b      	ldr	r3, [r5, #32]
 80051ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051be:	d105      	bne.n	80051cc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051c0:	6862      	ldr	r2, [r4, #4]
 80051c2:	68a9      	ldr	r1, [r5, #8]
 80051c4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80051c8:	430a      	orrs	r2, r1
 80051ca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051cc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80051ce:	6862      	ldr	r2, [r4, #4]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80051d6:	4313      	orrs	r3, r2
 80051d8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80051da:	2301      	movs	r3, #1
 80051dc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80051de:	f7ff f975 	bl	80044cc <HAL_GetTick>
 80051e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	019a      	lsls	r2, r3, #6
 80051e8:	f53f aea8 	bmi.w	8004f3c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ec:	f7ff f96e 	bl	80044cc <HAL_GetTick>
 80051f0:	1b40      	subs	r0, r0, r5
 80051f2:	2802      	cmp	r0, #2
 80051f4:	d9f6      	bls.n	80051e4 <HAL_RCC_OscConfig+0x2d8>
 80051f6:	e6cb      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7ff f968 	bl	80044cc <HAL_GetTick>
 80051fc:	1bc0      	subs	r0, r0, r7
 80051fe:	2802      	cmp	r0, #2
 8005200:	d9d7      	bls.n	80051b2 <HAL_RCC_OscConfig+0x2a6>
 8005202:	e6c5      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8005204:	f7ff f962 	bl	80044cc <HAL_GetTick>
 8005208:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	f57f ae95 	bpl.w	8004f3c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005212:	f7ff f95b 	bl	80044cc <HAL_GetTick>
 8005216:	1b40      	subs	r0, r0, r5
 8005218:	2802      	cmp	r0, #2
 800521a:	d9f6      	bls.n	800520a <HAL_RCC_OscConfig+0x2fe>
 800521c:	e6b8      	b.n	8004f90 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800521e:	2801      	cmp	r0, #1
 8005220:	f43f aeb7 	beq.w	8004f92 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8005224:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005226:	6a2b      	ldr	r3, [r5, #32]
 8005228:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800522c:	429a      	cmp	r2, r3
 800522e:	f47f ae71 	bne.w	8004f14 <HAL_RCC_OscConfig+0x8>
 8005232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005234:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8005238:	1ac0      	subs	r0, r0, r3
 800523a:	bf18      	it	ne
 800523c:	2001      	movne	r0, #1
 800523e:	e6a8      	b.n	8004f92 <HAL_RCC_OscConfig+0x86>
 8005240:	40021000 	.word	0x40021000
 8005244:	42420060 	.word	0x42420060

08005248 <HAL_RCC_GetSysClockFreq>:
{
 8005248:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800524a:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800524c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800524e:	ac02      	add	r4, sp, #8
 8005250:	f103 0510 	add.w	r5, r3, #16
 8005254:	4622      	mov	r2, r4
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	3308      	adds	r3, #8
 800525c:	c203      	stmia	r2!, {r0, r1}
 800525e:	42ab      	cmp	r3, r5
 8005260:	4614      	mov	r4, r2
 8005262:	d1f7      	bne.n	8005254 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005264:	2301      	movs	r3, #1
 8005266:	f88d 3004 	strb.w	r3, [sp, #4]
 800526a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800526c:	4911      	ldr	r1, [pc, #68]	; (80052b4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800526e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8005272:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005274:	f003 020c 	and.w	r2, r3, #12
 8005278:	2a08      	cmp	r2, #8
 800527a:	d117      	bne.n	80052ac <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800527c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005280:	a806      	add	r0, sp, #24
 8005282:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005284:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005286:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800528a:	d50c      	bpl.n	80052a6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800528c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800528e:	480a      	ldr	r0, [pc, #40]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005290:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005294:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005296:	aa06      	add	r2, sp, #24
 8005298:	4413      	add	r3, r2
 800529a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800529e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80052a2:	b007      	add	sp, #28
 80052a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80052a6:	4805      	ldr	r0, [pc, #20]	; (80052bc <HAL_RCC_GetSysClockFreq+0x74>)
 80052a8:	4350      	muls	r0, r2
 80052aa:	e7fa      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80052ac:	4802      	ldr	r0, [pc, #8]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80052ae:	e7f8      	b.n	80052a2 <HAL_RCC_GetSysClockFreq+0x5a>
 80052b0:	0800862b 	.word	0x0800862b
 80052b4:	40021000 	.word	0x40021000
 80052b8:	007a1200 	.word	0x007a1200
 80052bc:	003d0900 	.word	0x003d0900

080052c0 <HAL_RCC_ClockConfig>:
{
 80052c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80052c6:	4604      	mov	r4, r0
 80052c8:	b910      	cbnz	r0, 80052d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80052ca:	2001      	movs	r0, #1
 80052cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d0:	4a45      	ldr	r2, [pc, #276]	; (80053e8 <HAL_RCC_ClockConfig+0x128>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	428b      	cmp	r3, r1
 80052da:	d329      	bcc.n	8005330 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	078e      	lsls	r6, r1, #30
 80052e0:	d431      	bmi.n	8005346 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e2:	07ca      	lsls	r2, r1, #31
 80052e4:	d444      	bmi.n	8005370 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e6:	4a40      	ldr	r2, [pc, #256]	; (80053e8 <HAL_RCC_ClockConfig+0x128>)
 80052e8:	6813      	ldr	r3, [r2, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	429d      	cmp	r5, r3
 80052f0:	d367      	bcc.n	80053c2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	4d3d      	ldr	r5, [pc, #244]	; (80053ec <HAL_RCC_ClockConfig+0x12c>)
 80052f6:	f012 0f04 	tst.w	r2, #4
 80052fa:	d16e      	bne.n	80053da <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	0713      	lsls	r3, r2, #28
 80052fe:	d506      	bpl.n	800530e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005300:	686b      	ldr	r3, [r5, #4]
 8005302:	6922      	ldr	r2, [r4, #16]
 8005304:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005308:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800530c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800530e:	f7ff ff9b 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005312:	686b      	ldr	r3, [r5, #4]
 8005314:	4a36      	ldr	r2, [pc, #216]	; (80053f0 <HAL_RCC_ClockConfig+0x130>)
 8005316:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800531a:	5cd3      	ldrb	r3, [r2, r3]
 800531c:	40d8      	lsrs	r0, r3
 800531e:	4b35      	ldr	r3, [pc, #212]	; (80053f4 <HAL_RCC_ClockConfig+0x134>)
 8005320:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005322:	4b35      	ldr	r3, [pc, #212]	; (80053f8 <HAL_RCC_ClockConfig+0x138>)
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	f7ff f88f 	bl	8004448 <HAL_InitTick>
  return HAL_OK;
 800532a:	2000      	movs	r0, #0
 800532c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	430b      	orrs	r3, r1
 8005338:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	6813      	ldr	r3, [r2, #0]
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4299      	cmp	r1, r3
 8005342:	d1c2      	bne.n	80052ca <HAL_RCC_ClockConfig+0xa>
 8005344:	e7ca      	b.n	80052dc <HAL_RCC_ClockConfig+0x1c>
 8005346:	4b29      	ldr	r3, [pc, #164]	; (80053ec <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800534c:	bf1e      	ittt	ne
 800534e:	685a      	ldrne	r2, [r3, #4]
 8005350:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005354:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005356:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005358:	bf42      	ittt	mi
 800535a:	685a      	ldrmi	r2, [r3, #4]
 800535c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005360:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68a0      	ldr	r0, [r4, #8]
 8005366:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800536a:	4302      	orrs	r2, r0
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e7b8      	b.n	80052e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	4e1e      	ldr	r6, [pc, #120]	; (80053ec <HAL_RCC_ClockConfig+0x12c>)
 8005374:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005378:	d11b      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	d0a4      	beq.n	80052ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005380:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005382:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	4313      	orrs	r3, r2
 800538c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800538e:	f7ff f89d 	bl	80044cc <HAL_GetTick>
 8005392:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005394:	6873      	ldr	r3, [r6, #4]
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80053a0:	d0a1      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a2:	f7ff f893 	bl	80044cc <HAL_GetTick>
 80053a6:	1bc0      	subs	r0, r0, r7
 80053a8:	4540      	cmp	r0, r8
 80053aa:	d9f3      	bls.n	8005394 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80053ac:	2003      	movs	r0, #3
}
 80053ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053b2:	2a02      	cmp	r2, #2
 80053b4:	d102      	bne.n	80053bc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80053ba:	e7e0      	b.n	800537e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	f013 0f02 	tst.w	r3, #2
 80053c0:	e7dd      	b.n	800537e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c2:	6813      	ldr	r3, [r2, #0]
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	432b      	orrs	r3, r5
 80053ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	429d      	cmp	r5, r3
 80053d4:	f47f af79 	bne.w	80052ca <HAL_RCC_ClockConfig+0xa>
 80053d8:	e78b      	b.n	80052f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053da:	686b      	ldr	r3, [r5, #4]
 80053dc:	68e1      	ldr	r1, [r4, #12]
 80053de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053e2:	430b      	orrs	r3, r1
 80053e4:	606b      	str	r3, [r5, #4]
 80053e6:	e789      	b.n	80052fc <HAL_RCC_ClockConfig+0x3c>
 80053e8:	40022000 	.word	0x40022000
 80053ec:	40021000 	.word	0x40021000
 80053f0:	08008660 	.word	0x08008660
 80053f4:	20000008 	.word	0x20000008
 80053f8:	20000010 	.word	0x20000010

080053fc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x14>)
 80053fe:	4a05      	ldr	r2, [pc, #20]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	4a03      	ldr	r2, [pc, #12]	; (8005418 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800540a:	6810      	ldr	r0, [r2, #0]
}
 800540c:	40d8      	lsrs	r0, r3
 800540e:	4770      	bx	lr
 8005410:	40021000 	.word	0x40021000
 8005414:	08008670 	.word	0x08008670
 8005418:	20000008 	.word	0x20000008

0800541c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x14>)
 800541e:	4a05      	ldr	r2, [pc, #20]	; (8005434 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	4a03      	ldr	r2, [pc, #12]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800542a:	6810      	ldr	r0, [r2, #0]
}
 800542c:	40d8      	lsrs	r0, r3
 800542e:	4770      	bx	lr
 8005430:	40021000 	.word	0x40021000
 8005434:	08008670 	.word	0x08008670
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800543c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005440:	2b01      	cmp	r3, #1
 8005442:	d11c      	bne.n	800547e <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005444:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005446:	4a0f      	ldr	r2, [pc, #60]	; (8005484 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	6803      	ldr	r3, [r0, #0]
 800544e:	4293      	cmp	r3, r2
 8005450:	d00a      	beq.n	8005468 <HAL_TIM_Base_Start+0x2c>
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d007      	beq.n	8005468 <HAL_TIM_Base_Start+0x2c>
 8005458:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <HAL_TIM_Base_Start+0x2c>
 8005460:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005464:	4293      	cmp	r3, r2
 8005466:	d104      	bne.n	8005472 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	2a06      	cmp	r2, #6
 8005470:	d003      	beq.n	800547a <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547a:	2000      	movs	r0, #0
}
 800547c:	4770      	bx	lr
    return HAL_ERROR;
 800547e:	2001      	movs	r0, #1
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00

08005488 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800548c:	2b01      	cmp	r3, #1
 800548e:	d120      	bne.n	80054d2 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	2302      	movs	r3, #2
 8005492:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005496:	6803      	ldr	r3, [r0, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a0:	4a0d      	ldr	r2, [pc, #52]	; (80054d8 <HAL_TIM_Base_Start_IT+0x50>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00a      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x34>
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d007      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x34>
 80054ac:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <HAL_TIM_Base_Start_IT+0x34>
 80054b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c2:	2a06      	cmp	r2, #6
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054ce:	2000      	movs	r0, #0
}
 80054d0:	4770      	bx	lr
    return HAL_ERROR;
 80054d2:	2001      	movs	r0, #1
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40012c00 	.word	0x40012c00

080054dc <HAL_TIM_OC_DelayElapsedCallback>:
 80054dc:	4770      	bx	lr

080054de <HAL_TIM_IC_CaptureCallback>:
 80054de:	4770      	bx	lr

080054e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80054e0:	4770      	bx	lr

080054e2 <HAL_TIM_TriggerCallback>:
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e4:	6803      	ldr	r3, [r0, #0]
{
 80054e6:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054e8:	691a      	ldr	r2, [r3, #16]
{
 80054ea:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054ec:	0791      	lsls	r1, r2, #30
 80054ee:	d50e      	bpl.n	800550e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	0792      	lsls	r2, r2, #30
 80054f4:	d50b      	bpl.n	800550e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f6:	f06f 0202 	mvn.w	r2, #2
 80054fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fc:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005500:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005502:	079b      	lsls	r3, r3, #30
 8005504:	d077      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005506:	f7ff ffea 	bl	80054de <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	2300      	movs	r3, #0
 800550c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	0750      	lsls	r0, r2, #29
 8005514:	d510      	bpl.n	8005538 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	0751      	lsls	r1, r2, #29
 800551a:	d50d      	bpl.n	8005538 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800551c:	f06f 0204 	mvn.w	r2, #4
 8005520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005522:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005524:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005528:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552e:	d068      	beq.n	8005602 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005530:	f7ff ffd5 	bl	80054de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005534:	2300      	movs	r3, #0
 8005536:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	0712      	lsls	r2, r2, #28
 800553e:	d50f      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	0710      	lsls	r0, r2, #28
 8005544:	d50c      	bpl.n	8005560 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005546:	f06f 0208 	mvn.w	r2, #8
 800554a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800554e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005550:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005552:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005554:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005556:	d05a      	beq.n	800560e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005558:	f7ff ffc1 	bl	80054de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555c:	2300      	movs	r3, #0
 800555e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	06d2      	lsls	r2, r2, #27
 8005566:	d510      	bpl.n	800558a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	06d0      	lsls	r0, r2, #27
 800556c:	d50d      	bpl.n	800558a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800556e:	f06f 0210 	mvn.w	r2, #16
 8005572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005574:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005576:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005578:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800557a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005580:	d04b      	beq.n	800561a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	f7ff ffac 	bl	80054de <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	2300      	movs	r3, #0
 8005588:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	07d1      	lsls	r1, r2, #31
 8005590:	d508      	bpl.n	80055a4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	07d2      	lsls	r2, r2, #31
 8005596:	d505      	bpl.n	80055a4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005598:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800559c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800559e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80055a0:	f7fe fd30 	bl	8004004 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	0610      	lsls	r0, r2, #24
 80055aa:	d508      	bpl.n	80055be <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	0611      	lsls	r1, r2, #24
 80055b0:	d505      	bpl.n	80055be <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80055ba:	f000 f96a 	bl	8005892 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	0652      	lsls	r2, r2, #25
 80055c4:	d508      	bpl.n	80055d8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055c6:	68da      	ldr	r2, [r3, #12]
 80055c8:	0650      	lsls	r0, r2, #25
 80055ca:	d505      	bpl.n	80055d8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80055d4:	f7ff ff85 	bl	80054e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	691a      	ldr	r2, [r3, #16]
 80055dc:	0691      	lsls	r1, r2, #26
 80055de:	d522      	bpl.n	8005626 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055e0:	68da      	ldr	r2, [r3, #12]
 80055e2:	0692      	lsls	r2, r2, #26
 80055e4:	d51f      	bpl.n	8005626 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ea:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80055f2:	f000 b94d 	b.w	8005890 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	f7ff ff71 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fa:	4620      	mov	r0, r4
 80055fc:	f7ff ff70 	bl	80054e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005600:	e783      	b.n	800550a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005602:	f7ff ff6b 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005606:	4620      	mov	r0, r4
 8005608:	f7ff ff6a 	bl	80054e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800560c:	e792      	b.n	8005534 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	f7ff ff65 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff ff64 	bl	80054e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005618:	e7a0      	b.n	800555c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	f7ff ff5f 	bl	80054dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800561e:	4620      	mov	r0, r4
 8005620:	f7ff ff5e 	bl	80054e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8005624:	e7af      	b.n	8005586 <HAL_TIM_IRQHandler+0xa2>
 8005626:	bd10      	pop	{r4, pc}

08005628 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005628:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800562a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800562c:	4290      	cmp	r0, r2
 800562e:	d00a      	beq.n	8005646 <TIM_Base_SetConfig+0x1e>
 8005630:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0x1e>
 8005636:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800563a:	4290      	cmp	r0, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x1e>
 800563e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005642:	4290      	cmp	r0, r2
 8005644:	d115      	bne.n	8005672 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005646:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800564c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <TIM_Base_SetConfig+0x6c>)
 8005650:	4290      	cmp	r0, r2
 8005652:	d00a      	beq.n	800566a <TIM_Base_SetConfig+0x42>
 8005654:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0x42>
 800565a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800565e:	4290      	cmp	r0, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0x42>
 8005662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005666:	4290      	cmp	r0, r2
 8005668:	d103      	bne.n	8005672 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005670:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005672:	694a      	ldr	r2, [r1, #20]
 8005674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005678:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800567a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800567c:	688b      	ldr	r3, [r1, #8]
 800567e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005680:	680b      	ldr	r3, [r1, #0]
 8005682:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	4b03      	ldr	r3, [pc, #12]	; (8005694 <TIM_Base_SetConfig+0x6c>)
 8005686:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005688:	bf04      	itt	eq
 800568a:	690b      	ldreq	r3, [r1, #16]
 800568c:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800568e:	2301      	movs	r3, #1
 8005690:	6143      	str	r3, [r0, #20]
 8005692:	4770      	bx	lr
 8005694:	40012c00 	.word	0x40012c00

08005698 <HAL_TIM_Base_Init>:
{
 8005698:	b510      	push	{r4, lr}
  if (htim == NULL)
 800569a:	4604      	mov	r4, r0
 800569c:	b330      	cbz	r0, 80056ec <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800569e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056a6:	b91b      	cbnz	r3, 80056b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80056a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80056ac:	f7fe fe22 	bl	80042f4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	1d21      	adds	r1, r4, #4
 80056ba:	f7ff ffb5 	bl	8005628 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	2301      	movs	r3, #1
  return HAL_OK;
 80056c0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80056ca:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80056ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80056d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056de:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80056e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80056e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80056ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80056ec:	2001      	movs	r0, #1
}
 80056ee:	bd10      	pop	{r4, pc}

080056f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056f2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056f6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056fa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80056fe:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005700:	6083      	str	r3, [r0, #8]
 8005702:	bd10      	pop	{r4, pc}

08005704 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8005704:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005708:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800570a:	2b01      	cmp	r3, #1
{
 800570c:	4604      	mov	r4, r0
 800570e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005712:	d019      	beq.n	8005748 <HAL_TIM_ConfigClockSource+0x44>
 8005714:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005716:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800571a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800571c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005720:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800572a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800572c:	680b      	ldr	r3, [r1, #0]
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d065      	beq.n	80057fe <HAL_TIM_ConfigClockSource+0xfa>
 8005732:	d815      	bhi.n	8005760 <HAL_TIM_ConfigClockSource+0x5c>
 8005734:	2b10      	cmp	r3, #16
 8005736:	d00c      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x4e>
 8005738:	d807      	bhi.n	800574a <HAL_TIM_ConfigClockSource+0x46>
 800573a:	b153      	cbz	r3, 8005752 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 800573c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800573e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005740:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005744:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005748:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800574a:	2b20      	cmp	r3, #32
 800574c:	d001      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0x4e>
 800574e:	2b30      	cmp	r3, #48	; 0x30
 8005750:	d1f4      	bne.n	800573c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8005752:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005754:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8005758:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800575c:	4313      	orrs	r3, r2
 800575e:	e01a      	b.n	8005796 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005760:	2b60      	cmp	r3, #96	; 0x60
 8005762:	d034      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0xca>
 8005764:	d819      	bhi.n	800579a <HAL_TIM_ConfigClockSource+0x96>
 8005766:	2b50      	cmp	r3, #80	; 0x50
 8005768:	d1e8      	bne.n	800573c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800576a:	684a      	ldr	r2, [r1, #4]
 800576c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800576e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005770:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005772:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	f025 0501 	bic.w	r5, r5, #1
 800577a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800577e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005784:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005788:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800578a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800578c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005792:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005796:	6083      	str	r3, [r0, #8]
 8005798:	e7d0      	b.n	800573c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800579a:	2b70      	cmp	r3, #112	; 0x70
 800579c:	d00c      	beq.n	80057b8 <HAL_TIM_ConfigClockSource+0xb4>
 800579e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a2:	d1cb      	bne.n	800573c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80057a4:	68cb      	ldr	r3, [r1, #12]
 80057a6:	684a      	ldr	r2, [r1, #4]
 80057a8:	6889      	ldr	r1, [r1, #8]
 80057aa:	f7ff ffa1 	bl	80056f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	6893      	ldr	r3, [r2, #8]
 80057b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057b6:	e008      	b.n	80057ca <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80057b8:	68cb      	ldr	r3, [r1, #12]
 80057ba:	684a      	ldr	r2, [r1, #4]
 80057bc:	6889      	ldr	r1, [r1, #8]
 80057be:	f7ff ff97 	bl	80056f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057ca:	6093      	str	r3, [r2, #8]
      break;
 80057cc:	e7b6      	b.n	800573c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ce:	684d      	ldr	r5, [r1, #4]
 80057d0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d2:	6a01      	ldr	r1, [r0, #32]
 80057d4:	f021 0110 	bic.w	r1, r1, #16
 80057d8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057da:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80057dc:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057de:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ea:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80057ee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80057f0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80057f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057f8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80057fc:	e7cb      	b.n	8005796 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057fe:	684a      	ldr	r2, [r1, #4]
 8005800:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005802:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005804:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005806:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	f025 0501 	bic.w	r5, r5, #1
 800580e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005810:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005812:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800581c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800581e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005820:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005826:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800582a:	e7b4      	b.n	8005796 <HAL_TIM_ConfigClockSource+0x92>

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800582c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005830:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005832:	2b01      	cmp	r3, #1
 8005834:	f04f 0302 	mov.w	r3, #2
 8005838:	d025      	beq.n	8005886 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800583a:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005840:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005842:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8005844:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8005846:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 800584a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005850:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005852:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005854:	4c0d      	ldr	r4, [pc, #52]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005856:	42a3      	cmp	r3, r4
 8005858:	d00a      	beq.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d007      	beq.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005860:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005864:	42a3      	cmp	r3, r4
 8005866:	d003      	beq.n	8005870 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005868:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800586c:	42a3      	cmp	r3, r4
 800586e:	d104      	bne.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005870:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005872:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005876:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800587a:	2301      	movs	r3, #1
 800587c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005880:	2300      	movs	r3, #0
 8005882:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005886:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005888:	bd30      	pop	{r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00

08005890 <HAL_TIMEx_CommutCallback>:
 8005890:	4770      	bx	lr

08005892 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005892:	4770      	bx	lr

08005894 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005894:	6803      	ldr	r3, [r0, #0]
 8005896:	68da      	ldr	r2, [r3, #12]
 8005898:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800589c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	f022 0201 	bic.w	r2, r2, #1
 80058a4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	2320      	movs	r3, #32
 80058a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80058ac:	4770      	bx	lr
	...

080058b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	6803      	ldr	r3, [r0, #0]
 80058b6:	68c1      	ldr	r1, [r0, #12]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80058be:	430a      	orrs	r2, r1
 80058c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058c2:	6882      	ldr	r2, [r0, #8]
 80058c4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80058c6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058c8:	4302      	orrs	r2, r0
 80058ca:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80058cc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80058d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80058d6:	430a      	orrs	r2, r1
 80058d8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	69a1      	ldr	r1, [r4, #24]
 80058de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80058e2:	430a      	orrs	r2, r1
 80058e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058e6:	4a0e      	ldr	r2, [pc, #56]	; (8005920 <UART_SetConfig+0x70>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d115      	bne.n	8005918 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7ff fd96 	bl	800541c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f0:	2319      	movs	r3, #25
 80058f2:	4358      	muls	r0, r3
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	2264      	movs	r2, #100	; 0x64
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80058fe:	fbb0 f1f2 	udiv	r1, r0, r2
 8005902:	fb02 0311 	mls	r3, r2, r1, r0
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	3332      	adds	r3, #50	; 0x32
 800590a:	fbb3 f3f2 	udiv	r3, r3, r2
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005914:	60ab      	str	r3, [r5, #8]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7ff fd70 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 800591c:	e7e8      	b.n	80058f0 <UART_SetConfig+0x40>
 800591e:	bf00      	nop
 8005920:	40013800 	.word	0x40013800

08005924 <HAL_UART_Init>:
{
 8005924:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005926:	4604      	mov	r4, r0
 8005928:	b340      	cbz	r0, 800597c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800592e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005932:	b91b      	cbnz	r3, 800593c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005934:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005938:	f7fe fd2a 	bl	8004390 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800593c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800593e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005940:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005944:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005946:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800594e:	f7ff ffaf 	bl	80058b0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005952:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800595c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800596c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800596e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005970:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005972:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005976:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800597a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800597c:	2001      	movs	r0, #1
}
 800597e:	bd10      	pop	{r4, pc}

08005980 <HAL_UART_DeInit>:
{
 8005980:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005982:	4604      	mov	r4, r0
 8005984:	b190      	cbz	r0, 80059ac <HAL_UART_DeInit+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8005988:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800598a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800598e:	68d3      	ldr	r3, [r2, #12]
 8005990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005994:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8005996:	f7fe fd3d 	bl	8004414 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599a:	2000      	movs	r0, #0
 800599c:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 800599e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 80059a2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80059a6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  return HAL_OK;
 80059aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80059ac:	2001      	movs	r0, #1
}
 80059ae:	bd10      	pop	{r4, pc}

080059b0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d120      	bne.n	80059fa <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80059b8:	b1e9      	cbz	r1, 80059f6 <HAL_UART_Receive_IT+0x46>
 80059ba:	b1e2      	cbz	r2, 80059f6 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80059bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d01a      	beq.n	80059fa <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80059c4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80059c6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ca:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059cc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ce:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059d2:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80059d4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059d6:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80059d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80059e0:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059e2:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 80059e4:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059e6:	f041 0101 	orr.w	r1, r1, #1
 80059ea:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059ec:	68d1      	ldr	r1, [r2, #12]
 80059ee:	f041 0120 	orr.w	r1, r1, #32
 80059f2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80059f4:	4770      	bx	lr
      return HAL_ERROR;
 80059f6:	2001      	movs	r0, #1
 80059f8:	4770      	bx	lr
    return HAL_BUSY;
 80059fa:	2002      	movs	r0, #2
}
 80059fc:	4770      	bx	lr

080059fe <HAL_UART_TxCpltCallback>:
 80059fe:	4770      	bx	lr

08005a00 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a00:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8005a04:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a06:	2b22      	cmp	r3, #34	; 0x22
 8005a08:	d132      	bne.n	8005a70 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0a:	6881      	ldr	r1, [r0, #8]
 8005a0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005a12:	6802      	ldr	r2, [r0, #0]
 8005a14:	d120      	bne.n	8005a58 <UART_Receive_IT+0x58>
 8005a16:	6901      	ldr	r1, [r0, #16]
 8005a18:	bb09      	cbnz	r1, 8005a5e <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a1a:	6852      	ldr	r2, [r2, #4]
 8005a1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a20:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8005a24:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8005a26:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005a28:	3c01      	subs	r4, #1
 8005a2a:	b2a4      	uxth	r4, r4
 8005a2c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8005a2e:	b98c      	cbnz	r4, 8005a54 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a30:	6803      	ldr	r3, [r0, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	f022 0220 	bic.w	r2, r2, #32
 8005a38:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a40:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	f022 0201 	bic.w	r2, r2, #1
 8005a48:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005a4a:	2320      	movs	r3, #32
 8005a4c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005a50:	f7fe faec 	bl	800402c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8005a54:	2000      	movs	r0, #0
}
 8005a56:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a58:	b931      	cbnz	r1, 8005a68 <UART_Receive_IT+0x68>
 8005a5a:	6901      	ldr	r1, [r0, #16]
 8005a5c:	b921      	cbnz	r1, 8005a68 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a5e:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a60:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8005a62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a64:	3301      	adds	r3, #1
 8005a66:	e7dd      	b.n	8005a24 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a68:	6852      	ldr	r2, [r2, #4]
 8005a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a6e:	e7f7      	b.n	8005a60 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8005a70:	2002      	movs	r0, #2
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <HAL_UART_ErrorCallback>:
 8005a74:	4770      	bx	lr
	...

08005a78 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a78:	6803      	ldr	r3, [r0, #0]
{
 8005a7a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a7c:	681a      	ldr	r2, [r3, #0]
{
 8005a7e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005a80:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a82:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a84:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005a86:	d107      	bne.n	8005a98 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a88:	0696      	lsls	r6, r2, #26
 8005a8a:	d55c      	bpl.n	8005b46 <HAL_UART_IRQHandler+0xce>
 8005a8c:	068d      	lsls	r5, r1, #26
 8005a8e:	d55a      	bpl.n	8005b46 <HAL_UART_IRQHandler+0xce>
}
 8005a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8005a94:	f7ff bfb4 	b.w	8005a00 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a98:	f015 0501 	ands.w	r5, r5, #1
 8005a9c:	d102      	bne.n	8005aa4 <HAL_UART_IRQHandler+0x2c>
 8005a9e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8005aa2:	d050      	beq.n	8005b46 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa4:	07d0      	lsls	r0, r2, #31
 8005aa6:	d505      	bpl.n	8005ab4 <HAL_UART_IRQHandler+0x3c>
 8005aa8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005aaa:	bf42      	ittt	mi
 8005aac:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8005aae:	f043 0301 	orrmi.w	r3, r3, #1
 8005ab2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ab4:	0756      	lsls	r6, r2, #29
 8005ab6:	d504      	bpl.n	8005ac2 <HAL_UART_IRQHandler+0x4a>
 8005ab8:	b11d      	cbz	r5, 8005ac2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005aba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ac2:	0790      	lsls	r0, r2, #30
 8005ac4:	d504      	bpl.n	8005ad0 <HAL_UART_IRQHandler+0x58>
 8005ac6:	b11d      	cbz	r5, 8005ad0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005aca:	f043 0304 	orr.w	r3, r3, #4
 8005ace:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ad0:	0713      	lsls	r3, r2, #28
 8005ad2:	d506      	bpl.n	8005ae2 <HAL_UART_IRQHandler+0x6a>
 8005ad4:	068e      	lsls	r6, r1, #26
 8005ad6:	d400      	bmi.n	8005ada <HAL_UART_IRQHandler+0x62>
 8005ad8:	b11d      	cbz	r5, 8005ae2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005adc:	f043 0308 	orr.w	r3, r3, #8
 8005ae0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d064      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ae8:	0695      	lsls	r5, r2, #26
 8005aea:	d504      	bpl.n	8005af6 <HAL_UART_IRQHandler+0x7e>
 8005aec:	0688      	lsls	r0, r1, #26
 8005aee:	d502      	bpl.n	8005af6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8005af0:	4620      	mov	r0, r4
 8005af2:	f7ff ff85 	bl	8005a00 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005af6:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8005af8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005afa:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005afc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005afe:	0711      	lsls	r1, r2, #28
 8005b00:	d402      	bmi.n	8005b08 <HAL_UART_IRQHandler+0x90>
 8005b02:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005b06:	d01a      	beq.n	8005b3e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8005b08:	f7ff fec4 	bl	8005894 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	0652      	lsls	r2, r2, #25
 8005b12:	d510      	bpl.n	8005b36 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b14:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005b16:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b1c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005b1e:	b150      	cbz	r0, 8005b36 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b20:	4b24      	ldr	r3, [pc, #144]	; (8005bb4 <HAL_UART_IRQHandler+0x13c>)
 8005b22:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b24:	f7ff f848 	bl	8004bb8 <HAL_DMA_Abort_IT>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	d042      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b34:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7ff ff9c 	bl	8005a74 <HAL_UART_ErrorCallback>
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8005b3e:	f7ff ff99 	bl	8005a74 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b42:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b46:	0616      	lsls	r6, r2, #24
 8005b48:	d525      	bpl.n	8005b96 <HAL_UART_IRQHandler+0x11e>
 8005b4a:	060d      	lsls	r5, r1, #24
 8005b4c:	d523      	bpl.n	8005b96 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005b52:	2a21      	cmp	r2, #33	; 0x21
 8005b54:	d12d      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	68a2      	ldr	r2, [r4, #8]
 8005b58:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005b5c:	6a22      	ldr	r2, [r4, #32]
 8005b5e:	d115      	bne.n	8005b8c <HAL_UART_IRQHandler+0x114>
 8005b60:	6921      	ldr	r1, [r4, #16]
 8005b62:	b999      	cbnz	r1, 8005b8c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b64:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005b68:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005b6c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b6e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8005b70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005b72:	3a01      	subs	r2, #1
 8005b74:	b292      	uxth	r2, r2
 8005b76:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005b78:	b9da      	cbnz	r2, 8005bb2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b80:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b88:	60da      	str	r2, [r3, #12]
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8c:	1c51      	adds	r1, r2, #1
 8005b8e:	6221      	str	r1, [r4, #32]
 8005b90:	7812      	ldrb	r2, [r2, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	e7ec      	b.n	8005b70 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b96:	0650      	lsls	r0, r2, #25
 8005b98:	d50b      	bpl.n	8005bb2 <HAL_UART_IRQHandler+0x13a>
 8005b9a:	064a      	lsls	r2, r1, #25
 8005b9c:	d509      	bpl.n	8005bb2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b9e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8005ba0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005bae:	f7ff ff26 	bl	80059fe <HAL_UART_TxCpltCallback>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	08005bb9 	.word	0x08005bb9

08005bb8 <UART_DMAAbortOnError>:
{
 8005bb8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8005bba:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8005bbe:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bc0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8005bc2:	f7ff ff57 	bl	8005a74 <HAL_UART_ErrorCallback>
 8005bc6:	bd08      	pop	{r3, pc}

08005bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005bc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005bca:	e003      	b.n	8005bd4 <LoopCopyDataInit>

08005bcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005bce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005bd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005bd2:	3104      	adds	r1, #4

08005bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005bd4:	480a      	ldr	r0, [pc, #40]	; (8005c00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005bd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005bda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005bdc:	d3f6      	bcc.n	8005bcc <CopyDataInit>
  ldr r2, =_sbss
 8005bde:	4a0a      	ldr	r2, [pc, #40]	; (8005c08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005be0:	e002      	b.n	8005be8 <LoopFillZerobss>

08005be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005be2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005be4:	f842 3b04 	str.w	r3, [r2], #4

08005be8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005be8:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005bea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005bec:	d3f9      	bcc.n	8005be2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005bee:	f7fe fb15 	bl	800421c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005bf2:	f002 faf7 	bl	80081e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005bf6:	f7fe fa2d 	bl	8004054 <main>
  bx lr
 8005bfa:	4770      	bx	lr
  ldr r3, =_sidata
 8005bfc:	08008f48 	.word	0x08008f48
  ldr r0, =_sdata
 8005c00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005c04:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8005c08:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 8005c0c:	200002ec 	.word	0x200002ec

08005c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005c10:	e7fe      	b.n	8005c10 <ADC1_2_IRQHandler>
	...

08005c14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4604      	mov	r4, r0
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005c1a:	6003      	str	r3, [r0, #0]
 8005c1c:	f000 fc34 	bl	8006488 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005c20:	4620      	mov	r0, r4
 8005c22:	bd10      	pop	{r4, pc}
 8005c24:	080086b4 	.word	0x080086b4

08005c28 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7ff fff2 	bl	8005c14 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005c30:	4620      	mov	r0, r4
 8005c32:	210c      	movs	r1, #12
 8005c34:	f000 fbfe 	bl	8006434 <_ZdlPvj>
 8005c38:	4620      	mov	r0, r4
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c40:	9e06      	ldr	r6, [sp, #24]
 8005c42:	4680      	mov	r8, r0
 8005c44:	4296      	cmp	r6, r2
 8005c46:	460f      	mov	r7, r1
 8005c48:	4614      	mov	r4, r2
 8005c4a:	461d      	mov	r5, r3
 8005c4c:	d103      	bne.n	8005c56 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f000 fc6e 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 8005c54:	b958      	cbnz	r0, 8005c6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8005c56:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	6803      	ldr	r3, [r0, #0]
 8005c5e:	9606      	str	r6, [sp, #24]
 8005c60:	6a1e      	ldr	r6, [r3, #32]
 8005c62:	4639      	mov	r1, r7
 8005c64:	462b      	mov	r3, r5
 8005c66:	46b4      	mov	ip, r6
 8005c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	4760      	bx	ip
 8005c6e:	2006      	movs	r0, #6
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005c74:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460e      	mov	r6, r1
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4683      	mov	fp, r0
 8005c7e:	4617      	mov	r7, r2
 8005c80:	4699      	mov	r9, r3
 8005c82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c84:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8005c88:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8005c8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005c8e:	f000 fc4f 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 8005c92:	b190      	cbz	r0, 8005cba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8005c94:	2e00      	cmp	r6, #0
 8005c96:	602c      	str	r4, [r5, #0]
 8005c98:	712f      	strb	r7, [r5, #4]
 8005c9a:	db09      	blt.n	8005cb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8005c9c:	4434      	add	r4, r6
 8005c9e:	45a0      	cmp	r8, r4
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2406      	moveq	r4, #6
 8005ca4:	2401      	movne	r4, #1
 8005ca6:	71ac      	strb	r4, [r5, #6]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	b001      	add	sp, #4
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	3602      	adds	r6, #2
 8005cb2:	d1f9      	bne.n	8005ca8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	71ab      	strb	r3, [r5, #6]
 8005cb8:	e7f6      	b.n	8005ca8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8005cba:	4544      	cmp	r4, r8
 8005cbc:	d104      	bne.n	8005cc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005cbe:	4651      	mov	r1, sl
 8005cc0:	4658      	mov	r0, fp
 8005cc2:	f000 fc35 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 8005cc6:	b988      	cbnz	r0, 8005cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8005cc8:	f8db 0008 	ldr.w	r0, [fp, #8]
 8005ccc:	463a      	mov	r2, r7
 8005cce:	6803      	ldr	r3, [r0, #0]
 8005cd0:	950d      	str	r5, [sp, #52]	; 0x34
 8005cd2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005cd6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8005cda:	940a      	str	r4, [sp, #40]	; 0x28
 8005cdc:	69dc      	ldr	r4, [r3, #28]
 8005cde:	4631      	mov	r1, r6
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	46a4      	mov	ip, r4
 8005ce4:	b001      	add	sp, #4
 8005ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cea:	4760      	bx	ip
 8005cec:	716f      	strb	r7, [r5, #5]
 8005cee:	e7db      	b.n	8005ca8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08005cf0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	460d      	mov	r5, r1
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	f000 fbd8 	bl	80064b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005d00:	b948      	cbnz	r0, 8005d16 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005d02:	68a0      	ldr	r0, [r4, #8]
 8005d04:	4632      	mov	r2, r6
 8005d06:	6803      	ldr	r3, [r0, #0]
 8005d08:	4629      	mov	r1, r5
 8005d0a:	699c      	ldr	r4, [r3, #24]
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	46a4      	mov	ip, r4
 8005d10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d14:	4760      	bx	ip
 8005d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d1a <_ZdlPv>:
 8005d1a:	f002 ba8f 	b.w	800823c <free>

08005d1e <_ZdaPv>:
 8005d1e:	f7ff bffc 	b.w	8005d1a <_ZdlPv>

08005d22 <__aeabi_atexit>:
 8005d22:	460b      	mov	r3, r1
 8005d24:	4601      	mov	r1, r0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f002 ba48 	b.w	80081bc <__cxa_atexit>

08005d2c <__cxa_pure_virtual>:
 8005d2c:	b508      	push	{r3, lr}
 8005d2e:	f000 f80d 	bl	8005d4c <_ZSt9terminatev>

08005d32 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005d32:	b508      	push	{r3, lr}
 8005d34:	4780      	blx	r0
 8005d36:	f002 fa39 	bl	80081ac <abort>
	...

08005d3c <_ZSt13get_terminatev>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <_ZSt13get_terminatev+0xc>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	f3bf 8f5b 	dmb	ish
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000014 	.word	0x20000014

08005d4c <_ZSt9terminatev>:
 8005d4c:	b508      	push	{r3, lr}
 8005d4e:	f7ff fff5 	bl	8005d3c <_ZSt13get_terminatev>
 8005d52:	f7ff ffee 	bl	8005d32 <_ZN10__cxxabiv111__terminateEPFvvE>

08005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005d56:	b508      	push	{r3, lr}
 8005d58:	4780      	blx	r0
 8005d5a:	f7ff fff7 	bl	8005d4c <_ZSt9terminatev>
	...

08005d60 <_ZSt14get_unexpectedv>:
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <_ZSt14get_unexpectedv+0xc>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f3bf 8f5b 	dmb	ish
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000018 	.word	0x20000018

08005d70 <_ZSt10unexpectedv>:
 8005d70:	b508      	push	{r3, lr}
 8005d72:	f7ff fff5 	bl	8005d60 <_ZSt14get_unexpectedv>
 8005d76:	f7ff ffee 	bl	8005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005d7a <_Znwj>:
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	bf14      	ite	ne
 8005d80:	4604      	movne	r4, r0
 8005d82:	2401      	moveq	r4, #1
 8005d84:	4620      	mov	r0, r4
 8005d86:	f002 fa51 	bl	800822c <malloc>
 8005d8a:	b930      	cbnz	r0, 8005d9a <_Znwj+0x20>
 8005d8c:	f000 fb54 	bl	8006438 <_ZSt15get_new_handlerv>
 8005d90:	b908      	cbnz	r0, 8005d96 <_Znwj+0x1c>
 8005d92:	f002 fa0b 	bl	80081ac <abort>
 8005d96:	4780      	blx	r0
 8005d98:	e7f4      	b.n	8005d84 <_Znwj+0xa>
 8005d9a:	bd10      	pop	{r4, pc}

08005d9c <_Znaj>:
 8005d9c:	f7ff bfed 	b.w	8005d7a <_Znwj>

08005da0 <__cxa_end_cleanup>:
 8005da0:	b41e      	push	{r1, r2, r3, r4}
 8005da2:	f000 f89c 	bl	8005ede <__gnu_end_cleanup>
 8005da6:	bc1e      	pop	{r1, r2, r3, r4}
 8005da8:	f7fb ff52 	bl	8001c50 <_Unwind_Resume>

08005dac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8005dac:	7803      	ldrb	r3, [r0, #0]
 8005dae:	2b47      	cmp	r3, #71	; 0x47
 8005db0:	d117      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005db2:	7843      	ldrb	r3, [r0, #1]
 8005db4:	2b4e      	cmp	r3, #78	; 0x4e
 8005db6:	d114      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005db8:	7883      	ldrb	r3, [r0, #2]
 8005dba:	2b55      	cmp	r3, #85	; 0x55
 8005dbc:	d111      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dbe:	78c3      	ldrb	r3, [r0, #3]
 8005dc0:	2b43      	cmp	r3, #67	; 0x43
 8005dc2:	d10e      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dc4:	7903      	ldrb	r3, [r0, #4]
 8005dc6:	2b43      	cmp	r3, #67	; 0x43
 8005dc8:	d10b      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dca:	7943      	ldrb	r3, [r0, #5]
 8005dcc:	2b2b      	cmp	r3, #43	; 0x2b
 8005dce:	d108      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dd0:	7983      	ldrb	r3, [r0, #6]
 8005dd2:	2b2b      	cmp	r3, #43	; 0x2b
 8005dd4:	d105      	bne.n	8005de2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005dd6:	79c0      	ldrb	r0, [r0, #7]
 8005dd8:	2801      	cmp	r0, #1
 8005dda:	bf8c      	ite	hi
 8005ddc:	2000      	movhi	r0, #0
 8005dde:	2001      	movls	r0, #1
 8005de0:	4770      	bx	lr
 8005de2:	2000      	movs	r0, #0
 8005de4:	4770      	bx	lr
	...

08005de8 <__cxa_type_match>:
 8005de8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005dec:	461e      	mov	r6, r3
 8005dee:	7803      	ldrb	r3, [r0, #0]
 8005df0:	460d      	mov	r5, r1
 8005df2:	2b47      	cmp	r3, #71	; 0x47
 8005df4:	4602      	mov	r2, r0
 8005df6:	79c1      	ldrb	r1, [r0, #7]
 8005df8:	d147      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005dfa:	7843      	ldrb	r3, [r0, #1]
 8005dfc:	2b4e      	cmp	r3, #78	; 0x4e
 8005dfe:	d144      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e00:	7883      	ldrb	r3, [r0, #2]
 8005e02:	2b55      	cmp	r3, #85	; 0x55
 8005e04:	d141      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e06:	78c3      	ldrb	r3, [r0, #3]
 8005e08:	2b43      	cmp	r3, #67	; 0x43
 8005e0a:	d13e      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e0c:	7903      	ldrb	r3, [r0, #4]
 8005e0e:	2b46      	cmp	r3, #70	; 0x46
 8005e10:	d13b      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e12:	7943      	ldrb	r3, [r0, #5]
 8005e14:	2b4f      	cmp	r3, #79	; 0x4f
 8005e16:	d138      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e18:	7983      	ldrb	r3, [r0, #6]
 8005e1a:	2b52      	cmp	r3, #82	; 0x52
 8005e1c:	d135      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e1e:	2900      	cmp	r1, #0
 8005e20:	d133      	bne.n	8005e8a <__cxa_type_match+0xa2>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4608      	mov	r0, r1
 8005e26:	2400      	movs	r4, #0
 8005e28:	9401      	str	r4, [sp, #4]
 8005e2a:	bb33      	cbnz	r3, 8005e7a <__cxa_type_match+0x92>
 8005e2c:	bb38      	cbnz	r0, 8005e7e <__cxa_type_match+0x96>
 8005e2e:	2901      	cmp	r1, #1
 8005e30:	bf0a      	itet	eq
 8005e32:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005e36:	f1a2 0320 	subne.w	r3, r2, #32
 8005e3a:	3b78      	subeq	r3, #120	; 0x78
 8005e3c:	2901      	cmp	r1, #1
 8005e3e:	bf0c      	ite	eq
 8005e40:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005e44:	3258      	addne	r2, #88	; 0x58
 8005e46:	681c      	ldr	r4, [r3, #0]
 8005e48:	9201      	str	r2, [sp, #4]
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4798      	blx	r3
 8005e52:	b1b0      	cbz	r0, 8005e82 <__cxa_type_match+0x9a>
 8005e54:	2702      	movs	r7, #2
 8005e56:	9b01      	ldr	r3, [sp, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	682b      	ldr	r3, [r5, #0]
 8005e5e:	aa01      	add	r2, sp, #4
 8005e60:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005e64:	4621      	mov	r1, r4
 8005e66:	2301      	movs	r3, #1
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47c0      	blx	r8
 8005e6c:	b158      	cbz	r0, 8005e86 <__cxa_type_match+0x9e>
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	4638      	mov	r0, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e7a:	4c08      	ldr	r4, [pc, #32]	; (8005e9c <__cxa_type_match+0xb4>)
 8005e7c:	e7e5      	b.n	8005e4a <__cxa_type_match+0x62>
 8005e7e:	4c08      	ldr	r4, [pc, #32]	; (8005ea0 <__cxa_type_match+0xb8>)
 8005e80:	e7e3      	b.n	8005e4a <__cxa_type_match+0x62>
 8005e82:	2701      	movs	r7, #1
 8005e84:	e7ea      	b.n	8005e5c <__cxa_type_match+0x74>
 8005e86:	4607      	mov	r7, r0
 8005e88:	e7f3      	b.n	8005e72 <__cxa_type_match+0x8a>
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7ff ff8e 	bl	8005dac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005e90:	f080 0001 	eor.w	r0, r0, #1
 8005e94:	b2c0      	uxtb	r0, r0
 8005e96:	2300      	movs	r3, #0
 8005e98:	e7c5      	b.n	8005e26 <__cxa_type_match+0x3e>
 8005e9a:	bf00      	nop
 8005e9c:	0800874c 	.word	0x0800874c
 8005ea0:	08008754 	.word	0x08008754

08005ea4 <__cxa_begin_cleanup>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	f000 fbe0 	bl	800666c <__cxa_get_globals>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f1a4 0120 	sub.w	r1, r4, #32
 8005eb4:	f7ff ff7a 	bl	8005dac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005eb8:	b160      	cbz	r0, 8005ed4 <__cxa_begin_cleanup+0x30>
 8005eba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ec6:	d103      	bne.n	8005ed0 <__cxa_begin_cleanup+0x2c>
 8005ec8:	6893      	ldr	r3, [r2, #8]
 8005eca:	f844 3c08 	str.w	r3, [r4, #-8]
 8005ece:	6091      	str	r1, [r2, #8]
 8005ed0:	2001      	movs	r0, #1
 8005ed2:	bd10      	pop	{r4, pc}
 8005ed4:	6893      	ldr	r3, [r2, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f9      	beq.n	8005ece <__cxa_begin_cleanup+0x2a>
 8005eda:	f7ff ff37 	bl	8005d4c <_ZSt9terminatev>

08005ede <__gnu_end_cleanup>:
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	f000 fbc4 	bl	800666c <__cxa_get_globals>
 8005ee4:	6882      	ldr	r2, [r0, #8]
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	b90a      	cbnz	r2, 8005eee <__gnu_end_cleanup+0x10>
 8005eea:	f7ff ff2f 	bl	8005d4c <_ZSt9terminatev>
 8005eee:	f102 0420 	add.w	r4, r2, #32
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff ff5a 	bl	8005dac <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005ef8:	b140      	cbz	r0, 8005f0c <__gnu_end_cleanup+0x2e>
 8005efa:	69d3      	ldr	r3, [r2, #28]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	61d3      	str	r3, [r2, #28]
 8005f00:	b913      	cbnz	r3, 8005f08 <__gnu_end_cleanup+0x2a>
 8005f02:	6990      	ldr	r0, [r2, #24]
 8005f04:	6088      	str	r0, [r1, #8]
 8005f06:	6193      	str	r3, [r2, #24]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	6088      	str	r0, [r1, #8]
 8005f0e:	e7fb      	b.n	8005f08 <__gnu_end_cleanup+0x2a>

08005f10 <_ZL12read_uleb128PKhPm>:
 8005f10:	2300      	movs	r3, #0
 8005f12:	b570      	push	{r4, r5, r6, lr}
 8005f14:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8005f18:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8005f1c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005f20:	1994      	adds	r4, r2, r6
 8005f22:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8005f26:	40a2      	lsls	r2, r4
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	062a      	lsls	r2, r5, #24
 8005f2c:	d4f4      	bmi.n	8005f18 <_ZL12read_uleb128PKhPm+0x8>
 8005f2e:	600b      	str	r3, [r1, #0]
 8005f30:	bd70      	pop	{r4, r5, r6, pc}

08005f32 <_ZL12read_sleb128PKhPl>:
 8005f32:	2300      	movs	r3, #0
 8005f34:	461a      	mov	r2, r3
 8005f36:	b530      	push	{r4, r5, lr}
 8005f38:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005f3c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8005f40:	4095      	lsls	r5, r2
 8005f42:	432b      	orrs	r3, r5
 8005f44:	0625      	lsls	r5, r4, #24
 8005f46:	f102 0207 	add.w	r2, r2, #7
 8005f4a:	d4f5      	bmi.n	8005f38 <_ZL12read_sleb128PKhPl+0x6>
 8005f4c:	2a1f      	cmp	r2, #31
 8005f4e:	d806      	bhi.n	8005f5e <_ZL12read_sleb128PKhPl+0x2c>
 8005f50:	0664      	lsls	r4, r4, #25
 8005f52:	bf42      	ittt	mi
 8005f54:	f04f 34ff 	movmi.w	r4, #4294967295
 8005f58:	fa04 f202 	lslmi.w	r2, r4, r2
 8005f5c:	4313      	orrmi	r3, r2
 8005f5e:	600b      	str	r3, [r1, #0]
 8005f60:	bd30      	pop	{r4, r5, pc}

08005f62 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8005f62:	2850      	cmp	r0, #80	; 0x50
 8005f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f66:	4605      	mov	r5, r0
 8005f68:	460e      	mov	r6, r1
 8005f6a:	4614      	mov	r4, r2
 8005f6c:	461f      	mov	r7, r3
 8005f6e:	d107      	bne.n	8005f80 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8005f70:	1cd0      	adds	r0, r2, #3
 8005f72:	f020 0003 	bic.w	r0, r0, #3
 8005f76:	f850 3b04 	ldr.w	r3, [r0], #4
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	b003      	add	sp, #12
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f80:	f000 030f 	and.w	r3, r0, #15
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	d82e      	bhi.n	8005fe6 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 8005f88:	e8df f003 	tbb	[pc, r3]
 8005f8c:	251d0725 	.word	0x251d0725
 8005f90:	2d2d2d29 	.word	0x2d2d2d29
 8005f94:	2521182d 	.word	0x2521182d
 8005f98:	29          	.byte	0x29
 8005f99:	00          	.byte	0x00
 8005f9a:	a901      	add	r1, sp, #4
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff ffb7 	bl	8005f10 <_ZL12read_uleb128PKhPm>
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0e8      	beq.n	8005f7a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8005fa8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 8005fac:	2a10      	cmp	r2, #16
 8005fae:	bf08      	it	eq
 8005fb0:	4626      	moveq	r6, r4
 8005fb2:	062a      	lsls	r2, r5, #24
 8005fb4:	4433      	add	r3, r6
 8005fb6:	bf48      	it	mi
 8005fb8:	681b      	ldrmi	r3, [r3, #0]
 8005fba:	e7de      	b.n	8005f7a <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 8005fbc:	a901      	add	r1, sp, #4
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f7ff ffb7 	bl	8005f32 <_ZL12read_sleb128PKhPl>
 8005fc4:	e7ed      	b.n	8005fa2 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f830 3b02 	ldrh.w	r3, [r0], #2
 8005fcc:	e7ea      	b.n	8005fa4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8005fd4:	e7e6      	b.n	8005fa4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f850 3b04 	ldr.w	r3, [r0], #4
 8005fdc:	e7e2      	b.n	8005fa4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f850 3b08 	ldr.w	r3, [r0], #8
 8005fe4:	e7de      	b.n	8005fa4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8005fe6:	f002 f8e1 	bl	80081ac <abort>

08005fea <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8005fea:	b508      	push	{r3, lr}
 8005fec:	4603      	mov	r3, r0
 8005fee:	2bff      	cmp	r3, #255	; 0xff
 8005ff0:	4608      	mov	r0, r1
 8005ff2:	d007      	beq.n	8006004 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8005ff4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d00d      	beq.n	8006018 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 8005ffc:	d804      	bhi.n	8006008 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 8005ffe:	b10b      	cbz	r3, 8006004 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d107      	bne.n	8006014 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006004:	2000      	movs	r0, #0
 8006006:	bd08      	pop	{r3, pc}
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d00d      	beq.n	8006028 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800600c:	2b50      	cmp	r3, #80	; 0x50
 800600e:	d0f9      	beq.n	8006004 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006010:	2b30      	cmp	r3, #48	; 0x30
 8006012:	d005      	beq.n	8006020 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006014:	f002 f8ca 	bl	80081ac <abort>
 8006018:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800601c:	f7fc b81a 	b.w	8002054 <_Unwind_GetTextRelBase>
 8006020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006024:	f7fc b81a 	b.w	800205c <_Unwind_GetDataRelBase>
 8006028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800602c:	f7fc b802 	b.w	8002034 <_Unwind_GetRegionStart>

08006030 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	460c      	mov	r4, r1
 8006034:	4601      	mov	r1, r0
 8006036:	4620      	mov	r0, r4
 8006038:	4615      	mov	r5, r2
 800603a:	461e      	mov	r6, r3
 800603c:	f7ff ffd5 	bl	8005fea <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006040:	4633      	mov	r3, r6
 8006042:	462a      	mov	r2, r5
 8006044:	4601      	mov	r1, r0
 8006046:	4620      	mov	r0, r4
 8006048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800604c:	f7ff bf89 	b.w	8005f62 <_ZL28read_encoded_value_with_basehjPKhPj>

08006050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006050:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4605      	mov	r5, r0
 8006058:	b318      	cbz	r0, 80060a2 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x52>
 800605a:	f7fb ffeb 	bl	8002034 <_Unwind_GetRegionStart>
 800605e:	6020      	str	r0, [r4, #0]
 8006060:	7831      	ldrb	r1, [r6, #0]
 8006062:	1c72      	adds	r2, r6, #1
 8006064:	29ff      	cmp	r1, #255	; 0xff
 8006066:	d01d      	beq.n	80060a4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x54>
 8006068:	1d23      	adds	r3, r4, #4
 800606a:	4628      	mov	r0, r5
 800606c:	f7ff ffe0 	bl	8006030 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006070:	4602      	mov	r2, r0
 8006072:	7813      	ldrb	r3, [r2, #0]
 8006074:	1c50      	adds	r0, r2, #1
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	7523      	strb	r3, [r4, #20]
 800607a:	d015      	beq.n	80060a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800607c:	2310      	movs	r3, #16
 800607e:	a901      	add	r1, sp, #4
 8006080:	7523      	strb	r3, [r4, #20]
 8006082:	f7ff ff45 	bl	8005f10 <_ZL12read_uleb128PKhPm>
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	4403      	add	r3, r0
 800608a:	60e3      	str	r3, [r4, #12]
 800608c:	7803      	ldrb	r3, [r0, #0]
 800608e:	a901      	add	r1, sp, #4
 8006090:	7563      	strb	r3, [r4, #21]
 8006092:	3001      	adds	r0, #1
 8006094:	f7ff ff3c 	bl	8005f10 <_ZL12read_uleb128PKhPm>
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	4403      	add	r3, r0
 800609c:	6123      	str	r3, [r4, #16]
 800609e:	b002      	add	sp, #8
 80060a0:	bd70      	pop	{r4, r5, r6, pc}
 80060a2:	e7dc      	b.n	800605e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80060a4:	6060      	str	r0, [r4, #4]
 80060a6:	e7e4      	b.n	8006072 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x22>
 80060a8:	2300      	movs	r3, #0
 80060aa:	e7ee      	b.n	800608a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3a>

080060ac <_Unwind_GetGR>:
 80060ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ae:	ab03      	add	r3, sp, #12
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	2300      	movs	r3, #0
 80060b4:	460a      	mov	r2, r1
 80060b6:	4619      	mov	r1, r3
 80060b8:	f7fb fa20 	bl	80014fc <_Unwind_VRS_Get>
 80060bc:	9803      	ldr	r0, [sp, #12]
 80060be:	b005      	add	sp, #20
 80060c0:	f85d fb04 	ldr.w	pc, [sp], #4

080060c4 <__gxx_personality_v0>:
 80060c4:	2300      	movs	r3, #0
 80060c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	b091      	sub	sp, #68	; 0x44
 80060cc:	9304      	str	r3, [sp, #16]
 80060ce:	f000 0303 	and.w	r3, r0, #3
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	4607      	mov	r7, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4616      	mov	r6, r2
 80060da:	d011      	beq.n	8006100 <__gxx_personality_v0+0x3c>
 80060dc:	d303      	bcc.n	80060e6 <__gxx_personality_v0+0x22>
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d003      	beq.n	80060ea <__gxx_personality_v0+0x26>
 80060e2:	f002 f863 	bl	80081ac <abort>
 80060e6:	0702      	lsls	r2, r0, #28
 80060e8:	d51a      	bpl.n	8006120 <__gxx_personality_v0+0x5c>
 80060ea:	4631      	mov	r1, r6
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7fb ff8b 	bl	8002008 <__gnu_unwind_frame>
 80060f2:	b118      	cbz	r0, 80060fc <__gxx_personality_v0+0x38>
 80060f4:	2009      	movs	r0, #9
 80060f6:	b011      	add	sp, #68	; 0x44
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	2008      	movs	r0, #8
 80060fe:	e7fa      	b.n	80060f6 <__gxx_personality_v0+0x32>
 8006100:	f000 0508 	and.w	r5, r0, #8
 8006104:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8006108:	bb85      	cbnz	r5, 800616c <__gxx_personality_v0+0xa8>
 800610a:	f8d1 9020 	ldr.w	r9, [r1, #32]
 800610e:	4610      	mov	r0, r2
 8006110:	210d      	movs	r1, #13
 8006112:	f7ff ffcb 	bl	80060ac <_Unwind_GetGR>
 8006116:	4581      	cmp	r9, r0
 8006118:	f040 8140 	bne.w	800639c <__gxx_personality_v0+0x2d8>
 800611c:	2506      	movs	r5, #6
 800611e:	e000      	b.n	8006122 <__gxx_personality_v0+0x5e>
 8006120:	2501      	movs	r5, #1
 8006122:	ab10      	add	r3, sp, #64	; 0x40
 8006124:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	2300      	movs	r3, #0
 800612c:	f007 0708 	and.w	r7, r7, #8
 8006130:	433d      	orrs	r5, r7
 8006132:	220c      	movs	r2, #12
 8006134:	4619      	mov	r1, r3
 8006136:	4630      	mov	r0, r6
 8006138:	f7fb fa06 	bl	8001548 <_Unwind_VRS_Set>
 800613c:	2d06      	cmp	r5, #6
 800613e:	f040 8139 	bne.w	80063b4 <__gxx_personality_v0+0x2f0>
 8006142:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8006146:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	bf0c      	ite	eq
 800614e:	f04f 0a01 	moveq.w	sl, #1
 8006152:	f04f 0a03 	movne.w	sl, #3
 8006156:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006158:	f015 0508 	ands.w	r5, r5, #8
 800615c:	f000 80ce 	beq.w	80062fc <__gxx_personality_v0+0x238>
 8006160:	f1ba 0f01 	cmp.w	sl, #1
 8006164:	f040 80c6 	bne.w	80062f4 <__gxx_personality_v0+0x230>
 8006168:	f7ff fdf0 	bl	8005d4c <_ZSt9terminatev>
 800616c:	2502      	movs	r5, #2
 800616e:	e7d8      	b.n	8006122 <__gxx_personality_v0+0x5e>
 8006170:	9a07      	ldr	r2, [sp, #28]
 8006172:	4413      	add	r3, r2
 8006174:	429f      	cmp	r7, r3
 8006176:	f080 8137 	bcs.w	80063e8 <__gxx_personality_v0+0x324>
 800617a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800617e:	f1b8 0f00 	cmp.w	r8, #0
 8006182:	d001      	beq.n	8006188 <__gxx_personality_v0+0xc4>
 8006184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006186:	4498      	add	r8, r3
 8006188:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800618a:	b117      	cbz	r7, 8006192 <__gxx_personality_v0+0xce>
 800618c:	1e78      	subs	r0, r7, #1
 800618e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006190:	4407      	add	r7, r0
 8006192:	f1b8 0f00 	cmp.w	r8, #0
 8006196:	d0a8      	beq.n	80060ea <__gxx_personality_v0+0x26>
 8006198:	2f00      	cmp	r7, #0
 800619a:	f000 80a1 	beq.w	80062e0 <__gxx_personality_v0+0x21c>
 800619e:	f015 0308 	ands.w	r3, r5, #8
 80061a2:	9302      	str	r3, [sp, #8]
 80061a4:	d036      	beq.n	8006214 <__gxx_personality_v0+0x150>
 80061a6:	2347      	movs	r3, #71	; 0x47
 80061a8:	7023      	strb	r3, [r4, #0]
 80061aa:	234e      	movs	r3, #78	; 0x4e
 80061ac:	7063      	strb	r3, [r4, #1]
 80061ae:	2355      	movs	r3, #85	; 0x55
 80061b0:	70a3      	strb	r3, [r4, #2]
 80061b2:	2343      	movs	r3, #67	; 0x43
 80061b4:	70e3      	strb	r3, [r4, #3]
 80061b6:	2346      	movs	r3, #70	; 0x46
 80061b8:	7123      	strb	r3, [r4, #4]
 80061ba:	234f      	movs	r3, #79	; 0x4f
 80061bc:	7163      	strb	r3, [r4, #5]
 80061be:	2352      	movs	r3, #82	; 0x52
 80061c0:	71a3      	strb	r3, [r4, #6]
 80061c2:	2300      	movs	r3, #0
 80061c4:	71e3      	strb	r3, [r4, #7]
 80061c6:	f04f 0a00 	mov.w	sl, #0
 80061ca:	f06f 0b03 	mvn.w	fp, #3
 80061ce:	a907      	add	r1, sp, #28
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7ff feae 	bl	8005f32 <_ZL12read_sleb128PKhPl>
 80061d6:	a908      	add	r1, sp, #32
 80061d8:	9003      	str	r0, [sp, #12]
 80061da:	f7ff feaa 	bl	8005f32 <_ZL12read_sleb128PKhPl>
 80061de:	9a07      	ldr	r2, [sp, #28]
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d076      	beq.n	80062d2 <__gxx_personality_v0+0x20e>
 80061e4:	dd3d      	ble.n	8006262 <__gxx_personality_v0+0x19e>
 80061e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80061ea:	28ff      	cmp	r0, #255	; 0xff
 80061ec:	d035      	beq.n	800625a <__gxx_personality_v0+0x196>
 80061ee:	f000 0307 	and.w	r3, r0, #7
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	f63f af75 	bhi.w	80060e2 <__gxx_personality_v0+0x1e>
 80061f8:	a101      	add	r1, pc, #4	; (adr r1, 8006200 <__gxx_personality_v0+0x13c>)
 80061fa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	0800625f 	.word	0x0800625f
 8006204:	080060e3 	.word	0x080060e3
 8006208:	08006227 	.word	0x08006227
 800620c:	0800625f 	.word	0x0800625f
 8006210:	08006257 	.word	0x08006257
 8006214:	79e3      	ldrb	r3, [r4, #7]
 8006216:	2b01      	cmp	r3, #1
 8006218:	bf0c      	ite	eq
 800621a:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 800621e:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8006222:	9304      	str	r3, [sp, #16]
 8006224:	e7cf      	b.n	80061c6 <__gxx_personality_v0+0x102>
 8006226:	2702      	movs	r7, #2
 8006228:	990d      	ldr	r1, [sp, #52]	; 0x34
 800622a:	ab09      	add	r3, sp, #36	; 0x24
 800622c:	fb07 1212 	mls	r2, r7, r2, r1
 8006230:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006232:	f7ff fe96 	bl	8005f62 <_ZL28read_encoded_value_with_basehjPKhPj>
 8006236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006238:	b369      	cbz	r1, 8006296 <__gxx_personality_v0+0x1d2>
 800623a:	b12c      	cbz	r4, 8006248 <__gxx_personality_v0+0x184>
 800623c:	ab04      	add	r3, sp, #16
 800623e:	2200      	movs	r2, #0
 8006240:	4620      	mov	r0, r4
 8006242:	f7ff fdd1 	bl	8005de8 <__cxa_type_match>
 8006246:	bb30      	cbnz	r0, 8006296 <__gxx_personality_v0+0x1d2>
 8006248:	9f08      	ldr	r7, [sp, #32]
 800624a:	2f00      	cmp	r7, #0
 800624c:	d044      	beq.n	80062d8 <__gxx_personality_v0+0x214>
 800624e:	9b03      	ldr	r3, [sp, #12]
 8006250:	443b      	add	r3, r7
 8006252:	461f      	mov	r7, r3
 8006254:	e7bb      	b.n	80061ce <__gxx_personality_v0+0x10a>
 8006256:	2708      	movs	r7, #8
 8006258:	e7e6      	b.n	8006228 <__gxx_personality_v0+0x164>
 800625a:	2700      	movs	r7, #0
 800625c:	e7e4      	b.n	8006228 <__gxx_personality_v0+0x164>
 800625e:	2704      	movs	r7, #4
 8006260:	e7e2      	b.n	8006228 <__gxx_personality_v0+0x164>
 8006262:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006264:	3201      	adds	r2, #1
 8006266:	b36c      	cbz	r4, 80062c4 <__gxx_personality_v0+0x200>
 8006268:	9b02      	ldr	r3, [sp, #8]
 800626a:	bb5b      	cbnz	r3, 80062c4 <__gxx_personality_v0+0x200>
 800626c:	fb0b 7202 	mla	r2, fp, r2, r7
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	1f17      	subs	r7, r2, #4
 8006274:	9306      	str	r3, [sp, #24]
 8006276:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800627a:	b141      	cbz	r1, 800628e <__gxx_personality_v0+0x1ca>
 800627c:	ab06      	add	r3, sp, #24
 800627e:	2200      	movs	r2, #0
 8006280:	4439      	add	r1, r7
 8006282:	4620      	mov	r0, r4
 8006284:	f7ff fdb0 	bl	8005de8 <__cxa_type_match>
 8006288:	2800      	cmp	r0, #0
 800628a:	d0f4      	beq.n	8006276 <__gxx_personality_v0+0x1b2>
 800628c:	2101      	movs	r1, #1
 800628e:	f081 0101 	eor.w	r1, r1, #1
 8006292:	2900      	cmp	r1, #0
 8006294:	d0d8      	beq.n	8006248 <__gxx_personality_v0+0x184>
 8006296:	f04f 0a03 	mov.w	sl, #3
 800629a:	9f07      	ldr	r7, [sp, #28]
 800629c:	07eb      	lsls	r3, r5, #31
 800629e:	d527      	bpl.n	80062f0 <__gxx_personality_v0+0x22c>
 80062a0:	f1ba 0f02 	cmp.w	sl, #2
 80062a4:	f43f af21 	beq.w	80060ea <__gxx_personality_v0+0x26>
 80062a8:	210d      	movs	r1, #13
 80062aa:	4630      	mov	r0, r6
 80062ac:	9d04      	ldr	r5, [sp, #16]
 80062ae:	f7ff fefd 	bl	80060ac <_Unwind_GetGR>
 80062b2:	6265      	str	r5, [r4, #36]	; 0x24
 80062b4:	6220      	str	r0, [r4, #32]
 80062b6:	62a7      	str	r7, [r4, #40]	; 0x28
 80062b8:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80062bc:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80062c0:	2006      	movs	r0, #6
 80062c2:	e718      	b.n	80060f6 <__gxx_personality_v0+0x32>
 80062c4:	fb0b f202 	mul.w	r2, fp, r2
 80062c8:	58b9      	ldr	r1, [r7, r2]
 80062ca:	fab1 f181 	clz	r1, r1
 80062ce:	0949      	lsrs	r1, r1, #5
 80062d0:	e7df      	b.n	8006292 <__gxx_personality_v0+0x1ce>
 80062d2:	f04f 0a01 	mov.w	sl, #1
 80062d6:	e7b7      	b.n	8006248 <__gxx_personality_v0+0x184>
 80062d8:	f1ba 0f00 	cmp.w	sl, #0
 80062dc:	f43f af05 	beq.w	80060ea <__gxx_personality_v0+0x26>
 80062e0:	f04f 0a02 	mov.w	sl, #2
 80062e4:	e7da      	b.n	800629c <__gxx_personality_v0+0x1d8>
 80062e6:	2700      	movs	r7, #0
 80062e8:	f04f 0a01 	mov.w	sl, #1
 80062ec:	46b8      	mov	r8, r7
 80062ee:	e7d5      	b.n	800629c <__gxx_personality_v0+0x1d8>
 80062f0:	4649      	mov	r1, r9
 80062f2:	e731      	b.n	8006158 <__gxx_personality_v0+0x94>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	da23      	bge.n	8006340 <__gxx_personality_v0+0x27c>
 80062f8:	f7ff fd3a 	bl	8005d70 <_ZSt10unexpectedv>
 80062fc:	f1ba 0f01 	cmp.w	sl, #1
 8006300:	d102      	bne.n	8006308 <__gxx_personality_v0+0x244>
 8006302:	4620      	mov	r0, r4
 8006304:	f000 f947 	bl	8006596 <__cxa_call_terminate>
 8006308:	2f00      	cmp	r7, #0
 800630a:	da19      	bge.n	8006340 <__gxx_personality_v0+0x27c>
 800630c:	aa0a      	add	r2, sp, #40	; 0x28
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff fe9e 	bl	8006050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006314:	4631      	mov	r1, r6
 8006316:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800631a:	f7ff fe66 	bl	8005fea <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800631e:	f06f 0303 	mvn.w	r3, #3
 8006322:	fb07 3203 	mla	r2, r7, r3, r3
 8006326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006328:	900c      	str	r0, [sp, #48]	; 0x30
 800632a:	4413      	add	r3, r2
 800632c:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006330:	b10a      	cbz	r2, 8006336 <__gxx_personality_v0+0x272>
 8006332:	3501      	adds	r5, #1
 8006334:	e7fa      	b.n	800632c <__gxx_personality_v0+0x268>
 8006336:	2204      	movs	r2, #4
 8006338:	62a5      	str	r5, [r4, #40]	; 0x28
 800633a:	62e0      	str	r0, [r4, #44]	; 0x2c
 800633c:	6322      	str	r2, [r4, #48]	; 0x30
 800633e:	6363      	str	r3, [r4, #52]	; 0x34
 8006340:	ab10      	add	r3, sp, #64	; 0x40
 8006342:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2300      	movs	r3, #0
 800634a:	4630      	mov	r0, r6
 800634c:	461a      	mov	r2, r3
 800634e:	4619      	mov	r1, r3
 8006350:	f7fb f8fa 	bl	8001548 <_Unwind_VRS_Set>
 8006354:	ab10      	add	r3, sp, #64	; 0x40
 8006356:	f843 7d20 	str.w	r7, [r3, #-32]!
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	2201      	movs	r2, #1
 8006360:	4619      	mov	r1, r3
 8006362:	4630      	mov	r0, r6
 8006364:	f7fb f8f0 	bl	8001548 <_Unwind_VRS_Set>
 8006368:	210f      	movs	r1, #15
 800636a:	4630      	mov	r0, r6
 800636c:	f7ff fe9e 	bl	80060ac <_Unwind_GetGR>
 8006370:	f000 0001 	and.w	r0, r0, #1
 8006374:	ab10      	add	r3, sp, #64	; 0x40
 8006376:	ea40 0008 	orr.w	r0, r0, r8
 800637a:	f843 0d24 	str.w	r0, [r3, #-36]!
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	2300      	movs	r3, #0
 8006382:	220f      	movs	r2, #15
 8006384:	4619      	mov	r1, r3
 8006386:	4630      	mov	r0, r6
 8006388:	f7fb f8de 	bl	8001548 <_Unwind_VRS_Set>
 800638c:	f1ba 0f02 	cmp.w	sl, #2
 8006390:	d102      	bne.n	8006398 <__gxx_personality_v0+0x2d4>
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff fd86 	bl	8005ea4 <__cxa_begin_cleanup>
 8006398:	2007      	movs	r0, #7
 800639a:	e6ac      	b.n	80060f6 <__gxx_personality_v0+0x32>
 800639c:	aa10      	add	r2, sp, #64	; 0x40
 800639e:	f842 4d2c 	str.w	r4, [r2, #-44]!
 80063a2:	9200      	str	r2, [sp, #0]
 80063a4:	4643      	mov	r3, r8
 80063a6:	220c      	movs	r2, #12
 80063a8:	4641      	mov	r1, r8
 80063aa:	4630      	mov	r0, r6
 80063ac:	f045 0502 	orr.w	r5, r5, #2
 80063b0:	f7fb f8ca 	bl	8001548 <_Unwind_VRS_Set>
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7fb fe43 	bl	8002040 <_Unwind_GetLanguageSpecificData>
 80063ba:	4681      	mov	r9, r0
 80063bc:	2800      	cmp	r0, #0
 80063be:	f43f ae94 	beq.w	80060ea <__gxx_personality_v0+0x26>
 80063c2:	aa0a      	add	r2, sp, #40	; 0x28
 80063c4:	4601      	mov	r1, r0
 80063c6:	4630      	mov	r0, r6
 80063c8:	f7ff fe42 	bl	8006050 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80063cc:	4631      	mov	r1, r6
 80063ce:	4680      	mov	r8, r0
 80063d0:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80063d4:	f7ff fe09 	bl	8005fea <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80063d8:	210f      	movs	r1, #15
 80063da:	900c      	str	r0, [sp, #48]	; 0x30
 80063dc:	4630      	mov	r0, r6
 80063de:	f7ff fe65 	bl	80060ac <_Unwind_GetGR>
 80063e2:	f020 0001 	bic.w	r0, r0, #1
 80063e6:	1e47      	subs	r7, r0, #1
 80063e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ea:	4598      	cmp	r8, r3
 80063ec:	f4bf af7b 	bcs.w	80062e6 <__gxx_personality_v0+0x222>
 80063f0:	4642      	mov	r2, r8
 80063f2:	ab06      	add	r3, sp, #24
 80063f4:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 80063f8:	2000      	movs	r0, #0
 80063fa:	f7ff fe19 	bl	8006030 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80063fe:	ab07      	add	r3, sp, #28
 8006400:	4602      	mov	r2, r0
 8006402:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006406:	2000      	movs	r0, #0
 8006408:	f7ff fe12 	bl	8006030 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800640c:	ab08      	add	r3, sp, #32
 800640e:	4602      	mov	r2, r0
 8006410:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006414:	2000      	movs	r0, #0
 8006416:	f7ff fe0b 	bl	8006030 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800641a:	a909      	add	r1, sp, #36	; 0x24
 800641c:	f7ff fd78 	bl	8005f10 <_ZL12read_uleb128PKhPm>
 8006420:	9a06      	ldr	r2, [sp, #24]
 8006422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006424:	4680      	mov	r8, r0
 8006426:	4413      	add	r3, r2
 8006428:	429f      	cmp	r7, r3
 800642a:	f4bf aea1 	bcs.w	8006170 <__gxx_personality_v0+0xac>
 800642e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006432:	e7d9      	b.n	80063e8 <__gxx_personality_v0+0x324>

08006434 <_ZdlPvj>:
 8006434:	f7ff bc71 	b.w	8005d1a <_ZdlPv>

08006438 <_ZSt15get_new_handlerv>:
 8006438:	4b02      	ldr	r3, [pc, #8]	; (8006444 <_ZSt15get_new_handlerv+0xc>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	f3bf 8f5b 	dmb	ish
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	200001ac 	.word	0x200001ac

08006448 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800644a:	2310      	movs	r3, #16
 800644c:	2400      	movs	r4, #0
 800644e:	9302      	str	r3, [sp, #8]
 8006450:	6803      	ldr	r3, [r0, #0]
 8006452:	4615      	mov	r5, r2
 8006454:	699e      	ldr	r6, [r3, #24]
 8006456:	9400      	str	r4, [sp, #0]
 8006458:	466b      	mov	r3, sp
 800645a:	f88d 4004 	strb.w	r4, [sp, #4]
 800645e:	9403      	str	r4, [sp, #12]
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	47b0      	blx	r6
 8006464:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006468:	f003 0306 	and.w	r3, r3, #6
 800646c:	2b06      	cmp	r3, #6
 800646e:	bf09      	itett	eq
 8006470:	2001      	moveq	r0, #1
 8006472:	4620      	movne	r0, r4
 8006474:	9b00      	ldreq	r3, [sp, #0]
 8006476:	602b      	streq	r3, [r5, #0]
 8006478:	b004      	add	sp, #16
 800647a:	bd70      	pop	{r4, r5, r6, pc}

0800647c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800647c:	9800      	ldr	r0, [sp, #0]
 800647e:	4290      	cmp	r0, r2
 8006480:	bf0c      	ite	eq
 8006482:	2006      	moveq	r0, #6
 8006484:	2001      	movne	r0, #1
 8006486:	4770      	bx	lr

08006488 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	f000 f84b 	bl	800652a <_ZNSt9type_infoD1Ev>
 8006494:	4620      	mov	r0, r4
 8006496:	bd10      	pop	{r4, pc}
 8006498:	08008710 	.word	0x08008710

0800649c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800649c:	b510      	push	{r4, lr}
 800649e:	4604      	mov	r4, r0
 80064a0:	f7ff fff2 	bl	8006488 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80064a4:	4620      	mov	r0, r4
 80064a6:	2108      	movs	r1, #8
 80064a8:	f7ff ffc4 	bl	8006434 <_ZdlPvj>
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd10      	pop	{r4, pc}

080064b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4615      	mov	r5, r2
 80064b4:	461c      	mov	r4, r3
 80064b6:	f000 f83b 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 80064ba:	b120      	cbz	r0, 80064c6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80064bc:	2308      	movs	r3, #8
 80064be:	60e3      	str	r3, [r4, #12]
 80064c0:	2306      	movs	r3, #6
 80064c2:	6025      	str	r5, [r4, #0]
 80064c4:	7123      	strb	r3, [r4, #4]
 80064c6:	bd38      	pop	{r3, r4, r5, pc}

080064c8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80064c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	4605      	mov	r5, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4616      	mov	r6, r2
 80064d2:	461f      	mov	r7, r3
 80064d4:	f000 f82c 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 80064d8:	b948      	cbnz	r0, 80064ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80064da:	2f03      	cmp	r7, #3
 80064dc:	d807      	bhi.n	80064ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4632      	mov	r2, r6
 80064e2:	4629      	mov	r1, r5
 80064e4:	4620      	mov	r0, r4
 80064e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	4718      	bx	r3
 80064ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080064f2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80064f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f6:	9e06      	ldr	r6, [sp, #24]
 80064f8:	4698      	mov	r8, r3
 80064fa:	9b08      	ldr	r3, [sp, #32]
 80064fc:	4607      	mov	r7, r0
 80064fe:	429e      	cmp	r6, r3
 8006500:	4615      	mov	r5, r2
 8006502:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006504:	d103      	bne.n	800650e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8006506:	9907      	ldr	r1, [sp, #28]
 8006508:	f000 f812 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 800650c:	b958      	cbnz	r0, 8006526 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 800650e:	4641      	mov	r1, r8
 8006510:	4638      	mov	r0, r7
 8006512:	f000 f80d 	bl	8006530 <_ZNKSt9type_infoeqERKS_>
 8006516:	b118      	cbz	r0, 8006520 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8006518:	2301      	movs	r3, #1
 800651a:	6026      	str	r6, [r4, #0]
 800651c:	7125      	strb	r5, [r4, #4]
 800651e:	71a3      	strb	r3, [r4, #6]
 8006520:	2000      	movs	r0, #0
 8006522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006526:	7165      	strb	r5, [r4, #5]
 8006528:	e7fa      	b.n	8006520 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

0800652a <_ZNSt9type_infoD1Ev>:
 800652a:	4770      	bx	lr

0800652c <_ZNKSt9type_info14__is_pointer_pEv>:
 800652c:	2000      	movs	r0, #0
 800652e:	4770      	bx	lr

08006530 <_ZNKSt9type_infoeqERKS_>:
 8006530:	4281      	cmp	r1, r0
 8006532:	b508      	push	{r3, lr}
 8006534:	d00e      	beq.n	8006554 <_ZNKSt9type_infoeqERKS_+0x24>
 8006536:	6840      	ldr	r0, [r0, #4]
 8006538:	7803      	ldrb	r3, [r0, #0]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d00c      	beq.n	8006558 <_ZNKSt9type_infoeqERKS_+0x28>
 800653e:	6849      	ldr	r1, [r1, #4]
 8006540:	780b      	ldrb	r3, [r1, #0]
 8006542:	2b2a      	cmp	r3, #42	; 0x2a
 8006544:	bf08      	it	eq
 8006546:	3101      	addeq	r1, #1
 8006548:	f7f9 fe02 	bl	8000150 <strcmp>
 800654c:	fab0 f080 	clz	r0, r0
 8006550:	0940      	lsrs	r0, r0, #5
 8006552:	bd08      	pop	{r3, pc}
 8006554:	2001      	movs	r0, #1
 8006556:	bd08      	pop	{r3, pc}
 8006558:	2000      	movs	r0, #0
 800655a:	bd08      	pop	{r3, pc}

0800655c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800655c:	7803      	ldrb	r3, [r0, #0]
 800655e:	2b47      	cmp	r3, #71	; 0x47
 8006560:	d117      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006562:	7843      	ldrb	r3, [r0, #1]
 8006564:	2b4e      	cmp	r3, #78	; 0x4e
 8006566:	d114      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006568:	7883      	ldrb	r3, [r0, #2]
 800656a:	2b55      	cmp	r3, #85	; 0x55
 800656c:	d111      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800656e:	78c3      	ldrb	r3, [r0, #3]
 8006570:	2b43      	cmp	r3, #67	; 0x43
 8006572:	d10e      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006574:	7903      	ldrb	r3, [r0, #4]
 8006576:	2b43      	cmp	r3, #67	; 0x43
 8006578:	d10b      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800657a:	7943      	ldrb	r3, [r0, #5]
 800657c:	2b2b      	cmp	r3, #43	; 0x2b
 800657e:	d108      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006580:	7983      	ldrb	r3, [r0, #6]
 8006582:	2b2b      	cmp	r3, #43	; 0x2b
 8006584:	d105      	bne.n	8006592 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006586:	79c0      	ldrb	r0, [r0, #7]
 8006588:	2801      	cmp	r0, #1
 800658a:	bf8c      	ite	hi
 800658c:	2000      	movhi	r0, #0
 800658e:	2001      	movls	r0, #1
 8006590:	4770      	bx	lr
 8006592:	2000      	movs	r0, #0
 8006594:	4770      	bx	lr

08006596 <__cxa_call_terminate>:
 8006596:	b510      	push	{r4, lr}
 8006598:	4604      	mov	r4, r0
 800659a:	b148      	cbz	r0, 80065b0 <__cxa_call_terminate+0x1a>
 800659c:	f000 f83b 	bl	8006616 <__cxa_begin_catch>
 80065a0:	4620      	mov	r0, r4
 80065a2:	f7ff ffdb 	bl	800655c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065a6:	b118      	cbz	r0, 80065b0 <__cxa_call_terminate+0x1a>
 80065a8:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80065ac:	f7ff fbc1 	bl	8005d32 <_ZN10__cxxabiv111__terminateEPFvvE>
 80065b0:	f7ff fbcc 	bl	8005d4c <_ZSt9terminatev>

080065b4 <__cxa_call_unexpected>:
 80065b4:	b538      	push	{r3, r4, r5, lr}
 80065b6:	4602      	mov	r2, r0
 80065b8:	f7ff ffd0 	bl	800655c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065bc:	b140      	cbz	r0, 80065d0 <__cxa_call_unexpected+0x1c>
 80065be:	2500      	movs	r5, #0
 80065c0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 80065c4:	4610      	mov	r0, r2
 80065c6:	f000 f826 	bl	8006616 <__cxa_begin_catch>
 80065ca:	b125      	cbz	r5, 80065d6 <__cxa_call_unexpected+0x22>
 80065cc:	f7ff fbd0 	bl	8005d70 <_ZSt10unexpectedv>
 80065d0:	4604      	mov	r4, r0
 80065d2:	2501      	movs	r5, #1
 80065d4:	e7f6      	b.n	80065c4 <__cxa_call_unexpected+0x10>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f7ff fbbd 	bl	8005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

080065dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80065dc:	7803      	ldrb	r3, [r0, #0]
 80065de:	2b47      	cmp	r3, #71	; 0x47
 80065e0:	d117      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065e2:	7843      	ldrb	r3, [r0, #1]
 80065e4:	2b4e      	cmp	r3, #78	; 0x4e
 80065e6:	d114      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065e8:	7883      	ldrb	r3, [r0, #2]
 80065ea:	2b55      	cmp	r3, #85	; 0x55
 80065ec:	d111      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065ee:	78c3      	ldrb	r3, [r0, #3]
 80065f0:	2b43      	cmp	r3, #67	; 0x43
 80065f2:	d10e      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065f4:	7903      	ldrb	r3, [r0, #4]
 80065f6:	2b43      	cmp	r3, #67	; 0x43
 80065f8:	d10b      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065fa:	7943      	ldrb	r3, [r0, #5]
 80065fc:	2b2b      	cmp	r3, #43	; 0x2b
 80065fe:	d108      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006600:	7983      	ldrb	r3, [r0, #6]
 8006602:	2b2b      	cmp	r3, #43	; 0x2b
 8006604:	d105      	bne.n	8006612 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006606:	79c0      	ldrb	r0, [r0, #7]
 8006608:	2801      	cmp	r0, #1
 800660a:	bf8c      	ite	hi
 800660c:	2000      	movhi	r0, #0
 800660e:	2001      	movls	r0, #1
 8006610:	4770      	bx	lr
 8006612:	2000      	movs	r0, #0
 8006614:	4770      	bx	lr

08006616 <__cxa_begin_catch>:
 8006616:	b538      	push	{r3, r4, r5, lr}
 8006618:	4605      	mov	r5, r0
 800661a:	f000 f827 	bl	800666c <__cxa_get_globals>
 800661e:	4601      	mov	r1, r0
 8006620:	6802      	ldr	r2, [r0, #0]
 8006622:	4628      	mov	r0, r5
 8006624:	f1a5 0420 	sub.w	r4, r5, #32
 8006628:	f7ff ffd8 	bl	80065dc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800662c:	b930      	cbnz	r0, 800663c <__cxa_begin_catch+0x26>
 800662e:	b10a      	cbz	r2, 8006634 <__cxa_begin_catch+0x1e>
 8006630:	f7ff fb8c 	bl	8005d4c <_ZSt9terminatev>
 8006634:	600c      	str	r4, [r1, #0]
 8006636:	4614      	mov	r4, r2
 8006638:	4620      	mov	r0, r4
 800663a:	bd38      	pop	{r3, r4, r5, pc}
 800663c:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006640:	4628      	mov	r0, r5
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfb4      	ite	lt
 8006646:	f1c3 0301 	rsblt	r3, r3, #1
 800664a:	3301      	addge	r3, #1
 800664c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006650:	684b      	ldr	r3, [r1, #4]
 8006652:	42a2      	cmp	r2, r4
 8006654:	f103 33ff 	add.w	r3, r3, #4294967295
 8006658:	604b      	str	r3, [r1, #4]
 800665a:	bf1c      	itt	ne
 800665c:	f845 2c10 	strne.w	r2, [r5, #-16]
 8006660:	600c      	strne	r4, [r1, #0]
 8006662:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 8006664:	f7fa ff42 	bl	80014ec <_Unwind_Complete>
 8006668:	e7e6      	b.n	8006638 <__cxa_begin_catch+0x22>
	...

0800666c <__cxa_get_globals>:
 800666c:	4800      	ldr	r0, [pc, #0]	; (8006670 <__cxa_get_globals+0x4>)
 800666e:	4770      	bx	lr
 8006670:	200001b0 	.word	0x200001b0

08006674 <cosf>:
 8006674:	b507      	push	{r0, r1, r2, lr}
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <cosf+0x64>)
 8006678:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800667c:	4293      	cmp	r3, r2
 800667e:	4601      	mov	r1, r0
 8006680:	dc03      	bgt.n	800668a <cosf+0x16>
 8006682:	2100      	movs	r1, #0
 8006684:	f001 f8c8 	bl	8007818 <__kernel_cosf>
 8006688:	e004      	b.n	8006694 <cosf+0x20>
 800668a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800668e:	db04      	blt.n	800669a <cosf+0x26>
 8006690:	f7fa fa36 	bl	8000b00 <__aeabi_fsub>
 8006694:	b003      	add	sp, #12
 8006696:	f85d fb04 	ldr.w	pc, [sp], #4
 800669a:	4669      	mov	r1, sp
 800669c:	f000 ff12 	bl	80074c4 <__ieee754_rem_pio2f>
 80066a0:	f000 0203 	and.w	r2, r0, #3
 80066a4:	2a01      	cmp	r2, #1
 80066a6:	d005      	beq.n	80066b4 <cosf+0x40>
 80066a8:	2a02      	cmp	r2, #2
 80066aa:	d00a      	beq.n	80066c2 <cosf+0x4e>
 80066ac:	b972      	cbnz	r2, 80066cc <cosf+0x58>
 80066ae:	9901      	ldr	r1, [sp, #4]
 80066b0:	9800      	ldr	r0, [sp, #0]
 80066b2:	e7e7      	b.n	8006684 <cosf+0x10>
 80066b4:	9901      	ldr	r1, [sp, #4]
 80066b6:	9800      	ldr	r0, [sp, #0]
 80066b8:	f001 fbd0 	bl	8007e5c <__kernel_sinf>
 80066bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80066c0:	e7e8      	b.n	8006694 <cosf+0x20>
 80066c2:	9901      	ldr	r1, [sp, #4]
 80066c4:	9800      	ldr	r0, [sp, #0]
 80066c6:	f001 f8a7 	bl	8007818 <__kernel_cosf>
 80066ca:	e7f7      	b.n	80066bc <cosf+0x48>
 80066cc:	2201      	movs	r2, #1
 80066ce:	9901      	ldr	r1, [sp, #4]
 80066d0:	9800      	ldr	r0, [sp, #0]
 80066d2:	f001 fbc3 	bl	8007e5c <__kernel_sinf>
 80066d6:	e7dd      	b.n	8006694 <cosf+0x20>
 80066d8:	3f490fd8 	.word	0x3f490fd8

080066dc <log2f>:
 80066dc:	b508      	push	{r3, lr}
 80066de:	f000 f83d 	bl	800675c <logf>
 80066e2:	4902      	ldr	r1, [pc, #8]	; (80066ec <log2f+0x10>)
 80066e4:	f7fa fbca 	bl	8000e7c <__aeabi_fdiv>
 80066e8:	bd08      	pop	{r3, pc}
 80066ea:	bf00      	nop
 80066ec:	3f317218 	.word	0x3f317218

080066f0 <sinf>:
 80066f0:	b507      	push	{r0, r1, r2, lr}
 80066f2:	4a19      	ldr	r2, [pc, #100]	; (8006758 <sinf+0x68>)
 80066f4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80066f8:	4293      	cmp	r3, r2
 80066fa:	4601      	mov	r1, r0
 80066fc:	dc04      	bgt.n	8006708 <sinf+0x18>
 80066fe:	2200      	movs	r2, #0
 8006700:	2100      	movs	r1, #0
 8006702:	f001 fbab 	bl	8007e5c <__kernel_sinf>
 8006706:	e004      	b.n	8006712 <sinf+0x22>
 8006708:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800670c:	db04      	blt.n	8006718 <sinf+0x28>
 800670e:	f7fa f9f7 	bl	8000b00 <__aeabi_fsub>
 8006712:	b003      	add	sp, #12
 8006714:	f85d fb04 	ldr.w	pc, [sp], #4
 8006718:	4669      	mov	r1, sp
 800671a:	f000 fed3 	bl	80074c4 <__ieee754_rem_pio2f>
 800671e:	f000 0003 	and.w	r0, r0, #3
 8006722:	2801      	cmp	r0, #1
 8006724:	d006      	beq.n	8006734 <sinf+0x44>
 8006726:	2802      	cmp	r0, #2
 8006728:	d009      	beq.n	800673e <sinf+0x4e>
 800672a:	b980      	cbnz	r0, 800674e <sinf+0x5e>
 800672c:	2201      	movs	r2, #1
 800672e:	9901      	ldr	r1, [sp, #4]
 8006730:	9800      	ldr	r0, [sp, #0]
 8006732:	e7e6      	b.n	8006702 <sinf+0x12>
 8006734:	9901      	ldr	r1, [sp, #4]
 8006736:	9800      	ldr	r0, [sp, #0]
 8006738:	f001 f86e 	bl	8007818 <__kernel_cosf>
 800673c:	e7e9      	b.n	8006712 <sinf+0x22>
 800673e:	2201      	movs	r2, #1
 8006740:	9901      	ldr	r1, [sp, #4]
 8006742:	9800      	ldr	r0, [sp, #0]
 8006744:	f001 fb8a 	bl	8007e5c <__kernel_sinf>
 8006748:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800674c:	e7e1      	b.n	8006712 <sinf+0x22>
 800674e:	9901      	ldr	r1, [sp, #4]
 8006750:	9800      	ldr	r0, [sp, #0]
 8006752:	f001 f861 	bl	8007818 <__kernel_cosf>
 8006756:	e7f7      	b.n	8006748 <sinf+0x58>
 8006758:	3f490fd8 	.word	0x3f490fd8

0800675c <logf>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	b08a      	sub	sp, #40	; 0x28
 8006760:	4604      	mov	r4, r0
 8006762:	f000 fa23 	bl	8006bac <__ieee754_logf>
 8006766:	4b31      	ldr	r3, [pc, #196]	; (800682c <logf+0xd0>)
 8006768:	4606      	mov	r6, r0
 800676a:	f993 5000 	ldrsb.w	r5, [r3]
 800676e:	1c6b      	adds	r3, r5, #1
 8006770:	d059      	beq.n	8006826 <logf+0xca>
 8006772:	4621      	mov	r1, r4
 8006774:	4620      	mov	r0, r4
 8006776:	f7fa fc93 	bl	80010a0 <__aeabi_fcmpun>
 800677a:	2800      	cmp	r0, #0
 800677c:	d153      	bne.n	8006826 <logf+0xca>
 800677e:	2100      	movs	r1, #0
 8006780:	4620      	mov	r0, r4
 8006782:	f7fa fc83 	bl	800108c <__aeabi_fcmpgt>
 8006786:	2800      	cmp	r0, #0
 8006788:	d14d      	bne.n	8006826 <logf+0xca>
 800678a:	4b29      	ldr	r3, [pc, #164]	; (8006830 <logf+0xd4>)
 800678c:	9008      	str	r0, [sp, #32]
 800678e:	4620      	mov	r0, r4
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	f7f9 fe4b 	bl	800042c <__aeabi_f2d>
 8006796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800679a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800679e:	b995      	cbnz	r5, 80067c6 <logf+0x6a>
 80067a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80067a4:	4b23      	ldr	r3, [pc, #140]	; (8006834 <logf+0xd8>)
 80067a6:	2100      	movs	r1, #0
 80067a8:	4620      	mov	r0, r4
 80067aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067ae:	f7fa fc45 	bl	800103c <__aeabi_fcmpeq>
 80067b2:	bb30      	cbnz	r0, 8006802 <logf+0xa6>
 80067b4:	2301      	movs	r3, #1
 80067b6:	2d02      	cmp	r5, #2
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	d117      	bne.n	80067ec <logf+0x90>
 80067bc:	f001 fd0c 	bl	80081d8 <__errno>
 80067c0:	2321      	movs	r3, #33	; 0x21
 80067c2:	6003      	str	r3, [r0, #0]
 80067c4:	e017      	b.n	80067f6 <logf+0x9a>
 80067c6:	2200      	movs	r2, #0
 80067c8:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <logf+0xdc>)
 80067ca:	2100      	movs	r1, #0
 80067cc:	4620      	mov	r0, r4
 80067ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067d2:	f7fa fc33 	bl	800103c <__aeabi_fcmpeq>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d0ec      	beq.n	80067b4 <logf+0x58>
 80067da:	2302      	movs	r3, #2
 80067dc:	429d      	cmp	r5, r3
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	d111      	bne.n	8006806 <logf+0xaa>
 80067e2:	f001 fcf9 	bl	80081d8 <__errno>
 80067e6:	2322      	movs	r3, #34	; 0x22
 80067e8:	6003      	str	r3, [r0, #0]
 80067ea:	e011      	b.n	8006810 <logf+0xb4>
 80067ec:	4668      	mov	r0, sp
 80067ee:	f001 fbab 	bl	8007f48 <matherr>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d0e2      	beq.n	80067bc <logf+0x60>
 80067f6:	4811      	ldr	r0, [pc, #68]	; (800683c <logf+0xe0>)
 80067f8:	f001 fba8 	bl	8007f4c <nan>
 80067fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006800:	e006      	b.n	8006810 <logf+0xb4>
 8006802:	2302      	movs	r3, #2
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	4668      	mov	r0, sp
 8006808:	f001 fb9e 	bl	8007f48 <matherr>
 800680c:	2800      	cmp	r0, #0
 800680e:	d0e8      	beq.n	80067e2 <logf+0x86>
 8006810:	9b08      	ldr	r3, [sp, #32]
 8006812:	b11b      	cbz	r3, 800681c <logf+0xc0>
 8006814:	f001 fce0 	bl	80081d8 <__errno>
 8006818:	9b08      	ldr	r3, [sp, #32]
 800681a:	6003      	str	r3, [r0, #0]
 800681c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006820:	f7fa f91a 	bl	8000a58 <__aeabi_d2f>
 8006824:	4606      	mov	r6, r0
 8006826:	4630      	mov	r0, r6
 8006828:	b00a      	add	sp, #40	; 0x28
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	2000001c 	.word	0x2000001c
 8006830:	080087a0 	.word	0x080087a0
 8006834:	c7efffff 	.word	0xc7efffff
 8006838:	fff00000 	.word	0xfff00000
 800683c:	080087a4 	.word	0x080087a4

08006840 <powf>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	b08b      	sub	sp, #44	; 0x2c
 8006846:	4605      	mov	r5, r0
 8006848:	460c      	mov	r4, r1
 800684a:	f000 faef 	bl	8006e2c <__ieee754_powf>
 800684e:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8006b14 <powf+0x2d4>
 8006852:	4606      	mov	r6, r0
 8006854:	f998 9000 	ldrsb.w	r9, [r8]
 8006858:	4647      	mov	r7, r8
 800685a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800685e:	d060      	beq.n	8006922 <powf+0xe2>
 8006860:	4621      	mov	r1, r4
 8006862:	4620      	mov	r0, r4
 8006864:	f7fa fc1c 	bl	80010a0 <__aeabi_fcmpun>
 8006868:	4683      	mov	fp, r0
 800686a:	2800      	cmp	r0, #0
 800686c:	d159      	bne.n	8006922 <powf+0xe2>
 800686e:	4629      	mov	r1, r5
 8006870:	4628      	mov	r0, r5
 8006872:	f7fa fc15 	bl	80010a0 <__aeabi_fcmpun>
 8006876:	2100      	movs	r1, #0
 8006878:	4682      	mov	sl, r0
 800687a:	b300      	cbz	r0, 80068be <powf+0x7e>
 800687c:	4620      	mov	r0, r4
 800687e:	f7fa fbdd 	bl	800103c <__aeabi_fcmpeq>
 8006882:	2800      	cmp	r0, #0
 8006884:	d04d      	beq.n	8006922 <powf+0xe2>
 8006886:	2301      	movs	r3, #1
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4b9c      	ldr	r3, [pc, #624]	; (8006afc <powf+0x2bc>)
 800688c:	4628      	mov	r0, r5
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	f8cd b020 	str.w	fp, [sp, #32]
 8006894:	f7f9 fdca 	bl	800042c <__aeabi_f2d>
 8006898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800689c:	4620      	mov	r0, r4
 800689e:	f7f9 fdc5 	bl	800042c <__aeabi_f2d>
 80068a2:	2200      	movs	r2, #0
 80068a4:	4b96      	ldr	r3, [pc, #600]	; (8006b00 <powf+0x2c0>)
 80068a6:	f1b9 0f02 	cmp.w	r9, #2
 80068aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068b2:	d031      	beq.n	8006918 <powf+0xd8>
 80068b4:	4668      	mov	r0, sp
 80068b6:	f001 fb47 	bl	8007f48 <matherr>
 80068ba:	bb38      	cbnz	r0, 800690c <powf+0xcc>
 80068bc:	e05d      	b.n	800697a <powf+0x13a>
 80068be:	4628      	mov	r0, r5
 80068c0:	f7fa fbbc 	bl	800103c <__aeabi_fcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d05d      	beq.n	8006984 <powf+0x144>
 80068c8:	2100      	movs	r1, #0
 80068ca:	4620      	mov	r0, r4
 80068cc:	f7fa fbb6 	bl	800103c <__aeabi_fcmpeq>
 80068d0:	4607      	mov	r7, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d029      	beq.n	800692a <powf+0xea>
 80068d6:	2301      	movs	r3, #1
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	4b88      	ldr	r3, [pc, #544]	; (8006afc <powf+0x2bc>)
 80068dc:	4628      	mov	r0, r5
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	f8cd a020 	str.w	sl, [sp, #32]
 80068e4:	f7f9 fda2 	bl	800042c <__aeabi_f2d>
 80068e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068ec:	4620      	mov	r0, r4
 80068ee:	f7f9 fd9d 	bl	800042c <__aeabi_f2d>
 80068f2:	2200      	movs	r2, #0
 80068f4:	2300      	movs	r3, #0
 80068f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	d0d7      	beq.n	80068b4 <powf+0x74>
 8006904:	2200      	movs	r2, #0
 8006906:	4b7e      	ldr	r3, [pc, #504]	; (8006b00 <powf+0x2c0>)
 8006908:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800690c:	9b08      	ldr	r3, [sp, #32]
 800690e:	b11b      	cbz	r3, 8006918 <powf+0xd8>
 8006910:	f001 fc62 	bl	80081d8 <__errno>
 8006914:	9b08      	ldr	r3, [sp, #32]
 8006916:	6003      	str	r3, [r0, #0]
 8006918:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800691c:	f7fa f89c 	bl	8000a58 <__aeabi_d2f>
 8006920:	4606      	mov	r6, r0
 8006922:	4630      	mov	r0, r6
 8006924:	b00b      	add	sp, #44	; 0x2c
 8006926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692a:	4620      	mov	r0, r4
 800692c:	f001 fb9f 	bl	800806e <finitef>
 8006930:	2800      	cmp	r0, #0
 8006932:	d0f6      	beq.n	8006922 <powf+0xe2>
 8006934:	2100      	movs	r1, #0
 8006936:	4620      	mov	r0, r4
 8006938:	f7fa fb8a 	bl	8001050 <__aeabi_fcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	d0f0      	beq.n	8006922 <powf+0xe2>
 8006940:	2301      	movs	r3, #1
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	4b6d      	ldr	r3, [pc, #436]	; (8006afc <powf+0x2bc>)
 8006946:	4628      	mov	r0, r5
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	9708      	str	r7, [sp, #32]
 800694c:	f7f9 fd6e 	bl	800042c <__aeabi_f2d>
 8006950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006954:	4620      	mov	r0, r4
 8006956:	f7f9 fd69 	bl	800042c <__aeabi_f2d>
 800695a:	f998 3000 	ldrsb.w	r3, [r8]
 800695e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006962:	b923      	cbnz	r3, 800696e <powf+0x12e>
 8006964:	2200      	movs	r2, #0
 8006966:	2300      	movs	r3, #0
 8006968:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800696c:	e7a2      	b.n	80068b4 <powf+0x74>
 800696e:	2000      	movs	r0, #0
 8006970:	4964      	ldr	r1, [pc, #400]	; (8006b04 <powf+0x2c4>)
 8006972:	2b02      	cmp	r3, #2
 8006974:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006978:	d19c      	bne.n	80068b4 <powf+0x74>
 800697a:	f001 fc2d 	bl	80081d8 <__errno>
 800697e:	2321      	movs	r3, #33	; 0x21
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	e7c3      	b.n	800690c <powf+0xcc>
 8006984:	4630      	mov	r0, r6
 8006986:	f001 fb72 	bl	800806e <finitef>
 800698a:	4680      	mov	r8, r0
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 8087 	bne.w	8006aa0 <powf+0x260>
 8006992:	4628      	mov	r0, r5
 8006994:	f001 fb6b 	bl	800806e <finitef>
 8006998:	2800      	cmp	r0, #0
 800699a:	f000 8081 	beq.w	8006aa0 <powf+0x260>
 800699e:	4620      	mov	r0, r4
 80069a0:	f001 fb65 	bl	800806e <finitef>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d07b      	beq.n	8006aa0 <powf+0x260>
 80069a8:	4631      	mov	r1, r6
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7fa fb78 	bl	80010a0 <__aeabi_fcmpun>
 80069b0:	f997 6000 	ldrsb.w	r6, [r7]
 80069b4:	4b51      	ldr	r3, [pc, #324]	; (8006afc <powf+0x2bc>)
 80069b6:	b1d0      	cbz	r0, 80069ee <powf+0x1ae>
 80069b8:	2201      	movs	r2, #1
 80069ba:	4628      	mov	r0, r5
 80069bc:	e88d 000c 	stmia.w	sp, {r2, r3}
 80069c0:	f8cd 8020 	str.w	r8, [sp, #32]
 80069c4:	f7f9 fd32 	bl	800042c <__aeabi_f2d>
 80069c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069cc:	4620      	mov	r0, r4
 80069ce:	f7f9 fd2d 	bl	800042c <__aeabi_f2d>
 80069d2:	2200      	movs	r2, #0
 80069d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069d8:	2300      	movs	r3, #0
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d0c4      	beq.n	8006968 <powf+0x128>
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7f9 fea1 	bl	8000728 <__aeabi_ddiv>
 80069e6:	2e02      	cmp	r6, #2
 80069e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069ec:	e7c4      	b.n	8006978 <powf+0x138>
 80069ee:	2203      	movs	r2, #3
 80069f0:	9008      	str	r0, [sp, #32]
 80069f2:	4628      	mov	r0, r5
 80069f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80069f8:	f7f9 fd18 	bl	800042c <__aeabi_f2d>
 80069fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a00:	4620      	mov	r0, r4
 8006a02:	f7f9 fd13 	bl	800042c <__aeabi_f2d>
 8006a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a0a:	bb4e      	cbnz	r6, 8006a60 <powf+0x220>
 8006a0c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a10:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <powf+0x2c8>)
 8006a12:	2100      	movs	r1, #0
 8006a14:	4628      	mov	r0, r5
 8006a16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a1a:	f7fa fb19 	bl	8001050 <__aeabi_fcmplt>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d064      	beq.n	8006aec <powf+0x2ac>
 8006a22:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a26:	4620      	mov	r0, r4
 8006a28:	f7fa f974 	bl	8000d14 <__aeabi_fmul>
 8006a2c:	f7f9 fcfe 	bl	800042c <__aeabi_f2d>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	f001 fa90 	bl	8007f58 <rint>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 ffb0 	bl	80009a4 <__aeabi_dcmpeq>
 8006a44:	b920      	cbnz	r0, 8006a50 <powf+0x210>
 8006a46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006a4a:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <powf+0x2cc>)
 8006a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a50:	f997 3000 	ldrsb.w	r3, [r7]
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d149      	bne.n	8006aec <powf+0x2ac>
 8006a58:	f001 fbbe 	bl	80081d8 <__errno>
 8006a5c:	2322      	movs	r3, #34	; 0x22
 8006a5e:	e78f      	b.n	8006980 <powf+0x140>
 8006a60:	2200      	movs	r2, #0
 8006a62:	4b2b      	ldr	r3, [pc, #172]	; (8006b10 <powf+0x2d0>)
 8006a64:	2100      	movs	r1, #0
 8006a66:	4628      	mov	r0, r5
 8006a68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a6c:	f7fa faf0 	bl	8001050 <__aeabi_fcmplt>
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d0ed      	beq.n	8006a50 <powf+0x210>
 8006a74:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7fa f94b 	bl	8000d14 <__aeabi_fmul>
 8006a7e:	f7f9 fcd5 	bl	800042c <__aeabi_f2d>
 8006a82:	4604      	mov	r4, r0
 8006a84:	460d      	mov	r5, r1
 8006a86:	f001 fa67 	bl	8007f58 <rint>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7f9 ff87 	bl	80009a4 <__aeabi_dcmpeq>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d1da      	bne.n	8006a50 <powf+0x210>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	4b19      	ldr	r3, [pc, #100]	; (8006b04 <powf+0x2c4>)
 8006a9e:	e7d5      	b.n	8006a4c <powf+0x20c>
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f7fa faca 	bl	800103c <__aeabi_fcmpeq>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f43f af3a 	beq.w	8006922 <powf+0xe2>
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f001 fadd 	bl	800806e <finitef>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f43f af34 	beq.w	8006922 <powf+0xe2>
 8006aba:	4620      	mov	r0, r4
 8006abc:	f001 fad7 	bl	800806e <finitef>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	f43f af2e 	beq.w	8006922 <powf+0xe2>
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	4b0c      	ldr	r3, [pc, #48]	; (8006afc <powf+0x2bc>)
 8006acc:	4628      	mov	r0, r5
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9308      	str	r3, [sp, #32]
 8006ad4:	f7f9 fcaa 	bl	800042c <__aeabi_f2d>
 8006ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006adc:	4620      	mov	r0, r4
 8006ade:	f7f9 fca5 	bl	800042c <__aeabi_f2d>
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e7af      	b.n	8006a4c <powf+0x20c>
 8006aec:	4668      	mov	r0, sp
 8006aee:	f001 fa2b 	bl	8007f48 <matherr>
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f47f af0a 	bne.w	800690c <powf+0xcc>
 8006af8:	e7ae      	b.n	8006a58 <powf+0x218>
 8006afa:	bf00      	nop
 8006afc:	080087a5 	.word	0x080087a5
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	fff00000 	.word	0xfff00000
 8006b08:	47efffff 	.word	0x47efffff
 8006b0c:	c7efffff 	.word	0xc7efffff
 8006b10:	7ff00000 	.word	0x7ff00000
 8006b14:	2000001c 	.word	0x2000001c

08006b18 <sqrtf>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	b08b      	sub	sp, #44	; 0x2c
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	f000 fe29 	bl	8007774 <__ieee754_sqrtf>
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <sqrtf+0x8c>)
 8006b24:	4606      	mov	r6, r0
 8006b26:	f993 5000 	ldrsb.w	r5, [r3]
 8006b2a:	1c6b      	adds	r3, r5, #1
 8006b2c:	d02a      	beq.n	8006b84 <sqrtf+0x6c>
 8006b2e:	4621      	mov	r1, r4
 8006b30:	4620      	mov	r0, r4
 8006b32:	f7fa fab5 	bl	80010a0 <__aeabi_fcmpun>
 8006b36:	4607      	mov	r7, r0
 8006b38:	bb20      	cbnz	r0, 8006b84 <sqrtf+0x6c>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	f7fa fa87 	bl	8001050 <__aeabi_fcmplt>
 8006b42:	b1f8      	cbz	r0, 8006b84 <sqrtf+0x6c>
 8006b44:	2301      	movs	r3, #1
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	4b17      	ldr	r3, [pc, #92]	; (8006ba8 <sqrtf+0x90>)
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	9708      	str	r7, [sp, #32]
 8006b50:	f7f9 fc6c 	bl	800042c <__aeabi_f2d>
 8006b54:	2200      	movs	r2, #0
 8006b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	b99d      	cbnz	r5, 8006b8a <sqrtf+0x72>
 8006b62:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b66:	4668      	mov	r0, sp
 8006b68:	f001 f9ee 	bl	8007f48 <matherr>
 8006b6c:	b1a8      	cbz	r0, 8006b9a <sqrtf+0x82>
 8006b6e:	9b08      	ldr	r3, [sp, #32]
 8006b70:	b11b      	cbz	r3, 8006b7a <sqrtf+0x62>
 8006b72:	f001 fb31 	bl	80081d8 <__errno>
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	6003      	str	r3, [r0, #0]
 8006b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b7e:	f7f9 ff6b 	bl	8000a58 <__aeabi_d2f>
 8006b82:	4606      	mov	r6, r0
 8006b84:	4630      	mov	r0, r6
 8006b86:	b00b      	add	sp, #44	; 0x2c
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	f7f9 fdcb 	bl	8000728 <__aeabi_ddiv>
 8006b92:	2d02      	cmp	r5, #2
 8006b94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b98:	d1e5      	bne.n	8006b66 <sqrtf+0x4e>
 8006b9a:	f001 fb1d 	bl	80081d8 <__errno>
 8006b9e:	2321      	movs	r3, #33	; 0x21
 8006ba0:	6003      	str	r3, [r0, #0]
 8006ba2:	e7e4      	b.n	8006b6e <sqrtf+0x56>
 8006ba4:	2000001c 	.word	0x2000001c
 8006ba8:	080087aa 	.word	0x080087aa

08006bac <__ieee754_logf>:
 8006bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	d106      	bne.n	8006bc8 <__ieee754_logf+0x1c>
 8006bba:	2100      	movs	r1, #0
 8006bbc:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8006bc0:	f7fa f95c 	bl	8000e7c <__aeabi_fdiv>
 8006bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	da03      	bge.n	8006bd4 <__ieee754_logf+0x28>
 8006bcc:	f7f9 ff98 	bl	8000b00 <__aeabi_fsub>
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	e7f5      	b.n	8006bc0 <__ieee754_logf+0x14>
 8006bd4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006bd8:	db03      	blt.n	8006be2 <__ieee754_logf+0x36>
 8006bda:	f7f9 ff93 	bl	8000b04 <__addsf3>
 8006bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8006be6:	da36      	bge.n	8006c56 <__ieee754_logf+0xaa>
 8006be8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8006bec:	f7fa f892 	bl	8000d14 <__aeabi_fmul>
 8006bf0:	f06f 0218 	mvn.w	r2, #24
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	4b81      	ldr	r3, [pc, #516]	; (8006dfc <__ieee754_logf+0x250>)
 8006bf8:	15ee      	asrs	r6, r5, #23
 8006bfa:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8006bfe:	3e7f      	subs	r6, #127	; 0x7f
 8006c00:	442b      	add	r3, r5
 8006c02:	4416      	add	r6, r2
 8006c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c08:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8006c0c:	f083 537e 	eor.w	r3, r3, #1065353216	; 0x3f800000
 8006c10:	ea43 0005 	orr.w	r0, r3, r5
 8006c14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006c18:	f7f9 ff72 	bl	8000b00 <__aeabi_fsub>
 8006c1c:	f105 030f 	add.w	r3, r5, #15
 8006c20:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006c24:	2b0f      	cmp	r3, #15
 8006c26:	4604      	mov	r4, r0
 8006c28:	dc47      	bgt.n	8006cba <__ieee754_logf+0x10e>
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	f7fa fa06 	bl	800103c <__aeabi_fcmpeq>
 8006c30:	b198      	cbz	r0, 8006c5a <__ieee754_logf+0xae>
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	f000 80de 	beq.w	8006df4 <__ieee754_logf+0x248>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7fa f817 	bl	8000c6c <__aeabi_i2f>
 8006c3e:	4970      	ldr	r1, [pc, #448]	; (8006e00 <__ieee754_logf+0x254>)
 8006c40:	4605      	mov	r5, r0
 8006c42:	f7fa f867 	bl	8000d14 <__aeabi_fmul>
 8006c46:	496f      	ldr	r1, [pc, #444]	; (8006e04 <__ieee754_logf+0x258>)
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f7fa f862 	bl	8000d14 <__aeabi_fmul>
 8006c50:	4601      	mov	r1, r0
 8006c52:	4620      	mov	r0, r4
 8006c54:	e7c1      	b.n	8006bda <__ieee754_logf+0x2e>
 8006c56:	2200      	movs	r2, #0
 8006c58:	e7cd      	b.n	8006bf6 <__ieee754_logf+0x4a>
 8006c5a:	496b      	ldr	r1, [pc, #428]	; (8006e08 <__ieee754_logf+0x25c>)
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7fa f859 	bl	8000d14 <__aeabi_fmul>
 8006c62:	4601      	mov	r1, r0
 8006c64:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006c68:	f7f9 ff4a 	bl	8000b00 <__aeabi_fsub>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4605      	mov	r5, r0
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7fa f84f 	bl	8000d14 <__aeabi_fmul>
 8006c76:	4601      	mov	r1, r0
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7fa f84b 	bl	8000d14 <__aeabi_fmul>
 8006c7e:	4605      	mov	r5, r0
 8006c80:	b916      	cbnz	r6, 8006c88 <__ieee754_logf+0xdc>
 8006c82:	4601      	mov	r1, r0
 8006c84:	4620      	mov	r0, r4
 8006c86:	e014      	b.n	8006cb2 <__ieee754_logf+0x106>
 8006c88:	4630      	mov	r0, r6
 8006c8a:	f7f9 ffef 	bl	8000c6c <__aeabi_i2f>
 8006c8e:	495c      	ldr	r1, [pc, #368]	; (8006e00 <__ieee754_logf+0x254>)
 8006c90:	4607      	mov	r7, r0
 8006c92:	f7fa f83f 	bl	8000d14 <__aeabi_fmul>
 8006c96:	495b      	ldr	r1, [pc, #364]	; (8006e04 <__ieee754_logf+0x258>)
 8006c98:	4606      	mov	r6, r0
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	f7fa f83a 	bl	8000d14 <__aeabi_fmul>
 8006ca0:	4601      	mov	r1, r0
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f7f9 ff2c 	bl	8000b00 <__aeabi_fsub>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f7f9 ff29 	bl	8000b00 <__aeabi_fsub>
 8006cae:	4601      	mov	r1, r0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7f9 ff25 	bl	8000b00 <__aeabi_fsub>
 8006cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006cbe:	f7f9 ff21 	bl	8000b04 <__addsf3>
 8006cc2:	4601      	mov	r1, r0
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7fa f8d9 	bl	8000e7c <__aeabi_fdiv>
 8006cca:	4607      	mov	r7, r0
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7f9 ffcd 	bl	8000c6c <__aeabi_i2f>
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	4681      	mov	r9, r0
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	f7fa f81c 	bl	8000d14 <__aeabi_fmul>
 8006cdc:	4601      	mov	r1, r0
 8006cde:	4683      	mov	fp, r0
 8006ce0:	f7fa f818 	bl	8000d14 <__aeabi_fmul>
 8006ce4:	4680      	mov	r8, r0
 8006ce6:	4949      	ldr	r1, [pc, #292]	; (8006e0c <__ieee754_logf+0x260>)
 8006ce8:	f7fa f814 	bl	8000d14 <__aeabi_fmul>
 8006cec:	4948      	ldr	r1, [pc, #288]	; (8006e10 <__ieee754_logf+0x264>)
 8006cee:	f7f9 ff09 	bl	8000b04 <__addsf3>
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	f7fa f80e 	bl	8000d14 <__aeabi_fmul>
 8006cf8:	4946      	ldr	r1, [pc, #280]	; (8006e14 <__ieee754_logf+0x268>)
 8006cfa:	f7f9 ff03 	bl	8000b04 <__addsf3>
 8006cfe:	4641      	mov	r1, r8
 8006d00:	f7fa f808 	bl	8000d14 <__aeabi_fmul>
 8006d04:	4944      	ldr	r1, [pc, #272]	; (8006e18 <__ieee754_logf+0x26c>)
 8006d06:	f7f9 fefd 	bl	8000b04 <__addsf3>
 8006d0a:	4659      	mov	r1, fp
 8006d0c:	f7fa f802 	bl	8000d14 <__aeabi_fmul>
 8006d10:	4942      	ldr	r1, [pc, #264]	; (8006e1c <__ieee754_logf+0x270>)
 8006d12:	4683      	mov	fp, r0
 8006d14:	4640      	mov	r0, r8
 8006d16:	f7f9 fffd 	bl	8000d14 <__aeabi_fmul>
 8006d1a:	4941      	ldr	r1, [pc, #260]	; (8006e20 <__ieee754_logf+0x274>)
 8006d1c:	f7f9 fef2 	bl	8000b04 <__addsf3>
 8006d20:	4641      	mov	r1, r8
 8006d22:	f7f9 fff7 	bl	8000d14 <__aeabi_fmul>
 8006d26:	493f      	ldr	r1, [pc, #252]	; (8006e24 <__ieee754_logf+0x278>)
 8006d28:	f7f9 feec 	bl	8000b04 <__addsf3>
 8006d2c:	4641      	mov	r1, r8
 8006d2e:	f7f9 fff1 	bl	8000d14 <__aeabi_fmul>
 8006d32:	4601      	mov	r1, r0
 8006d34:	4658      	mov	r0, fp
 8006d36:	f7f9 fee5 	bl	8000b04 <__addsf3>
 8006d3a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8006e28 <__ieee754_logf+0x27c>
 8006d3e:	4680      	mov	r8, r0
 8006d40:	f5c5 1057 	rsb	r0, r5, #3522560	; 0x35c000
 8006d44:	44aa      	add	sl, r5
 8006d46:	f500 7022 	add.w	r0, r0, #648	; 0x288
 8006d4a:	ea40 000a 	orr.w	r0, r0, sl
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	dd2c      	ble.n	8006dac <__ieee754_logf+0x200>
 8006d52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7f9 ffdc 	bl	8000d14 <__aeabi_fmul>
 8006d5c:	4621      	mov	r1, r4
 8006d5e:	f7f9 ffd9 	bl	8000d14 <__aeabi_fmul>
 8006d62:	4605      	mov	r5, r0
 8006d64:	b966      	cbnz	r6, 8006d80 <__ieee754_logf+0x1d4>
 8006d66:	4601      	mov	r1, r0
 8006d68:	4640      	mov	r0, r8
 8006d6a:	f7f9 fecb 	bl	8000b04 <__addsf3>
 8006d6e:	4639      	mov	r1, r7
 8006d70:	f7f9 ffd0 	bl	8000d14 <__aeabi_fmul>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fec2 	bl	8000b00 <__aeabi_fsub>
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	e781      	b.n	8006c84 <__ieee754_logf+0xd8>
 8006d80:	491f      	ldr	r1, [pc, #124]	; (8006e00 <__ieee754_logf+0x254>)
 8006d82:	4648      	mov	r0, r9
 8006d84:	f7f9 ffc6 	bl	8000d14 <__aeabi_fmul>
 8006d88:	4629      	mov	r1, r5
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	f7f9 feb9 	bl	8000b04 <__addsf3>
 8006d92:	4639      	mov	r1, r7
 8006d94:	f7f9 ffbe 	bl	8000d14 <__aeabi_fmul>
 8006d98:	491a      	ldr	r1, [pc, #104]	; (8006e04 <__ieee754_logf+0x258>)
 8006d9a:	4607      	mov	r7, r0
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f7f9 ffb9 	bl	8000d14 <__aeabi_fmul>
 8006da2:	4601      	mov	r1, r0
 8006da4:	4638      	mov	r0, r7
 8006da6:	f7f9 fead 	bl	8000b04 <__addsf3>
 8006daa:	e779      	b.n	8006ca0 <__ieee754_logf+0xf4>
 8006dac:	b93e      	cbnz	r6, 8006dbe <__ieee754_logf+0x212>
 8006dae:	4641      	mov	r1, r8
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7f9 fea5 	bl	8000b00 <__aeabi_fsub>
 8006db6:	4639      	mov	r1, r7
 8006db8:	f7f9 ffac 	bl	8000d14 <__aeabi_fmul>
 8006dbc:	e7de      	b.n	8006d7c <__ieee754_logf+0x1d0>
 8006dbe:	4910      	ldr	r1, [pc, #64]	; (8006e00 <__ieee754_logf+0x254>)
 8006dc0:	4648      	mov	r0, r9
 8006dc2:	f7f9 ffa7 	bl	8000d14 <__aeabi_fmul>
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4605      	mov	r5, r0
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7f9 fe98 	bl	8000b00 <__aeabi_fsub>
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 ff9f 	bl	8000d14 <__aeabi_fmul>
 8006dd6:	490b      	ldr	r1, [pc, #44]	; (8006e04 <__ieee754_logf+0x258>)
 8006dd8:	4606      	mov	r6, r0
 8006dda:	4648      	mov	r0, r9
 8006ddc:	f7f9 ff9a 	bl	8000d14 <__aeabi_fmul>
 8006de0:	4601      	mov	r1, r0
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7f9 fe8c 	bl	8000b00 <__aeabi_fsub>
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7f9 fe89 	bl	8000b00 <__aeabi_fsub>
 8006dee:	4601      	mov	r1, r0
 8006df0:	4628      	mov	r0, r5
 8006df2:	e75e      	b.n	8006cb2 <__ieee754_logf+0x106>
 8006df4:	2000      	movs	r0, #0
 8006df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfa:	bf00      	nop
 8006dfc:	004afb20 	.word	0x004afb20
 8006e00:	3f317180 	.word	0x3f317180
 8006e04:	3717f7d1 	.word	0x3717f7d1
 8006e08:	3eaaaaab 	.word	0x3eaaaaab
 8006e0c:	3e178897 	.word	0x3e178897
 8006e10:	3e3a3325 	.word	0x3e3a3325
 8006e14:	3e924925 	.word	0x3e924925
 8006e18:	3f2aaaab 	.word	0x3f2aaaab
 8006e1c:	3e1cd04f 	.word	0x3e1cd04f
 8006e20:	3e638e29 	.word	0x3e638e29
 8006e24:	3ecccccd 	.word	0x3ecccccd
 8006e28:	ffcf5c30 	.word	0xffcf5c30

08006e2c <__ieee754_powf>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	b087      	sub	sp, #28
 8006e32:	9101      	str	r1, [sp, #4]
 8006e34:	9c01      	ldr	r4, [sp, #4]
 8006e36:	4681      	mov	r9, r0
 8006e38:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8006e3c:	f000 8325 	beq.w	800748a <__ieee754_powf+0x65e>
 8006e40:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8006e44:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006e48:	4680      	mov	r8, r0
 8006e4a:	dc06      	bgt.n	8006e5a <__ieee754_powf+0x2e>
 8006e4c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006e50:	dd09      	ble.n	8006e66 <__ieee754_powf+0x3a>
 8006e52:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006e56:	f000 8318 	beq.w	800748a <__ieee754_powf+0x65e>
 8006e5a:	4885      	ldr	r0, [pc, #532]	; (8007070 <__ieee754_powf+0x244>)
 8006e5c:	b007      	add	sp, #28
 8006e5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e62:	f001 b94d 	b.w	8008100 <nanf>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	da1d      	bge.n	8006ea6 <__ieee754_powf+0x7a>
 8006e6a:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006e6e:	da2b      	bge.n	8006ec8 <__ieee754_powf+0x9c>
 8006e70:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006e74:	db30      	blt.n	8006ed8 <__ieee754_powf+0xac>
 8006e76:	15fb      	asrs	r3, r7, #23
 8006e78:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006e7c:	fa47 f503 	asr.w	r5, r7, r3
 8006e80:	fa05 f303 	lsl.w	r3, r5, r3
 8006e84:	429f      	cmp	r7, r3
 8006e86:	d127      	bne.n	8006ed8 <__ieee754_powf+0xac>
 8006e88:	f005 0501 	and.w	r5, r5, #1
 8006e8c:	f1c5 0502 	rsb	r5, r5, #2
 8006e90:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006e94:	d122      	bne.n	8006edc <__ieee754_powf+0xb0>
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	4649      	mov	r1, r9
 8006e9a:	da11      	bge.n	8006ec0 <__ieee754_powf+0x94>
 8006e9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006ea0:	f7f9 ffec 	bl	8000e7c <__aeabi_fdiv>
 8006ea4:	e021      	b.n	8006eea <__ieee754_powf+0xbe>
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006eac:	d1f0      	bne.n	8006e90 <__ieee754_powf+0x64>
 8006eae:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006eb2:	f000 82ea 	beq.w	800748a <__ieee754_powf+0x65e>
 8006eb6:	dd09      	ble.n	8006ecc <__ieee754_powf+0xa0>
 8006eb8:	2c00      	cmp	r4, #0
 8006eba:	f280 82e9 	bge.w	8007490 <__ieee754_powf+0x664>
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	b007      	add	sp, #28
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	2502      	movs	r5, #2
 8006eca:	e7ed      	b.n	8006ea8 <__ieee754_powf+0x7c>
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	daf6      	bge.n	8006ebe <__ieee754_powf+0x92>
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006ed6:	e7f3      	b.n	8006ec0 <__ieee754_powf+0x94>
 8006ed8:	2500      	movs	r5, #0
 8006eda:	e7d9      	b.n	8006e90 <__ieee754_powf+0x64>
 8006edc:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006ee0:	d105      	bne.n	8006eee <__ieee754_powf+0xc2>
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	f7f9 ff15 	bl	8000d14 <__aeabi_fmul>
 8006eea:	4601      	mov	r1, r0
 8006eec:	e7e8      	b.n	8006ec0 <__ieee754_powf+0x94>
 8006eee:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006ef2:	4648      	mov	r0, r9
 8006ef4:	d107      	bne.n	8006f06 <__ieee754_powf+0xda>
 8006ef6:	f1b8 0f00 	cmp.w	r8, #0
 8006efa:	db04      	blt.n	8006f06 <__ieee754_powf+0xda>
 8006efc:	b007      	add	sp, #28
 8006efe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f02:	f000 bc37 	b.w	8007774 <__ieee754_sqrtf>
 8006f06:	f001 f8af 	bl	8008068 <fabsf>
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	b126      	cbz	r6, 8006f18 <__ieee754_powf+0xec>
 8006f0e:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006f12:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006f16:	d118      	bne.n	8006f4a <__ieee754_powf+0x11e>
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	da04      	bge.n	8006f26 <__ieee754_powf+0xfa>
 8006f1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006f20:	f7f9 ffac 	bl	8000e7c <__aeabi_fdiv>
 8006f24:	4601      	mov	r1, r0
 8006f26:	f1b8 0f00 	cmp.w	r8, #0
 8006f2a:	dac9      	bge.n	8006ec0 <__ieee754_powf+0x94>
 8006f2c:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8006f30:	ea50 0305 	orrs.w	r3, r0, r5
 8006f34:	d104      	bne.n	8006f40 <__ieee754_powf+0x114>
 8006f36:	4608      	mov	r0, r1
 8006f38:	f7f9 fde2 	bl	8000b00 <__aeabi_fsub>
 8006f3c:	4601      	mov	r1, r0
 8006f3e:	e7af      	b.n	8006ea0 <__ieee754_powf+0x74>
 8006f40:	2d01      	cmp	r5, #1
 8006f42:	d1bd      	bne.n	8006ec0 <__ieee754_powf+0x94>
 8006f44:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8006f48:	e7ba      	b.n	8006ec0 <__ieee754_powf+0x94>
 8006f4a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8006f4e:	f108 33ff 	add.w	r3, r8, #4294967295
 8006f52:	9303      	str	r3, [sp, #12]
 8006f54:	432b      	orrs	r3, r5
 8006f56:	d101      	bne.n	8006f5c <__ieee754_powf+0x130>
 8006f58:	4649      	mov	r1, r9
 8006f5a:	e7ec      	b.n	8006f36 <__ieee754_powf+0x10a>
 8006f5c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006f60:	f340 8098 	ble.w	8007094 <__ieee754_powf+0x268>
 8006f64:	4b43      	ldr	r3, [pc, #268]	; (8007074 <__ieee754_powf+0x248>)
 8006f66:	429e      	cmp	r6, r3
 8006f68:	dc03      	bgt.n	8006f72 <__ieee754_powf+0x146>
 8006f6a:	2c00      	cmp	r4, #0
 8006f6c:	daa7      	bge.n	8006ebe <__ieee754_powf+0x92>
 8006f6e:	4942      	ldr	r1, [pc, #264]	; (8007078 <__ieee754_powf+0x24c>)
 8006f70:	e7b8      	b.n	8006ee4 <__ieee754_powf+0xb8>
 8006f72:	4b42      	ldr	r3, [pc, #264]	; (800707c <__ieee754_powf+0x250>)
 8006f74:	429e      	cmp	r6, r3
 8006f76:	dd02      	ble.n	8006f7e <__ieee754_powf+0x152>
 8006f78:	2c00      	cmp	r4, #0
 8006f7a:	dcf8      	bgt.n	8006f6e <__ieee754_powf+0x142>
 8006f7c:	e79f      	b.n	8006ebe <__ieee754_powf+0x92>
 8006f7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8006f82:	f7f9 fdbd 	bl	8000b00 <__aeabi_fsub>
 8006f86:	493e      	ldr	r1, [pc, #248]	; (8007080 <__ieee754_powf+0x254>)
 8006f88:	4606      	mov	r6, r0
 8006f8a:	f7f9 fec3 	bl	8000d14 <__aeabi_fmul>
 8006f8e:	493d      	ldr	r1, [pc, #244]	; (8007084 <__ieee754_powf+0x258>)
 8006f90:	4607      	mov	r7, r0
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 febe 	bl	8000d14 <__aeabi_fmul>
 8006f98:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7f9 feb8 	bl	8000d14 <__aeabi_fmul>
 8006fa4:	4601      	mov	r1, r0
 8006fa6:	4838      	ldr	r0, [pc, #224]	; (8007088 <__ieee754_powf+0x25c>)
 8006fa8:	f7f9 fdaa 	bl	8000b00 <__aeabi_fsub>
 8006fac:	4631      	mov	r1, r6
 8006fae:	f7f9 feb1 	bl	8000d14 <__aeabi_fmul>
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8006fb8:	f7f9 fda2 	bl	8000b00 <__aeabi_fsub>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4681      	mov	r9, r0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	f7f9 fea7 	bl	8000d14 <__aeabi_fmul>
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	4648      	mov	r0, r9
 8006fca:	f7f9 fea3 	bl	8000d14 <__aeabi_fmul>
 8006fce:	492f      	ldr	r1, [pc, #188]	; (800708c <__ieee754_powf+0x260>)
 8006fd0:	f7f9 fea0 	bl	8000d14 <__aeabi_fmul>
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7f9 fd92 	bl	8000b00 <__aeabi_fsub>
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4606      	mov	r6, r0
 8006fe0:	4638      	mov	r0, r7
 8006fe2:	f7f9 fd8f 	bl	8000b04 <__addsf3>
 8006fe6:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8006fea:	f02a 0a0f 	bic.w	sl, sl, #15
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4650      	mov	r0, sl
 8006ff2:	f7f9 fd85 	bl	8000b00 <__aeabi_fsub>
 8006ff6:	4601      	mov	r1, r0
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7f9 fd81 	bl	8000b00 <__aeabi_fsub>
 8006ffe:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007002:	9b03      	ldr	r3, [sp, #12]
 8007004:	3d01      	subs	r5, #1
 8007006:	f024 040f 	bic.w	r4, r4, #15
 800700a:	432b      	orrs	r3, r5
 800700c:	4606      	mov	r6, r0
 800700e:	4621      	mov	r1, r4
 8007010:	9801      	ldr	r0, [sp, #4]
 8007012:	bf0c      	ite	eq
 8007014:	4d1e      	ldreq	r5, [pc, #120]	; (8007090 <__ieee754_powf+0x264>)
 8007016:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800701a:	f7f9 fd71 	bl	8000b00 <__aeabi_fsub>
 800701e:	4651      	mov	r1, sl
 8007020:	f7f9 fe78 	bl	8000d14 <__aeabi_fmul>
 8007024:	9901      	ldr	r1, [sp, #4]
 8007026:	4607      	mov	r7, r0
 8007028:	4630      	mov	r0, r6
 800702a:	f7f9 fe73 	bl	8000d14 <__aeabi_fmul>
 800702e:	4601      	mov	r1, r0
 8007030:	4638      	mov	r0, r7
 8007032:	f7f9 fd67 	bl	8000b04 <__addsf3>
 8007036:	4621      	mov	r1, r4
 8007038:	4606      	mov	r6, r0
 800703a:	4650      	mov	r0, sl
 800703c:	f7f9 fe6a 	bl	8000d14 <__aeabi_fmul>
 8007040:	4601      	mov	r1, r0
 8007042:	4607      	mov	r7, r0
 8007044:	4681      	mov	r9, r0
 8007046:	4630      	mov	r0, r6
 8007048:	f7f9 fd5c 	bl	8000b04 <__addsf3>
 800704c:	2800      	cmp	r0, #0
 800704e:	4682      	mov	sl, r0
 8007050:	4680      	mov	r8, r0
 8007052:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007056:	f340 81fb 	ble.w	8007450 <__ieee754_powf+0x624>
 800705a:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800705e:	f340 8149 	ble.w	80072f4 <__ieee754_powf+0x4c8>
 8007062:	4905      	ldr	r1, [pc, #20]	; (8007078 <__ieee754_powf+0x24c>)
 8007064:	4628      	mov	r0, r5
 8007066:	f7f9 fe55 	bl	8000d14 <__aeabi_fmul>
 800706a:	4903      	ldr	r1, [pc, #12]	; (8007078 <__ieee754_powf+0x24c>)
 800706c:	e73b      	b.n	8006ee6 <__ieee754_powf+0xba>
 800706e:	bf00      	nop
 8007070:	080087a4 	.word	0x080087a4
 8007074:	3f7ffff7 	.word	0x3f7ffff7
 8007078:	7149f2ca 	.word	0x7149f2ca
 800707c:	3f800007 	.word	0x3f800007
 8007080:	3fb8aa00 	.word	0x3fb8aa00
 8007084:	36eca570 	.word	0x36eca570
 8007088:	3eaaaaab 	.word	0x3eaaaaab
 800708c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007090:	bf800000 	.word	0xbf800000
 8007094:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 8007098:	f280 810a 	bge.w	80072b0 <__ieee754_powf+0x484>
 800709c:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80070a0:	f7f9 fe38 	bl	8000d14 <__aeabi_fmul>
 80070a4:	f06f 0217 	mvn.w	r2, #23
 80070a8:	4606      	mov	r6, r0
 80070aa:	15f3      	asrs	r3, r6, #23
 80070ac:	3b7f      	subs	r3, #127	; 0x7f
 80070ae:	441a      	add	r2, r3
 80070b0:	4b81      	ldr	r3, [pc, #516]	; (80072b8 <__ieee754_powf+0x48c>)
 80070b2:	f3c6 0016 	ubfx	r0, r6, #0, #23
 80070b6:	4298      	cmp	r0, r3
 80070b8:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 80070bc:	dd06      	ble.n	80070cc <__ieee754_powf+0x2a0>
 80070be:	4b7f      	ldr	r3, [pc, #508]	; (80072bc <__ieee754_powf+0x490>)
 80070c0:	4298      	cmp	r0, r3
 80070c2:	f340 80f7 	ble.w	80072b4 <__ieee754_powf+0x488>
 80070c6:	3201      	adds	r2, #1
 80070c8:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80070cc:	2700      	movs	r7, #0
 80070ce:	4b7c      	ldr	r3, [pc, #496]	; (80072c0 <__ieee754_powf+0x494>)
 80070d0:	4630      	mov	r0, r6
 80070d2:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80070d6:	9205      	str	r2, [sp, #20]
 80070d8:	4619      	mov	r1, r3
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	f7f9 fd10 	bl	8000b00 <__aeabi_fsub>
 80070e0:	9902      	ldr	r1, [sp, #8]
 80070e2:	4683      	mov	fp, r0
 80070e4:	4630      	mov	r0, r6
 80070e6:	f7f9 fd0d 	bl	8000b04 <__addsf3>
 80070ea:	4601      	mov	r1, r0
 80070ec:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80070f0:	f7f9 fec4 	bl	8000e7c <__aeabi_fdiv>
 80070f4:	4601      	mov	r1, r0
 80070f6:	9004      	str	r0, [sp, #16]
 80070f8:	4658      	mov	r0, fp
 80070fa:	f7f9 fe0b 	bl	8000d14 <__aeabi_fmul>
 80070fe:	46b2      	mov	sl, r6
 8007100:	1076      	asrs	r6, r6, #1
 8007102:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8007106:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800710a:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800710e:	f028 080f 	bic.w	r8, r8, #15
 8007112:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 8007116:	4681      	mov	r9, r0
 8007118:	4631      	mov	r1, r6
 800711a:	4640      	mov	r0, r8
 800711c:	f7f9 fdfa 	bl	8000d14 <__aeabi_fmul>
 8007120:	4601      	mov	r1, r0
 8007122:	4658      	mov	r0, fp
 8007124:	f7f9 fcec 	bl	8000b00 <__aeabi_fsub>
 8007128:	9902      	ldr	r1, [sp, #8]
 800712a:	4683      	mov	fp, r0
 800712c:	4630      	mov	r0, r6
 800712e:	f7f9 fce7 	bl	8000b00 <__aeabi_fsub>
 8007132:	4601      	mov	r1, r0
 8007134:	4650      	mov	r0, sl
 8007136:	f7f9 fce3 	bl	8000b00 <__aeabi_fsub>
 800713a:	4641      	mov	r1, r8
 800713c:	f7f9 fdea 	bl	8000d14 <__aeabi_fmul>
 8007140:	4601      	mov	r1, r0
 8007142:	4658      	mov	r0, fp
 8007144:	f7f9 fcdc 	bl	8000b00 <__aeabi_fsub>
 8007148:	9b04      	ldr	r3, [sp, #16]
 800714a:	4619      	mov	r1, r3
 800714c:	f7f9 fde2 	bl	8000d14 <__aeabi_fmul>
 8007150:	4649      	mov	r1, r9
 8007152:	4683      	mov	fp, r0
 8007154:	4648      	mov	r0, r9
 8007156:	f7f9 fddd 	bl	8000d14 <__aeabi_fmul>
 800715a:	4606      	mov	r6, r0
 800715c:	4959      	ldr	r1, [pc, #356]	; (80072c4 <__ieee754_powf+0x498>)
 800715e:	f7f9 fdd9 	bl	8000d14 <__aeabi_fmul>
 8007162:	4959      	ldr	r1, [pc, #356]	; (80072c8 <__ieee754_powf+0x49c>)
 8007164:	f7f9 fcce 	bl	8000b04 <__addsf3>
 8007168:	4631      	mov	r1, r6
 800716a:	f7f9 fdd3 	bl	8000d14 <__aeabi_fmul>
 800716e:	4957      	ldr	r1, [pc, #348]	; (80072cc <__ieee754_powf+0x4a0>)
 8007170:	f7f9 fcc8 	bl	8000b04 <__addsf3>
 8007174:	4631      	mov	r1, r6
 8007176:	f7f9 fdcd 	bl	8000d14 <__aeabi_fmul>
 800717a:	4955      	ldr	r1, [pc, #340]	; (80072d0 <__ieee754_powf+0x4a4>)
 800717c:	f7f9 fcc2 	bl	8000b04 <__addsf3>
 8007180:	4631      	mov	r1, r6
 8007182:	f7f9 fdc7 	bl	8000d14 <__aeabi_fmul>
 8007186:	4953      	ldr	r1, [pc, #332]	; (80072d4 <__ieee754_powf+0x4a8>)
 8007188:	f7f9 fcbc 	bl	8000b04 <__addsf3>
 800718c:	4631      	mov	r1, r6
 800718e:	f7f9 fdc1 	bl	8000d14 <__aeabi_fmul>
 8007192:	4951      	ldr	r1, [pc, #324]	; (80072d8 <__ieee754_powf+0x4ac>)
 8007194:	f7f9 fcb6 	bl	8000b04 <__addsf3>
 8007198:	4631      	mov	r1, r6
 800719a:	4682      	mov	sl, r0
 800719c:	4630      	mov	r0, r6
 800719e:	f7f9 fdb9 	bl	8000d14 <__aeabi_fmul>
 80071a2:	4601      	mov	r1, r0
 80071a4:	4650      	mov	r0, sl
 80071a6:	f7f9 fdb5 	bl	8000d14 <__aeabi_fmul>
 80071aa:	4606      	mov	r6, r0
 80071ac:	4649      	mov	r1, r9
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7f9 fca8 	bl	8000b04 <__addsf3>
 80071b4:	4659      	mov	r1, fp
 80071b6:	f7f9 fdad 	bl	8000d14 <__aeabi_fmul>
 80071ba:	4631      	mov	r1, r6
 80071bc:	f7f9 fca2 	bl	8000b04 <__addsf3>
 80071c0:	4641      	mov	r1, r8
 80071c2:	4682      	mov	sl, r0
 80071c4:	4640      	mov	r0, r8
 80071c6:	f7f9 fda5 	bl	8000d14 <__aeabi_fmul>
 80071ca:	4944      	ldr	r1, [pc, #272]	; (80072dc <__ieee754_powf+0x4b0>)
 80071cc:	9002      	str	r0, [sp, #8]
 80071ce:	f7f9 fc99 	bl	8000b04 <__addsf3>
 80071d2:	4651      	mov	r1, sl
 80071d4:	f7f9 fc96 	bl	8000b04 <__addsf3>
 80071d8:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80071dc:	f026 060f 	bic.w	r6, r6, #15
 80071e0:	4631      	mov	r1, r6
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7f9 fd96 	bl	8000d14 <__aeabi_fmul>
 80071e8:	493c      	ldr	r1, [pc, #240]	; (80072dc <__ieee754_powf+0x4b0>)
 80071ea:	4680      	mov	r8, r0
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7f9 fc87 	bl	8000b00 <__aeabi_fsub>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	4619      	mov	r1, r3
 80071f6:	f7f9 fc83 	bl	8000b00 <__aeabi_fsub>
 80071fa:	4601      	mov	r1, r0
 80071fc:	4650      	mov	r0, sl
 80071fe:	f7f9 fc7f 	bl	8000b00 <__aeabi_fsub>
 8007202:	4649      	mov	r1, r9
 8007204:	f7f9 fd86 	bl	8000d14 <__aeabi_fmul>
 8007208:	4659      	mov	r1, fp
 800720a:	4681      	mov	r9, r0
 800720c:	4630      	mov	r0, r6
 800720e:	f7f9 fd81 	bl	8000d14 <__aeabi_fmul>
 8007212:	4601      	mov	r1, r0
 8007214:	4648      	mov	r0, r9
 8007216:	f7f9 fc75 	bl	8000b04 <__addsf3>
 800721a:	4682      	mov	sl, r0
 800721c:	4601      	mov	r1, r0
 800721e:	4640      	mov	r0, r8
 8007220:	f7f9 fc70 	bl	8000b04 <__addsf3>
 8007224:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8007228:	f029 090f 	bic.w	r9, r9, #15
 800722c:	492c      	ldr	r1, [pc, #176]	; (80072e0 <__ieee754_powf+0x4b4>)
 800722e:	4648      	mov	r0, r9
 8007230:	f7f9 fd70 	bl	8000d14 <__aeabi_fmul>
 8007234:	4641      	mov	r1, r8
 8007236:	4606      	mov	r6, r0
 8007238:	4648      	mov	r0, r9
 800723a:	f7f9 fc61 	bl	8000b00 <__aeabi_fsub>
 800723e:	4601      	mov	r1, r0
 8007240:	4650      	mov	r0, sl
 8007242:	f7f9 fc5d 	bl	8000b00 <__aeabi_fsub>
 8007246:	4927      	ldr	r1, [pc, #156]	; (80072e4 <__ieee754_powf+0x4b8>)
 8007248:	f7f9 fd64 	bl	8000d14 <__aeabi_fmul>
 800724c:	4926      	ldr	r1, [pc, #152]	; (80072e8 <__ieee754_powf+0x4bc>)
 800724e:	4680      	mov	r8, r0
 8007250:	4648      	mov	r0, r9
 8007252:	f7f9 fd5f 	bl	8000d14 <__aeabi_fmul>
 8007256:	4601      	mov	r1, r0
 8007258:	4640      	mov	r0, r8
 800725a:	f7f9 fc53 	bl	8000b04 <__addsf3>
 800725e:	4b23      	ldr	r3, [pc, #140]	; (80072ec <__ieee754_powf+0x4c0>)
 8007260:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8007264:	f7f9 fc4e 	bl	8000b04 <__addsf3>
 8007268:	9a05      	ldr	r2, [sp, #20]
 800726a:	4680      	mov	r8, r0
 800726c:	4610      	mov	r0, r2
 800726e:	f7f9 fcfd 	bl	8000c6c <__aeabi_i2f>
 8007272:	4681      	mov	r9, r0
 8007274:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <__ieee754_powf+0x4c4>)
 8007276:	4641      	mov	r1, r8
 8007278:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800727c:	4630      	mov	r0, r6
 800727e:	f7f9 fc41 	bl	8000b04 <__addsf3>
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fc3e 	bl	8000b04 <__addsf3>
 8007288:	4649      	mov	r1, r9
 800728a:	f7f9 fc3b 	bl	8000b04 <__addsf3>
 800728e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 8007292:	f02a 0a0f 	bic.w	sl, sl, #15
 8007296:	4649      	mov	r1, r9
 8007298:	4650      	mov	r0, sl
 800729a:	f7f9 fc31 	bl	8000b00 <__aeabi_fsub>
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 fc2e 	bl	8000b00 <__aeabi_fsub>
 80072a4:	4631      	mov	r1, r6
 80072a6:	f7f9 fc2b 	bl	8000b00 <__aeabi_fsub>
 80072aa:	4601      	mov	r1, r0
 80072ac:	4640      	mov	r0, r8
 80072ae:	e6a4      	b.n	8006ffa <__ieee754_powf+0x1ce>
 80072b0:	2200      	movs	r2, #0
 80072b2:	e6fa      	b.n	80070aa <__ieee754_powf+0x27e>
 80072b4:	2701      	movs	r7, #1
 80072b6:	e70a      	b.n	80070ce <__ieee754_powf+0x2a2>
 80072b8:	001cc471 	.word	0x001cc471
 80072bc:	005db3d6 	.word	0x005db3d6
 80072c0:	080087b0 	.word	0x080087b0
 80072c4:	3e53f142 	.word	0x3e53f142
 80072c8:	3e6c3255 	.word	0x3e6c3255
 80072cc:	3e8ba305 	.word	0x3e8ba305
 80072d0:	3eaaaaab 	.word	0x3eaaaaab
 80072d4:	3edb6db7 	.word	0x3edb6db7
 80072d8:	3f19999a 	.word	0x3f19999a
 80072dc:	40400000 	.word	0x40400000
 80072e0:	3f763800 	.word	0x3f763800
 80072e4:	3f76384f 	.word	0x3f76384f
 80072e8:	369dc3a0 	.word	0x369dc3a0
 80072ec:	080087c0 	.word	0x080087c0
 80072f0:	080087b8 	.word	0x080087b8
 80072f4:	f040 80c1 	bne.w	800747a <__ieee754_powf+0x64e>
 80072f8:	4966      	ldr	r1, [pc, #408]	; (8007494 <__ieee754_powf+0x668>)
 80072fa:	4630      	mov	r0, r6
 80072fc:	f7f9 fc02 	bl	8000b04 <__addsf3>
 8007300:	4639      	mov	r1, r7
 8007302:	4681      	mov	r9, r0
 8007304:	4650      	mov	r0, sl
 8007306:	f7f9 fbfb 	bl	8000b00 <__aeabi_fsub>
 800730a:	4601      	mov	r1, r0
 800730c:	4648      	mov	r0, r9
 800730e:	f7f9 febd 	bl	800108c <__aeabi_fcmpgt>
 8007312:	2800      	cmp	r0, #0
 8007314:	f47f aea5 	bne.w	8007062 <__ieee754_powf+0x236>
 8007318:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800731c:	15e4      	asrs	r4, r4, #23
 800731e:	3c7e      	subs	r4, #126	; 0x7e
 8007320:	4123      	asrs	r3, r4
 8007322:	4443      	add	r3, r8
 8007324:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007328:	495b      	ldr	r1, [pc, #364]	; (8007498 <__ieee754_powf+0x66c>)
 800732a:	3a7f      	subs	r2, #127	; 0x7f
 800732c:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8007330:	4111      	asrs	r1, r2
 8007332:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 8007336:	f1c2 0217 	rsb	r2, r2, #23
 800733a:	4114      	asrs	r4, r2
 800733c:	f1b8 0f00 	cmp.w	r8, #0
 8007340:	ea23 0101 	bic.w	r1, r3, r1
 8007344:	4638      	mov	r0, r7
 8007346:	bfb8      	it	lt
 8007348:	4264      	neglt	r4, r4
 800734a:	f7f9 fbd9 	bl	8000b00 <__aeabi_fsub>
 800734e:	4681      	mov	r9, r0
 8007350:	4631      	mov	r1, r6
 8007352:	4648      	mov	r0, r9
 8007354:	f7f9 fbd6 	bl	8000b04 <__addsf3>
 8007358:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800735c:	f027 070f 	bic.w	r7, r7, #15
 8007360:	494e      	ldr	r1, [pc, #312]	; (800749c <__ieee754_powf+0x670>)
 8007362:	4638      	mov	r0, r7
 8007364:	f7f9 fcd6 	bl	8000d14 <__aeabi_fmul>
 8007368:	4649      	mov	r1, r9
 800736a:	4680      	mov	r8, r0
 800736c:	4638      	mov	r0, r7
 800736e:	f7f9 fbc7 	bl	8000b00 <__aeabi_fsub>
 8007372:	4601      	mov	r1, r0
 8007374:	4630      	mov	r0, r6
 8007376:	f7f9 fbc3 	bl	8000b00 <__aeabi_fsub>
 800737a:	4949      	ldr	r1, [pc, #292]	; (80074a0 <__ieee754_powf+0x674>)
 800737c:	f7f9 fcca 	bl	8000d14 <__aeabi_fmul>
 8007380:	4948      	ldr	r1, [pc, #288]	; (80074a4 <__ieee754_powf+0x678>)
 8007382:	4606      	mov	r6, r0
 8007384:	4638      	mov	r0, r7
 8007386:	f7f9 fcc5 	bl	8000d14 <__aeabi_fmul>
 800738a:	4601      	mov	r1, r0
 800738c:	4630      	mov	r0, r6
 800738e:	f7f9 fbb9 	bl	8000b04 <__addsf3>
 8007392:	4607      	mov	r7, r0
 8007394:	4601      	mov	r1, r0
 8007396:	4640      	mov	r0, r8
 8007398:	f7f9 fbb4 	bl	8000b04 <__addsf3>
 800739c:	4641      	mov	r1, r8
 800739e:	4606      	mov	r6, r0
 80073a0:	f7f9 fbae 	bl	8000b00 <__aeabi_fsub>
 80073a4:	4601      	mov	r1, r0
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7f9 fbaa 	bl	8000b00 <__aeabi_fsub>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4680      	mov	r8, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7f9 fcaf 	bl	8000d14 <__aeabi_fmul>
 80073b6:	4607      	mov	r7, r0
 80073b8:	493b      	ldr	r1, [pc, #236]	; (80074a8 <__ieee754_powf+0x67c>)
 80073ba:	f7f9 fcab 	bl	8000d14 <__aeabi_fmul>
 80073be:	493b      	ldr	r1, [pc, #236]	; (80074ac <__ieee754_powf+0x680>)
 80073c0:	f7f9 fb9e 	bl	8000b00 <__aeabi_fsub>
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f9 fca5 	bl	8000d14 <__aeabi_fmul>
 80073ca:	4939      	ldr	r1, [pc, #228]	; (80074b0 <__ieee754_powf+0x684>)
 80073cc:	f7f9 fb9a 	bl	8000b04 <__addsf3>
 80073d0:	4639      	mov	r1, r7
 80073d2:	f7f9 fc9f 	bl	8000d14 <__aeabi_fmul>
 80073d6:	4937      	ldr	r1, [pc, #220]	; (80074b4 <__ieee754_powf+0x688>)
 80073d8:	f7f9 fb92 	bl	8000b00 <__aeabi_fsub>
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fc99 	bl	8000d14 <__aeabi_fmul>
 80073e2:	4935      	ldr	r1, [pc, #212]	; (80074b8 <__ieee754_powf+0x68c>)
 80073e4:	f7f9 fb8e 	bl	8000b04 <__addsf3>
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fc93 	bl	8000d14 <__aeabi_fmul>
 80073ee:	4601      	mov	r1, r0
 80073f0:	4630      	mov	r0, r6
 80073f2:	f7f9 fb85 	bl	8000b00 <__aeabi_fsub>
 80073f6:	4607      	mov	r7, r0
 80073f8:	4601      	mov	r1, r0
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7f9 fc8a 	bl	8000d14 <__aeabi_fmul>
 8007400:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007404:	4681      	mov	r9, r0
 8007406:	4638      	mov	r0, r7
 8007408:	f7f9 fb7a 	bl	8000b00 <__aeabi_fsub>
 800740c:	4601      	mov	r1, r0
 800740e:	4648      	mov	r0, r9
 8007410:	f7f9 fd34 	bl	8000e7c <__aeabi_fdiv>
 8007414:	4641      	mov	r1, r8
 8007416:	4607      	mov	r7, r0
 8007418:	4630      	mov	r0, r6
 800741a:	f7f9 fc7b 	bl	8000d14 <__aeabi_fmul>
 800741e:	4641      	mov	r1, r8
 8007420:	f7f9 fb70 	bl	8000b04 <__addsf3>
 8007424:	4601      	mov	r1, r0
 8007426:	4638      	mov	r0, r7
 8007428:	f7f9 fb6a 	bl	8000b00 <__aeabi_fsub>
 800742c:	4631      	mov	r1, r6
 800742e:	f7f9 fb67 	bl	8000b00 <__aeabi_fsub>
 8007432:	4601      	mov	r1, r0
 8007434:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007438:	f7f9 fb62 	bl	8000b00 <__aeabi_fsub>
 800743c:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8007440:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007444:	da1f      	bge.n	8007486 <__ieee754_powf+0x65a>
 8007446:	4621      	mov	r1, r4
 8007448:	f000 fe5e 	bl	8008108 <scalbnf>
 800744c:	4629      	mov	r1, r5
 800744e:	e54a      	b.n	8006ee6 <__ieee754_powf+0xba>
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <__ieee754_powf+0x690>)
 8007452:	429c      	cmp	r4, r3
 8007454:	dd05      	ble.n	8007462 <__ieee754_powf+0x636>
 8007456:	491a      	ldr	r1, [pc, #104]	; (80074c0 <__ieee754_powf+0x694>)
 8007458:	4628      	mov	r0, r5
 800745a:	f7f9 fc5b 	bl	8000d14 <__aeabi_fmul>
 800745e:	4918      	ldr	r1, [pc, #96]	; (80074c0 <__ieee754_powf+0x694>)
 8007460:	e541      	b.n	8006ee6 <__ieee754_powf+0xba>
 8007462:	d10a      	bne.n	800747a <__ieee754_powf+0x64e>
 8007464:	4639      	mov	r1, r7
 8007466:	f7f9 fb4b 	bl	8000b00 <__aeabi_fsub>
 800746a:	4601      	mov	r1, r0
 800746c:	4630      	mov	r0, r6
 800746e:	f7f9 fdf9 	bl	8001064 <__aeabi_fcmple>
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f af50 	beq.w	8007318 <__ieee754_powf+0x4ec>
 8007478:	e7ed      	b.n	8007456 <__ieee754_powf+0x62a>
 800747a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800747e:	f73f af4b 	bgt.w	8007318 <__ieee754_powf+0x4ec>
 8007482:	2400      	movs	r4, #0
 8007484:	e764      	b.n	8007350 <__ieee754_powf+0x524>
 8007486:	4618      	mov	r0, r3
 8007488:	e7e0      	b.n	800744c <__ieee754_powf+0x620>
 800748a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800748e:	e517      	b.n	8006ec0 <__ieee754_powf+0x94>
 8007490:	9901      	ldr	r1, [sp, #4]
 8007492:	e515      	b.n	8006ec0 <__ieee754_powf+0x94>
 8007494:	3338aa3c 	.word	0x3338aa3c
 8007498:	007fffff 	.word	0x007fffff
 800749c:	3f317200 	.word	0x3f317200
 80074a0:	3f317218 	.word	0x3f317218
 80074a4:	35bfbe8c 	.word	0x35bfbe8c
 80074a8:	3331bb4c 	.word	0x3331bb4c
 80074ac:	35ddea0e 	.word	0x35ddea0e
 80074b0:	388ab355 	.word	0x388ab355
 80074b4:	3b360b61 	.word	0x3b360b61
 80074b8:	3e2aaaab 	.word	0x3e2aaaab
 80074bc:	43160000 	.word	0x43160000
 80074c0:	0da24260 	.word	0x0da24260

080074c4 <__ieee754_rem_pio2f>:
 80074c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c8:	4a9d      	ldr	r2, [pc, #628]	; (8007740 <__ieee754_rem_pio2f+0x27c>)
 80074ca:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80074ce:	4295      	cmp	r5, r2
 80074d0:	b087      	sub	sp, #28
 80074d2:	460c      	mov	r4, r1
 80074d4:	4607      	mov	r7, r0
 80074d6:	dc04      	bgt.n	80074e2 <__ieee754_rem_pio2f+0x1e>
 80074d8:	2300      	movs	r3, #0
 80074da:	6020      	str	r0, [r4, #0]
 80074dc:	604b      	str	r3, [r1, #4]
 80074de:	2600      	movs	r6, #0
 80074e0:	e01a      	b.n	8007518 <__ieee754_rem_pio2f+0x54>
 80074e2:	4a98      	ldr	r2, [pc, #608]	; (8007744 <__ieee754_rem_pio2f+0x280>)
 80074e4:	4295      	cmp	r5, r2
 80074e6:	dc4b      	bgt.n	8007580 <__ieee754_rem_pio2f+0xbc>
 80074e8:	2800      	cmp	r0, #0
 80074ea:	4997      	ldr	r1, [pc, #604]	; (8007748 <__ieee754_rem_pio2f+0x284>)
 80074ec:	f025 050f 	bic.w	r5, r5, #15
 80074f0:	4e96      	ldr	r6, [pc, #600]	; (800774c <__ieee754_rem_pio2f+0x288>)
 80074f2:	dd23      	ble.n	800753c <__ieee754_rem_pio2f+0x78>
 80074f4:	f7f9 fb04 	bl	8000b00 <__aeabi_fsub>
 80074f8:	42b5      	cmp	r5, r6
 80074fa:	4607      	mov	r7, r0
 80074fc:	d010      	beq.n	8007520 <__ieee754_rem_pio2f+0x5c>
 80074fe:	4994      	ldr	r1, [pc, #592]	; (8007750 <__ieee754_rem_pio2f+0x28c>)
 8007500:	f7f9 fafe 	bl	8000b00 <__aeabi_fsub>
 8007504:	4601      	mov	r1, r0
 8007506:	6020      	str	r0, [r4, #0]
 8007508:	4638      	mov	r0, r7
 800750a:	f7f9 faf9 	bl	8000b00 <__aeabi_fsub>
 800750e:	4990      	ldr	r1, [pc, #576]	; (8007750 <__ieee754_rem_pio2f+0x28c>)
 8007510:	f7f9 faf6 	bl	8000b00 <__aeabi_fsub>
 8007514:	2601      	movs	r6, #1
 8007516:	6060      	str	r0, [r4, #4]
 8007518:	4630      	mov	r0, r6
 800751a:	b007      	add	sp, #28
 800751c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007520:	498c      	ldr	r1, [pc, #560]	; (8007754 <__ieee754_rem_pio2f+0x290>)
 8007522:	f7f9 faed 	bl	8000b00 <__aeabi_fsub>
 8007526:	498c      	ldr	r1, [pc, #560]	; (8007758 <__ieee754_rem_pio2f+0x294>)
 8007528:	4605      	mov	r5, r0
 800752a:	f7f9 fae9 	bl	8000b00 <__aeabi_fsub>
 800752e:	4601      	mov	r1, r0
 8007530:	6020      	str	r0, [r4, #0]
 8007532:	4628      	mov	r0, r5
 8007534:	f7f9 fae4 	bl	8000b00 <__aeabi_fsub>
 8007538:	4987      	ldr	r1, [pc, #540]	; (8007758 <__ieee754_rem_pio2f+0x294>)
 800753a:	e7e9      	b.n	8007510 <__ieee754_rem_pio2f+0x4c>
 800753c:	f7f9 fae2 	bl	8000b04 <__addsf3>
 8007540:	42b5      	cmp	r5, r6
 8007542:	4607      	mov	r7, r0
 8007544:	d00e      	beq.n	8007564 <__ieee754_rem_pio2f+0xa0>
 8007546:	4982      	ldr	r1, [pc, #520]	; (8007750 <__ieee754_rem_pio2f+0x28c>)
 8007548:	f7f9 fadc 	bl	8000b04 <__addsf3>
 800754c:	4601      	mov	r1, r0
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	4638      	mov	r0, r7
 8007552:	f7f9 fad5 	bl	8000b00 <__aeabi_fsub>
 8007556:	497e      	ldr	r1, [pc, #504]	; (8007750 <__ieee754_rem_pio2f+0x28c>)
 8007558:	f7f9 fad4 	bl	8000b04 <__addsf3>
 800755c:	f04f 36ff 	mov.w	r6, #4294967295
 8007560:	6060      	str	r0, [r4, #4]
 8007562:	e7d9      	b.n	8007518 <__ieee754_rem_pio2f+0x54>
 8007564:	497b      	ldr	r1, [pc, #492]	; (8007754 <__ieee754_rem_pio2f+0x290>)
 8007566:	f7f9 facd 	bl	8000b04 <__addsf3>
 800756a:	497b      	ldr	r1, [pc, #492]	; (8007758 <__ieee754_rem_pio2f+0x294>)
 800756c:	4605      	mov	r5, r0
 800756e:	f7f9 fac9 	bl	8000b04 <__addsf3>
 8007572:	4601      	mov	r1, r0
 8007574:	6020      	str	r0, [r4, #0]
 8007576:	4628      	mov	r0, r5
 8007578:	f7f9 fac2 	bl	8000b00 <__aeabi_fsub>
 800757c:	4976      	ldr	r1, [pc, #472]	; (8007758 <__ieee754_rem_pio2f+0x294>)
 800757e:	e7eb      	b.n	8007558 <__ieee754_rem_pio2f+0x94>
 8007580:	4a76      	ldr	r2, [pc, #472]	; (800775c <__ieee754_rem_pio2f+0x298>)
 8007582:	4295      	cmp	r5, r2
 8007584:	f300 808c 	bgt.w	80076a0 <__ieee754_rem_pio2f+0x1dc>
 8007588:	f000 fd6e 	bl	8008068 <fabsf>
 800758c:	4974      	ldr	r1, [pc, #464]	; (8007760 <__ieee754_rem_pio2f+0x29c>)
 800758e:	4680      	mov	r8, r0
 8007590:	f7f9 fbc0 	bl	8000d14 <__aeabi_fmul>
 8007594:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007598:	f7f9 fab4 	bl	8000b04 <__addsf3>
 800759c:	f7f9 fd96 	bl	80010cc <__aeabi_f2iz>
 80075a0:	4606      	mov	r6, r0
 80075a2:	f7f9 fb63 	bl	8000c6c <__aeabi_i2f>
 80075a6:	4968      	ldr	r1, [pc, #416]	; (8007748 <__ieee754_rem_pio2f+0x284>)
 80075a8:	4682      	mov	sl, r0
 80075aa:	f7f9 fbb3 	bl	8000d14 <__aeabi_fmul>
 80075ae:	4601      	mov	r1, r0
 80075b0:	4640      	mov	r0, r8
 80075b2:	f7f9 faa5 	bl	8000b00 <__aeabi_fsub>
 80075b6:	4966      	ldr	r1, [pc, #408]	; (8007750 <__ieee754_rem_pio2f+0x28c>)
 80075b8:	4680      	mov	r8, r0
 80075ba:	4650      	mov	r0, sl
 80075bc:	f7f9 fbaa 	bl	8000d14 <__aeabi_fmul>
 80075c0:	2e1f      	cmp	r6, #31
 80075c2:	4681      	mov	r9, r0
 80075c4:	dc0c      	bgt.n	80075e0 <__ieee754_rem_pio2f+0x11c>
 80075c6:	4a67      	ldr	r2, [pc, #412]	; (8007764 <__ieee754_rem_pio2f+0x2a0>)
 80075c8:	1e71      	subs	r1, r6, #1
 80075ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80075ce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <__ieee754_rem_pio2f+0x11c>
 80075d6:	4649      	mov	r1, r9
 80075d8:	4640      	mov	r0, r8
 80075da:	f7f9 fa91 	bl	8000b00 <__aeabi_fsub>
 80075de:	e009      	b.n	80075f4 <__ieee754_rem_pio2f+0x130>
 80075e0:	4649      	mov	r1, r9
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7f9 fa8c 	bl	8000b00 <__aeabi_fsub>
 80075e8:	15ed      	asrs	r5, r5, #23
 80075ea:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80075ee:	1aeb      	subs	r3, r5, r3
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	dc01      	bgt.n	80075f8 <__ieee754_rem_pio2f+0x134>
 80075f4:	6020      	str	r0, [r4, #0]
 80075f6:	e024      	b.n	8007642 <__ieee754_rem_pio2f+0x17e>
 80075f8:	4956      	ldr	r1, [pc, #344]	; (8007754 <__ieee754_rem_pio2f+0x290>)
 80075fa:	4650      	mov	r0, sl
 80075fc:	f7f9 fb8a 	bl	8000d14 <__aeabi_fmul>
 8007600:	4681      	mov	r9, r0
 8007602:	4601      	mov	r1, r0
 8007604:	4640      	mov	r0, r8
 8007606:	f7f9 fa7b 	bl	8000b00 <__aeabi_fsub>
 800760a:	4601      	mov	r1, r0
 800760c:	4683      	mov	fp, r0
 800760e:	4640      	mov	r0, r8
 8007610:	f7f9 fa76 	bl	8000b00 <__aeabi_fsub>
 8007614:	4649      	mov	r1, r9
 8007616:	f7f9 fa73 	bl	8000b00 <__aeabi_fsub>
 800761a:	4680      	mov	r8, r0
 800761c:	494e      	ldr	r1, [pc, #312]	; (8007758 <__ieee754_rem_pio2f+0x294>)
 800761e:	4650      	mov	r0, sl
 8007620:	f7f9 fb78 	bl	8000d14 <__aeabi_fmul>
 8007624:	4641      	mov	r1, r8
 8007626:	f7f9 fa6b 	bl	8000b00 <__aeabi_fsub>
 800762a:	4601      	mov	r1, r0
 800762c:	4681      	mov	r9, r0
 800762e:	4658      	mov	r0, fp
 8007630:	f7f9 fa66 	bl	8000b00 <__aeabi_fsub>
 8007634:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007638:	1aed      	subs	r5, r5, r3
 800763a:	2d19      	cmp	r5, #25
 800763c:	dc15      	bgt.n	800766a <__ieee754_rem_pio2f+0x1a6>
 800763e:	46d8      	mov	r8, fp
 8007640:	6020      	str	r0, [r4, #0]
 8007642:	6825      	ldr	r5, [r4, #0]
 8007644:	4640      	mov	r0, r8
 8007646:	4629      	mov	r1, r5
 8007648:	f7f9 fa5a 	bl	8000b00 <__aeabi_fsub>
 800764c:	4649      	mov	r1, r9
 800764e:	f7f9 fa57 	bl	8000b00 <__aeabi_fsub>
 8007652:	2f00      	cmp	r7, #0
 8007654:	6060      	str	r0, [r4, #4]
 8007656:	f6bf af5f 	bge.w	8007518 <__ieee754_rem_pio2f+0x54>
 800765a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800765e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007662:	6025      	str	r5, [r4, #0]
 8007664:	6060      	str	r0, [r4, #4]
 8007666:	4276      	negs	r6, r6
 8007668:	e756      	b.n	8007518 <__ieee754_rem_pio2f+0x54>
 800766a:	493f      	ldr	r1, [pc, #252]	; (8007768 <__ieee754_rem_pio2f+0x2a4>)
 800766c:	4650      	mov	r0, sl
 800766e:	f7f9 fb51 	bl	8000d14 <__aeabi_fmul>
 8007672:	4605      	mov	r5, r0
 8007674:	4601      	mov	r1, r0
 8007676:	4658      	mov	r0, fp
 8007678:	f7f9 fa42 	bl	8000b00 <__aeabi_fsub>
 800767c:	4601      	mov	r1, r0
 800767e:	4680      	mov	r8, r0
 8007680:	4658      	mov	r0, fp
 8007682:	f7f9 fa3d 	bl	8000b00 <__aeabi_fsub>
 8007686:	4629      	mov	r1, r5
 8007688:	f7f9 fa3a 	bl	8000b00 <__aeabi_fsub>
 800768c:	4605      	mov	r5, r0
 800768e:	4937      	ldr	r1, [pc, #220]	; (800776c <__ieee754_rem_pio2f+0x2a8>)
 8007690:	4650      	mov	r0, sl
 8007692:	f7f9 fb3f 	bl	8000d14 <__aeabi_fmul>
 8007696:	4629      	mov	r1, r5
 8007698:	f7f9 fa32 	bl	8000b00 <__aeabi_fsub>
 800769c:	4681      	mov	r9, r0
 800769e:	e79a      	b.n	80075d6 <__ieee754_rem_pio2f+0x112>
 80076a0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80076a4:	db05      	blt.n	80076b2 <__ieee754_rem_pio2f+0x1ee>
 80076a6:	4601      	mov	r1, r0
 80076a8:	f7f9 fa2a 	bl	8000b00 <__aeabi_fsub>
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	6020      	str	r0, [r4, #0]
 80076b0:	e715      	b.n	80074de <__ieee754_rem_pio2f+0x1a>
 80076b2:	15ee      	asrs	r6, r5, #23
 80076b4:	3e86      	subs	r6, #134	; 0x86
 80076b6:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 80076ba:	4628      	mov	r0, r5
 80076bc:	f7f9 fd06 	bl	80010cc <__aeabi_f2iz>
 80076c0:	f7f9 fad4 	bl	8000c6c <__aeabi_i2f>
 80076c4:	4601      	mov	r1, r0
 80076c6:	9003      	str	r0, [sp, #12]
 80076c8:	4628      	mov	r0, r5
 80076ca:	f7f9 fa19 	bl	8000b00 <__aeabi_fsub>
 80076ce:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80076d2:	f7f9 fb1f 	bl	8000d14 <__aeabi_fmul>
 80076d6:	4680      	mov	r8, r0
 80076d8:	f7f9 fcf8 	bl	80010cc <__aeabi_f2iz>
 80076dc:	f7f9 fac6 	bl	8000c6c <__aeabi_i2f>
 80076e0:	4601      	mov	r1, r0
 80076e2:	9004      	str	r0, [sp, #16]
 80076e4:	4605      	mov	r5, r0
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7f9 fa0a 	bl	8000b00 <__aeabi_fsub>
 80076ec:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80076f0:	f7f9 fb10 	bl	8000d14 <__aeabi_fmul>
 80076f4:	2100      	movs	r1, #0
 80076f6:	9005      	str	r0, [sp, #20]
 80076f8:	f7f9 fca0 	bl	800103c <__aeabi_fcmpeq>
 80076fc:	b1e8      	cbz	r0, 800773a <__ieee754_rem_pio2f+0x276>
 80076fe:	2100      	movs	r1, #0
 8007700:	4628      	mov	r0, r5
 8007702:	f7f9 fc9b 	bl	800103c <__aeabi_fcmpeq>
 8007706:	2800      	cmp	r0, #0
 8007708:	bf14      	ite	ne
 800770a:	2301      	movne	r3, #1
 800770c:	2302      	moveq	r3, #2
 800770e:	4a18      	ldr	r2, [pc, #96]	; (8007770 <__ieee754_rem_pio2f+0x2ac>)
 8007710:	4621      	mov	r1, r4
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	2202      	movs	r2, #2
 8007716:	a803      	add	r0, sp, #12
 8007718:	9200      	str	r2, [sp, #0]
 800771a:	4632      	mov	r2, r6
 800771c:	f000 f910 	bl	8007940 <__kernel_rem_pio2f>
 8007720:	2f00      	cmp	r7, #0
 8007722:	4606      	mov	r6, r0
 8007724:	f6bf aef8 	bge.w	8007518 <__ieee754_rem_pio2f+0x54>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800772e:	6023      	str	r3, [r4, #0]
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	e795      	b.n	8007666 <__ieee754_rem_pio2f+0x1a2>
 800773a:	2303      	movs	r3, #3
 800773c:	e7e7      	b.n	800770e <__ieee754_rem_pio2f+0x24a>
 800773e:	bf00      	nop
 8007740:	3f490fd8 	.word	0x3f490fd8
 8007744:	4016cbe3 	.word	0x4016cbe3
 8007748:	3fc90f80 	.word	0x3fc90f80
 800774c:	3fc90fd0 	.word	0x3fc90fd0
 8007750:	37354443 	.word	0x37354443
 8007754:	37354400 	.word	0x37354400
 8007758:	2e85a308 	.word	0x2e85a308
 800775c:	43490f80 	.word	0x43490f80
 8007760:	3f22f984 	.word	0x3f22f984
 8007764:	080087c8 	.word	0x080087c8
 8007768:	2e85a300 	.word	0x2e85a300
 800776c:	248d3132 	.word	0x248d3132
 8007770:	08008848 	.word	0x08008848

08007774 <__ieee754_sqrtf>:
 8007774:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8007778:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	4603      	mov	r3, r0
 8007780:	4604      	mov	r4, r0
 8007782:	d309      	bcc.n	8007798 <__ieee754_sqrtf+0x24>
 8007784:	4601      	mov	r1, r0
 8007786:	f7f9 fac5 	bl	8000d14 <__aeabi_fmul>
 800778a:	4601      	mov	r1, r0
 800778c:	4620      	mov	r0, r4
 800778e:	f7f9 f9b9 	bl	8000b04 <__addsf3>
 8007792:	4604      	mov	r4, r0
 8007794:	4620      	mov	r0, r4
 8007796:	bd70      	pop	{r4, r5, r6, pc}
 8007798:	2a00      	cmp	r2, #0
 800779a:	d0fb      	beq.n	8007794 <__ieee754_sqrtf+0x20>
 800779c:	2800      	cmp	r0, #0
 800779e:	da06      	bge.n	80077ae <__ieee754_sqrtf+0x3a>
 80077a0:	4601      	mov	r1, r0
 80077a2:	f7f9 f9ad 	bl	8000b00 <__aeabi_fsub>
 80077a6:	4601      	mov	r1, r0
 80077a8:	f7f9 fb68 	bl	8000e7c <__aeabi_fdiv>
 80077ac:	e7f1      	b.n	8007792 <__ieee754_sqrtf+0x1e>
 80077ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80077b2:	ea4f 54e0 	mov.w	r4, r0, asr #23
 80077b6:	d204      	bcs.n	80077c2 <__ieee754_sqrtf+0x4e>
 80077b8:	2200      	movs	r2, #0
 80077ba:	0219      	lsls	r1, r3, #8
 80077bc:	d529      	bpl.n	8007812 <__ieee754_sqrtf+0x9e>
 80077be:	3a01      	subs	r2, #1
 80077c0:	1aa4      	subs	r4, r4, r2
 80077c2:	3c7f      	subs	r4, #127	; 0x7f
 80077c4:	07e2      	lsls	r2, r4, #31
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	ea4f 0164 	mov.w	r1, r4, asr #1
 80077ce:	4616      	mov	r6, r2
 80077d0:	f04f 0419 	mov.w	r4, #25
 80077d4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80077d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80077dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077e0:	bf48      	it	mi
 80077e2:	005b      	lslmi	r3, r3, #1
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	1835      	adds	r5, r6, r0
 80077e8:	429d      	cmp	r5, r3
 80077ea:	bfde      	ittt	le
 80077ec:	182e      	addle	r6, r5, r0
 80077ee:	1b5b      	suble	r3, r3, r5
 80077f0:	1812      	addle	r2, r2, r0
 80077f2:	3c01      	subs	r4, #1
 80077f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80077fc:	d1f3      	bne.n	80077e6 <__ieee754_sqrtf+0x72>
 80077fe:	b113      	cbz	r3, 8007806 <__ieee754_sqrtf+0x92>
 8007800:	3201      	adds	r2, #1
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	1054      	asrs	r4, r2, #1
 8007808:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800780c:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 8007810:	e7c0      	b.n	8007794 <__ieee754_sqrtf+0x20>
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	3201      	adds	r2, #1
 8007816:	e7d0      	b.n	80077ba <__ieee754_sqrtf+0x46>

08007818 <__kernel_cosf>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8007820:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8007824:	4606      	mov	r6, r0
 8007826:	460f      	mov	r7, r1
 8007828:	da03      	bge.n	8007832 <__kernel_cosf+0x1a>
 800782a:	f7f9 fc4f 	bl	80010cc <__aeabi_f2iz>
 800782e:	2800      	cmp	r0, #0
 8007830:	d070      	beq.n	8007914 <__kernel_cosf+0xfc>
 8007832:	4631      	mov	r1, r6
 8007834:	4630      	mov	r0, r6
 8007836:	f7f9 fa6d 	bl	8000d14 <__aeabi_fmul>
 800783a:	4605      	mov	r5, r0
 800783c:	4937      	ldr	r1, [pc, #220]	; (800791c <__kernel_cosf+0x104>)
 800783e:	f7f9 fa69 	bl	8000d14 <__aeabi_fmul>
 8007842:	4937      	ldr	r1, [pc, #220]	; (8007920 <__kernel_cosf+0x108>)
 8007844:	f7f9 f95e 	bl	8000b04 <__addsf3>
 8007848:	4629      	mov	r1, r5
 800784a:	f7f9 fa63 	bl	8000d14 <__aeabi_fmul>
 800784e:	4935      	ldr	r1, [pc, #212]	; (8007924 <__kernel_cosf+0x10c>)
 8007850:	f7f9 f956 	bl	8000b00 <__aeabi_fsub>
 8007854:	4629      	mov	r1, r5
 8007856:	f7f9 fa5d 	bl	8000d14 <__aeabi_fmul>
 800785a:	4933      	ldr	r1, [pc, #204]	; (8007928 <__kernel_cosf+0x110>)
 800785c:	f7f9 f952 	bl	8000b04 <__addsf3>
 8007860:	4629      	mov	r1, r5
 8007862:	f7f9 fa57 	bl	8000d14 <__aeabi_fmul>
 8007866:	4931      	ldr	r1, [pc, #196]	; (800792c <__kernel_cosf+0x114>)
 8007868:	f7f9 f94a 	bl	8000b00 <__aeabi_fsub>
 800786c:	4629      	mov	r1, r5
 800786e:	f7f9 fa51 	bl	8000d14 <__aeabi_fmul>
 8007872:	492f      	ldr	r1, [pc, #188]	; (8007930 <__kernel_cosf+0x118>)
 8007874:	f7f9 f946 	bl	8000b04 <__addsf3>
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 fa4b 	bl	8000d14 <__aeabi_fmul>
 800787e:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <__kernel_cosf+0x11c>)
 8007880:	4680      	mov	r8, r0
 8007882:	429c      	cmp	r4, r3
 8007884:	dc1d      	bgt.n	80078c2 <__kernel_cosf+0xaa>
 8007886:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800788a:	4628      	mov	r0, r5
 800788c:	f7f9 fa42 	bl	8000d14 <__aeabi_fmul>
 8007890:	4641      	mov	r1, r8
 8007892:	4604      	mov	r4, r0
 8007894:	4628      	mov	r0, r5
 8007896:	f7f9 fa3d 	bl	8000d14 <__aeabi_fmul>
 800789a:	4639      	mov	r1, r7
 800789c:	4605      	mov	r5, r0
 800789e:	4630      	mov	r0, r6
 80078a0:	f7f9 fa38 	bl	8000d14 <__aeabi_fmul>
 80078a4:	4601      	mov	r1, r0
 80078a6:	4628      	mov	r0, r5
 80078a8:	f7f9 f92a 	bl	8000b00 <__aeabi_fsub>
 80078ac:	4601      	mov	r1, r0
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7f9 f926 	bl	8000b00 <__aeabi_fsub>
 80078b4:	4601      	mov	r1, r0
 80078b6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80078ba:	f7f9 f921 	bl	8000b00 <__aeabi_fsub>
 80078be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <__kernel_cosf+0x120>)
 80078c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80078c8:	429c      	cmp	r4, r3
 80078ca:	bfcc      	ite	gt
 80078cc:	4c1b      	ldrgt	r4, [pc, #108]	; (800793c <__kernel_cosf+0x124>)
 80078ce:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80078d2:	4621      	mov	r1, r4
 80078d4:	f7f9 f914 	bl	8000b00 <__aeabi_fsub>
 80078d8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80078dc:	4681      	mov	r9, r0
 80078de:	4628      	mov	r0, r5
 80078e0:	f7f9 fa18 	bl	8000d14 <__aeabi_fmul>
 80078e4:	4621      	mov	r1, r4
 80078e6:	f7f9 f90b 	bl	8000b00 <__aeabi_fsub>
 80078ea:	4641      	mov	r1, r8
 80078ec:	4604      	mov	r4, r0
 80078ee:	4628      	mov	r0, r5
 80078f0:	f7f9 fa10 	bl	8000d14 <__aeabi_fmul>
 80078f4:	4639      	mov	r1, r7
 80078f6:	4605      	mov	r5, r0
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7f9 fa0b 	bl	8000d14 <__aeabi_fmul>
 80078fe:	4601      	mov	r1, r0
 8007900:	4628      	mov	r0, r5
 8007902:	f7f9 f8fd 	bl	8000b00 <__aeabi_fsub>
 8007906:	4601      	mov	r1, r0
 8007908:	4620      	mov	r0, r4
 800790a:	f7f9 f8f9 	bl	8000b00 <__aeabi_fsub>
 800790e:	4601      	mov	r1, r0
 8007910:	4648      	mov	r0, r9
 8007912:	e7d2      	b.n	80078ba <__kernel_cosf+0xa2>
 8007914:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791c:	ad47d74e 	.word	0xad47d74e
 8007920:	310f74f6 	.word	0x310f74f6
 8007924:	3493f27c 	.word	0x3493f27c
 8007928:	37d00d01 	.word	0x37d00d01
 800792c:	3ab60b61 	.word	0x3ab60b61
 8007930:	3d2aaaab 	.word	0x3d2aaaab
 8007934:	3e999999 	.word	0x3e999999
 8007938:	3f480000 	.word	0x3f480000
 800793c:	3e900000 	.word	0x3e900000

08007940 <__kernel_rem_pio2f>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	b0d9      	sub	sp, #356	; 0x164
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	9101      	str	r1, [sp, #4]
 800794a:	4bb4      	ldr	r3, [pc, #720]	; (8007c1c <__kernel_rem_pio2f+0x2dc>)
 800794c:	9962      	ldr	r1, [sp, #392]	; 0x188
 800794e:	1ed4      	subs	r4, r2, #3
 8007950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007954:	2500      	movs	r5, #0
 8007956:	9302      	str	r3, [sp, #8]
 8007958:	9b04      	ldr	r3, [sp, #16]
 800795a:	f04f 0b00 	mov.w	fp, #0
 800795e:	3b01      	subs	r3, #1
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	2308      	movs	r3, #8
 8007964:	fb94 f4f3 	sdiv	r4, r4, r3
 8007968:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800796c:	1c66      	adds	r6, r4, #1
 800796e:	9b02      	ldr	r3, [sp, #8]
 8007970:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 8007974:	9a03      	ldr	r2, [sp, #12]
 8007976:	9005      	str	r0, [sp, #20]
 8007978:	eb03 0802 	add.w	r8, r3, r2
 800797c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800797e:	1aa7      	subs	r7, r4, r2
 8007980:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007984:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 8007988:	4545      	cmp	r5, r8
 800798a:	dd10      	ble.n	80079ae <__kernel_rem_pio2f+0x6e>
 800798c:	2500      	movs	r5, #0
 800798e:	f04f 0b00 	mov.w	fp, #0
 8007992:	f50d 7a88 	add.w	sl, sp, #272	; 0x110
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	429d      	cmp	r5, r3
 800799a:	dc28      	bgt.n	80079ee <__kernel_rem_pio2f+0xae>
 800799c:	9b04      	ldr	r3, [sp, #16]
 800799e:	46d9      	mov	r9, fp
 80079a0:	eb03 0805 	add.w	r8, r3, r5
 80079a4:	ab1c      	add	r3, sp, #112	; 0x70
 80079a6:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 80079aa:	2700      	movs	r7, #0
 80079ac:	e018      	b.n	80079e0 <__kernel_rem_pio2f+0xa0>
 80079ae:	42ef      	cmn	r7, r5
 80079b0:	d407      	bmi.n	80079c2 <__kernel_rem_pio2f+0x82>
 80079b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80079b6:	f7f9 f959 	bl	8000c6c <__aeabi_i2f>
 80079ba:	f84a 0025 	str.w	r0, [sl, r5, lsl #2]
 80079be:	3501      	adds	r5, #1
 80079c0:	e7e2      	b.n	8007988 <__kernel_rem_pio2f+0x48>
 80079c2:	4658      	mov	r0, fp
 80079c4:	e7f9      	b.n	80079ba <__kernel_rem_pio2f+0x7a>
 80079c6:	9b05      	ldr	r3, [sp, #20]
 80079c8:	f858 1d04 	ldr.w	r1, [r8, #-4]!
 80079cc:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80079d0:	f7f9 f9a0 	bl	8000d14 <__aeabi_fmul>
 80079d4:	4601      	mov	r1, r0
 80079d6:	4648      	mov	r0, r9
 80079d8:	f7f9 f894 	bl	8000b04 <__addsf3>
 80079dc:	4681      	mov	r9, r0
 80079de:	3701      	adds	r7, #1
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	429f      	cmp	r7, r3
 80079e4:	ddef      	ble.n	80079c6 <__kernel_rem_pio2f+0x86>
 80079e6:	f84a 9025 	str.w	r9, [sl, r5, lsl #2]
 80079ea:	3501      	adds	r5, #1
 80079ec:	e7d3      	b.n	8007996 <__kernel_rem_pio2f+0x56>
 80079ee:	9b02      	ldr	r3, [sp, #8]
 80079f0:	aa08      	add	r2, sp, #32
 80079f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079f6:	9307      	str	r3, [sp, #28]
 80079f8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 80079fa:	9f02      	ldr	r7, [sp, #8]
 80079fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007a00:	9306      	str	r3, [sp, #24]
 8007a02:	46ba      	mov	sl, r7
 8007a04:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 8007a08:	ab58      	add	r3, sp, #352	; 0x160
 8007a0a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007a0e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8007a12:	ad07      	add	r5, sp, #28
 8007a14:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8007a18:	f1ba 0f00 	cmp.w	sl, #0
 8007a1c:	dc57      	bgt.n	8007ace <__kernel_rem_pio2f+0x18e>
 8007a1e:	4631      	mov	r1, r6
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fb71 	bl	8008108 <scalbnf>
 8007a26:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	f7f9 f972 	bl	8000d14 <__aeabi_fmul>
 8007a30:	f000 fb26 	bl	8008080 <floorf>
 8007a34:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8007a38:	f7f9 f96c 	bl	8000d14 <__aeabi_fmul>
 8007a3c:	4601      	mov	r1, r0
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7f9 f85e 	bl	8000b00 <__aeabi_fsub>
 8007a44:	4604      	mov	r4, r0
 8007a46:	f7f9 fb41 	bl	80010cc <__aeabi_f2iz>
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	f7f9 f90e 	bl	8000c6c <__aeabi_i2f>
 8007a50:	4601      	mov	r1, r0
 8007a52:	4620      	mov	r0, r4
 8007a54:	f7f9 f854 	bl	8000b00 <__aeabi_fsub>
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	dd55      	ble.n	8007b0a <__kernel_rem_pio2f+0x1ca>
 8007a5e:	1e7b      	subs	r3, r7, #1
 8007a60:	aa08      	add	r2, sp, #32
 8007a62:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007a66:	f1c6 0208 	rsb	r2, r6, #8
 8007a6a:	fa45 f002 	asr.w	r0, r5, r2
 8007a6e:	4480      	add	r8, r0
 8007a70:	4090      	lsls	r0, r2
 8007a72:	1a2d      	subs	r5, r5, r0
 8007a74:	aa08      	add	r2, sp, #32
 8007a76:	f1c6 0007 	rsb	r0, r6, #7
 8007a7a:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 8007a7e:	4105      	asrs	r5, r0
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	dd50      	ble.n	8007b26 <__kernel_rem_pio2f+0x1e6>
 8007a84:	2200      	movs	r2, #0
 8007a86:	4691      	mov	r9, r2
 8007a88:	f108 0801 	add.w	r8, r8, #1
 8007a8c:	4297      	cmp	r7, r2
 8007a8e:	f300 8085 	bgt.w	8007b9c <__kernel_rem_pio2f+0x25c>
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	dd05      	ble.n	8007aa2 <__kernel_rem_pio2f+0x162>
 8007a96:	2e01      	cmp	r6, #1
 8007a98:	f000 8097 	beq.w	8007bca <__kernel_rem_pio2f+0x28a>
 8007a9c:	2e02      	cmp	r6, #2
 8007a9e:	f000 809e 	beq.w	8007bde <__kernel_rem_pio2f+0x29e>
 8007aa2:	2d02      	cmp	r5, #2
 8007aa4:	d13f      	bne.n	8007b26 <__kernel_rem_pio2f+0x1e6>
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007aac:	f7f9 f828 	bl	8000b00 <__aeabi_fsub>
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	f1b9 0f00 	cmp.w	r9, #0
 8007ab6:	d036      	beq.n	8007b26 <__kernel_rem_pio2f+0x1e6>
 8007ab8:	4631      	mov	r1, r6
 8007aba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007abe:	f000 fb23 	bl	8008108 <scalbnf>
 8007ac2:	4601      	mov	r1, r0
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	f7f9 f81b 	bl	8000b00 <__aeabi_fsub>
 8007aca:	4604      	mov	r4, r0
 8007acc:	e02b      	b.n	8007b26 <__kernel_rem_pio2f+0x1e6>
 8007ace:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7f9 f91e 	bl	8000d14 <__aeabi_fmul>
 8007ad8:	f7f9 faf8 	bl	80010cc <__aeabi_f2iz>
 8007adc:	f7f9 f8c6 	bl	8000c6c <__aeabi_i2f>
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	4683      	mov	fp, r0
 8007ae4:	f7f9 f916 	bl	8000d14 <__aeabi_fmul>
 8007ae8:	4601      	mov	r1, r0
 8007aea:	4620      	mov	r0, r4
 8007aec:	f7f9 f808 	bl	8000b00 <__aeabi_fsub>
 8007af0:	f7f9 faec 	bl	80010cc <__aeabi_f2iz>
 8007af4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007af8:	f845 0f04 	str.w	r0, [r5, #4]!
 8007afc:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 8007b00:	4658      	mov	r0, fp
 8007b02:	f7f8 ffff 	bl	8000b04 <__addsf3>
 8007b06:	4604      	mov	r4, r0
 8007b08:	e786      	b.n	8007a18 <__kernel_rem_pio2f+0xd8>
 8007b0a:	d105      	bne.n	8007b18 <__kernel_rem_pio2f+0x1d8>
 8007b0c:	1e7b      	subs	r3, r7, #1
 8007b0e:	aa08      	add	r2, sp, #32
 8007b10:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8007b14:	122d      	asrs	r5, r5, #8
 8007b16:	e7b3      	b.n	8007a80 <__kernel_rem_pio2f+0x140>
 8007b18:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007b1c:	f7f9 faac 	bl	8001078 <__aeabi_fcmpge>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d139      	bne.n	8007b98 <__kernel_rem_pio2f+0x258>
 8007b24:	4605      	mov	r5, r0
 8007b26:	2100      	movs	r1, #0
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f7f9 fa87 	bl	800103c <__aeabi_fcmpeq>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	f000 8098 	beq.w	8007c64 <__kernel_rem_pio2f+0x324>
 8007b34:	1e7c      	subs	r4, r7, #1
 8007b36:	4623      	mov	r3, r4
 8007b38:	2200      	movs	r2, #0
 8007b3a:	9902      	ldr	r1, [sp, #8]
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	da55      	bge.n	8007bec <__kernel_rem_pio2f+0x2ac>
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	d16e      	bne.n	8007c22 <__kernel_rem_pio2f+0x2e2>
 8007b44:	2301      	movs	r3, #1
 8007b46:	f06f 0103 	mvn.w	r1, #3
 8007b4a:	fb01 f203 	mul.w	r2, r1, r3
 8007b4e:	9807      	ldr	r0, [sp, #28]
 8007b50:	5882      	ldr	r2, [r0, r2]
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d050      	beq.n	8007bf8 <__kernel_rem_pio2f+0x2b8>
 8007b56:	f06f 0803 	mvn.w	r8, #3
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	1c7d      	adds	r5, r7, #1
 8007b5e:	19d4      	adds	r4, r2, r7
 8007b60:	aa58      	add	r2, sp, #352	; 0x160
 8007b62:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8007b66:	3cf4      	subs	r4, #244	; 0xf4
 8007b68:	441f      	add	r7, r3
 8007b6a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8007b6e:	42bd      	cmp	r5, r7
 8007b70:	f73f af47 	bgt.w	8007a02 <__kernel_rem_pio2f+0xc2>
 8007b74:	9b06      	ldr	r3, [sp, #24]
 8007b76:	f04f 0a00 	mov.w	sl, #0
 8007b7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b7e:	f7f9 f875 	bl	8000c6c <__aeabi_i2f>
 8007b82:	f04f 0b00 	mov.w	fp, #0
 8007b86:	f844 0f04 	str.w	r0, [r4, #4]!
 8007b8a:	9b03      	ldr	r3, [sp, #12]
 8007b8c:	459a      	cmp	sl, r3
 8007b8e:	dd35      	ble.n	8007bfc <__kernel_rem_pio2f+0x2bc>
 8007b90:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 8007b94:	3501      	adds	r5, #1
 8007b96:	e7ea      	b.n	8007b6e <__kernel_rem_pio2f+0x22e>
 8007b98:	2502      	movs	r5, #2
 8007b9a:	e773      	b.n	8007a84 <__kernel_rem_pio2f+0x144>
 8007b9c:	ab08      	add	r3, sp, #32
 8007b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba2:	f1b9 0f00 	cmp.w	r9, #0
 8007ba6:	d109      	bne.n	8007bbc <__kernel_rem_pio2f+0x27c>
 8007ba8:	b12b      	cbz	r3, 8007bb6 <__kernel_rem_pio2f+0x276>
 8007baa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007bae:	a908      	add	r1, sp, #32
 8007bb0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	3201      	adds	r2, #1
 8007bb8:	4699      	mov	r9, r3
 8007bba:	e767      	b.n	8007a8c <__kernel_rem_pio2f+0x14c>
 8007bbc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8007bc0:	a908      	add	r1, sp, #32
 8007bc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bc6:	464b      	mov	r3, r9
 8007bc8:	e7f5      	b.n	8007bb6 <__kernel_rem_pio2f+0x276>
 8007bca:	1e7a      	subs	r2, r7, #1
 8007bcc:	ab08      	add	r3, sp, #32
 8007bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd6:	a908      	add	r1, sp, #32
 8007bd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bdc:	e761      	b.n	8007aa2 <__kernel_rem_pio2f+0x162>
 8007bde:	1e7a      	subs	r2, r7, #1
 8007be0:	ab08      	add	r3, sp, #32
 8007be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bea:	e7f4      	b.n	8007bd6 <__kernel_rem_pio2f+0x296>
 8007bec:	a908      	add	r1, sp, #32
 8007bee:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	e7a0      	b.n	8007b3a <__kernel_rem_pio2f+0x1fa>
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	e7a6      	b.n	8007b4a <__kernel_rem_pio2f+0x20a>
 8007bfc:	fb08 f30a 	mul.w	r3, r8, sl
 8007c00:	9a05      	ldr	r2, [sp, #20]
 8007c02:	58e0      	ldr	r0, [r4, r3]
 8007c04:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 8007c08:	f7f9 f884 	bl	8000d14 <__aeabi_fmul>
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	4658      	mov	r0, fp
 8007c10:	f7f8 ff78 	bl	8000b04 <__addsf3>
 8007c14:	f10a 0a01 	add.w	sl, sl, #1
 8007c18:	4683      	mov	fp, r0
 8007c1a:	e7b6      	b.n	8007b8a <__kernel_rem_pio2f+0x24a>
 8007c1c:	08008b8c 	.word	0x08008b8c
 8007c20:	3c01      	subs	r4, #1
 8007c22:	ab08      	add	r3, sp, #32
 8007c24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007c28:	3e08      	subs	r6, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d0f8      	beq.n	8007c20 <__kernel_rem_pio2f+0x2e0>
 8007c2e:	4631      	mov	r1, r6
 8007c30:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007c34:	f000 fa68 	bl	8008108 <scalbnf>
 8007c38:	46a1      	mov	r9, r4
 8007c3a:	4682      	mov	sl, r0
 8007c3c:	f04f 576e 	mov.w	r7, #998244352	; 0x3b800000
 8007c40:	ae44      	add	r6, sp, #272	; 0x110
 8007c42:	f1b9 0f00 	cmp.w	r9, #0
 8007c46:	da3f      	bge.n	8007cc8 <__kernel_rem_pio2f+0x388>
 8007c48:	2700      	movs	r7, #0
 8007c4a:	f04f 0b00 	mov.w	fp, #0
 8007c4e:	4b82      	ldr	r3, [pc, #520]	; (8007e58 <__kernel_rem_pio2f+0x518>)
 8007c50:	aa30      	add	r2, sp, #192	; 0xc0
 8007c52:	ebb4 0a07 	subs.w	sl, r4, r7
 8007c56:	d462      	bmi.n	8007d1e <__kernel_rem_pio2f+0x3de>
 8007c58:	a944      	add	r1, sp, #272	; 0x110
 8007c5a:	eb01 0a8a 	add.w	sl, r1, sl, lsl #2
 8007c5e:	46d9      	mov	r9, fp
 8007c60:	2600      	movs	r6, #0
 8007c62:	e053      	b.n	8007d0c <__kernel_rem_pio2f+0x3cc>
 8007c64:	4271      	negs	r1, r6
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fa4e 	bl	8008108 <scalbnf>
 8007c6c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007c70:	4604      	mov	r4, r0
 8007c72:	f7f9 fa01 	bl	8001078 <__aeabi_fcmpge>
 8007c76:	b1f8      	cbz	r0, 8007cb8 <__kernel_rem_pio2f+0x378>
 8007c78:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f7f9 f849 	bl	8000d14 <__aeabi_fmul>
 8007c82:	f7f9 fa23 	bl	80010cc <__aeabi_f2iz>
 8007c86:	f7f8 fff1 	bl	8000c6c <__aeabi_i2f>
 8007c8a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8007c8e:	4681      	mov	r9, r0
 8007c90:	f7f9 f840 	bl	8000d14 <__aeabi_fmul>
 8007c94:	4601      	mov	r1, r0
 8007c96:	4620      	mov	r0, r4
 8007c98:	f7f8 ff32 	bl	8000b00 <__aeabi_fsub>
 8007c9c:	f7f9 fa16 	bl	80010cc <__aeabi_f2iz>
 8007ca0:	ab08      	add	r3, sp, #32
 8007ca2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007ca6:	4648      	mov	r0, r9
 8007ca8:	f7f9 fa10 	bl	80010cc <__aeabi_f2iz>
 8007cac:	1c7c      	adds	r4, r7, #1
 8007cae:	ab08      	add	r3, sp, #32
 8007cb0:	3608      	adds	r6, #8
 8007cb2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cb6:	e7ba      	b.n	8007c2e <__kernel_rem_pio2f+0x2ee>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f7f9 fa07 	bl	80010cc <__aeabi_f2iz>
 8007cbe:	ab08      	add	r3, sp, #32
 8007cc0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007cc4:	463c      	mov	r4, r7
 8007cc6:	e7b2      	b.n	8007c2e <__kernel_rem_pio2f+0x2ee>
 8007cc8:	ab08      	add	r3, sp, #32
 8007cca:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8007cce:	f7f8 ffcd 	bl	8000c6c <__aeabi_i2f>
 8007cd2:	4651      	mov	r1, sl
 8007cd4:	f7f9 f81e 	bl	8000d14 <__aeabi_fmul>
 8007cd8:	4639      	mov	r1, r7
 8007cda:	f846 0029 	str.w	r0, [r6, r9, lsl #2]
 8007cde:	4650      	mov	r0, sl
 8007ce0:	f7f9 f818 	bl	8000d14 <__aeabi_fmul>
 8007ce4:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ce8:	4682      	mov	sl, r0
 8007cea:	e7aa      	b.n	8007c42 <__kernel_rem_pio2f+0x302>
 8007cec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007cf0:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 8007cf4:	9204      	str	r2, [sp, #16]
 8007cf6:	9303      	str	r3, [sp, #12]
 8007cf8:	f7f9 f80c 	bl	8000d14 <__aeabi_fmul>
 8007cfc:	4601      	mov	r1, r0
 8007cfe:	4648      	mov	r0, r9
 8007d00:	f7f8 ff00 	bl	8000b04 <__addsf3>
 8007d04:	4681      	mov	r9, r0
 8007d06:	9a04      	ldr	r2, [sp, #16]
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	9902      	ldr	r1, [sp, #8]
 8007d0e:	428e      	cmp	r6, r1
 8007d10:	dc01      	bgt.n	8007d16 <__kernel_rem_pio2f+0x3d6>
 8007d12:	42be      	cmp	r6, r7
 8007d14:	ddea      	ble.n	8007cec <__kernel_rem_pio2f+0x3ac>
 8007d16:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
 8007d1a:	3701      	adds	r7, #1
 8007d1c:	e799      	b.n	8007c52 <__kernel_rem_pio2f+0x312>
 8007d1e:	9b62      	ldr	r3, [sp, #392]	; 0x188
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d826      	bhi.n	8007d72 <__kernel_rem_pio2f+0x432>
 8007d24:	e8df f003 	tbb	[pc, r3]
 8007d28:	2a02021c 	.word	0x2a02021c
 8007d2c:	4626      	mov	r6, r4
 8007d2e:	2000      	movs	r0, #0
 8007d30:	af30      	add	r7, sp, #192	; 0xc0
 8007d32:	2e00      	cmp	r6, #0
 8007d34:	da40      	bge.n	8007db8 <__kernel_rem_pio2f+0x478>
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	d044      	beq.n	8007dc4 <__kernel_rem_pio2f+0x484>
 8007d3a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8007d3e:	9a01      	ldr	r2, [sp, #4]
 8007d40:	af58      	add	r7, sp, #352	; 0x160
 8007d42:	4601      	mov	r1, r0
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 8007d4a:	f7f8 fed9 	bl	8000b00 <__aeabi_fsub>
 8007d4e:	2601      	movs	r6, #1
 8007d50:	42b4      	cmp	r4, r6
 8007d52:	da39      	bge.n	8007dc8 <__kernel_rem_pio2f+0x488>
 8007d54:	b10d      	cbz	r5, 8007d5a <__kernel_rem_pio2f+0x41a>
 8007d56:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007d5a:	9b01      	ldr	r3, [sp, #4]
 8007d5c:	6058      	str	r0, [r3, #4]
 8007d5e:	e008      	b.n	8007d72 <__kernel_rem_pio2f+0x432>
 8007d60:	2000      	movs	r0, #0
 8007d62:	ae30      	add	r6, sp, #192	; 0xc0
 8007d64:	2c00      	cmp	r4, #0
 8007d66:	da21      	bge.n	8007dac <__kernel_rem_pio2f+0x46c>
 8007d68:	b10d      	cbz	r5, 8007d6e <__kernel_rem_pio2f+0x42e>
 8007d6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	6018      	str	r0, [r3, #0]
 8007d72:	f008 0007 	and.w	r0, r8, #7
 8007d76:	b059      	add	sp, #356	; 0x164
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 8007d80:	eb0a 0684 	add.w	r6, sl, r4, lsl #2
 8007d84:	4637      	mov	r7, r6
 8007d86:	46a1      	mov	r9, r4
 8007d88:	f1b9 0f00 	cmp.w	r9, #0
 8007d8c:	dc22      	bgt.n	8007dd4 <__kernel_rem_pio2f+0x494>
 8007d8e:	4627      	mov	r7, r4
 8007d90:	2f01      	cmp	r7, #1
 8007d92:	dc38      	bgt.n	8007e06 <__kernel_rem_pio2f+0x4c6>
 8007d94:	2000      	movs	r0, #0
 8007d96:	2c01      	cmp	r4, #1
 8007d98:	dc4c      	bgt.n	8007e34 <__kernel_rem_pio2f+0x4f4>
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	d150      	bne.n	8007e40 <__kernel_rem_pio2f+0x500>
 8007d9e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8007da0:	9a01      	ldr	r2, [sp, #4]
 8007da2:	6013      	str	r3, [r2, #0]
 8007da4:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007da6:	6053      	str	r3, [r2, #4]
 8007da8:	6090      	str	r0, [r2, #8]
 8007daa:	e7e2      	b.n	8007d72 <__kernel_rem_pio2f+0x432>
 8007dac:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8007db0:	f7f8 fea8 	bl	8000b04 <__addsf3>
 8007db4:	3c01      	subs	r4, #1
 8007db6:	e7d5      	b.n	8007d64 <__kernel_rem_pio2f+0x424>
 8007db8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8007dbc:	f7f8 fea2 	bl	8000b04 <__addsf3>
 8007dc0:	3e01      	subs	r6, #1
 8007dc2:	e7b6      	b.n	8007d32 <__kernel_rem_pio2f+0x3f2>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	e7ba      	b.n	8007d3e <__kernel_rem_pio2f+0x3fe>
 8007dc8:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 8007dcc:	f7f8 fe9a 	bl	8000b04 <__addsf3>
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	e7bd      	b.n	8007d50 <__kernel_rem_pio2f+0x410>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	9303      	str	r3, [sp, #12]
 8007de0:	9202      	str	r2, [sp, #8]
 8007de2:	f7f8 fe8f 	bl	8000b04 <__addsf3>
 8007de6:	9a02      	ldr	r2, [sp, #8]
 8007de8:	4601      	mov	r1, r0
 8007dea:	4683      	mov	fp, r0
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7f8 fe87 	bl	8000b00 <__aeabi_fsub>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	f109 39ff 	add.w	r9, r9, #4294967295
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f7f8 fe83 	bl	8000b04 <__addsf3>
 8007dfe:	6038      	str	r0, [r7, #0]
 8007e00:	f847 bd04 	str.w	fp, [r7, #-4]!
 8007e04:	e7c0      	b.n	8007d88 <__kernel_rem_pio2f+0x448>
 8007e06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007e0a:	f8d6 b000 	ldr.w	fp, [r6]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	4659      	mov	r1, fp
 8007e12:	9302      	str	r3, [sp, #8]
 8007e14:	f7f8 fe76 	bl	8000b04 <__addsf3>
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4681      	mov	r9, r0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7f8 fe6e 	bl	8000b00 <__aeabi_fsub>
 8007e24:	4659      	mov	r1, fp
 8007e26:	f7f8 fe6d 	bl	8000b04 <__addsf3>
 8007e2a:	3f01      	subs	r7, #1
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	f846 9d04 	str.w	r9, [r6, #-4]!
 8007e32:	e7ad      	b.n	8007d90 <__kernel_rem_pio2f+0x450>
 8007e34:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 8007e38:	f7f8 fe64 	bl	8000b04 <__addsf3>
 8007e3c:	3c01      	subs	r4, #1
 8007e3e:	e7aa      	b.n	8007d96 <__kernel_rem_pio2f+0x456>
 8007e40:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8007e42:	9a01      	ldr	r2, [sp, #4]
 8007e44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007e4c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8007e50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e54:	6053      	str	r3, [r2, #4]
 8007e56:	e7a7      	b.n	8007da8 <__kernel_rem_pio2f+0x468>
 8007e58:	08008b60 	.word	0x08008b60

08007e5c <__kernel_sinf>:
 8007e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e60:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007e64:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007e68:	4604      	mov	r4, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	da03      	bge.n	8007e78 <__kernel_sinf+0x1c>
 8007e70:	f7f9 f92c 	bl	80010cc <__aeabi_f2iz>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d035      	beq.n	8007ee4 <__kernel_sinf+0x88>
 8007e78:	4621      	mov	r1, r4
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7f8 ff4a 	bl	8000d14 <__aeabi_fmul>
 8007e80:	4605      	mov	r5, r0
 8007e82:	4601      	mov	r1, r0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7f8 ff45 	bl	8000d14 <__aeabi_fmul>
 8007e8a:	4929      	ldr	r1, [pc, #164]	; (8007f30 <__kernel_sinf+0xd4>)
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	4628      	mov	r0, r5
 8007e90:	f7f8 ff40 	bl	8000d14 <__aeabi_fmul>
 8007e94:	4927      	ldr	r1, [pc, #156]	; (8007f34 <__kernel_sinf+0xd8>)
 8007e96:	f7f8 fe33 	bl	8000b00 <__aeabi_fsub>
 8007e9a:	4629      	mov	r1, r5
 8007e9c:	f7f8 ff3a 	bl	8000d14 <__aeabi_fmul>
 8007ea0:	4925      	ldr	r1, [pc, #148]	; (8007f38 <__kernel_sinf+0xdc>)
 8007ea2:	f7f8 fe2f 	bl	8000b04 <__addsf3>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 ff34 	bl	8000d14 <__aeabi_fmul>
 8007eac:	4923      	ldr	r1, [pc, #140]	; (8007f3c <__kernel_sinf+0xe0>)
 8007eae:	f7f8 fe27 	bl	8000b00 <__aeabi_fsub>
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	f7f8 ff2e 	bl	8000d14 <__aeabi_fmul>
 8007eb8:	4921      	ldr	r1, [pc, #132]	; (8007f40 <__kernel_sinf+0xe4>)
 8007eba:	f7f8 fe23 	bl	8000b04 <__addsf3>
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	f1b9 0f00 	cmp.w	r9, #0
 8007ec4:	d111      	bne.n	8007eea <__kernel_sinf+0x8e>
 8007ec6:	4601      	mov	r1, r0
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f7f8 ff23 	bl	8000d14 <__aeabi_fmul>
 8007ece:	491d      	ldr	r1, [pc, #116]	; (8007f44 <__kernel_sinf+0xe8>)
 8007ed0:	f7f8 fe16 	bl	8000b00 <__aeabi_fsub>
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	f7f8 ff1d 	bl	8000d14 <__aeabi_fmul>
 8007eda:	4601      	mov	r1, r0
 8007edc:	4620      	mov	r0, r4
 8007ede:	f7f8 fe11 	bl	8000b04 <__addsf3>
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7f8 ff10 	bl	8000d14 <__aeabi_fmul>
 8007ef4:	4641      	mov	r1, r8
 8007ef6:	4681      	mov	r9, r0
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7f8 ff0b 	bl	8000d14 <__aeabi_fmul>
 8007efe:	4601      	mov	r1, r0
 8007f00:	4648      	mov	r0, r9
 8007f02:	f7f8 fdfd 	bl	8000b00 <__aeabi_fsub>
 8007f06:	4629      	mov	r1, r5
 8007f08:	f7f8 ff04 	bl	8000d14 <__aeabi_fmul>
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	f7f8 fdf7 	bl	8000b00 <__aeabi_fsub>
 8007f12:	490c      	ldr	r1, [pc, #48]	; (8007f44 <__kernel_sinf+0xe8>)
 8007f14:	4605      	mov	r5, r0
 8007f16:	4630      	mov	r0, r6
 8007f18:	f7f8 fefc 	bl	8000d14 <__aeabi_fmul>
 8007f1c:	4601      	mov	r1, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f7f8 fdf0 	bl	8000b04 <__addsf3>
 8007f24:	4601      	mov	r1, r0
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7f8 fdea 	bl	8000b00 <__aeabi_fsub>
 8007f2c:	e7d9      	b.n	8007ee2 <__kernel_sinf+0x86>
 8007f2e:	bf00      	nop
 8007f30:	2f2ec9d3 	.word	0x2f2ec9d3
 8007f34:	32d72f34 	.word	0x32d72f34
 8007f38:	3638ef1b 	.word	0x3638ef1b
 8007f3c:	39500d01 	.word	0x39500d01
 8007f40:	3c088889 	.word	0x3c088889
 8007f44:	3e2aaaab 	.word	0x3e2aaaab

08007f48 <matherr>:
 8007f48:	2000      	movs	r0, #0
 8007f4a:	4770      	bx	lr

08007f4c <nan>:
 8007f4c:	2000      	movs	r0, #0
 8007f4e:	4901      	ldr	r1, [pc, #4]	; (8007f54 <nan+0x8>)
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	7ff80000 	.word	0x7ff80000

08007f58 <rint>:
 8007f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 8007f5e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8007f62:	2f13      	cmp	r7, #19
 8007f64:	4602      	mov	r2, r0
 8007f66:	460b      	mov	r3, r1
 8007f68:	4684      	mov	ip, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8007f72:	dc56      	bgt.n	8008022 <rint+0xca>
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	da29      	bge.n	8007fcc <rint+0x74>
 8007f78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f7c:	4301      	orrs	r1, r0
 8007f7e:	d021      	beq.n	8007fc4 <rint+0x6c>
 8007f80:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8007f84:	4305      	orrs	r5, r0
 8007f86:	426b      	negs	r3, r5
 8007f88:	432b      	orrs	r3, r5
 8007f8a:	0b1b      	lsrs	r3, r3, #12
 8007f8c:	0c64      	lsrs	r4, r4, #17
 8007f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f92:	0464      	lsls	r4, r4, #17
 8007f94:	ea43 0104 	orr.w	r1, r3, r4
 8007f98:	4b31      	ldr	r3, [pc, #196]	; (8008060 <rint+0x108>)
 8007f9a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007fa2:	4622      	mov	r2, r4
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	f7f8 f8e3 	bl	8000170 <__adddf3>
 8007faa:	e9cd 0100 	strd	r0, r1, [sp]
 8007fae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	f7f8 f8d9 	bl	800016c <__aeabi_dsub>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007fc0:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	b003      	add	sp, #12
 8007fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fcc:	4925      	ldr	r1, [pc, #148]	; (8008064 <rint+0x10c>)
 8007fce:	4139      	asrs	r1, r7
 8007fd0:	ea03 0001 	and.w	r0, r3, r1
 8007fd4:	4310      	orrs	r0, r2
 8007fd6:	d0f5      	beq.n	8007fc4 <rint+0x6c>
 8007fd8:	084b      	lsrs	r3, r1, #1
 8007fda:	ea04 0203 	and.w	r2, r4, r3
 8007fde:	ea52 050c 	orrs.w	r5, r2, ip
 8007fe2:	d00a      	beq.n	8007ffa <rint+0xa2>
 8007fe4:	ea24 0303 	bic.w	r3, r4, r3
 8007fe8:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8007fec:	2f13      	cmp	r7, #19
 8007fee:	bf0c      	ite	eq
 8007ff0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007ff4:	2500      	movne	r5, #0
 8007ff6:	413c      	asrs	r4, r7
 8007ff8:	431c      	orrs	r4, r3
 8007ffa:	4b19      	ldr	r3, [pc, #100]	; (8008060 <rint+0x108>)
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008002:	4628      	mov	r0, r5
 8008004:	e9d6 4500 	ldrd	r4, r5, [r6]
 8008008:	4622      	mov	r2, r4
 800800a:	462b      	mov	r3, r5
 800800c:	f7f8 f8b0 	bl	8000170 <__adddf3>
 8008010:	e9cd 0100 	strd	r0, r1, [sp]
 8008014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008018:	4622      	mov	r2, r4
 800801a:	462b      	mov	r3, r5
 800801c:	f7f8 f8a6 	bl	800016c <__aeabi_dsub>
 8008020:	e006      	b.n	8008030 <rint+0xd8>
 8008022:	2f33      	cmp	r7, #51	; 0x33
 8008024:	dd07      	ble.n	8008036 <rint+0xde>
 8008026:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 800802a:	d1cb      	bne.n	8007fc4 <rint+0x6c>
 800802c:	f7f8 f8a0 	bl	8000170 <__adddf3>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e7c6      	b.n	8007fc4 <rint+0x6c>
 8008036:	f04f 31ff 	mov.w	r1, #4294967295
 800803a:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 800803e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008042:	4208      	tst	r0, r1
 8008044:	d0be      	beq.n	8007fc4 <rint+0x6c>
 8008046:	084b      	lsrs	r3, r1, #1
 8008048:	4218      	tst	r0, r3
 800804a:	bf1f      	itttt	ne
 800804c:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8008050:	ea20 0303 	bicne.w	r3, r0, r3
 8008054:	fa45 fe0e 	asrne.w	lr, r5, lr
 8008058:	ea4e 0503 	orrne.w	r5, lr, r3
 800805c:	e7cd      	b.n	8007ffa <rint+0xa2>
 800805e:	bf00      	nop
 8008060:	08008b98 	.word	0x08008b98
 8008064:	000fffff 	.word	0x000fffff

08008068 <fabsf>:
 8008068:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800806c:	4770      	bx	lr

0800806e <finitef>:
 800806e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008072:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008076:	bfac      	ite	ge
 8008078:	2000      	movge	r0, #0
 800807a:	2001      	movlt	r0, #1
 800807c:	4770      	bx	lr
	...

08008080 <floorf>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8008086:	0df5      	lsrs	r5, r6, #23
 8008088:	3d7f      	subs	r5, #127	; 0x7f
 800808a:	2d16      	cmp	r5, #22
 800808c:	4601      	mov	r1, r0
 800808e:	4604      	mov	r4, r0
 8008090:	dc26      	bgt.n	80080e0 <floorf+0x60>
 8008092:	2d00      	cmp	r5, #0
 8008094:	da0e      	bge.n	80080b4 <floorf+0x34>
 8008096:	4917      	ldr	r1, [pc, #92]	; (80080f4 <floorf+0x74>)
 8008098:	f7f8 fd34 	bl	8000b04 <__addsf3>
 800809c:	2100      	movs	r1, #0
 800809e:	f7f8 fff5 	bl	800108c <__aeabi_fcmpgt>
 80080a2:	b128      	cbz	r0, 80080b0 <floorf+0x30>
 80080a4:	2c00      	cmp	r4, #0
 80080a6:	da23      	bge.n	80080f0 <floorf+0x70>
 80080a8:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <floorf+0x78>)
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	bf18      	it	ne
 80080ae:	461c      	movne	r4, r3
 80080b0:	4621      	mov	r1, r4
 80080b2:	e01b      	b.n	80080ec <floorf+0x6c>
 80080b4:	4e11      	ldr	r6, [pc, #68]	; (80080fc <floorf+0x7c>)
 80080b6:	412e      	asrs	r6, r5
 80080b8:	4230      	tst	r0, r6
 80080ba:	d017      	beq.n	80080ec <floorf+0x6c>
 80080bc:	490d      	ldr	r1, [pc, #52]	; (80080f4 <floorf+0x74>)
 80080be:	f7f8 fd21 	bl	8000b04 <__addsf3>
 80080c2:	2100      	movs	r1, #0
 80080c4:	f7f8 ffe2 	bl	800108c <__aeabi_fcmpgt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d0f1      	beq.n	80080b0 <floorf+0x30>
 80080cc:	2c00      	cmp	r4, #0
 80080ce:	bfbe      	ittt	lt
 80080d0:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80080d4:	fa43 f505 	asrlt.w	r5, r3, r5
 80080d8:	1964      	addlt	r4, r4, r5
 80080da:	ea24 0406 	bic.w	r4, r4, r6
 80080de:	e7e7      	b.n	80080b0 <floorf+0x30>
 80080e0:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80080e4:	d302      	bcc.n	80080ec <floorf+0x6c>
 80080e6:	f7f8 fd0d 	bl	8000b04 <__addsf3>
 80080ea:	4601      	mov	r1, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	bd70      	pop	{r4, r5, r6, pc}
 80080f0:	2400      	movs	r4, #0
 80080f2:	e7dd      	b.n	80080b0 <floorf+0x30>
 80080f4:	7149f2ca 	.word	0x7149f2ca
 80080f8:	bf800000 	.word	0xbf800000
 80080fc:	007fffff 	.word	0x007fffff

08008100 <nanf>:
 8008100:	4800      	ldr	r0, [pc, #0]	; (8008104 <nanf+0x4>)
 8008102:	4770      	bx	lr
 8008104:	7fc00000 	.word	0x7fc00000

08008108 <scalbnf>:
 8008108:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800810c:	b510      	push	{r4, lr}
 800810e:	4602      	mov	r2, r0
 8008110:	460c      	mov	r4, r1
 8008112:	d028      	beq.n	8008166 <scalbnf+0x5e>
 8008114:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008118:	d304      	bcc.n	8008124 <scalbnf+0x1c>
 800811a:	4601      	mov	r1, r0
 800811c:	f7f8 fcf2 	bl	8000b04 <__addsf3>
 8008120:	4602      	mov	r2, r0
 8008122:	e020      	b.n	8008166 <scalbnf+0x5e>
 8008124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008128:	d215      	bcs.n	8008156 <scalbnf+0x4e>
 800812a:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800812e:	f7f8 fdf1 	bl	8000d14 <__aeabi_fmul>
 8008132:	4b18      	ldr	r3, [pc, #96]	; (8008194 <scalbnf+0x8c>)
 8008134:	4602      	mov	r2, r0
 8008136:	429c      	cmp	r4, r3
 8008138:	db22      	blt.n	8008180 <scalbnf+0x78>
 800813a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800813e:	3b19      	subs	r3, #25
 8008140:	4423      	add	r3, r4
 8008142:	2bfe      	cmp	r3, #254	; 0xfe
 8008144:	dd09      	ble.n	800815a <scalbnf+0x52>
 8008146:	4611      	mov	r1, r2
 8008148:	4813      	ldr	r0, [pc, #76]	; (8008198 <scalbnf+0x90>)
 800814a:	f000 f829 	bl	80081a0 <copysignf>
 800814e:	4912      	ldr	r1, [pc, #72]	; (8008198 <scalbnf+0x90>)
 8008150:	f7f8 fde0 	bl	8000d14 <__aeabi_fmul>
 8008154:	e7e4      	b.n	8008120 <scalbnf+0x18>
 8008156:	0ddb      	lsrs	r3, r3, #23
 8008158:	e7f2      	b.n	8008140 <scalbnf+0x38>
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd05      	ble.n	800816a <scalbnf+0x62>
 800815e:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 8008162:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8008166:	4610      	mov	r0, r2
 8008168:	bd10      	pop	{r4, pc}
 800816a:	f113 0f16 	cmn.w	r3, #22
 800816e:	da09      	bge.n	8008184 <scalbnf+0x7c>
 8008170:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008174:	429c      	cmp	r4, r3
 8008176:	4611      	mov	r1, r2
 8008178:	dce6      	bgt.n	8008148 <scalbnf+0x40>
 800817a:	4808      	ldr	r0, [pc, #32]	; (800819c <scalbnf+0x94>)
 800817c:	f000 f810 	bl	80081a0 <copysignf>
 8008180:	4906      	ldr	r1, [pc, #24]	; (800819c <scalbnf+0x94>)
 8008182:	e7e5      	b.n	8008150 <scalbnf+0x48>
 8008184:	3319      	adds	r3, #25
 8008186:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800818a:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800818e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8008192:	e7dd      	b.n	8008150 <scalbnf+0x48>
 8008194:	ffff3cb0 	.word	0xffff3cb0
 8008198:	7149f2ca 	.word	0x7149f2ca
 800819c:	0da24260 	.word	0x0da24260

080081a0 <copysignf>:
 80081a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80081a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80081a8:	4308      	orrs	r0, r1
 80081aa:	4770      	bx	lr

080081ac <abort>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	2006      	movs	r0, #6
 80081b0:	f000 f936 	bl	8008420 <raise>
 80081b4:	2001      	movs	r0, #1
 80081b6:	f7fc f811 	bl	80041dc <_exit>
	...

080081bc <__cxa_atexit>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	4c05      	ldr	r4, [pc, #20]	; (80081d4 <__cxa_atexit+0x18>)
 80081c0:	4613      	mov	r3, r2
 80081c2:	b12c      	cbz	r4, 80081d0 <__cxa_atexit+0x14>
 80081c4:	460a      	mov	r2, r1
 80081c6:	4601      	mov	r1, r0
 80081c8:	2002      	movs	r0, #2
 80081ca:	f3af 8000 	nop.w
 80081ce:	bd10      	pop	{r4, pc}
 80081d0:	4620      	mov	r0, r4
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	00000000 	.word	0x00000000

080081d8 <__errno>:
 80081d8:	4b01      	ldr	r3, [pc, #4]	; (80081e0 <__errno+0x8>)
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20000020 	.word	0x20000020

080081e4 <__libc_init_array>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	2500      	movs	r5, #0
 80081e8:	4e0c      	ldr	r6, [pc, #48]	; (800821c <__libc_init_array+0x38>)
 80081ea:	4c0d      	ldr	r4, [pc, #52]	; (8008220 <__libc_init_array+0x3c>)
 80081ec:	1ba4      	subs	r4, r4, r6
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d109      	bne.n	8008208 <__libc_init_array+0x24>
 80081f4:	f000 f93e 	bl	8008474 <_init>
 80081f8:	2500      	movs	r5, #0
 80081fa:	4e0a      	ldr	r6, [pc, #40]	; (8008224 <__libc_init_array+0x40>)
 80081fc:	4c0a      	ldr	r4, [pc, #40]	; (8008228 <__libc_init_array+0x44>)
 80081fe:	1ba4      	subs	r4, r4, r6
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	42a5      	cmp	r5, r4
 8008204:	d105      	bne.n	8008212 <__libc_init_array+0x2e>
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800820c:	4798      	blx	r3
 800820e:	3501      	adds	r5, #1
 8008210:	e7ee      	b.n	80081f0 <__libc_init_array+0xc>
 8008212:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008216:	4798      	blx	r3
 8008218:	3501      	adds	r5, #1
 800821a:	e7f2      	b.n	8008202 <__libc_init_array+0x1e>
 800821c:	08008f28 	.word	0x08008f28
 8008220:	08008f28 	.word	0x08008f28
 8008224:	08008f28 	.word	0x08008f28
 8008228:	08008f44 	.word	0x08008f44

0800822c <malloc>:
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <malloc+0xc>)
 800822e:	4601      	mov	r1, r0
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f000 b85f 	b.w	80082f4 <_malloc_r>
 8008236:	bf00      	nop
 8008238:	20000020 	.word	0x20000020

0800823c <free>:
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <free+0xc>)
 800823e:	4601      	mov	r1, r0
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f000 b80b 	b.w	800825c <_free_r>
 8008246:	bf00      	nop
 8008248:	20000020 	.word	0x20000020

0800824c <memset>:
 800824c:	4603      	mov	r3, r0
 800824e:	4402      	add	r2, r0
 8008250:	4293      	cmp	r3, r2
 8008252:	d100      	bne.n	8008256 <memset+0xa>
 8008254:	4770      	bx	lr
 8008256:	f803 1b01 	strb.w	r1, [r3], #1
 800825a:	e7f9      	b.n	8008250 <memset+0x4>

0800825c <_free_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4605      	mov	r5, r0
 8008260:	2900      	cmp	r1, #0
 8008262:	d043      	beq.n	80082ec <_free_r+0x90>
 8008264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008268:	1f0c      	subs	r4, r1, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfb8      	it	lt
 800826e:	18e4      	addlt	r4, r4, r3
 8008270:	f000 f8f2 	bl	8008458 <__malloc_lock>
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <_free_r+0x94>)
 8008276:	6813      	ldr	r3, [r2, #0]
 8008278:	4610      	mov	r0, r2
 800827a:	b933      	cbnz	r3, 800828a <_free_r+0x2e>
 800827c:	6063      	str	r3, [r4, #4]
 800827e:	6014      	str	r4, [r2, #0]
 8008280:	4628      	mov	r0, r5
 8008282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008286:	f000 b8e8 	b.w	800845a <__malloc_unlock>
 800828a:	42a3      	cmp	r3, r4
 800828c:	d90b      	bls.n	80082a6 <_free_r+0x4a>
 800828e:	6821      	ldr	r1, [r4, #0]
 8008290:	1862      	adds	r2, r4, r1
 8008292:	4293      	cmp	r3, r2
 8008294:	bf01      	itttt	eq
 8008296:	681a      	ldreq	r2, [r3, #0]
 8008298:	685b      	ldreq	r3, [r3, #4]
 800829a:	1852      	addeq	r2, r2, r1
 800829c:	6022      	streq	r2, [r4, #0]
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	6004      	str	r4, [r0, #0]
 80082a2:	e7ed      	b.n	8008280 <_free_r+0x24>
 80082a4:	4613      	mov	r3, r2
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	b10a      	cbz	r2, 80082ae <_free_r+0x52>
 80082aa:	42a2      	cmp	r2, r4
 80082ac:	d9fa      	bls.n	80082a4 <_free_r+0x48>
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	1858      	adds	r0, r3, r1
 80082b2:	42a0      	cmp	r0, r4
 80082b4:	d10b      	bne.n	80082ce <_free_r+0x72>
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	4401      	add	r1, r0
 80082ba:	1858      	adds	r0, r3, r1
 80082bc:	4282      	cmp	r2, r0
 80082be:	6019      	str	r1, [r3, #0]
 80082c0:	d1de      	bne.n	8008280 <_free_r+0x24>
 80082c2:	6810      	ldr	r0, [r2, #0]
 80082c4:	6852      	ldr	r2, [r2, #4]
 80082c6:	4401      	add	r1, r0
 80082c8:	6019      	str	r1, [r3, #0]
 80082ca:	605a      	str	r2, [r3, #4]
 80082cc:	e7d8      	b.n	8008280 <_free_r+0x24>
 80082ce:	d902      	bls.n	80082d6 <_free_r+0x7a>
 80082d0:	230c      	movs	r3, #12
 80082d2:	602b      	str	r3, [r5, #0]
 80082d4:	e7d4      	b.n	8008280 <_free_r+0x24>
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	1821      	adds	r1, r4, r0
 80082da:	428a      	cmp	r2, r1
 80082dc:	bf01      	itttt	eq
 80082de:	6811      	ldreq	r1, [r2, #0]
 80082e0:	6852      	ldreq	r2, [r2, #4]
 80082e2:	1809      	addeq	r1, r1, r0
 80082e4:	6021      	streq	r1, [r4, #0]
 80082e6:	6062      	str	r2, [r4, #4]
 80082e8:	605c      	str	r4, [r3, #4]
 80082ea:	e7c9      	b.n	8008280 <_free_r+0x24>
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	200001bc 	.word	0x200001bc

080082f4 <_malloc_r>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	1ccd      	adds	r5, r1, #3
 80082f8:	f025 0503 	bic.w	r5, r5, #3
 80082fc:	3508      	adds	r5, #8
 80082fe:	2d0c      	cmp	r5, #12
 8008300:	bf38      	it	cc
 8008302:	250c      	movcc	r5, #12
 8008304:	2d00      	cmp	r5, #0
 8008306:	4606      	mov	r6, r0
 8008308:	db01      	blt.n	800830e <_malloc_r+0x1a>
 800830a:	42a9      	cmp	r1, r5
 800830c:	d903      	bls.n	8008316 <_malloc_r+0x22>
 800830e:	230c      	movs	r3, #12
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	2000      	movs	r0, #0
 8008314:	bd70      	pop	{r4, r5, r6, pc}
 8008316:	f000 f89f 	bl	8008458 <__malloc_lock>
 800831a:	4a23      	ldr	r2, [pc, #140]	; (80083a8 <_malloc_r+0xb4>)
 800831c:	6814      	ldr	r4, [r2, #0]
 800831e:	4621      	mov	r1, r4
 8008320:	b991      	cbnz	r1, 8008348 <_malloc_r+0x54>
 8008322:	4c22      	ldr	r4, [pc, #136]	; (80083ac <_malloc_r+0xb8>)
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	b91b      	cbnz	r3, 8008330 <_malloc_r+0x3c>
 8008328:	4630      	mov	r0, r6
 800832a:	f000 f841 	bl	80083b0 <_sbrk_r>
 800832e:	6020      	str	r0, [r4, #0]
 8008330:	4629      	mov	r1, r5
 8008332:	4630      	mov	r0, r6
 8008334:	f000 f83c 	bl	80083b0 <_sbrk_r>
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	d126      	bne.n	800838a <_malloc_r+0x96>
 800833c:	230c      	movs	r3, #12
 800833e:	4630      	mov	r0, r6
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	f000 f88a 	bl	800845a <__malloc_unlock>
 8008346:	e7e4      	b.n	8008312 <_malloc_r+0x1e>
 8008348:	680b      	ldr	r3, [r1, #0]
 800834a:	1b5b      	subs	r3, r3, r5
 800834c:	d41a      	bmi.n	8008384 <_malloc_r+0x90>
 800834e:	2b0b      	cmp	r3, #11
 8008350:	d90f      	bls.n	8008372 <_malloc_r+0x7e>
 8008352:	600b      	str	r3, [r1, #0]
 8008354:	18cc      	adds	r4, r1, r3
 8008356:	50cd      	str	r5, [r1, r3]
 8008358:	4630      	mov	r0, r6
 800835a:	f000 f87e 	bl	800845a <__malloc_unlock>
 800835e:	f104 000b 	add.w	r0, r4, #11
 8008362:	1d23      	adds	r3, r4, #4
 8008364:	f020 0007 	bic.w	r0, r0, #7
 8008368:	1ac3      	subs	r3, r0, r3
 800836a:	d01b      	beq.n	80083a4 <_malloc_r+0xb0>
 800836c:	425a      	negs	r2, r3
 800836e:	50e2      	str	r2, [r4, r3]
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	428c      	cmp	r4, r1
 8008374:	bf0b      	itete	eq
 8008376:	6863      	ldreq	r3, [r4, #4]
 8008378:	684b      	ldrne	r3, [r1, #4]
 800837a:	6013      	streq	r3, [r2, #0]
 800837c:	6063      	strne	r3, [r4, #4]
 800837e:	bf18      	it	ne
 8008380:	460c      	movne	r4, r1
 8008382:	e7e9      	b.n	8008358 <_malloc_r+0x64>
 8008384:	460c      	mov	r4, r1
 8008386:	6849      	ldr	r1, [r1, #4]
 8008388:	e7ca      	b.n	8008320 <_malloc_r+0x2c>
 800838a:	1cc4      	adds	r4, r0, #3
 800838c:	f024 0403 	bic.w	r4, r4, #3
 8008390:	42a0      	cmp	r0, r4
 8008392:	d005      	beq.n	80083a0 <_malloc_r+0xac>
 8008394:	1a21      	subs	r1, r4, r0
 8008396:	4630      	mov	r0, r6
 8008398:	f000 f80a 	bl	80083b0 <_sbrk_r>
 800839c:	3001      	adds	r0, #1
 800839e:	d0cd      	beq.n	800833c <_malloc_r+0x48>
 80083a0:	6025      	str	r5, [r4, #0]
 80083a2:	e7d9      	b.n	8008358 <_malloc_r+0x64>
 80083a4:	bd70      	pop	{r4, r5, r6, pc}
 80083a6:	bf00      	nop
 80083a8:	200001bc 	.word	0x200001bc
 80083ac:	200001c0 	.word	0x200001c0

080083b0 <_sbrk_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4c05      	ldr	r4, [pc, #20]	; (80083cc <_sbrk_r+0x1c>)
 80083b6:	4605      	mov	r5, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	f7fb ff14 	bl	80041e8 <_sbrk>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_sbrk_r+0x1a>
 80083c4:	6823      	ldr	r3, [r4, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_sbrk_r+0x1a>
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	200002e8 	.word	0x200002e8

080083d0 <_raise_r>:
 80083d0:	291f      	cmp	r1, #31
 80083d2:	b538      	push	{r3, r4, r5, lr}
 80083d4:	4604      	mov	r4, r0
 80083d6:	460d      	mov	r5, r1
 80083d8:	d904      	bls.n	80083e4 <_raise_r+0x14>
 80083da:	2316      	movs	r3, #22
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 30ff 	mov.w	r0, #4294967295
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80083e6:	b112      	cbz	r2, 80083ee <_raise_r+0x1e>
 80083e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80083ec:	b94b      	cbnz	r3, 8008402 <_raise_r+0x32>
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 f830 	bl	8008454 <_getpid_r>
 80083f4:	462a      	mov	r2, r5
 80083f6:	4601      	mov	r1, r0
 80083f8:	4620      	mov	r0, r4
 80083fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083fe:	f000 b817 	b.w	8008430 <_kill_r>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d00a      	beq.n	800841c <_raise_r+0x4c>
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	d103      	bne.n	8008412 <_raise_r+0x42>
 800840a:	2316      	movs	r3, #22
 800840c:	6003      	str	r3, [r0, #0]
 800840e:	2001      	movs	r0, #1
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	2400      	movs	r4, #0
 8008414:	4628      	mov	r0, r5
 8008416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800841a:	4798      	blx	r3
 800841c:	2000      	movs	r0, #0
 800841e:	bd38      	pop	{r3, r4, r5, pc}

08008420 <raise>:
 8008420:	4b02      	ldr	r3, [pc, #8]	; (800842c <raise+0xc>)
 8008422:	4601      	mov	r1, r0
 8008424:	6818      	ldr	r0, [r3, #0]
 8008426:	f7ff bfd3 	b.w	80083d0 <_raise_r>
 800842a:	bf00      	nop
 800842c:	20000020 	.word	0x20000020

08008430 <_kill_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4c06      	ldr	r4, [pc, #24]	; (8008450 <_kill_r+0x20>)
 8008436:	4605      	mov	r5, r0
 8008438:	4608      	mov	r0, r1
 800843a:	4611      	mov	r1, r2
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	f7fb fec5 	bl	80041cc <_kill>
 8008442:	1c43      	adds	r3, r0, #1
 8008444:	d102      	bne.n	800844c <_kill_r+0x1c>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	b103      	cbz	r3, 800844c <_kill_r+0x1c>
 800844a:	602b      	str	r3, [r5, #0]
 800844c:	bd38      	pop	{r3, r4, r5, pc}
 800844e:	bf00      	nop
 8008450:	200002e8 	.word	0x200002e8

08008454 <_getpid_r>:
 8008454:	f7fb beb8 	b.w	80041c8 <_getpid>

08008458 <__malloc_lock>:
 8008458:	4770      	bx	lr

0800845a <__malloc_unlock>:
 800845a:	4770      	bx	lr

0800845c <memcpy>:
 800845c:	b510      	push	{r4, lr}
 800845e:	1e43      	subs	r3, r0, #1
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	d100      	bne.n	8008468 <memcpy+0xc>
 8008466:	bd10      	pop	{r4, pc}
 8008468:	f811 4b01 	ldrb.w	r4, [r1], #1
 800846c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008470:	e7f7      	b.n	8008462 <memcpy+0x6>
	...

08008474 <_init>:
 8008474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008476:	bf00      	nop
 8008478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800847a:	bc08      	pop	{r3}
 800847c:	469e      	mov	lr, r3
 800847e:	4770      	bx	lr

08008480 <_fini>:
 8008480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008482:	bf00      	nop
 8008484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008486:	bc08      	pop	{r3}
 8008488:	469e      	mov	lr, r3
 800848a:	4770      	bx	lr
