
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000176c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001878  08001878  00011878  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080018a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  2000000c  080018ac  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000c4  080018ac  000200c4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c463  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ea0  00000000  00000000  0002c498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006288  00000000  00000000  0002e338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000858  00000000  00000000  000345c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa0  00000000  00000000  00034e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ce8  00000000  00000000  000358b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000346c  00000000  00000000  0003a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003da0c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018ac  00000000  00000000  0003da88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001860 	.word	0x08001860

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001860 	.word	0x08001860

0800014c <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800014c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8000150:	480e      	ldr	r0, [pc, #56]	; (800018c <MX_CAN_Init+0x40>)
{
 8000152:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8000154:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000158:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800015a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000160:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8000162:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8000166:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000168:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 800016a:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800016c:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800016e:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000170:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000172:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000174:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000176:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000178:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800017a:	f000 fa43 	bl	8000604 <HAL_CAN_Init>
 800017e:	b118      	cbz	r0, 8000188 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8000180:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000184:	f000 b950 	b.w	8000428 <Error_Handler>
 8000188:	bd08      	pop	{r3, pc}
 800018a:	bf00      	nop
 800018c:	20000028 	.word	0x20000028
 8000190:	40006400 	.word	0x40006400

08000194 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000194:	b510      	push	{r4, lr}
 8000196:	4604      	mov	r4, r0
 8000198:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019a:	2210      	movs	r2, #16
 800019c:	2100      	movs	r1, #0
 800019e:	a802      	add	r0, sp, #8
 80001a0:	f001 fb56 	bl	8001850 <memset>
  if(canHandle->Instance==CAN1)
 80001a4:	6822      	ldr	r2, [r4, #0]
 80001a6:	4b21      	ldr	r3, [pc, #132]	; (800022c <HAL_CAN_MspInit+0x98>)
 80001a8:	429a      	cmp	r2, r3
 80001aa:	d13d      	bne.n	8000228 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001ac:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80001b0:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80001b2:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001b4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80001b8:	61da      	str	r2, [r3, #28]
 80001ba:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80001bc:	481c      	ldr	r0, [pc, #112]	; (8000230 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80001be:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80001c2:	9200      	str	r2, [sp, #0]
 80001c4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c6:	699a      	ldr	r2, [r3, #24]
 80001c8:	f042 0204 	orr.w	r2, r2, #4
 80001cc:	619a      	str	r2, [r3, #24]
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	f003 0304 	and.w	r3, r3, #4
 80001d4:	9301      	str	r3, [sp, #4]
 80001d6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80001d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80001dc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80001de:	f000 fd1f 	bl	8000c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80001e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80001e8:	2302      	movs	r3, #2
 80001ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001ec:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80001ee:	a902      	add	r1, sp, #8
 80001f0:	480f      	ldr	r0, [pc, #60]	; (8000230 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80001f4:	f000 fd14 	bl	8000c20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2013      	movs	r0, #19
 80001fc:	4611      	mov	r1, r2
 80001fe:	f000 fcb7 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000202:	2013      	movs	r0, #19
 8000204:	f000 fce8 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2014      	movs	r0, #20
 800020c:	4611      	mov	r1, r2
 800020e:	f000 fcaf 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000212:	2014      	movs	r0, #20
 8000214:	f000 fce0 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000218:	2200      	movs	r2, #0
 800021a:	2015      	movs	r0, #21
 800021c:	4611      	mov	r1, r2
 800021e:	f000 fca7 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000222:	2015      	movs	r0, #21
 8000224:	f000 fcd8 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000228:	b006      	add	sp, #24
 800022a:	bd10      	pop	{r4, pc}
 800022c:	40006400 	.word	0x40006400
 8000230:	40010800 	.word	0x40010800

08000234 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8000234:	2300      	movs	r3, #0
 8000236:	4908      	ldr	r1, [pc, #32]	; (8000258 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000238:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 800023a:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800023c:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 800023e:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 8000240:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8000242:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8000244:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000246:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8000248:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800024c:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 800024e:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 8000250:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8000252:	f000 ba52 	b.w	80006fa <HAL_CAN_ConfigFilter>
 8000256:	bf00      	nop
 8000258:	20000050 	.word	0x20000050
 800025c:	20000028 	.word	0x20000028

08000260 <HAL_CAN_RxFifo0MsgPendingCallback>:

	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 8000260:	b500      	push	{lr}
 8000262:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 8000264:	ab08      	add	r3, sp, #32
 8000266:	466a      	mov	r2, sp
 8000268:	2100      	movs	r1, #0
 800026a:	f000 fadd 	bl	8000828 <HAL_CAN_GetRxMessage>
			&hal_message.header,
			hal_message.data );


	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800026e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8000274:	f000 fdbb 	bl	8000dee <HAL_GPIO_TogglePin>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 8000278:	b00b      	add	sp, #44	; 0x2c
 800027a:	f85d fb04 	ldr.w	pc, [sp], #4
 800027e:	bf00      	nop
 8000280:	40011000 	.word	0x40011000

08000284 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	2210      	movs	r2, #16
{
 8000286:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800028a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028c:	eb0d 0002 	add.w	r0, sp, r2
 8000290:	2100      	movs	r1, #0
 8000292:	f001 fadd 	bl	8001850 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000296:	4b3c      	ldr	r3, [pc, #240]	; (8000388 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000298:	4f3c      	ldr	r7, [pc, #240]	; (800038c <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 800029c:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029e:	f042 0210 	orr.w	r2, r2, #16
 80002a2:	619a      	str	r2, [r3, #24]
 80002a4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80002a6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002aa:	f002 0210 	and.w	r2, r2, #16
 80002ae:	9200      	str	r2, [sp, #0]
 80002b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b2:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80002b4:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b6:	f042 0220 	orr.w	r2, r2, #32
 80002ba:	619a      	str	r2, [r3, #24]
 80002bc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002be:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c0:	f002 0220 	and.w	r2, r2, #32
 80002c4:	9201      	str	r2, [sp, #4]
 80002c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ca:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	f042 0204 	orr.w	r2, r2, #4
 80002d0:	619a      	str	r2, [r3, #24]
 80002d2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 80002d4:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	f002 0204 	and.w	r2, r2, #4
 80002dc:	9202      	str	r2, [sp, #8]
 80002de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002e2:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80003a0 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e6:	f042 0208 	orr.w	r2, r2, #8
 80002ea:	619a      	str	r2, [r3, #24]
 80002ec:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	9303      	str	r3, [sp, #12]
 80002f6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80002f8:	f000 fd74 	bl	8000de4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 80002fc:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000300:	a904      	add	r1, sp, #16
 8000302:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8000304:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000306:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000308:	f000 fc8a 	bl	8000c20 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800030c:	a904      	add	r1, sp, #16
 800030e:	4820      	ldr	r0, [pc, #128]	; (8000390 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000310:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000312:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000314:	f000 fc84 	bl	8000c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000318:	f248 73fd 	movw	r3, #34813	; 0x87fd
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800031c:	a904      	add	r1, sp, #16
 800031e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8000320:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000322:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	f000 fc7c 	bl	8000c20 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032a:	a904      	add	r1, sp, #16
 800032c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800032e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8000330:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000336:	f000 fc73 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800033a:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800033e:	a904      	add	r1, sp, #16
 8000340:	4815      	ldr	r0, [pc, #84]	; (8000398 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8000342:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000344:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000346:	f000 fc6b 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 800034a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800034e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000350:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000352:	a904      	add	r1, sp, #16
 8000354:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f000 fc5f 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000362:	4a0e      	ldr	r2, [pc, #56]	; (800039c <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000364:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8000366:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000368:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800036a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800036e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000372:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000374:	4632      	mov	r2, r6
 8000376:	f000 fbfb 	bl	8000b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800037a:	4628      	mov	r0, r5
 800037c:	f000 fc2c 	bl	8000bd8 <HAL_NVIC_EnableIRQ>

}
 8000380:	b009      	add	sp, #36	; 0x24
 8000382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	40011000 	.word	0x40011000
 8000390:	40011400 	.word	0x40011400
 8000394:	10110000 	.word	0x10110000
 8000398:	40010c00 	.word	0x40010c00
 800039c:	40010000 	.word	0x40010000
 80003a0:	40010800 	.word	0x40010800

080003a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a4:	b500      	push	{lr}
 80003a6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a8:	2228      	movs	r2, #40	; 0x28
 80003aa:	2100      	movs	r1, #0
 80003ac:	a806      	add	r0, sp, #24
 80003ae:	f001 fa4f 	bl	8001850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b2:	2214      	movs	r2, #20
 80003b4:	2100      	movs	r1, #0
 80003b6:	a801      	add	r0, sp, #4
 80003b8:	f001 fa4a 	bl	8001850 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003bc:	2302      	movs	r3, #2
 80003be:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c0:	2301      	movs	r3, #1
 80003c2:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003c6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c8:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ca:	f000 fd27 	bl	8000e1c <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ce:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003d4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003d6:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d8:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003da:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003de:	f000 fef7 	bl	80011d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80003e2:	b011      	add	sp, #68	; 0x44
 80003e4:	f85d fb04 	ldr.w	pc, [sp], #4

080003e8 <main>:
{
 80003e8:	b508      	push	{r3, lr}
  HAL_Init();
 80003ea:	f000 f8e7 	bl	80005bc <HAL_Init>
  SystemClock_Config();
 80003ee:	f7ff ffd9 	bl	80003a4 <SystemClock_Config>
  MX_GPIO_Init();
 80003f2:	f7ff ff47 	bl	8000284 <MX_GPIO_Init>
  MX_CAN_Init();
 80003f6:	f7ff fea9 	bl	800014c <MX_CAN_Init>
  MX_TIM3_Init();
 80003fa:	f000 f859 	bl	80004b0 <MX_TIM3_Init>
  hal_can_filter_init();
 80003fe:	f7ff ff19 	bl	8000234 <hal_can_filter_init>
  HAL_CAN_Start(&hcan);
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <main+0x3c>)
 8000404:	f000 f9e5 	bl	80007d2 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 8000408:	2102      	movs	r1, #2
 800040a:	4806      	ldr	r0, [pc, #24]	; (8000424 <main+0x3c>)
 800040c:	f000 fa82 	bl	8000914 <HAL_CAN_ActivateNotification>
 8000410:	b938      	cbnz	r0, 8000422 <main+0x3a>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000412:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041a:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 800041e:	f000 fce6 	bl	8000dee <HAL_GPIO_TogglePin>
 8000422:	e7fe      	b.n	8000422 <main+0x3a>
 8000424:	20000028 	.word	0x20000028

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	4770      	bx	lr
	...

0800042c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042c:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_MspInit+0x3c>)
{
 800042e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000430:	699a      	ldr	r2, [r3, #24]
 8000432:	f042 0201 	orr.w	r2, r2, #1
 8000436:	619a      	str	r2, [r3, #24]
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	f002 0201 	and.w	r2, r2, #1
 800043e:	9200      	str	r2, [sp, #0]
 8000440:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	69da      	ldr	r2, [r3, #28]
 8000444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000448:	61da      	str	r2, [r3, #28]
 800044a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	9301      	str	r3, [sp, #4]
 8000454:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000456:	6853      	ldr	r3, [r2, #4]
 8000458:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000460:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000462:	b002      	add	sp, #8
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	40010000 	.word	0x40010000

08000470 <NMI_Handler>:
 8000470:	4770      	bx	lr

08000472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000472:	e7fe      	b.n	8000472 <HardFault_Handler>

08000474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000474:	e7fe      	b.n	8000474 <MemManage_Handler>

08000476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	e7fe      	b.n	8000478 <UsageFault_Handler>

0800047a <SVC_Handler>:
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:
 800047c:	4770      	bx	lr

0800047e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047e:	4770      	bx	lr

08000480 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 b8ae 	b.w	80005e0 <HAL_IncTick>

08000484 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000484:	2002      	movs	r0, #2
 8000486:	f000 bcbd 	b.w	8000e04 <HAL_GPIO_EXTI_IRQHandler>
	...

0800048c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800048c:	4801      	ldr	r0, [pc, #4]	; (8000494 <CAN1_RX1_IRQHandler+0x8>)
 800048e:	f000 ba5e 	b.w	800094e <HAL_CAN_IRQHandler>
 8000492:	bf00      	nop
 8000494:	20000028 	.word	0x20000028

08000498 <USB_LP_CAN1_RX0_IRQHandler>:
 8000498:	f7ff bff8 	b.w	800048c <CAN1_RX1_IRQHandler>

0800049c <USB_HP_CAN1_TX_IRQHandler>:
 800049c:	f7ff bff6 	b.w	800048c <CAN1_RX1_IRQHandler>

080004a0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80004a0:	4801      	ldr	r0, [pc, #4]	; (80004a8 <TIM3_IRQHandler+0x8>)
 80004a2:	f000 bf38 	b.w	8001316 <HAL_TIM_IRQHandler>
 80004a6:	bf00      	nop
 80004a8:	20000078 	.word	0x20000078

080004ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ac:	4770      	bx	lr
	...

080004b0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80004b0:	b510      	push	{r4, lr}
 80004b2:	b08c      	sub	sp, #48	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b4:	2210      	movs	r2, #16
 80004b6:	2100      	movs	r1, #0
 80004b8:	a803      	add	r0, sp, #12
 80004ba:	f001 f9c9 	bl	8001850 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004be:	2214      	movs	r2, #20
 80004c0:	2100      	movs	r1, #0
 80004c2:	a807      	add	r0, sp, #28
 80004c4:	f001 f9c4 	bl	8001850 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 64;
 80004ca:	2240      	movs	r2, #64	; 0x40
  htim3.Instance = TIM3;
 80004cc:	4818      	ldr	r0, [pc, #96]	; (8000530 <MX_TIM3_Init+0x80>)
  htim3.Init.Prescaler = 64;
 80004ce:	4919      	ldr	r1, [pc, #100]	; (8000534 <MX_TIM3_Init+0x84>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	9302      	str	r3, [sp, #8]
  htim3.Init.Prescaler = 64;
 80004d4:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80004da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004de:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e0:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80004e2:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004e6:	f000 fff1 	bl	80014cc <HAL_TIM_Base_Init>
 80004ea:	b108      	cbz	r0, 80004f0 <MX_TIM3_Init+0x40>
  {
    Error_Handler();
 80004ec:	f7ff ff9c 	bl	8000428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004f4:	a903      	add	r1, sp, #12
 80004f6:	480e      	ldr	r0, [pc, #56]	; (8000530 <MX_TIM3_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004f8:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004fa:	f001 f81d 	bl	8001538 <HAL_TIM_ConfigClockSource>
 80004fe:	b108      	cbz	r0, 8000504 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000500:	f7ff ff92 	bl	8000428 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000504:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000506:	a907      	add	r1, sp, #28
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <MX_TIM3_Init+0x80>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800050a:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800050c:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800050e:	f001 f8f9 	bl	8001704 <HAL_TIM_SlaveConfigSynchro>
 8000512:	b108      	cbz	r0, 8000518 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000514:	f7ff ff88 	bl	8000428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000518:	a901      	add	r1, sp, #4
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_TIM3_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051c:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000520:	f001 f918 	bl	8001754 <HAL_TIMEx_MasterConfigSynchronization>
 8000524:	b108      	cbz	r0, 800052a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000526:	f7ff ff7f 	bl	8000428 <Error_Handler>
  }

}
 800052a:	b00c      	add	sp, #48	; 0x30
 800052c:	bd10      	pop	{r4, pc}
 800052e:	bf00      	nop
 8000530:	20000078 	.word	0x20000078
 8000534:	40000400 	.word	0x40000400

08000538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000538:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_TIM_Base_MspInit+0x38>)
 800053c:	6802      	ldr	r2, [r0, #0]
 800053e:	429a      	cmp	r2, r3
 8000540:	d112      	bne.n	8000568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000542:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8000546:	69da      	ldr	r2, [r3, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000548:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800054a:	f042 0202 	orr.w	r2, r2, #2
 800054e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000552:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000554:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800055e:	f000 fb07 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000562:	201d      	movs	r0, #29
 8000564:	f000 fb38 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000568:	b003      	add	sp, #12
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
 800056e:	bf00      	nop
 8000570:	40000400 	.word	0x40000400

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_InitTick+0x3c>)
{
 8000578:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800057a:	7818      	ldrb	r0, [r3, #0]
 800057c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000580:	fbb3 f3f0 	udiv	r3, r3, r0
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <HAL_InitTick+0x40>)
 8000586:	6810      	ldr	r0, [r2, #0]
 8000588:	fbb0 f0f3 	udiv	r0, r0, r3
 800058c:	f000 fb32 	bl	8000bf4 <HAL_SYSTICK_Config>
 8000590:	4604      	mov	r4, r0
 8000592:	b958      	cbnz	r0, 80005ac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000594:	2d0f      	cmp	r5, #15
 8000596:	d809      	bhi.n	80005ac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000598:	4602      	mov	r2, r0
 800059a:	4629      	mov	r1, r5
 800059c:	f04f 30ff 	mov.w	r0, #4294967295
 80005a0:	f000 fae6 	bl	8000b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a4:	4b04      	ldr	r3, [pc, #16]	; (80005b8 <HAL_InitTick+0x44>)
 80005a6:	4620      	mov	r0, r4
 80005a8:	601d      	str	r5, [r3, #0]
 80005aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005ac:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005ae:	bd38      	pop	{r3, r4, r5, pc}
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000
 80005b8:	20000008 	.word	0x20000008

080005bc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005bc:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_Init+0x20>)
{
 80005be:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ca:	f000 fabf 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ffd0 	bl	8000574 <HAL_InitTick>
  HAL_MspInit();
 80005d4:	f7ff ff2a 	bl	800042c <HAL_MspInit>
}
 80005d8:	2000      	movs	r0, #0
 80005da:	bd08      	pop	{r3, pc}
 80005dc:	40022000 	.word	0x40022000

080005e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <HAL_IncTick+0x10>)
 80005e2:	4b04      	ldr	r3, [pc, #16]	; (80005f4 <HAL_IncTick+0x14>)
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	440b      	add	r3, r1
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	200000c0 	.word	0x200000c0
 80005f4:	20000004 	.word	0x20000004

080005f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <HAL_GetTick+0x8>)
 80005fa:	6818      	ldr	r0, [r3, #0]
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	200000c0 	.word	0x200000c0

08000604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000604:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000606:	4604      	mov	r4, r0
 8000608:	2800      	cmp	r0, #0
 800060a:	d06e      	beq.n	80006ea <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800060c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000610:	b90b      	cbnz	r3, 8000616 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000612:	f7ff fdbf 	bl	8000194 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f023 0302 	bic.w	r3, r3, #2
 800061e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000620:	f7ff ffea 	bl	80005f8 <HAL_GetTick>
 8000624:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	0791      	lsls	r1, r2, #30
 800062c:	d451      	bmi.n	80006d2 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	f042 0201 	orr.w	r2, r2, #1
 8000634:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000636:	f7ff ffdf 	bl	80005f8 <HAL_GetTick>
 800063a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800063c:	6823      	ldr	r3, [r4, #0]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	07d2      	lsls	r2, r2, #31
 8000642:	d554      	bpl.n	80006ee <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000644:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000646:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000648:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	bf0c      	ite	eq
 800064e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000652:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000656:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000658:	7e62      	ldrb	r2, [r4, #25]
 800065a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	bf0c      	ite	eq
 8000660:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000664:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000668:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800066a:	7ea2      	ldrb	r2, [r4, #26]
 800066c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	bf0c      	ite	eq
 8000672:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000676:	f022 0220 	bicne.w	r2, r2, #32
 800067a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800067c:	7ee2      	ldrb	r2, [r4, #27]
 800067e:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	bf0c      	ite	eq
 8000684:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000688:	f042 0210 	orrne.w	r2, r2, #16
 800068c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800068e:	7f22      	ldrb	r2, [r4, #28]
 8000690:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	bf0c      	ite	eq
 8000696:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800069a:	f022 0208 	bicne.w	r2, r2, #8
 800069e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80006a0:	7f62      	ldrb	r2, [r4, #29]
 80006a2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	bf0c      	ite	eq
 80006a8:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80006ac:	f022 0204 	bicne.w	r2, r2, #4
 80006b0:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80006b2:	68e1      	ldr	r1, [r4, #12]
 80006b4:	68a2      	ldr	r2, [r4, #8]
 80006b6:	430a      	orrs	r2, r1
 80006b8:	6921      	ldr	r1, [r4, #16]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	6961      	ldr	r1, [r4, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	6861      	ldr	r1, [r4, #4]
 80006c2:	3901      	subs	r1, #1
 80006c4:	430a      	orrs	r2, r1
 80006c6:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80006c8:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80006ca:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80006cc:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80006d0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006d2:	f7ff ff91 	bl	80005f8 <HAL_GetTick>
 80006d6:	1b40      	subs	r0, r0, r5
 80006d8:	280a      	cmp	r0, #10
 80006da:	d9a4      	bls.n	8000626 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e2:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80006e4:	2305      	movs	r3, #5
 80006e6:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80006ea:	2001      	movs	r0, #1
}
 80006ec:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006ee:	f7ff ff83 	bl	80005f8 <HAL_GetTick>
 80006f2:	1b40      	subs	r0, r0, r5
 80006f4:	280a      	cmp	r0, #10
 80006f6:	d9a1      	bls.n	800063c <HAL_CAN_Init+0x38>
 80006f8:	e7f0      	b.n	80006dc <HAL_CAN_Init+0xd8>

080006fa <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 80006fa:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80006fe:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8000700:	3b01      	subs	r3, #1
 8000702:	2b01      	cmp	r3, #1
 8000704:	d85f      	bhi.n	80007c6 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000706:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000708:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800070a:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800070c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000710:	f042 0201 	orr.w	r2, r2, #1
 8000714:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000718:	f000 021f 	and.w	r2, r0, #31
 800071c:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000720:	43d4      	mvns	r4, r2
 8000722:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000726:	4025      	ands	r5, r4
 8000728:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800072c:	69cd      	ldr	r5, [r1, #28]
 800072e:	bb85      	cbnz	r5, 8000792 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000730:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000734:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000736:	4025      	ands	r5, r4
 8000738:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800073c:	888d      	ldrh	r5, [r1, #4]
 800073e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000742:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000746:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800074a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800074c:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800074e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000752:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000756:	6988      	ldr	r0, [r1, #24]
 8000758:	bb68      	cbnz	r0, 80007b6 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800075a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 800075e:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000760:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000764:	6908      	ldr	r0, [r1, #16]
 8000766:	bb50      	cbnz	r0, 80007be <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000768:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800076c:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800076e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000772:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000774:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000776:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000778:	bf02      	ittt	eq
 800077a:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 800077e:	430a      	orreq	r2, r1
 8000780:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000784:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000788:	f022 0201 	bic.w	r2, r2, #1
 800078c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8000790:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000792:	2d01      	cmp	r5, #1
 8000794:	d1df      	bne.n	8000756 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000796:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800079a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800079c:	4315      	orrs	r5, r2
 800079e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80007a2:	888d      	ldrh	r5, [r1, #4]
 80007a4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80007a8:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80007ac:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80007b0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80007b2:	898d      	ldrh	r5, [r1, #12]
 80007b4:	e7cb      	b.n	800074e <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80007b6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80007ba:	4310      	orrs	r0, r2
 80007bc:	e7d0      	b.n	8000760 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80007be:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80007c2:	4310      	orrs	r0, r2
 80007c4:	e7d3      	b.n	800076e <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007cc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007ce:	2001      	movs	r0, #1
  }
}
 80007d0:	bd70      	pop	{r4, r5, r6, pc}

080007d2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80007d2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80007d4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80007d8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d11f      	bne.n	800081e <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80007de:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007e0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80007e2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007e6:	6813      	ldr	r3, [r2, #0]
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80007ee:	f7ff ff03 	bl	80005f8 <HAL_GetTick>
 80007f2:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	6858      	ldr	r0, [r3, #4]
 80007f8:	f010 0001 	ands.w	r0, r0, #1
 80007fc:	d101      	bne.n	8000802 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007fe:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000800:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000802:	f7ff fef9 	bl	80005f8 <HAL_GetTick>
 8000806:	1b40      	subs	r0, r0, r5
 8000808:	280a      	cmp	r0, #10
 800080a:	d9f3      	bls.n	80007f4 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800080c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800080e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000812:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000814:	2305      	movs	r3, #5
 8000816:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 800081a:	2001      	movs	r0, #1
  }
}
 800081c:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800081e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000824:	6243      	str	r3, [r0, #36]	; 0x24
 8000826:	e7f8      	b.n	800081a <HAL_CAN_Start+0x48>

08000828 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000828:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 800082a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800082e:	3c01      	subs	r4, #1
 8000830:	2c01      	cmp	r4, #1
 8000832:	d86b      	bhi.n	800090c <HAL_CAN_GetRxMessage+0xe4>
 8000834:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000836:	b941      	cbnz	r1, 800084a <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000838:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800083a:	07a4      	lsls	r4, r4, #30
 800083c:	d107      	bne.n	800084e <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800083e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000844:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000846:	2001      	movs	r0, #1
  }
}
 8000848:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800084a:	6934      	ldr	r4, [r6, #16]
 800084c:	e7f5      	b.n	800083a <HAL_CAN_GetRxMessage+0x12>
 800084e:	010c      	lsls	r4, r1, #4
 8000850:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000852:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000856:	f007 0704 	and.w	r7, r7, #4
 800085a:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800085c:	2f00      	cmp	r7, #0
 800085e:	d14b      	bne.n	80008f8 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000860:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000864:	0d7f      	lsrs	r7, r7, #21
 8000866:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000868:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800086c:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800086e:	f007 0702 	and.w	r7, r7, #2
 8000872:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000874:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000878:	f007 070f 	and.w	r7, r7, #15
 800087c:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800087e:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000882:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000886:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800088a:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800088c:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800088e:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000890:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000894:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000896:	6802      	ldr	r2, [r0, #0]
 8000898:	4422      	add	r2, r4
 800089a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800089e:	0a12      	lsrs	r2, r2, #8
 80008a0:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80008a2:	6802      	ldr	r2, [r0, #0]
 80008a4:	4422      	add	r2, r4
 80008a6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008aa:	0c12      	lsrs	r2, r2, #16
 80008ac:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80008ae:	6802      	ldr	r2, [r0, #0]
 80008b0:	4422      	add	r2, r4
 80008b2:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 80008b6:	0e12      	lsrs	r2, r2, #24
 80008b8:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80008ba:	6802      	ldr	r2, [r0, #0]
 80008bc:	4422      	add	r2, r4
 80008be:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008c2:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80008c4:	6802      	ldr	r2, [r0, #0]
 80008c6:	4422      	add	r2, r4
 80008c8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008cc:	0a12      	lsrs	r2, r2, #8
 80008ce:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80008d0:	6802      	ldr	r2, [r0, #0]
 80008d2:	4422      	add	r2, r4
 80008d4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80008d8:	0c12      	lsrs	r2, r2, #16
 80008da:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80008dc:	6802      	ldr	r2, [r0, #0]
 80008de:	4414      	add	r4, r2
 80008e0:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80008e4:	0e12      	lsrs	r2, r2, #24
 80008e6:	71da      	strb	r2, [r3, #7]
 80008e8:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008ea:	b951      	cbnz	r1, 8000902 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	f042 0220 	orr.w	r2, r2, #32
 80008f2:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80008f4:	2000      	movs	r0, #0
 80008f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80008f8:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80008fc:	08ff      	lsrs	r7, r7, #3
 80008fe:	6057      	str	r7, [r2, #4]
 8000900:	e7b2      	b.n	8000868 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	f042 0220 	orr.w	r2, r2, #32
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	e7f3      	b.n	80008f4 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800090c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800090e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000912:	e797      	b.n	8000844 <HAL_CAN_GetRxMessage+0x1c>

08000914 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000914:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000918:	3b01      	subs	r3, #1
 800091a:	2b01      	cmp	r3, #1
 800091c:	d805      	bhi.n	800092a <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800091e:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8000920:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000922:	6953      	ldr	r3, [r2, #20]
 8000924:	4319      	orrs	r1, r3
 8000926:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000928:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800092a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
  }
}
 8000934:	4770      	bx	lr

08000936 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000936:	4770      	bx	lr

08000938 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000938:	4770      	bx	lr

0800093a <HAL_CAN_TxMailbox2CompleteCallback>:
 800093a:	4770      	bx	lr

0800093c <HAL_CAN_TxMailbox0AbortCallback>:
 800093c:	4770      	bx	lr

0800093e <HAL_CAN_TxMailbox1AbortCallback>:
 800093e:	4770      	bx	lr

08000940 <HAL_CAN_TxMailbox2AbortCallback>:
 8000940:	4770      	bx	lr

08000942 <HAL_CAN_RxFifo0FullCallback>:
 8000942:	4770      	bx	lr

08000944 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000944:	4770      	bx	lr

08000946 <HAL_CAN_RxFifo1FullCallback>:
 8000946:	4770      	bx	lr

08000948 <HAL_CAN_SleepCallback>:
 8000948:	4770      	bx	lr

0800094a <HAL_CAN_WakeUpFromRxMsgCallback>:
 800094a:	4770      	bx	lr

0800094c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800094c:	4770      	bx	lr

0800094e <HAL_CAN_IRQHandler>:
{
 800094e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000952:	6803      	ldr	r3, [r0, #0]
{
 8000954:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000956:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000958:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800095c:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000960:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000962:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000966:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800096a:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800096e:	d022      	beq.n	80009b6 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000970:	f017 0401 	ands.w	r4, r7, #1
 8000974:	d007      	beq.n	8000986 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000976:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000978:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800097a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800097c:	f140 80a3 	bpl.w	8000ac6 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000980:	f7ff ffd9 	bl	8000936 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000984:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000986:	05fb      	lsls	r3, r7, #23
 8000988:	d509      	bpl.n	800099e <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800098a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800098e:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000990:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000992:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000994:	f140 80a5 	bpl.w	8000ae2 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000998:	4628      	mov	r0, r5
 800099a:	f7ff ffcd 	bl	8000938 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800099e:	03fb      	lsls	r3, r7, #15
 80009a0:	d509      	bpl.n	80009b6 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a6:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009a8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009aa:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009ac:	f140 80a7 	bpl.w	8000afe <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80009b0:	4628      	mov	r0, r5
 80009b2:	f7ff ffc2 	bl	800093a <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80009b6:	0733      	lsls	r3, r6, #28
 80009b8:	d507      	bpl.n	80009ca <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80009ba:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009be:	bf1f      	itttt	ne
 80009c0:	2210      	movne	r2, #16
 80009c2:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80009c4:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80009c8:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80009ca:	0777      	lsls	r7, r6, #29
 80009cc:	d508      	bpl.n	80009e0 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80009ce:	f01b 0f08 	tst.w	fp, #8
 80009d2:	d005      	beq.n	80009e0 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009d4:	2208      	movs	r2, #8
 80009d6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009d8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80009da:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80009dc:	f7ff ffb1 	bl	8000942 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80009e0:	07b0      	lsls	r0, r6, #30
 80009e2:	d506      	bpl.n	80009f2 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80009e4:	682b      	ldr	r3, [r5, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0799      	lsls	r1, r3, #30
 80009ea:	d002      	beq.n	80009f2 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80009ec:	4628      	mov	r0, r5
 80009ee:	f7ff fc37 	bl	8000260 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80009f2:	0672      	lsls	r2, r6, #25
 80009f4:	d507      	bpl.n	8000a06 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80009f6:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009fa:	bf1f      	itttt	ne
 80009fc:	2210      	movne	r2, #16
 80009fe:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000a00:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000a04:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000a06:	06b3      	lsls	r3, r6, #26
 8000a08:	d508      	bpl.n	8000a1c <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000a0a:	f01a 0f08 	tst.w	sl, #8
 8000a0e:	d005      	beq.n	8000a1c <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a10:	2208      	movs	r2, #8
 8000a12:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a14:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000a16:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000a18:	f7ff ff95 	bl	8000946 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000a1c:	06f7      	lsls	r7, r6, #27
 8000a1e:	d506      	bpl.n	8000a2e <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000a20:	682b      	ldr	r3, [r5, #0]
 8000a22:	691b      	ldr	r3, [r3, #16]
 8000a24:	0798      	lsls	r0, r3, #30
 8000a26:	d002      	beq.n	8000a2e <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000a28:	4628      	mov	r0, r5
 8000a2a:	f7ff ff8b 	bl	8000944 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000a2e:	03b1      	lsls	r1, r6, #14
 8000a30:	d508      	bpl.n	8000a44 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000a32:	f019 0f10 	tst.w	r9, #16
 8000a36:	d005      	beq.n	8000a44 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a38:	2210      	movs	r2, #16
 8000a3a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8000a3c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a3e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000a40:	f7ff ff82 	bl	8000948 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a44:	03f2      	lsls	r2, r6, #15
 8000a46:	d508      	bpl.n	8000a5a <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a48:	f019 0f08 	tst.w	r9, #8
 8000a4c:	d005      	beq.n	8000a5a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a4e:	2208      	movs	r2, #8
 8000a50:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a52:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a54:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a56:	f7ff ff78 	bl	800094a <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a5a:	0433      	lsls	r3, r6, #16
 8000a5c:	d52a      	bpl.n	8000ab4 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a5e:	f019 0f04 	tst.w	r9, #4
 8000a62:	682a      	ldr	r2, [r5, #0]
 8000a64:	d024      	beq.n	8000ab0 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a66:	05f7      	lsls	r7, r6, #23
 8000a68:	d504      	bpl.n	8000a74 <HAL_CAN_IRQHandler+0x126>
 8000a6a:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a6e:	bf18      	it	ne
 8000a70:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a74:	05b0      	lsls	r0, r6, #22
 8000a76:	d504      	bpl.n	8000a82 <HAL_CAN_IRQHandler+0x134>
 8000a78:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a7c:	bf18      	it	ne
 8000a7e:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a82:	0571      	lsls	r1, r6, #21
 8000a84:	d504      	bpl.n	8000a90 <HAL_CAN_IRQHandler+0x142>
 8000a86:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000a8a:	bf18      	it	ne
 8000a8c:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a90:	0533      	lsls	r3, r6, #20
 8000a92:	d50d      	bpl.n	8000ab0 <HAL_CAN_IRQHandler+0x162>
 8000a94:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000a98:	d00a      	beq.n	8000ab0 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000a9a:	2b30      	cmp	r3, #48	; 0x30
 8000a9c:	d04c      	beq.n	8000b38 <HAL_CAN_IRQHandler+0x1ea>
 8000a9e:	d83c      	bhi.n	8000b1a <HAL_CAN_IRQHandler+0x1cc>
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d043      	beq.n	8000b2c <HAL_CAN_IRQHandler+0x1de>
 8000aa4:	2b20      	cmp	r3, #32
 8000aa6:	d044      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000aa8:	6993      	ldr	r3, [r2, #24]
 8000aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aae:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000ab4:	b12c      	cbz	r4, 8000ac2 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000ab8:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8000aba:	431c      	orrs	r4, r3
 8000abc:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000abe:	f7ff ff45 	bl	800094c <HAL_CAN_ErrorCallback>
 8000ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000ac6:	077a      	lsls	r2, r7, #29
 8000ac8:	d405      	bmi.n	8000ad6 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000aca:	f017 0408 	ands.w	r4, r7, #8
 8000ace:	d105      	bne.n	8000adc <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ad0:	f7ff ff34 	bl	800093c <HAL_CAN_TxMailbox0AbortCallback>
 8000ad4:	e757      	b.n	8000986 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ad6:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000ada:	e754      	b.n	8000986 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000adc:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000ae0:	e751      	b.n	8000986 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ae2:	0579      	lsls	r1, r7, #21
 8000ae4:	d502      	bpl.n	8000aec <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ae6:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000aea:	e758      	b.n	800099e <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000aec:	053a      	lsls	r2, r7, #20
 8000aee:	d502      	bpl.n	8000af6 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000af0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000af4:	e753      	b.n	800099e <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000af6:	4628      	mov	r0, r5
 8000af8:	f7ff ff21 	bl	800093e <HAL_CAN_TxMailbox1AbortCallback>
 8000afc:	e74f      	b.n	800099e <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000afe:	0379      	lsls	r1, r7, #13
 8000b00:	d502      	bpl.n	8000b08 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000b02:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000b06:	e756      	b.n	80009b6 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000b08:	033a      	lsls	r2, r7, #12
 8000b0a:	d502      	bpl.n	8000b12 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000b0c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000b10:	e751      	b.n	80009b6 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000b12:	4628      	mov	r0, r5
 8000b14:	f7ff ff14 	bl	8000940 <HAL_CAN_TxMailbox2AbortCallback>
 8000b18:	e74d      	b.n	80009b6 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000b1a:	2b50      	cmp	r3, #80	; 0x50
 8000b1c:	d00f      	beq.n	8000b3e <HAL_CAN_IRQHandler+0x1f0>
 8000b1e:	2b60      	cmp	r3, #96	; 0x60
 8000b20:	d010      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x1f6>
 8000b22:	2b40      	cmp	r3, #64	; 0x40
 8000b24:	d1c0      	bne.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000b26:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000b2a:	e7bd      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000b2c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000b30:	e7ba      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000b32:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000b36:	e7b7      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000b38:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000b3c:	e7b4      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b3e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000b42:	e7b1      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b44:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000b48:	e7ae      	b.n	8000aa8 <HAL_CAN_IRQHandler+0x15a>
	...

08000b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b4e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b5a:	041b      	lsls	r3, r3, #16
 8000b5c:	0c1b      	lsrs	r3, r3, #16
 8000b5e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b68:	60d3      	str	r3, [r2, #12]
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b72:	b530      	push	{r4, r5, lr}
 8000b74:	68dc      	ldr	r4, [r3, #12]
 8000b76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	bf28      	it	cs
 8000b84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8c:	bf98      	it	ls
 8000b8e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	fa05 f303 	lsl.w	r3, r5, r3
 8000b94:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b98:	bf88      	it	hi
 8000b9a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4019      	ands	r1, r3
 8000b9e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	fa05 f404 	lsl.w	r4, r5, r4
 8000ba4:	3c01      	subs	r4, #1
 8000ba6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000baa:	ea42 0201 	orr.w	r2, r2, r1
 8000bae:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	bfa9      	itett	ge
 8000bb4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	4b06      	ldrlt	r3, [pc, #24]	; (8000bd4 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	b2d2      	uxtbge	r2, r2
 8000bbc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	bfbb      	ittet	lt
 8000bc2:	f000 000f 	andlt.w	r0, r0, #15
 8000bc6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	541a      	strblt	r2, [r3, r0]
 8000bce:	bd30      	pop	{r4, r5, pc}
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000ed14 	.word	0xe000ed14

08000bd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	db08      	blt.n	8000bee <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bdc:	2301      	movs	r3, #1
 8000bde:	0942      	lsrs	r2, r0, #5
 8000be0:	f000 001f 	and.w	r0, r0, #31
 8000be4:	fa03 f000 	lsl.w	r0, r3, r0
 8000be8:	4b01      	ldr	r3, [pc, #4]	; (8000bf0 <HAL_NVIC_EnableIRQ+0x18>)
 8000bea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d20a      	bcs.n	8000c12 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c02:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c24:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000c26:	4626      	mov	r6, r4
 8000c28:	4b66      	ldr	r3, [pc, #408]	; (8000dc4 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c2a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000dd4 <HAL_GPIO_Init+0x1b4>
 8000c2e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8000dd8 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	680a      	ldr	r2, [r1, #0]
 8000c34:	fa32 f506 	lsrs.w	r5, r2, r6
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000c3a:	b003      	add	sp, #12
 8000c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000c40:	f04f 0801 	mov.w	r8, #1
 8000c44:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c48:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000c4c:	4590      	cmp	r8, r2
 8000c4e:	d17f      	bne.n	8000d50 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000c50:	684d      	ldr	r5, [r1, #4]
 8000c52:	2d12      	cmp	r5, #18
 8000c54:	f000 80aa 	beq.w	8000dac <HAL_GPIO_Init+0x18c>
 8000c58:	f200 8083 	bhi.w	8000d62 <HAL_GPIO_Init+0x142>
 8000c5c:	2d02      	cmp	r5, #2
 8000c5e:	f000 80a2 	beq.w	8000da6 <HAL_GPIO_Init+0x186>
 8000c62:	d877      	bhi.n	8000d54 <HAL_GPIO_Init+0x134>
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	f000 8089 	beq.w	8000d7c <HAL_GPIO_Init+0x15c>
 8000c6a:	2d01      	cmp	r5, #1
 8000c6c:	f000 8099 	beq.w	8000da2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c70:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c74:	2aff      	cmp	r2, #255	; 0xff
 8000c76:	bf93      	iteet	ls
 8000c78:	4682      	movls	sl, r0
 8000c7a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c7e:	3d08      	subhi	r5, #8
 8000c80:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c84:	bf92      	itee	ls
 8000c86:	00b5      	lslls	r5, r6, #2
 8000c88:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000c8c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c8e:	fa09 f805 	lsl.w	r8, r9, r5
 8000c92:	ea2b 0808 	bic.w	r8, fp, r8
 8000c96:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9a:	bf88      	it	hi
 8000c9c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca0:	ea48 0505 	orr.w	r5, r8, r5
 8000ca4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000cac:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000cb0:	d04e      	beq.n	8000d50 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4d45      	ldr	r5, [pc, #276]	; (8000dc8 <HAL_GPIO_Init+0x1a8>)
 8000cb4:	4f44      	ldr	r7, [pc, #272]	; (8000dc8 <HAL_GPIO_Init+0x1a8>)
 8000cb6:	69ad      	ldr	r5, [r5, #24]
 8000cb8:	f026 0803 	bic.w	r8, r6, #3
 8000cbc:	f045 0501 	orr.w	r5, r5, #1
 8000cc0:	61bd      	str	r5, [r7, #24]
 8000cc2:	69bd      	ldr	r5, [r7, #24]
 8000cc4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000cc8:	f005 0501 	and.w	r5, r5, #1
 8000ccc:	9501      	str	r5, [sp, #4]
 8000cce:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000cdc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ce0:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ce4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ce8:	4d38      	ldr	r5, [pc, #224]	; (8000dcc <HAL_GPIO_Init+0x1ac>)
 8000cea:	42a8      	cmp	r0, r5
 8000cec:	d063      	beq.n	8000db6 <HAL_GPIO_Init+0x196>
 8000cee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cf2:	42a8      	cmp	r0, r5
 8000cf4:	d061      	beq.n	8000dba <HAL_GPIO_Init+0x19a>
 8000cf6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cfa:	42a8      	cmp	r0, r5
 8000cfc:	d05f      	beq.n	8000dbe <HAL_GPIO_Init+0x19e>
 8000cfe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	bf0c      	ite	eq
 8000d06:	2503      	moveq	r5, #3
 8000d08:	2504      	movne	r5, #4
 8000d0a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d0e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000d12:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000d16:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d18:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1c:	bf14      	ite	ne
 8000d1e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d20:	4395      	biceq	r5, r2
 8000d22:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000d24:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d26:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d2a:	bf14      	ite	ne
 8000d2c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d2e:	4395      	biceq	r5, r2
 8000d30:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d32:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d34:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d38:	bf14      	ite	ne
 8000d3a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d3c:	4395      	biceq	r5, r2
 8000d3e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d40:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d42:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d46:	bf14      	ite	ne
 8000d48:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d4a:	ea25 0202 	biceq.w	r2, r5, r2
 8000d4e:	60da      	str	r2, [r3, #12]
	position++;
 8000d50:	3601      	adds	r6, #1
 8000d52:	e76e      	b.n	8000c32 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000d54:	2d03      	cmp	r5, #3
 8000d56:	d022      	beq.n	8000d9e <HAL_GPIO_Init+0x17e>
 8000d58:	2d11      	cmp	r5, #17
 8000d5a:	d189      	bne.n	8000c70 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d5c:	68cc      	ldr	r4, [r1, #12]
 8000d5e:	3404      	adds	r4, #4
          break;
 8000d60:	e786      	b.n	8000c70 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000d62:	4f1b      	ldr	r7, [pc, #108]	; (8000dd0 <HAL_GPIO_Init+0x1b0>)
 8000d64:	42bd      	cmp	r5, r7
 8000d66:	d009      	beq.n	8000d7c <HAL_GPIO_Init+0x15c>
 8000d68:	d812      	bhi.n	8000d90 <HAL_GPIO_Init+0x170>
 8000d6a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8000ddc <HAL_GPIO_Init+0x1bc>
 8000d6e:	454d      	cmp	r5, r9
 8000d70:	d004      	beq.n	8000d7c <HAL_GPIO_Init+0x15c>
 8000d72:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d76:	454d      	cmp	r5, r9
 8000d78:	f47f af7a 	bne.w	8000c70 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7c:	688c      	ldr	r4, [r1, #8]
 8000d7e:	b1c4      	cbz	r4, 8000db2 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d80:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000d82:	bf0c      	ite	eq
 8000d84:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d88:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2408      	movs	r4, #8
 8000d8e:	e76f      	b.n	8000c70 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000d90:	4575      	cmp	r5, lr
 8000d92:	d0f3      	beq.n	8000d7c <HAL_GPIO_Init+0x15c>
 8000d94:	4565      	cmp	r5, ip
 8000d96:	d0f1      	beq.n	8000d7c <HAL_GPIO_Init+0x15c>
 8000d98:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000de0 <HAL_GPIO_Init+0x1c0>
 8000d9c:	e7eb      	b.n	8000d76 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d9e:	2400      	movs	r4, #0
 8000da0:	e766      	b.n	8000c70 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da2:	68cc      	ldr	r4, [r1, #12]
          break;
 8000da4:	e764      	b.n	8000c70 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	68cc      	ldr	r4, [r1, #12]
 8000da8:	3408      	adds	r4, #8
          break;
 8000daa:	e761      	b.n	8000c70 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	68cc      	ldr	r4, [r1, #12]
 8000dae:	340c      	adds	r4, #12
          break;
 8000db0:	e75e      	b.n	8000c70 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000db2:	2404      	movs	r4, #4
 8000db4:	e75c      	b.n	8000c70 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000db6:	2500      	movs	r5, #0
 8000db8:	e7a7      	b.n	8000d0a <HAL_GPIO_Init+0xea>
 8000dba:	2501      	movs	r5, #1
 8000dbc:	e7a5      	b.n	8000d0a <HAL_GPIO_Init+0xea>
 8000dbe:	2502      	movs	r5, #2
 8000dc0:	e7a3      	b.n	8000d0a <HAL_GPIO_Init+0xea>
 8000dc2:	bf00      	nop
 8000dc4:	40010400 	.word	0x40010400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	10210000 	.word	0x10210000
 8000dd4:	10310000 	.word	0x10310000
 8000dd8:	10320000 	.word	0x10320000
 8000ddc:	10110000 	.word	0x10110000
 8000de0:	10220000 	.word	0x10220000

08000de4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de4:	b10a      	cbz	r2, 8000dea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000de6:	6101      	str	r1, [r0, #16]
 8000de8:	4770      	bx	lr
 8000dea:	0409      	lsls	r1, r1, #16
 8000dec:	e7fb      	b.n	8000de6 <HAL_GPIO_WritePin+0x2>

08000dee <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000dee:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000df0:	ea03 0201 	and.w	r2, r3, r1
 8000df4:	ea21 0103 	bic.w	r1, r1, r3
 8000df8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000dfc:	6101      	str	r1, [r0, #16]
 8000dfe:	4770      	bx	lr

08000e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000e04:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e06:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000e08:	6959      	ldr	r1, [r3, #20]
 8000e0a:	4201      	tst	r1, r0
 8000e0c:	d002      	beq.n	8000e14 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e0e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e10:	f7ff fff6 	bl	8000e00 <HAL_GPIO_EXTI_Callback>
 8000e14:	bd08      	pop	{r3, pc}
 8000e16:	bf00      	nop
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e20:	4605      	mov	r5, r0
 8000e22:	b908      	cbnz	r0, 8000e28 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
 8000e26:	e03c      	b.n	8000ea2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e28:	6803      	ldr	r3, [r0, #0]
 8000e2a:	07db      	lsls	r3, r3, #31
 8000e2c:	d410      	bmi.n	8000e50 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	079f      	lsls	r7, r3, #30
 8000e32:	d45d      	bmi.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	0719      	lsls	r1, r3, #28
 8000e38:	f100 8094 	bmi.w	8000f64 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	075a      	lsls	r2, r3, #29
 8000e40:	f100 80be 	bmi.w	8000fc0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e44:	69e8      	ldr	r0, [r5, #28]
 8000e46:	2800      	cmp	r0, #0
 8000e48:	f040 812c 	bne.w	80010a4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	e028      	b.n	8000ea2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e50:	4c8f      	ldr	r4, [pc, #572]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8000e52:	6863      	ldr	r3, [r4, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d007      	beq.n	8000e6c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e5c:	6863      	ldr	r3, [r4, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d109      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
 8000e66:	6863      	ldr	r3, [r4, #4]
 8000e68:	03de      	lsls	r6, r3, #15
 8000e6a:	d506      	bpl.n	8000e7a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	039c      	lsls	r4, r3, #14
 8000e70:	d5dd      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x12>
 8000e72:	686b      	ldr	r3, [r5, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1da      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
 8000e78:	e7d4      	b.n	8000e24 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	686b      	ldr	r3, [r5, #4]
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d112      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x8c>
 8000e82:	6823      	ldr	r3, [r4, #0]
 8000e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fbb5 	bl	80005f8 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	0398      	lsls	r0, r3, #14
 8000e94:	d4cb      	bmi.n	8000e2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e96:	f7ff fbaf 	bl	80005f8 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	2864      	cmp	r0, #100	; 0x64
 8000e9e:	d9f7      	bls.n	8000e90 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ea0:	2003      	movs	r0, #3
}
 8000ea2:	b002      	add	sp, #8
 8000ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ea8:	b99b      	cbnz	r3, 8000ed2 <HAL_RCC_OscConfig+0xb6>
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000eba:	f7ff fb9d 	bl	80005f8 <HAL_GetTick>
 8000ebe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	0399      	lsls	r1, r3, #14
 8000ec4:	d5b3      	bpl.n	8000e2e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec6:	f7ff fb97 	bl	80005f8 <HAL_GetTick>
 8000eca:	1b80      	subs	r0, r0, r6
 8000ecc:	2864      	cmp	r0, #100	; 0x64
 8000ece:	d9f7      	bls.n	8000ec0 <HAL_RCC_OscConfig+0xa4>
 8000ed0:	e7e6      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	d103      	bne.n	8000ee2 <HAL_RCC_OscConfig+0xc6>
 8000eda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ede:	6023      	str	r3, [r4, #0]
 8000ee0:	e7cf      	b.n	8000e82 <HAL_RCC_OscConfig+0x66>
 8000ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee6:	6023      	str	r3, [r4, #0]
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eee:	e7cb      	b.n	8000e88 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ef0:	4c67      	ldr	r4, [pc, #412]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8000ef2:	6863      	ldr	r3, [r4, #4]
 8000ef4:	f013 0f0c 	tst.w	r3, #12
 8000ef8:	d007      	beq.n	8000f0a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000efa:	6863      	ldr	r3, [r4, #4]
 8000efc:	f003 030c 	and.w	r3, r3, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d110      	bne.n	8000f26 <HAL_RCC_OscConfig+0x10a>
 8000f04:	6863      	ldr	r3, [r4, #4]
 8000f06:	03da      	lsls	r2, r3, #15
 8000f08:	d40d      	bmi.n	8000f26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	079b      	lsls	r3, r3, #30
 8000f0e:	d502      	bpl.n	8000f16 <HAL_RCC_OscConfig+0xfa>
 8000f10:	692b      	ldr	r3, [r5, #16]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d186      	bne.n	8000e24 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	696a      	ldr	r2, [r5, #20]
 8000f1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000f1e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000f22:	6023      	str	r3, [r4, #0]
 8000f24:	e786      	b.n	8000e34 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f26:	692a      	ldr	r2, [r5, #16]
 8000f28:	4b5a      	ldr	r3, [pc, #360]	; (8001094 <HAL_RCC_OscConfig+0x278>)
 8000f2a:	b16a      	cbz	r2, 8000f48 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f30:	f7ff fb62 	bl	80005f8 <HAL_GetTick>
 8000f34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f36:	6823      	ldr	r3, [r4, #0]
 8000f38:	079f      	lsls	r7, r3, #30
 8000f3a:	d4ec      	bmi.n	8000f16 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fb5c 	bl	80005f8 <HAL_GetTick>
 8000f40:	1b80      	subs	r0, r0, r6
 8000f42:	2802      	cmp	r0, #2
 8000f44:	d9f7      	bls.n	8000f36 <HAL_RCC_OscConfig+0x11a>
 8000f46:	e7ab      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000f48:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f4a:	f7ff fb55 	bl	80005f8 <HAL_GetTick>
 8000f4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	0798      	lsls	r0, r3, #30
 8000f54:	f57f af6e 	bpl.w	8000e34 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f58:	f7ff fb4e 	bl	80005f8 <HAL_GetTick>
 8000f5c:	1b80      	subs	r0, r0, r6
 8000f5e:	2802      	cmp	r0, #2
 8000f60:	d9f6      	bls.n	8000f50 <HAL_RCC_OscConfig+0x134>
 8000f62:	e79d      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f64:	69aa      	ldr	r2, [r5, #24]
 8000f66:	4c4a      	ldr	r4, [pc, #296]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8000f68:	4b4b      	ldr	r3, [pc, #300]	; (8001098 <HAL_RCC_OscConfig+0x27c>)
 8000f6a:	b1da      	cbz	r2, 8000fa4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000f70:	f7ff fb42 	bl	80005f8 <HAL_GetTick>
 8000f74:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f78:	079b      	lsls	r3, r3, #30
 8000f7a:	d50d      	bpl.n	8000f98 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f7c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x280>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f88:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000f8a:	bf00      	nop
  }
  while (Delay --);
 8000f8c:	9b01      	ldr	r3, [sp, #4]
 8000f8e:	1e5a      	subs	r2, r3, #1
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <HAL_RCC_OscConfig+0x16e>
 8000f96:	e751      	b.n	8000e3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fb2e 	bl	80005f8 <HAL_GetTick>
 8000f9c:	1b80      	subs	r0, r0, r6
 8000f9e:	2802      	cmp	r0, #2
 8000fa0:	d9e9      	bls.n	8000f76 <HAL_RCC_OscConfig+0x15a>
 8000fa2:	e77d      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000fa4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb27 	bl	80005f8 <HAL_GetTick>
 8000faa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fae:	079f      	lsls	r7, r3, #30
 8000fb0:	f57f af44 	bpl.w	8000e3c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fb20 	bl	80005f8 <HAL_GetTick>
 8000fb8:	1b80      	subs	r0, r0, r6
 8000fba:	2802      	cmp	r0, #2
 8000fbc:	d9f6      	bls.n	8000fac <HAL_RCC_OscConfig+0x190>
 8000fbe:	e76f      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc0:	4c33      	ldr	r4, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x274>)
 8000fc2:	69e3      	ldr	r3, [r4, #28]
 8000fc4:	00d8      	lsls	r0, r3, #3
 8000fc6:	d424      	bmi.n	8001012 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8000fc8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	69e3      	ldr	r3, [r4, #28]
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	61e3      	str	r3, [r4, #28]
 8000fd2:	69e3      	ldr	r3, [r4, #28]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fdc:	4e30      	ldr	r6, [pc, #192]	; (80010a0 <HAL_RCC_OscConfig+0x284>)
 8000fde:	6833      	ldr	r3, [r6, #0]
 8000fe0:	05d9      	lsls	r1, r3, #23
 8000fe2:	d518      	bpl.n	8001016 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	68eb      	ldr	r3, [r5, #12]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d126      	bne.n	8001038 <HAL_RCC_OscConfig+0x21c>
 8000fea:	6a23      	ldr	r3, [r4, #32]
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fb01 	bl	80005f8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ffa:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ffc:	6a23      	ldr	r3, [r4, #32]
 8000ffe:	079b      	lsls	r3, r3, #30
 8001000:	d53f      	bpl.n	8001082 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8001002:	2f00      	cmp	r7, #0
 8001004:	f43f af1e 	beq.w	8000e44 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001008:	69e3      	ldr	r3, [r4, #28]
 800100a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800100e:	61e3      	str	r3, [r4, #28]
 8001010:	e718      	b.n	8000e44 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8001012:	2700      	movs	r7, #0
 8001014:	e7e2      	b.n	8000fdc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800101e:	f7ff faeb 	bl	80005f8 <HAL_GetTick>
 8001022:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001024:	6833      	ldr	r3, [r6, #0]
 8001026:	05da      	lsls	r2, r3, #23
 8001028:	d4dc      	bmi.n	8000fe4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102a:	f7ff fae5 	bl	80005f8 <HAL_GetTick>
 800102e:	eba0 0008 	sub.w	r0, r0, r8
 8001032:	2864      	cmp	r0, #100	; 0x64
 8001034:	d9f6      	bls.n	8001024 <HAL_RCC_OscConfig+0x208>
 8001036:	e733      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001038:	b9ab      	cbnz	r3, 8001066 <HAL_RCC_OscConfig+0x24a>
 800103a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6223      	str	r3, [r4, #32]
 8001046:	6a23      	ldr	r3, [r4, #32]
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800104e:	f7ff fad3 	bl	80005f8 <HAL_GetTick>
 8001052:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	6a23      	ldr	r3, [r4, #32]
 8001056:	0798      	lsls	r0, r3, #30
 8001058:	d5d3      	bpl.n	8001002 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105a:	f7ff facd 	bl	80005f8 <HAL_GetTick>
 800105e:	1b80      	subs	r0, r0, r6
 8001060:	4540      	cmp	r0, r8
 8001062:	d9f7      	bls.n	8001054 <HAL_RCC_OscConfig+0x238>
 8001064:	e71c      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001066:	2b05      	cmp	r3, #5
 8001068:	6a23      	ldr	r3, [r4, #32]
 800106a:	d103      	bne.n	8001074 <HAL_RCC_OscConfig+0x258>
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6223      	str	r3, [r4, #32]
 8001072:	e7ba      	b.n	8000fea <HAL_RCC_OscConfig+0x1ce>
 8001074:	f023 0301 	bic.w	r3, r3, #1
 8001078:	6223      	str	r3, [r4, #32]
 800107a:	6a23      	ldr	r3, [r4, #32]
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	e7b6      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001082:	f7ff fab9 	bl	80005f8 <HAL_GetTick>
 8001086:	eba0 0008 	sub.w	r0, r0, r8
 800108a:	42b0      	cmp	r0, r6
 800108c:	d9b6      	bls.n	8000ffc <HAL_RCC_OscConfig+0x1e0>
 800108e:	e707      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
 8001090:	40021000 	.word	0x40021000
 8001094:	42420000 	.word	0x42420000
 8001098:	42420480 	.word	0x42420480
 800109c:	20000000 	.word	0x20000000
 80010a0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <HAL_RCC_OscConfig+0x334>)
 80010a6:	685a      	ldr	r2, [r3, #4]
 80010a8:	461c      	mov	r4, r3
 80010aa:	f002 020c 	and.w	r2, r2, #12
 80010ae:	2a08      	cmp	r2, #8
 80010b0:	d03d      	beq.n	800112e <HAL_RCC_OscConfig+0x312>
 80010b2:	2300      	movs	r3, #0
 80010b4:	4e27      	ldr	r6, [pc, #156]	; (8001154 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80010b8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ba:	d12b      	bne.n	8001114 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80010bc:	f7ff fa9c 	bl	80005f8 <HAL_GetTick>
 80010c0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	6823      	ldr	r3, [r4, #0]
 80010c4:	0199      	lsls	r1, r3, #6
 80010c6:	d41f      	bmi.n	8001108 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010c8:	6a2b      	ldr	r3, [r5, #32]
 80010ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ce:	d105      	bne.n	80010dc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010d0:	6862      	ldr	r2, [r4, #4]
 80010d2:	68a9      	ldr	r1, [r5, #8]
 80010d4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80010d8:	430a      	orrs	r2, r1
 80010da:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010dc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80010de:	6862      	ldr	r2, [r4, #4]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80010e6:	4313      	orrs	r3, r2
 80010e8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80010ea:	2301      	movs	r3, #1
 80010ec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80010ee:	f7ff fa83 	bl	80005f8 <HAL_GetTick>
 80010f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	019a      	lsls	r2, r3, #6
 80010f8:	f53f aea8 	bmi.w	8000e4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fc:	f7ff fa7c 	bl	80005f8 <HAL_GetTick>
 8001100:	1b40      	subs	r0, r0, r5
 8001102:	2802      	cmp	r0, #2
 8001104:	d9f6      	bls.n	80010f4 <HAL_RCC_OscConfig+0x2d8>
 8001106:	e6cb      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001108:	f7ff fa76 	bl	80005f8 <HAL_GetTick>
 800110c:	1bc0      	subs	r0, r0, r7
 800110e:	2802      	cmp	r0, #2
 8001110:	d9d7      	bls.n	80010c2 <HAL_RCC_OscConfig+0x2a6>
 8001112:	e6c5      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001114:	f7ff fa70 	bl	80005f8 <HAL_GetTick>
 8001118:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	f57f ae95 	bpl.w	8000e4c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001122:	f7ff fa69 	bl	80005f8 <HAL_GetTick>
 8001126:	1b40      	subs	r0, r0, r5
 8001128:	2802      	cmp	r0, #2
 800112a:	d9f6      	bls.n	800111a <HAL_RCC_OscConfig+0x2fe>
 800112c:	e6b8      	b.n	8000ea0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800112e:	2801      	cmp	r0, #1
 8001130:	f43f aeb7 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001134:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001136:	6a2b      	ldr	r3, [r5, #32]
 8001138:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800113c:	429a      	cmp	r2, r3
 800113e:	f47f ae71 	bne.w	8000e24 <HAL_RCC_OscConfig+0x8>
 8001142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001144:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001148:	1ac0      	subs	r0, r0, r3
 800114a:	bf18      	it	ne
 800114c:	2001      	movne	r0, #1
 800114e:	e6a8      	b.n	8000ea2 <HAL_RCC_OscConfig+0x86>
 8001150:	40021000 	.word	0x40021000
 8001154:	42420060 	.word	0x42420060

08001158 <HAL_RCC_GetSysClockFreq>:
{
 8001158:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800115c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800115e:	ac02      	add	r4, sp, #8
 8001160:	f103 0510 	add.w	r5, r3, #16
 8001164:	4622      	mov	r2, r4
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	3308      	adds	r3, #8
 800116c:	c203      	stmia	r2!, {r0, r1}
 800116e:	42ab      	cmp	r3, r5
 8001170:	4614      	mov	r4, r2
 8001172:	d1f7      	bne.n	8001164 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001174:	2301      	movs	r3, #1
 8001176:	f88d 3004 	strb.w	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800117c:	4911      	ldr	r1, [pc, #68]	; (80011c4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800117e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001182:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001184:	f003 020c 	and.w	r2, r3, #12
 8001188:	2a08      	cmp	r2, #8
 800118a:	d117      	bne.n	80011bc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800118c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001190:	a806      	add	r0, sp, #24
 8001192:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001194:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001196:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800119a:	d50c      	bpl.n	80011b6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800119c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800119e:	480a      	ldr	r0, [pc, #40]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011a6:	aa06      	add	r2, sp, #24
 80011a8:	4413      	add	r3, r2
 80011aa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ae:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80011b2:	b007      	add	sp, #28
 80011b4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_RCC_GetSysClockFreq+0x74>)
 80011b8:	4350      	muls	r0, r2
 80011ba:	e7fa      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80011be:	e7f8      	b.n	80011b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80011c0:	08001878 	.word	0x08001878
 80011c4:	40021000 	.word	0x40021000
 80011c8:	007a1200 	.word	0x007a1200
 80011cc:	003d0900 	.word	0x003d0900

080011d0 <HAL_RCC_ClockConfig>:
{
 80011d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80011d6:	4604      	mov	r4, r0
 80011d8:	b910      	cbnz	r0, 80011e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80011da:	2001      	movs	r0, #1
 80011dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_RCC_ClockConfig+0x128>)
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	428b      	cmp	r3, r1
 80011ea:	d329      	bcc.n	8001240 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	6821      	ldr	r1, [r4, #0]
 80011ee:	078e      	lsls	r6, r1, #30
 80011f0:	d431      	bmi.n	8001256 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f2:	07ca      	lsls	r2, r1, #31
 80011f4:	d444      	bmi.n	8001280 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f6:	4a40      	ldr	r2, [pc, #256]	; (80012f8 <HAL_RCC_ClockConfig+0x128>)
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	429d      	cmp	r5, r3
 8001200:	d367      	bcc.n	80012d2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	4d3d      	ldr	r5, [pc, #244]	; (80012fc <HAL_RCC_ClockConfig+0x12c>)
 8001206:	f012 0f04 	tst.w	r2, #4
 800120a:	d16e      	bne.n	80012ea <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120c:	0713      	lsls	r3, r2, #28
 800120e:	d506      	bpl.n	800121e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001210:	686b      	ldr	r3, [r5, #4]
 8001212:	6922      	ldr	r2, [r4, #16]
 8001214:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001218:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800121c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800121e:	f7ff ff9b 	bl	8001158 <HAL_RCC_GetSysClockFreq>
 8001222:	686b      	ldr	r3, [r5, #4]
 8001224:	4a36      	ldr	r2, [pc, #216]	; (8001300 <HAL_RCC_ClockConfig+0x130>)
 8001226:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800122a:	5cd3      	ldrb	r3, [r2, r3]
 800122c:	40d8      	lsrs	r0, r3
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_RCC_ClockConfig+0x134>)
 8001230:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_RCC_ClockConfig+0x138>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f7ff f99d 	bl	8000574 <HAL_InitTick>
  return HAL_OK;
 800123a:	2000      	movs	r0, #0
 800123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001240:	6813      	ldr	r3, [r2, #0]
 8001242:	f023 0307 	bic.w	r3, r3, #7
 8001246:	430b      	orrs	r3, r1
 8001248:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	6813      	ldr	r3, [r2, #0]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	4299      	cmp	r1, r3
 8001252:	d1c2      	bne.n	80011da <HAL_RCC_ClockConfig+0xa>
 8001254:	e7ca      	b.n	80011ec <HAL_RCC_ClockConfig+0x1c>
 8001256:	4b29      	ldr	r3, [pc, #164]	; (80012fc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	bf1e      	ittt	ne
 800125e:	685a      	ldrne	r2, [r3, #4]
 8001260:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001264:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001266:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001268:	bf42      	ittt	mi
 800126a:	685a      	ldrmi	r2, [r3, #4]
 800126c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001270:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	68a0      	ldr	r0, [r4, #8]
 8001276:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800127a:	4302      	orrs	r2, r0
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	e7b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001280:	6862      	ldr	r2, [r4, #4]
 8001282:	4e1e      	ldr	r6, [pc, #120]	; (80012fc <HAL_RCC_ClockConfig+0x12c>)
 8001284:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001288:	d11b      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	d0a4      	beq.n	80011da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001290:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001292:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001296:	f023 0303 	bic.w	r3, r3, #3
 800129a:	4313      	orrs	r3, r2
 800129c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800129e:	f7ff f9ab 	bl	80005f8 <HAL_GetTick>
 80012a2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a4:	6873      	ldr	r3, [r6, #4]
 80012a6:	6862      	ldr	r2, [r4, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012b0:	d0a1      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b2:	f7ff f9a1 	bl	80005f8 <HAL_GetTick>
 80012b6:	1bc0      	subs	r0, r0, r7
 80012b8:	4540      	cmp	r0, r8
 80012ba:	d9f3      	bls.n	80012a4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80012bc:	2003      	movs	r0, #3
}
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	2a02      	cmp	r2, #2
 80012c4:	d102      	bne.n	80012cc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012ca:	e7e0      	b.n	800128e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	f013 0f02 	tst.w	r3, #2
 80012d0:	e7dd      	b.n	800128e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f023 0307 	bic.w	r3, r3, #7
 80012d8:	432b      	orrs	r3, r5
 80012da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	429d      	cmp	r5, r3
 80012e4:	f47f af79 	bne.w	80011da <HAL_RCC_ClockConfig+0xa>
 80012e8:	e78b      	b.n	8001202 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ea:	686b      	ldr	r3, [r5, #4]
 80012ec:	68e1      	ldr	r1, [r4, #12]
 80012ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012f2:	430b      	orrs	r3, r1
 80012f4:	606b      	str	r3, [r5, #4]
 80012f6:	e789      	b.n	800120c <HAL_RCC_ClockConfig+0x3c>
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	08001888 	.word	0x08001888
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008

0800130c <HAL_TIM_PeriodElapsedCallback>:
 800130c:	4770      	bx	lr

0800130e <HAL_TIM_OC_DelayElapsedCallback>:
 800130e:	4770      	bx	lr

08001310 <HAL_TIM_IC_CaptureCallback>:
 8001310:	4770      	bx	lr

08001312 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001312:	4770      	bx	lr

08001314 <HAL_TIM_TriggerCallback>:
 8001314:	4770      	bx	lr

08001316 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001316:	6803      	ldr	r3, [r0, #0]
{
 8001318:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131a:	691a      	ldr	r2, [r3, #16]
{
 800131c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131e:	0791      	lsls	r1, r2, #30
 8001320:	d50e      	bpl.n	8001340 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	0792      	lsls	r2, r2, #30
 8001326:	d50b      	bpl.n	8001340 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001328:	f06f 0202 	mvn.w	r2, #2
 800132c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800132e:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001330:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001332:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001334:	079b      	lsls	r3, r3, #30
 8001336:	d077      	beq.n	8001428 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001338:	f7ff ffea 	bl	8001310 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133c:	2300      	movs	r3, #0
 800133e:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	691a      	ldr	r2, [r3, #16]
 8001344:	0750      	lsls	r0, r2, #29
 8001346:	d510      	bpl.n	800136a <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	0751      	lsls	r1, r2, #29
 800134c:	d50d      	bpl.n	800136a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800134e:	f06f 0204 	mvn.w	r2, #4
 8001352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001354:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001356:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001358:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800135e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001360:	d068      	beq.n	8001434 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001362:	f7ff ffd5 	bl	8001310 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001366:	2300      	movs	r3, #0
 8001368:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800136a:	6823      	ldr	r3, [r4, #0]
 800136c:	691a      	ldr	r2, [r3, #16]
 800136e:	0712      	lsls	r2, r2, #28
 8001370:	d50f      	bpl.n	8001392 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001372:	68da      	ldr	r2, [r3, #12]
 8001374:	0710      	lsls	r0, r2, #28
 8001376:	d50c      	bpl.n	8001392 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001378:	f06f 0208 	mvn.w	r2, #8
 800137c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800137e:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001380:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001382:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001384:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001386:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001388:	d05a      	beq.n	8001440 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800138a:	f7ff ffc1 	bl	8001310 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138e:	2300      	movs	r3, #0
 8001390:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	691a      	ldr	r2, [r3, #16]
 8001396:	06d2      	lsls	r2, r2, #27
 8001398:	d510      	bpl.n	80013bc <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	06d0      	lsls	r0, r2, #27
 800139e:	d50d      	bpl.n	80013bc <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80013a0:	f06f 0210 	mvn.w	r2, #16
 80013a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013a6:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013a8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013ac:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013b2:	d04b      	beq.n	800144c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80013b4:	f7ff ffac 	bl	8001310 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013b8:	2300      	movs	r3, #0
 80013ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013bc:	6823      	ldr	r3, [r4, #0]
 80013be:	691a      	ldr	r2, [r3, #16]
 80013c0:	07d1      	lsls	r1, r2, #31
 80013c2:	d508      	bpl.n	80013d6 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	07d2      	lsls	r2, r2, #31
 80013c8:	d505      	bpl.n	80013d6 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013ca:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80013ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80013d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013d2:	f7ff ff9b 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	0610      	lsls	r0, r2, #24
 80013dc:	d508      	bpl.n	80013f0 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	0611      	lsls	r1, r2, #24
 80013e2:	d505      	bpl.n	80013f0 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80013e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013ec:	f000 f9e5 	bl	80017ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	0652      	lsls	r2, r2, #25
 80013f6:	d508      	bpl.n	800140a <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	0650      	lsls	r0, r2, #25
 80013fc:	d505      	bpl.n	800140a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001402:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001404:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001406:	f7ff ff85 	bl	8001314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	0691      	lsls	r1, r2, #26
 8001410:	d522      	bpl.n	8001458 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	0692      	lsls	r2, r2, #26
 8001416:	d51f      	bpl.n	8001458 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001418:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800141c:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800141e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001422:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001424:	f000 b9c8 	b.w	80017b8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001428:	f7ff ff71 	bl	800130e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff ff70 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
 8001432:	e783      	b.n	800133c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001434:	f7ff ff6b 	bl	800130e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff ff6a 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
 800143e:	e792      	b.n	8001366 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001440:	f7ff ff65 	bl	800130e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff ff64 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
 800144a:	e7a0      	b.n	800138e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800144c:	f7ff ff5f 	bl	800130e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001450:	4620      	mov	r0, r4
 8001452:	f7ff ff5e 	bl	8001312 <HAL_TIM_PWM_PulseFinishedCallback>
 8001456:	e7af      	b.n	80013b8 <HAL_TIM_IRQHandler+0xa2>
 8001458:	bd10      	pop	{r4, pc}
	...

0800145c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800145c:	4a1a      	ldr	r2, [pc, #104]	; (80014c8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800145e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001460:	4290      	cmp	r0, r2
 8001462:	d00a      	beq.n	800147a <TIM_Base_SetConfig+0x1e>
 8001464:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001468:	d007      	beq.n	800147a <TIM_Base_SetConfig+0x1e>
 800146a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800146e:	4290      	cmp	r0, r2
 8001470:	d003      	beq.n	800147a <TIM_Base_SetConfig+0x1e>
 8001472:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001476:	4290      	cmp	r0, r2
 8001478:	d115      	bne.n	80014a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800147a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800147c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001480:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001482:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <TIM_Base_SetConfig+0x6c>)
 8001484:	4290      	cmp	r0, r2
 8001486:	d00a      	beq.n	800149e <TIM_Base_SetConfig+0x42>
 8001488:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800148c:	d007      	beq.n	800149e <TIM_Base_SetConfig+0x42>
 800148e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001492:	4290      	cmp	r0, r2
 8001494:	d003      	beq.n	800149e <TIM_Base_SetConfig+0x42>
 8001496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800149a:	4290      	cmp	r0, r2
 800149c:	d103      	bne.n	80014a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800149e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014a4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014a6:	694a      	ldr	r2, [r1, #20]
 80014a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014ac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80014ae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014b0:	688b      	ldr	r3, [r1, #8]
 80014b2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014b4:	680b      	ldr	r3, [r1, #0]
 80014b6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <TIM_Base_SetConfig+0x6c>)
 80014ba:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014bc:	bf04      	itt	eq
 80014be:	690b      	ldreq	r3, [r1, #16]
 80014c0:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014c2:	2301      	movs	r3, #1
 80014c4:	6143      	str	r3, [r0, #20]
 80014c6:	4770      	bx	lr
 80014c8:	40012c00 	.word	0x40012c00

080014cc <HAL_TIM_Base_Init>:
{
 80014cc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80014ce:	4604      	mov	r4, r0
 80014d0:	b330      	cbz	r0, 8001520 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80014d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014da:	b91b      	cbnz	r3, 80014e4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014e0:	f7ff f82a 	bl	8000538 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80014e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80014e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ec:	1d21      	adds	r1, r4, #4
 80014ee:	f7ff ffb5 	bl	800145c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014f2:	2301      	movs	r3, #1
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80014fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001502:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001506:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800150a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800150e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001512:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001516:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800151a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800151e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
}
 8001522:	bd10      	pop	{r4, pc}

08001524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001524:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001526:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001528:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800152e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001532:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001534:	6083      	str	r3, [r0, #8]
 8001536:	bd10      	pop	{r4, pc}

08001538 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001538:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800153c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800153e:	2b01      	cmp	r3, #1
{
 8001540:	4604      	mov	r4, r0
 8001542:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001546:	d019      	beq.n	800157c <HAL_TIM_ConfigClockSource+0x44>
 8001548:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800154a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800154e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001554:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800155a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800155e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001560:	680b      	ldr	r3, [r1, #0]
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d065      	beq.n	8001632 <HAL_TIM_ConfigClockSource+0xfa>
 8001566:	d815      	bhi.n	8001594 <HAL_TIM_ConfigClockSource+0x5c>
 8001568:	2b10      	cmp	r3, #16
 800156a:	d00c      	beq.n	8001586 <HAL_TIM_ConfigClockSource+0x4e>
 800156c:	d807      	bhi.n	800157e <HAL_TIM_ConfigClockSource+0x46>
 800156e:	b153      	cbz	r3, 8001586 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001570:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001572:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001578:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800157c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800157e:	2b20      	cmp	r3, #32
 8001580:	d001      	beq.n	8001586 <HAL_TIM_ConfigClockSource+0x4e>
 8001582:	2b30      	cmp	r3, #48	; 0x30
 8001584:	d1f4      	bne.n	8001570 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8001586:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001588:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800158c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001590:	4313      	orrs	r3, r2
 8001592:	e01a      	b.n	80015ca <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001594:	2b60      	cmp	r3, #96	; 0x60
 8001596:	d034      	beq.n	8001602 <HAL_TIM_ConfigClockSource+0xca>
 8001598:	d819      	bhi.n	80015ce <HAL_TIM_ConfigClockSource+0x96>
 800159a:	2b50      	cmp	r3, #80	; 0x50
 800159c:	d1e8      	bne.n	8001570 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800159e:	684a      	ldr	r2, [r1, #4]
 80015a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80015a2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015a4:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80015a6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015aa:	f025 0501 	bic.w	r5, r5, #1
 80015ae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015b0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80015b2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80015b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80015b8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80015bc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80015be:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80015c0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80015c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015c6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80015ca:	6083      	str	r3, [r0, #8]
 80015cc:	e7d0      	b.n	8001570 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 80015ce:	2b70      	cmp	r3, #112	; 0x70
 80015d0:	d00c      	beq.n	80015ec <HAL_TIM_ConfigClockSource+0xb4>
 80015d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d6:	d1cb      	bne.n	8001570 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 80015d8:	68cb      	ldr	r3, [r1, #12]
 80015da:	684a      	ldr	r2, [r1, #4]
 80015dc:	6889      	ldr	r1, [r1, #8]
 80015de:	f7ff ffa1 	bl	8001524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	6893      	ldr	r3, [r2, #8]
 80015e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ea:	e008      	b.n	80015fe <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80015ec:	68cb      	ldr	r3, [r1, #12]
 80015ee:	684a      	ldr	r2, [r1, #4]
 80015f0:	6889      	ldr	r1, [r1, #8]
 80015f2:	f7ff ff97 	bl	8001524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80015fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015fe:	6093      	str	r3, [r2, #8]
      break;
 8001600:	e7b6      	b.n	8001570 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001602:	684d      	ldr	r5, [r1, #4]
 8001604:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001606:	6a01      	ldr	r1, [r0, #32]
 8001608:	f021 0110 	bic.w	r1, r1, #16
 800160c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800160e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001610:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001612:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800161a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800161e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001622:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001624:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001626:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800162c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001630:	e7cb      	b.n	80015ca <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001632:	684a      	ldr	r2, [r1, #4]
 8001634:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001636:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001638:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800163a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800163e:	f025 0501 	bic.w	r5, r5, #1
 8001642:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001644:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001646:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800164c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001650:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001652:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001654:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800165a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800165e:	e7b4      	b.n	80015ca <HAL_TIM_ConfigClockSource+0x92>

08001660 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8001660:	6800      	ldr	r0, [r0, #0]
{
 8001662:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8001664:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001666:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800166c:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800166e:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001670:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001674:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8001676:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001678:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800167a:	d01e      	beq.n	80016ba <TIM_SlaveTimer_SetConfig+0x5a>
 800167c:	d803      	bhi.n	8001686 <TIM_SlaveTimer_SetConfig+0x26>
 800167e:	2a40      	cmp	r2, #64	; 0x40
 8001680:	d00b      	beq.n	800169a <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8001682:	2000      	movs	r0, #0
 8001684:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8001686:	2a60      	cmp	r2, #96	; 0x60
 8001688:	d027      	beq.n	80016da <TIM_SlaveTimer_SetConfig+0x7a>
 800168a:	2a70      	cmp	r2, #112	; 0x70
 800168c:	d1f9      	bne.n	8001682 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 800168e:	690b      	ldr	r3, [r1, #16]
 8001690:	688a      	ldr	r2, [r1, #8]
 8001692:	68c9      	ldr	r1, [r1, #12]
 8001694:	f7ff ff46 	bl	8001524 <TIM_ETR_SetConfig>
 8001698:	e7f3      	b.n	8001682 <TIM_SlaveTimer_SetConfig+0x22>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800169a:	2c05      	cmp	r4, #5
 800169c:	d030      	beq.n	8001700 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 800169e:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80016a0:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80016a2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80016aa:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80016b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80016b4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80016b6:	6202      	str	r2, [r0, #32]
 80016b8:	e7e3      	b.n	8001682 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80016ba:	688a      	ldr	r2, [r1, #8]
 80016bc:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80016be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016c0:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016c2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016c6:	f024 0401 	bic.w	r4, r4, #1
 80016ca:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016cc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80016ce:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80016d8:	e7ec      	b.n	80016b4 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80016da:	688c      	ldr	r4, [r1, #8]
 80016dc:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016de:	6a01      	ldr	r1, [r0, #32]
 80016e0:	f021 0110 	bic.w	r1, r1, #16
 80016e4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016e6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80016e8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80016ea:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80016ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80016f2:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80016f6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80016fa:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80016fc:	6203      	str	r3, [r0, #32]
 80016fe:	e7c0      	b.n	8001682 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	bd38      	pop	{r3, r4, r5, pc}

08001704 <HAL_TIM_SlaveConfigSynchro>:
{
 8001704:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001706:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800170a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800170c:	2b01      	cmp	r3, #1
 800170e:	f04f 0302 	mov.w	r3, #2
 8001712:	d01c      	beq.n	800174e <HAL_TIM_SlaveConfigSynchro+0x4a>
 8001714:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001716:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800171a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800171e:	f7ff ff9f 	bl	8001660 <TIM_SlaveTimer_SetConfig>
 8001722:	b130      	cbz	r0, 8001732 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8001724:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8001726:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800172a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800172e:	4628      	mov	r0, r5
 8001730:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800173a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001742:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001744:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001748:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800174c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800174e:	4618      	mov	r0, r3
}
 8001750:	bd38      	pop	{r3, r4, r5, pc}
	...

08001754 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001754:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001758:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 800175a:	2b01      	cmp	r3, #1
 800175c:	f04f 0302 	mov.w	r3, #2
 8001760:	d025      	beq.n	80017ae <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8001762:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001764:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001768:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800176a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800176c:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 800176e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8001772:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001776:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8001778:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800177a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800177c:	4c0d      	ldr	r4, [pc, #52]	; (80017b4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800177e:	42a3      	cmp	r3, r4
 8001780:	d00a      	beq.n	8001798 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001786:	d007      	beq.n	8001798 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001788:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800178c:	42a3      	cmp	r3, r4
 800178e:	d003      	beq.n	8001798 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8001790:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001794:	42a3      	cmp	r3, r4
 8001796:	d104      	bne.n	80017a2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001798:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800179a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800179e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80017a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017a8:	2300      	movs	r3, #0
 80017aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80017ae:	4618      	mov	r0, r3

  return HAL_OK;
}
 80017b0:	bd30      	pop	{r4, r5, pc}
 80017b2:	bf00      	nop
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <HAL_TIMEx_CommutCallback>:
 80017b8:	4770      	bx	lr

080017ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017ba:	4770      	bx	lr

080017bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80017bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80017be:	e003      	b.n	80017c8 <LoopCopyDataInit>

080017c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80017c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80017c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80017c6:	3104      	adds	r1, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80017c8:	480a      	ldr	r0, [pc, #40]	; (80017f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80017cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80017ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80017d0:	d3f6      	bcc.n	80017c0 <CopyDataInit>
  ldr r2, =_sbss
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80017d4:	e002      	b.n	80017dc <LoopFillZerobss>

080017d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80017d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80017d8:	f842 3b04 	str.w	r3, [r2], #4

080017dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80017e0:	d3f9      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017e2:	f7fe fe63 	bl	80004ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e6:	f000 f80f 	bl	8001808 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ea:	f7fe fdfd 	bl	80003e8 <main>
  bx lr
 80017ee:	4770      	bx	lr
  ldr r3, =_sidata
 80017f0:	080018a0 	.word	0x080018a0
  ldr r0, =_sdata
 80017f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80017f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80017fc:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001800:	200000c4 	.word	0x200000c4

08001804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC1_2_IRQHandler>
	...

08001808 <__libc_init_array>:
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	2500      	movs	r5, #0
 800180c:	4e0c      	ldr	r6, [pc, #48]	; (8001840 <__libc_init_array+0x38>)
 800180e:	4c0d      	ldr	r4, [pc, #52]	; (8001844 <__libc_init_array+0x3c>)
 8001810:	1ba4      	subs	r4, r4, r6
 8001812:	10a4      	asrs	r4, r4, #2
 8001814:	42a5      	cmp	r5, r4
 8001816:	d109      	bne.n	800182c <__libc_init_array+0x24>
 8001818:	f000 f822 	bl	8001860 <_init>
 800181c:	2500      	movs	r5, #0
 800181e:	4e0a      	ldr	r6, [pc, #40]	; (8001848 <__libc_init_array+0x40>)
 8001820:	4c0a      	ldr	r4, [pc, #40]	; (800184c <__libc_init_array+0x44>)
 8001822:	1ba4      	subs	r4, r4, r6
 8001824:	10a4      	asrs	r4, r4, #2
 8001826:	42a5      	cmp	r5, r4
 8001828:	d105      	bne.n	8001836 <__libc_init_array+0x2e>
 800182a:	bd70      	pop	{r4, r5, r6, pc}
 800182c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001830:	4798      	blx	r3
 8001832:	3501      	adds	r5, #1
 8001834:	e7ee      	b.n	8001814 <__libc_init_array+0xc>
 8001836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800183a:	4798      	blx	r3
 800183c:	3501      	adds	r5, #1
 800183e:	e7f2      	b.n	8001826 <__libc_init_array+0x1e>
 8001840:	08001898 	.word	0x08001898
 8001844:	08001898 	.word	0x08001898
 8001848:	08001898 	.word	0x08001898
 800184c:	0800189c 	.word	0x0800189c

08001850 <memset>:
 8001850:	4603      	mov	r3, r0
 8001852:	4402      	add	r2, r0
 8001854:	4293      	cmp	r3, r2
 8001856:	d100      	bne.n	800185a <memset+0xa>
 8001858:	4770      	bx	lr
 800185a:	f803 1b01 	strb.w	r1, [r3], #1
 800185e:	e7f9      	b.n	8001854 <memset+0x4>

08001860 <_init>:
 8001860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001862:	bf00      	nop
 8001864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001866:	bc08      	pop	{r3}
 8001868:	469e      	mov	lr, r3
 800186a:	4770      	bx	lr

0800186c <_fini>:
 800186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186e:	bf00      	nop
 8001870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001872:	bc08      	pop	{r3}
 8001874:	469e      	mov	lr, r3
 8001876:	4770      	bx	lr
