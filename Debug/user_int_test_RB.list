
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  080038d8  080038d8  000138d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d0  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  080039f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000238  2000007c  08003a74  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002b4  08003a74  000202b4  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00016085  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003d9a  00000000  00000000  0003612a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d80  00000000  00000000  00039ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fe0  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000844d  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000571b  00000000  00000000  00044075  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049790  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ea8  00000000  00000000  0004980c  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007bad  00000000  00000000  0004c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003698 	.word	0x08003698

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003698 	.word	0x08003698

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <selfrel_offset31>:
 8000160:	6803      	ldr	r3, [r0, #0]
 8000162:	005a      	lsls	r2, r3, #1
 8000164:	bf4c      	ite	mi
 8000166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800016a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800016e:	4418      	add	r0, r3
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop

08000174 <search_EIT_table>:
 8000174:	b361      	cbz	r1, 80001d0 <search_EIT_table+0x5c>
 8000176:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800017a:	f101 3aff 	add.w	sl, r1, #4294967295
 800017e:	4690      	mov	r8, r2
 8000180:	4606      	mov	r6, r0
 8000182:	46d1      	mov	r9, sl
 8000184:	2700      	movs	r7, #0
 8000186:	eb07 0409 	add.w	r4, r7, r9
 800018a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800018e:	1064      	asrs	r4, r4, #1
 8000190:	00e5      	lsls	r5, r4, #3
 8000192:	1971      	adds	r1, r6, r5
 8000194:	4608      	mov	r0, r1
 8000196:	f7ff ffe3 	bl	8000160 <selfrel_offset31>
 800019a:	45a2      	cmp	sl, r4
 800019c:	4683      	mov	fp, r0
 800019e:	f105 0008 	add.w	r0, r5, #8
 80001a2:	4430      	add	r0, r6
 80001a4:	d009      	beq.n	80001ba <search_EIT_table+0x46>
 80001a6:	f7ff ffdb 	bl	8000160 <selfrel_offset31>
 80001aa:	45c3      	cmp	fp, r8
 80001ac:	f100 30ff 	add.w	r0, r0, #4294967295
 80001b0:	d805      	bhi.n	80001be <search_EIT_table+0x4a>
 80001b2:	4540      	cmp	r0, r8
 80001b4:	d209      	bcs.n	80001ca <search_EIT_table+0x56>
 80001b6:	1c67      	adds	r7, r4, #1
 80001b8:	e7e5      	b.n	8000186 <search_EIT_table+0x12>
 80001ba:	45c3      	cmp	fp, r8
 80001bc:	d905      	bls.n	80001ca <search_EIT_table+0x56>
 80001be:	42a7      	cmp	r7, r4
 80001c0:	d002      	beq.n	80001c8 <search_EIT_table+0x54>
 80001c2:	f104 39ff 	add.w	r9, r4, #4294967295
 80001c6:	e7de      	b.n	8000186 <search_EIT_table+0x12>
 80001c8:	2100      	movs	r1, #0
 80001ca:	4608      	mov	r0, r1
 80001cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001d0:	4608      	mov	r0, r1
 80001d2:	4770      	bx	lr

080001d4 <__gnu_unwind_get_pr_addr>:
 80001d4:	2801      	cmp	r0, #1
 80001d6:	d007      	beq.n	80001e8 <__gnu_unwind_get_pr_addr+0x14>
 80001d8:	2802      	cmp	r0, #2
 80001da:	d007      	beq.n	80001ec <__gnu_unwind_get_pr_addr+0x18>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__gnu_unwind_get_pr_addr+0x1c>)
 80001de:	2800      	cmp	r0, #0
 80001e0:	bf0c      	ite	eq
 80001e2:	4618      	moveq	r0, r3
 80001e4:	2000      	movne	r0, #0
 80001e6:	4770      	bx	lr
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <__gnu_unwind_get_pr_addr+0x20>)
 80001ea:	4770      	bx	lr
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <__gnu_unwind_get_pr_addr+0x24>)
 80001ee:	4770      	bx	lr
 80001f0:	080008e5 	.word	0x080008e5
 80001f4:	080008e9 	.word	0x080008e9
 80001f8:	080008ed 	.word	0x080008ed

080001fc <get_eit_entry>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	4b25      	ldr	r3, [pc, #148]	; (8000294 <get_eit_entry+0x98>)
 8000200:	b083      	sub	sp, #12
 8000202:	4604      	mov	r4, r0
 8000204:	1e8d      	subs	r5, r1, #2
 8000206:	b373      	cbz	r3, 8000266 <get_eit_entry+0x6a>
 8000208:	a901      	add	r1, sp, #4
 800020a:	4628      	mov	r0, r5
 800020c:	f3af 8000 	nop.w
 8000210:	b318      	cbz	r0, 800025a <get_eit_entry+0x5e>
 8000212:	9901      	ldr	r1, [sp, #4]
 8000214:	462a      	mov	r2, r5
 8000216:	f7ff ffad 	bl	8000174 <search_EIT_table>
 800021a:	4601      	mov	r1, r0
 800021c:	b1e8      	cbz	r0, 800025a <get_eit_entry+0x5e>
 800021e:	f7ff ff9f 	bl	8000160 <selfrel_offset31>
 8000222:	684b      	ldr	r3, [r1, #4]
 8000224:	64a0      	str	r0, [r4, #72]	; 0x48
 8000226:	2b01      	cmp	r3, #1
 8000228:	d011      	beq.n	800024e <get_eit_entry+0x52>
 800022a:	2b00      	cmp	r3, #0
 800022c:	db22      	blt.n	8000274 <get_eit_entry+0x78>
 800022e:	1d08      	adds	r0, r1, #4
 8000230:	f7ff ff96 	bl	8000160 <selfrel_offset31>
 8000234:	2300      	movs	r3, #0
 8000236:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000238:	6523      	str	r3, [r4, #80]	; 0x50
 800023a:	6803      	ldr	r3, [r0, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db1e      	blt.n	800027e <get_eit_entry+0x82>
 8000240:	f7ff ff8e 	bl	8000160 <selfrel_offset31>
 8000244:	2300      	movs	r3, #0
 8000246:	6120      	str	r0, [r4, #16]
 8000248:	4618      	mov	r0, r3
 800024a:	b003      	add	sp, #12
 800024c:	bd30      	pop	{r4, r5, pc}
 800024e:	2305      	movs	r3, #5
 8000250:	2200      	movs	r2, #0
 8000252:	4618      	mov	r0, r3
 8000254:	6122      	str	r2, [r4, #16]
 8000256:	b003      	add	sp, #12
 8000258:	bd30      	pop	{r4, r5, pc}
 800025a:	2309      	movs	r3, #9
 800025c:	2200      	movs	r2, #0
 800025e:	4618      	mov	r0, r3
 8000260:	6122      	str	r2, [r4, #16]
 8000262:	b003      	add	sp, #12
 8000264:	bd30      	pop	{r4, r5, pc}
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <get_eit_entry+0x9c>)
 8000268:	490c      	ldr	r1, [pc, #48]	; (800029c <get_eit_entry+0xa0>)
 800026a:	4618      	mov	r0, r3
 800026c:	1ac9      	subs	r1, r1, r3
 800026e:	10c9      	asrs	r1, r1, #3
 8000270:	9101      	str	r1, [sp, #4]
 8000272:	e7cf      	b.n	8000214 <get_eit_entry+0x18>
 8000274:	2301      	movs	r3, #1
 8000276:	1d08      	adds	r0, r1, #4
 8000278:	64e0      	str	r0, [r4, #76]	; 0x4c
 800027a:	6523      	str	r3, [r4, #80]	; 0x50
 800027c:	e7dd      	b.n	800023a <get_eit_entry+0x3e>
 800027e:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000282:	f7ff ffa7 	bl	80001d4 <__gnu_unwind_get_pr_addr>
 8000286:	2800      	cmp	r0, #0
 8000288:	6120      	str	r0, [r4, #16]
 800028a:	bf14      	ite	ne
 800028c:	2300      	movne	r3, #0
 800028e:	2309      	moveq	r3, #9
 8000290:	e7da      	b.n	8000248 <get_eit_entry+0x4c>
 8000292:	bf00      	nop
 8000294:	00000000 	.word	0x00000000
 8000298:	08003908 	.word	0x08003908
 800029c:	080039d8 	.word	0x080039d8

080002a0 <restore_non_core_regs>:
 80002a0:	6803      	ldr	r3, [r0, #0]
 80002a2:	b510      	push	{r4, lr}
 80002a4:	07da      	lsls	r2, r3, #31
 80002a6:	4604      	mov	r4, r0
 80002a8:	d406      	bmi.n	80002b8 <restore_non_core_regs+0x18>
 80002aa:	079b      	lsls	r3, r3, #30
 80002ac:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002b0:	d509      	bpl.n	80002c6 <restore_non_core_regs+0x26>
 80002b2:	f000 fc57 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D>
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	0759      	lsls	r1, r3, #29
 80002ba:	d509      	bpl.n	80002d0 <restore_non_core_regs+0x30>
 80002bc:	071a      	lsls	r2, r3, #28
 80002be:	d50e      	bpl.n	80002de <restore_non_core_regs+0x3e>
 80002c0:	06db      	lsls	r3, r3, #27
 80002c2:	d513      	bpl.n	80002ec <restore_non_core_regs+0x4c>
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	f000 fc45 	bl	8000b54 <__gnu_Unwind_Restore_VFP>
 80002ca:	6823      	ldr	r3, [r4, #0]
 80002cc:	0759      	lsls	r1, r3, #29
 80002ce:	d4f5      	bmi.n	80002bc <restore_non_core_regs+0x1c>
 80002d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002d4:	f000 fc4e 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002d8:	6823      	ldr	r3, [r4, #0]
 80002da:	071a      	lsls	r2, r3, #28
 80002dc:	d4f0      	bmi.n	80002c0 <restore_non_core_regs+0x20>
 80002de:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002e2:	f000 fc4f 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 80002e6:	6823      	ldr	r3, [r4, #0]
 80002e8:	06db      	lsls	r3, r3, #27
 80002ea:	d4eb      	bmi.n	80002c4 <restore_non_core_regs+0x24>
 80002ec:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002f4:	f000 bc8a 	b.w	8000c0c <__gnu_Unwind_Restore_WMMXC>

080002f8 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002f8:	6803      	ldr	r3, [r0, #0]
 80002fa:	b103      	cbz	r3, 80002fe <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80002fc:	4403      	add	r3, r0
 80002fe:	4618      	mov	r0, r3
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <__gnu_unwind_24bit.isra.1>:
 8000304:	2009      	movs	r0, #9
 8000306:	4770      	bx	lr

08000308 <_Unwind_DebugHook>:
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop

0800030c <unwind_phase2>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4604      	mov	r4, r0
 8000310:	460d      	mov	r5, r1
 8000312:	e008      	b.n	8000326 <unwind_phase2+0x1a>
 8000314:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000316:	6923      	ldr	r3, [r4, #16]
 8000318:	6162      	str	r2, [r4, #20]
 800031a:	4621      	mov	r1, r4
 800031c:	462a      	mov	r2, r5
 800031e:	2001      	movs	r0, #1
 8000320:	4798      	blx	r3
 8000322:	2808      	cmp	r0, #8
 8000324:	d108      	bne.n	8000338 <unwind_phase2+0x2c>
 8000326:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000328:	4620      	mov	r0, r4
 800032a:	f7ff ff67 	bl	80001fc <get_eit_entry>
 800032e:	4606      	mov	r6, r0
 8000330:	2800      	cmp	r0, #0
 8000332:	d0ef      	beq.n	8000314 <unwind_phase2+0x8>
 8000334:	f003 f8c2 	bl	80034bc <abort>
 8000338:	2807      	cmp	r0, #7
 800033a:	d1fb      	bne.n	8000334 <unwind_phase2+0x28>
 800033c:	4630      	mov	r0, r6
 800033e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000340:	f7ff ffe2 	bl	8000308 <_Unwind_DebugHook>
 8000344:	1d28      	adds	r0, r5, #4
 8000346:	f000 fbf9 	bl	8000b3c <__restore_core_regs>
 800034a:	bf00      	nop

0800034c <unwind_phase2_forced>:
 800034c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000350:	4605      	mov	r5, r0
 8000352:	2700      	movs	r7, #0
 8000354:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000358:	ac03      	add	r4, sp, #12
 800035a:	1d0e      	adds	r6, r1, #4
 800035c:	4692      	mov	sl, r2
 800035e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000366:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800036a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800036e:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000372:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000376:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800037a:	ac02      	add	r4, sp, #8
 800037c:	4628      	mov	r0, r5
 800037e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000380:	6027      	str	r7, [r4, #0]
 8000382:	f7ff ff3b 	bl	80001fc <get_eit_entry>
 8000386:	f1ba 0f00 	cmp.w	sl, #0
 800038a:	4607      	mov	r7, r0
 800038c:	bf14      	ite	ne
 800038e:	260a      	movne	r6, #10
 8000390:	2609      	moveq	r6, #9
 8000392:	b17f      	cbz	r7, 80003b4 <unwind_phase2_forced+0x68>
 8000394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000396:	f046 0110 	orr.w	r1, r6, #16
 800039a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800039e:	462a      	mov	r2, r5
 80003a0:	6463      	str	r3, [r4, #68]	; 0x44
 80003a2:	2001      	movs	r0, #1
 80003a4:	462b      	mov	r3, r5
 80003a6:	47c0      	blx	r8
 80003a8:	bb78      	cbnz	r0, 800040a <unwind_phase2_forced+0xbe>
 80003aa:	4638      	mov	r0, r7
 80003ac:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003ba:	616b      	str	r3, [r5, #20]
 80003bc:	4621      	mov	r1, r4
 80003be:	a87a      	add	r0, sp, #488	; 0x1e8
 80003c0:	f003 f95e 	bl	8003680 <memcpy>
 80003c4:	692b      	ldr	r3, [r5, #16]
 80003c6:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003c8:	4629      	mov	r1, r5
 80003ca:	4630      	mov	r0, r6
 80003cc:	4798      	blx	r3
 80003ce:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003d0:	4682      	mov	sl, r0
 80003d2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003d6:	4631      	mov	r1, r6
 80003d8:	6463      	str	r3, [r4, #68]	; 0x44
 80003da:	462a      	mov	r2, r5
 80003dc:	462b      	mov	r3, r5
 80003de:	2001      	movs	r0, #1
 80003e0:	47c0      	blx	r8
 80003e2:	b990      	cbnz	r0, 800040a <unwind_phase2_forced+0xbe>
 80003e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003e8:	a97a      	add	r1, sp, #488	; 0x1e8
 80003ea:	4620      	mov	r0, r4
 80003ec:	f003 f948 	bl	8003680 <memcpy>
 80003f0:	f1ba 0f08 	cmp.w	sl, #8
 80003f4:	d106      	bne.n	8000404 <unwind_phase2_forced+0xb8>
 80003f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003f8:	4628      	mov	r0, r5
 80003fa:	f7ff feff 	bl	80001fc <get_eit_entry>
 80003fe:	2609      	movs	r6, #9
 8000400:	4607      	mov	r7, r0
 8000402:	e7c6      	b.n	8000392 <unwind_phase2_forced+0x46>
 8000404:	f1ba 0f07 	cmp.w	sl, #7
 8000408:	d005      	beq.n	8000416 <unwind_phase2_forced+0xca>
 800040a:	2709      	movs	r7, #9
 800040c:	4638      	mov	r0, r7
 800040e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	4638      	mov	r0, r7
 8000418:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800041a:	f7ff ff75 	bl	8000308 <_Unwind_DebugHook>
 800041e:	a803      	add	r0, sp, #12
 8000420:	f000 fb8c 	bl	8000b3c <__restore_core_regs>

08000424 <_Unwind_GetCFA>:
 8000424:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000426:	4770      	bx	lr

08000428 <__gnu_Unwind_RaiseException>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	f04f 3eff 	mov.w	lr, #4294967295
 800042e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000430:	b0f9      	sub	sp, #484	; 0x1e4
 8000432:	640b      	str	r3, [r1, #64]	; 0x40
 8000434:	1d0e      	adds	r6, r1, #4
 8000436:	ad01      	add	r5, sp, #4
 8000438:	460f      	mov	r7, r1
 800043a:	4604      	mov	r4, r0
 800043c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800043e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000444:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000448:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800044c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000450:	f8cd e000 	str.w	lr, [sp]
 8000454:	e006      	b.n	8000464 <__gnu_Unwind_RaiseException+0x3c>
 8000456:	6923      	ldr	r3, [r4, #16]
 8000458:	466a      	mov	r2, sp
 800045a:	4621      	mov	r1, r4
 800045c:	4798      	blx	r3
 800045e:	2808      	cmp	r0, #8
 8000460:	4605      	mov	r5, r0
 8000462:	d108      	bne.n	8000476 <__gnu_Unwind_RaiseException+0x4e>
 8000464:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000466:	4620      	mov	r0, r4
 8000468:	f7ff fec8 	bl	80001fc <get_eit_entry>
 800046c:	2800      	cmp	r0, #0
 800046e:	d0f2      	beq.n	8000456 <__gnu_Unwind_RaiseException+0x2e>
 8000470:	2009      	movs	r0, #9
 8000472:	b079      	add	sp, #484	; 0x1e4
 8000474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000476:	4668      	mov	r0, sp
 8000478:	f7ff ff12 	bl	80002a0 <restore_non_core_regs>
 800047c:	2d06      	cmp	r5, #6
 800047e:	d1f7      	bne.n	8000470 <__gnu_Unwind_RaiseException+0x48>
 8000480:	4639      	mov	r1, r7
 8000482:	4620      	mov	r0, r4
 8000484:	f7ff ff42 	bl	800030c <unwind_phase2>

08000488 <__gnu_Unwind_ForcedUnwind>:
 8000488:	b430      	push	{r4, r5}
 800048a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800048c:	60c1      	str	r1, [r0, #12]
 800048e:	6182      	str	r2, [r0, #24]
 8000490:	4619      	mov	r1, r3
 8000492:	641d      	str	r5, [r3, #64]	; 0x40
 8000494:	2200      	movs	r2, #0
 8000496:	bc30      	pop	{r4, r5}
 8000498:	e758      	b.n	800034c <unwind_phase2_forced>
 800049a:	bf00      	nop

0800049c <__gnu_Unwind_Resume>:
 800049c:	b570      	push	{r4, r5, r6, lr}
 800049e:	6943      	ldr	r3, [r0, #20]
 80004a0:	68c6      	ldr	r6, [r0, #12]
 80004a2:	640b      	str	r3, [r1, #64]	; 0x40
 80004a4:	b126      	cbz	r6, 80004b0 <__gnu_Unwind_Resume+0x14>
 80004a6:	2201      	movs	r2, #1
 80004a8:	f7ff ff50 	bl	800034c <unwind_phase2_forced>
 80004ac:	f003 f806 	bl	80034bc <abort>
 80004b0:	6903      	ldr	r3, [r0, #16]
 80004b2:	460a      	mov	r2, r1
 80004b4:	4604      	mov	r4, r0
 80004b6:	460d      	mov	r5, r1
 80004b8:	4601      	mov	r1, r0
 80004ba:	2002      	movs	r0, #2
 80004bc:	4798      	blx	r3
 80004be:	2807      	cmp	r0, #7
 80004c0:	d007      	beq.n	80004d2 <__gnu_Unwind_Resume+0x36>
 80004c2:	2808      	cmp	r0, #8
 80004c4:	d103      	bne.n	80004ce <__gnu_Unwind_Resume+0x32>
 80004c6:	4629      	mov	r1, r5
 80004c8:	4620      	mov	r0, r4
 80004ca:	f7ff ff1f 	bl	800030c <unwind_phase2>
 80004ce:	f002 fff5 	bl	80034bc <abort>
 80004d2:	4630      	mov	r0, r6
 80004d4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004d6:	f7ff ff17 	bl	8000308 <_Unwind_DebugHook>
 80004da:	1d28      	adds	r0, r5, #4
 80004dc:	f000 fb2e 	bl	8000b3c <__restore_core_regs>

080004e0 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e0:	68c2      	ldr	r2, [r0, #12]
 80004e2:	b12a      	cbz	r2, 80004f0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e4:	b410      	push	{r4}
 80004e6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004e8:	2200      	movs	r2, #0
 80004ea:	640c      	str	r4, [r1, #64]	; 0x40
 80004ec:	bc10      	pop	{r4}
 80004ee:	e72d      	b.n	800034c <unwind_phase2_forced>
 80004f0:	e79a      	b.n	8000428 <__gnu_Unwind_RaiseException>
 80004f2:	bf00      	nop

080004f4 <_Unwind_Complete>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_Unwind_DeleteException>:
 80004f8:	6883      	ldr	r3, [r0, #8]
 80004fa:	b113      	cbz	r3, 8000502 <_Unwind_DeleteException+0xa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	2001      	movs	r0, #1
 8000500:	4718      	bx	r3
 8000502:	4770      	bx	lr

08000504 <_Unwind_VRS_Get>:
 8000504:	b500      	push	{lr}
 8000506:	2904      	cmp	r1, #4
 8000508:	d807      	bhi.n	800051a <_Unwind_VRS_Get+0x16>
 800050a:	e8df f001 	tbb	[pc, r1]
 800050e:	0903      	.short	0x0903
 8000510:	0906      	.short	0x0906
 8000512:	09          	.byte	0x09
 8000513:	00          	.byte	0x00
 8000514:	b90b      	cbnz	r3, 800051a <_Unwind_VRS_Get+0x16>
 8000516:	2a0f      	cmp	r2, #15
 8000518:	d905      	bls.n	8000526 <_Unwind_VRS_Get+0x22>
 800051a:	2002      	movs	r0, #2
 800051c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000520:	2001      	movs	r0, #1
 8000522:	f85d fb04 	ldr.w	pc, [sp], #4
 8000526:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800052a:	6852      	ldr	r2, [r2, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	f85d fb04 	ldr.w	pc, [sp], #4
 8000536:	bf00      	nop

08000538 <_Unwind_GetGR>:
 8000538:	2300      	movs	r3, #0
 800053a:	b510      	push	{r4, lr}
 800053c:	b084      	sub	sp, #16
 800053e:	ac03      	add	r4, sp, #12
 8000540:	460a      	mov	r2, r1
 8000542:	9400      	str	r4, [sp, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f7ff ffdd 	bl	8000504 <_Unwind_VRS_Get>
 800054a:	9803      	ldr	r0, [sp, #12]
 800054c:	b004      	add	sp, #16
 800054e:	bd10      	pop	{r4, pc}

08000550 <_Unwind_VRS_Set>:
 8000550:	b500      	push	{lr}
 8000552:	2904      	cmp	r1, #4
 8000554:	d807      	bhi.n	8000566 <_Unwind_VRS_Set+0x16>
 8000556:	e8df f001 	tbb	[pc, r1]
 800055a:	0903      	.short	0x0903
 800055c:	0906      	.short	0x0906
 800055e:	09          	.byte	0x09
 800055f:	00          	.byte	0x00
 8000560:	b90b      	cbnz	r3, 8000566 <_Unwind_VRS_Set+0x16>
 8000562:	2a0f      	cmp	r2, #15
 8000564:	d905      	bls.n	8000572 <_Unwind_VRS_Set+0x22>
 8000566:	2002      	movs	r0, #2
 8000568:	f85d fb04 	ldr.w	pc, [sp], #4
 800056c:	2001      	movs	r0, #1
 800056e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000572:	9901      	ldr	r1, [sp, #4]
 8000574:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000578:	6809      	ldr	r1, [r1, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	6051      	str	r1, [r2, #4]
 800057e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000582:	bf00      	nop

08000584 <_Unwind_SetGR>:
 8000584:	2300      	movs	r3, #0
 8000586:	b510      	push	{r4, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	ac04      	add	r4, sp, #16
 800058c:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000590:	9400      	str	r4, [sp, #0]
 8000592:	460a      	mov	r2, r1
 8000594:	4619      	mov	r1, r3
 8000596:	f7ff ffdb 	bl	8000550 <_Unwind_VRS_Set>
 800059a:	b004      	add	sp, #16
 800059c:	bd10      	pop	{r4, pc}
 800059e:	bf00      	nop

080005a0 <__gnu_Unwind_Backtrace>:
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	f04f 3eff 	mov.w	lr, #4294967295
 80005a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005a8:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80005ac:	6413      	str	r3, [r2, #64]	; 0x40
 80005ae:	1d15      	adds	r5, r2, #4
 80005b0:	ac17      	add	r4, sp, #92	; 0x5c
 80005b2:	4607      	mov	r7, r0
 80005b4:	460e      	mov	r6, r1
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005ca:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005ce:	e012      	b.n	80005f6 <__gnu_Unwind_Backtrace+0x56>
 80005d0:	210c      	movs	r1, #12
 80005d2:	a816      	add	r0, sp, #88	; 0x58
 80005d4:	466a      	mov	r2, sp
 80005d6:	f7ff ffd5 	bl	8000584 <_Unwind_SetGR>
 80005da:	4631      	mov	r1, r6
 80005dc:	a816      	add	r0, sp, #88	; 0x58
 80005de:	47b8      	blx	r7
 80005e0:	b978      	cbnz	r0, 8000602 <__gnu_Unwind_Backtrace+0x62>
 80005e2:	9b04      	ldr	r3, [sp, #16]
 80005e4:	aa16      	add	r2, sp, #88	; 0x58
 80005e6:	4669      	mov	r1, sp
 80005e8:	2008      	movs	r0, #8
 80005ea:	4798      	blx	r3
 80005ec:	2805      	cmp	r0, #5
 80005ee:	4604      	mov	r4, r0
 80005f0:	d008      	beq.n	8000604 <__gnu_Unwind_Backtrace+0x64>
 80005f2:	2809      	cmp	r0, #9
 80005f4:	d005      	beq.n	8000602 <__gnu_Unwind_Backtrace+0x62>
 80005f6:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005f8:	4668      	mov	r0, sp
 80005fa:	f7ff fdff 	bl	80001fc <get_eit_entry>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d0e6      	beq.n	80005d0 <__gnu_Unwind_Backtrace+0x30>
 8000602:	2409      	movs	r4, #9
 8000604:	a816      	add	r0, sp, #88	; 0x58
 8000606:	f7ff fe4b 	bl	80002a0 <restore_non_core_regs>
 800060a:	4620      	mov	r0, r4
 800060c:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000612:	bf00      	nop

08000614 <__gnu_unwind_pr_common>:
 8000614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000618:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800061a:	4691      	mov	r9, r2
 800061c:	6822      	ldr	r2, [r4, #0]
 800061e:	b08b      	sub	sp, #44	; 0x2c
 8000620:	3404      	adds	r4, #4
 8000622:	460d      	mov	r5, r1
 8000624:	9207      	str	r2, [sp, #28]
 8000626:	9408      	str	r4, [sp, #32]
 8000628:	f000 0b03 	and.w	fp, r0, #3
 800062c:	461e      	mov	r6, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d160      	bne.n	80006f4 <__gnu_unwind_pr_common+0xe0>
 8000632:	2303      	movs	r3, #3
 8000634:	0212      	lsls	r2, r2, #8
 8000636:	9207      	str	r2, [sp, #28]
 8000638:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 800063c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000640:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000642:	f1bb 0f02 	cmp.w	fp, #2
 8000646:	bf08      	it	eq
 8000648:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800064a:	f013 0301 	ands.w	r3, r3, #1
 800064e:	d140      	bne.n	80006d2 <__gnu_unwind_pr_common+0xbe>
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f000 0308 	and.w	r3, r0, #8
 8000656:	9303      	str	r3, [sp, #12]
 8000658:	f8d4 8000 	ldr.w	r8, [r4]
 800065c:	f1b8 0f00 	cmp.w	r8, #0
 8000660:	d039      	beq.n	80006d6 <__gnu_unwind_pr_common+0xc2>
 8000662:	2e02      	cmp	r6, #2
 8000664:	d043      	beq.n	80006ee <__gnu_unwind_pr_common+0xda>
 8000666:	f8b4 8000 	ldrh.w	r8, [r4]
 800066a:	8867      	ldrh	r7, [r4, #2]
 800066c:	3404      	adds	r4, #4
 800066e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000670:	f027 0a01 	bic.w	sl, r7, #1
 8000674:	210f      	movs	r1, #15
 8000676:	4648      	mov	r0, r9
 8000678:	449a      	add	sl, r3
 800067a:	f7ff ff5d 	bl	8000538 <_Unwind_GetGR>
 800067e:	4582      	cmp	sl, r0
 8000680:	d833      	bhi.n	80006ea <__gnu_unwind_pr_common+0xd6>
 8000682:	f028 0301 	bic.w	r3, r8, #1
 8000686:	449a      	add	sl, r3
 8000688:	4550      	cmp	r0, sl
 800068a:	bf2c      	ite	cs
 800068c:	2000      	movcs	r0, #0
 800068e:	2001      	movcc	r0, #1
 8000690:	007f      	lsls	r7, r7, #1
 8000692:	f007 0702 	and.w	r7, r7, #2
 8000696:	f008 0801 	and.w	r8, r8, #1
 800069a:	ea47 0708 	orr.w	r7, r7, r8
 800069e:	2f01      	cmp	r7, #1
 80006a0:	d03e      	beq.n	8000720 <__gnu_unwind_pr_common+0x10c>
 80006a2:	d335      	bcc.n	8000710 <__gnu_unwind_pr_common+0xfc>
 80006a4:	2f02      	cmp	r7, #2
 80006a6:	d11c      	bne.n	80006e2 <__gnu_unwind_pr_common+0xce>
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80006ae:	9202      	str	r2, [sp, #8]
 80006b0:	f1bb 0f00 	cmp.w	fp, #0
 80006b4:	d176      	bne.n	80007a4 <__gnu_unwind_pr_common+0x190>
 80006b6:	b128      	cbz	r0, 80006c4 <__gnu_unwind_pr_common+0xb0>
 80006b8:	9903      	ldr	r1, [sp, #12]
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d07e      	beq.n	80007bc <__gnu_unwind_pr_common+0x1a8>
 80006be:	2a00      	cmp	r2, #0
 80006c0:	f000 80a6 	beq.w	8000810 <__gnu_unwind_pr_common+0x1fc>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	db77      	blt.n	80007b8 <__gnu_unwind_pr_common+0x1a4>
 80006c8:	9b02      	ldr	r3, [sp, #8]
 80006ca:	3301      	adds	r3, #1
 80006cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006d0:	e7c2      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 80006d2:	2300      	movs	r3, #0
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2e02      	cmp	r6, #2
 80006d8:	dd3e      	ble.n	8000758 <__gnu_unwind_pr_common+0x144>
 80006da:	f7ff fe13 	bl	8000304 <__gnu_unwind_24bit.isra.1>
 80006de:	2800      	cmp	r0, #0
 80006e0:	d040      	beq.n	8000764 <__gnu_unwind_pr_common+0x150>
 80006e2:	2009      	movs	r0, #9
 80006e4:	b00b      	add	sp, #44	; 0x2c
 80006e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006ea:	2000      	movs	r0, #0
 80006ec:	e7d0      	b.n	8000690 <__gnu_unwind_pr_common+0x7c>
 80006ee:	6867      	ldr	r7, [r4, #4]
 80006f0:	3408      	adds	r4, #8
 80006f2:	e7bc      	b.n	800066e <__gnu_unwind_pr_common+0x5a>
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	dca3      	bgt.n	8000640 <__gnu_unwind_pr_common+0x2c>
 80006f8:	2102      	movs	r1, #2
 80006fa:	0c13      	lsrs	r3, r2, #16
 80006fc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000700:	0412      	lsls	r2, r2, #16
 8000702:	b2db      	uxtb	r3, r3
 8000704:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000708:	9207      	str	r2, [sp, #28]
 800070a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800070e:	e797      	b.n	8000640 <__gnu_unwind_pr_common+0x2c>
 8000710:	f1bb 0f00 	cmp.w	fp, #0
 8000714:	d002      	beq.n	800071c <__gnu_unwind_pr_common+0x108>
 8000716:	2800      	cmp	r0, #0
 8000718:	f040 80bd 	bne.w	8000896 <__gnu_unwind_pr_common+0x282>
 800071c:	3404      	adds	r4, #4
 800071e:	e79b      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 8000720:	f1bb 0f00 	cmp.w	fp, #0
 8000724:	d125      	bne.n	8000772 <__gnu_unwind_pr_common+0x15e>
 8000726:	b1a8      	cbz	r0, 8000754 <__gnu_unwind_pr_common+0x140>
 8000728:	e894 000c 	ldmia.w	r4, {r2, r3}
 800072c:	1c99      	adds	r1, r3, #2
 800072e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000732:	d0d6      	beq.n	80006e2 <__gnu_unwind_pr_common+0xce>
 8000734:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000738:	3301      	adds	r3, #1
 800073a:	9106      	str	r1, [sp, #24]
 800073c:	f000 80a3 	beq.w	8000886 <__gnu_unwind_pr_common+0x272>
 8000740:	1d20      	adds	r0, r4, #4
 8000742:	f7ff fdd9 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000746:	ab06      	add	r3, sp, #24
 8000748:	4601      	mov	r1, r0
 800074a:	4628      	mov	r0, r5
 800074c:	f002 fd32 	bl	80031b4 <__cxa_type_match>
 8000750:	2800      	cmp	r0, #0
 8000752:	d177      	bne.n	8000844 <__gnu_unwind_pr_common+0x230>
 8000754:	3408      	adds	r4, #8
 8000756:	e77f      	b.n	8000658 <__gnu_unwind_pr_common+0x44>
 8000758:	a907      	add	r1, sp, #28
 800075a:	4648      	mov	r0, r9
 800075c:	f000 faf0 	bl	8000d40 <__gnu_unwind_execute>
 8000760:	2800      	cmp	r0, #0
 8000762:	d1be      	bne.n	80006e2 <__gnu_unwind_pr_common+0xce>
 8000764:	9b01      	ldr	r3, [sp, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d15c      	bne.n	8000824 <__gnu_unwind_pr_common+0x210>
 800076a:	2008      	movs	r0, #8
 800076c:	b00b      	add	sp, #44	; 0x2c
 800076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000772:	210d      	movs	r1, #13
 8000774:	4648      	mov	r0, r9
 8000776:	6a2f      	ldr	r7, [r5, #32]
 8000778:	f7ff fede 	bl	8000538 <_Unwind_GetGR>
 800077c:	4287      	cmp	r7, r0
 800077e:	d1e9      	bne.n	8000754 <__gnu_unwind_pr_common+0x140>
 8000780:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000782:	429c      	cmp	r4, r3
 8000784:	d1e6      	bne.n	8000754 <__gnu_unwind_pr_common+0x140>
 8000786:	4620      	mov	r0, r4
 8000788:	f7ff fcea 	bl	8000160 <selfrel_offset31>
 800078c:	210f      	movs	r1, #15
 800078e:	4602      	mov	r2, r0
 8000790:	4648      	mov	r0, r9
 8000792:	f7ff fef7 	bl	8000584 <_Unwind_SetGR>
 8000796:	4648      	mov	r0, r9
 8000798:	462a      	mov	r2, r5
 800079a:	2100      	movs	r1, #0
 800079c:	f7ff fef2 	bl	8000584 <_Unwind_SetGR>
 80007a0:	2007      	movs	r0, #7
 80007a2:	e79f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80007a4:	210d      	movs	r1, #13
 80007a6:	4648      	mov	r0, r9
 80007a8:	6a2f      	ldr	r7, [r5, #32]
 80007aa:	f7ff fec5 	bl	8000538 <_Unwind_GetGR>
 80007ae:	4287      	cmp	r7, r0
 80007b0:	d058      	beq.n	8000864 <__gnu_unwind_pr_common+0x250>
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	da87      	bge.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 80007b8:	3404      	adds	r4, #4
 80007ba:	e785      	b.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 80007bc:	9b02      	ldr	r3, [sp, #8]
 80007be:	b33b      	cbz	r3, 8000810 <__gnu_unwind_pr_common+0x1fc>
 80007c0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007c4:	1d27      	adds	r7, r4, #4
 80007c6:	f8cd b010 	str.w	fp, [sp, #16]
 80007ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007ce:	46a3      	mov	fp, r4
 80007d0:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007d4:	461c      	mov	r4, r3
 80007d6:	9605      	str	r6, [sp, #20]
 80007d8:	e002      	b.n	80007e0 <__gnu_unwind_pr_common+0x1cc>
 80007da:	45b2      	cmp	sl, r6
 80007dc:	46b0      	mov	r8, r6
 80007de:	d016      	beq.n	800080e <__gnu_unwind_pr_common+0x1fa>
 80007e0:	4638      	mov	r0, r7
 80007e2:	9406      	str	r4, [sp, #24]
 80007e4:	f7ff fd88 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007e8:	ab06      	add	r3, sp, #24
 80007ea:	4601      	mov	r1, r0
 80007ec:	2200      	movs	r2, #0
 80007ee:	4628      	mov	r0, r5
 80007f0:	f002 fce0 	bl	80031b4 <__cxa_type_match>
 80007f4:	f108 0601 	add.w	r6, r8, #1
 80007f8:	3704      	adds	r7, #4
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d0ed      	beq.n	80007da <__gnu_unwind_pr_common+0x1c6>
 80007fe:	9b02      	ldr	r3, [sp, #8]
 8000800:	465c      	mov	r4, fp
 8000802:	4543      	cmp	r3, r8
 8000804:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000808:	9e05      	ldr	r6, [sp, #20]
 800080a:	d1d2      	bne.n	80007b2 <__gnu_unwind_pr_common+0x19e>
 800080c:	e000      	b.n	8000810 <__gnu_unwind_pr_common+0x1fc>
 800080e:	465c      	mov	r4, fp
 8000810:	4648      	mov	r0, r9
 8000812:	210d      	movs	r1, #13
 8000814:	f7ff fe90 	bl	8000538 <_Unwind_GetGR>
 8000818:	9b06      	ldr	r3, [sp, #24]
 800081a:	6228      	str	r0, [r5, #32]
 800081c:	62ac      	str	r4, [r5, #40]	; 0x28
 800081e:	626b      	str	r3, [r5, #36]	; 0x24
 8000820:	2006      	movs	r0, #6
 8000822:	e75f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000824:	210f      	movs	r1, #15
 8000826:	4648      	mov	r0, r9
 8000828:	f7ff fe86 	bl	8000538 <_Unwind_GetGR>
 800082c:	210e      	movs	r1, #14
 800082e:	4602      	mov	r2, r0
 8000830:	4648      	mov	r0, r9
 8000832:	f7ff fea7 	bl	8000584 <_Unwind_SetGR>
 8000836:	4648      	mov	r0, r9
 8000838:	4a29      	ldr	r2, [pc, #164]	; (80008e0 <__gnu_unwind_pr_common+0x2cc>)
 800083a:	210f      	movs	r1, #15
 800083c:	f7ff fea2 	bl	8000584 <_Unwind_SetGR>
 8000840:	2007      	movs	r0, #7
 8000842:	e74f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000844:	4607      	mov	r7, r0
 8000846:	210d      	movs	r1, #13
 8000848:	4648      	mov	r0, r9
 800084a:	f7ff fe75 	bl	8000538 <_Unwind_GetGR>
 800084e:	2f02      	cmp	r7, #2
 8000850:	6228      	str	r0, [r5, #32]
 8000852:	d11d      	bne.n	8000890 <__gnu_unwind_pr_common+0x27c>
 8000854:	462b      	mov	r3, r5
 8000856:	9a06      	ldr	r2, [sp, #24]
 8000858:	f843 2f2c 	str.w	r2, [r3, #44]!
 800085c:	626b      	str	r3, [r5, #36]	; 0x24
 800085e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000860:	2006      	movs	r0, #6
 8000862:	e73f      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 8000864:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000866:	429c      	cmp	r4, r3
 8000868:	d1a3      	bne.n	80007b2 <__gnu_unwind_pr_common+0x19e>
 800086a:	2204      	movs	r2, #4
 800086c:	2700      	movs	r7, #0
 800086e:	9902      	ldr	r1, [sp, #8]
 8000870:	18a3      	adds	r3, r4, r2
 8000872:	62a9      	str	r1, [r5, #40]	; 0x28
 8000874:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000876:	632a      	str	r2, [r5, #48]	; 0x30
 8000878:	636b      	str	r3, [r5, #52]	; 0x34
 800087a:	6823      	ldr	r3, [r4, #0]
 800087c:	42bb      	cmp	r3, r7
 800087e:	db1d      	blt.n	80008bc <__gnu_unwind_pr_common+0x2a8>
 8000880:	2301      	movs	r3, #1
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	e720      	b.n	80006c8 <__gnu_unwind_pr_common+0xb4>
 8000886:	4648      	mov	r0, r9
 8000888:	210d      	movs	r1, #13
 800088a:	f7ff fe55 	bl	8000538 <_Unwind_GetGR>
 800088e:	6228      	str	r0, [r5, #32]
 8000890:	9b06      	ldr	r3, [sp, #24]
 8000892:	626b      	str	r3, [r5, #36]	; 0x24
 8000894:	e7e3      	b.n	800085e <__gnu_unwind_pr_common+0x24a>
 8000896:	4620      	mov	r0, r4
 8000898:	f7ff fc62 	bl	8000160 <selfrel_offset31>
 800089c:	3404      	adds	r4, #4
 800089e:	4606      	mov	r6, r0
 80008a0:	63ac      	str	r4, [r5, #56]	; 0x38
 80008a2:	4628      	mov	r0, r5
 80008a4:	f002 fce4 	bl	8003270 <__cxa_begin_cleanup>
 80008a8:	2800      	cmp	r0, #0
 80008aa:	f43f af1a 	beq.w	80006e2 <__gnu_unwind_pr_common+0xce>
 80008ae:	4648      	mov	r0, r9
 80008b0:	4632      	mov	r2, r6
 80008b2:	210f      	movs	r1, #15
 80008b4:	f7ff fe66 	bl	8000584 <_Unwind_SetGR>
 80008b8:	2007      	movs	r0, #7
 80008ba:	e713      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80008bc:	4608      	mov	r0, r1
 80008be:	3001      	adds	r0, #1
 80008c0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008c4:	f7ff fc4c 	bl	8000160 <selfrel_offset31>
 80008c8:	210f      	movs	r1, #15
 80008ca:	4602      	mov	r2, r0
 80008cc:	4648      	mov	r0, r9
 80008ce:	f7ff fe59 	bl	8000584 <_Unwind_SetGR>
 80008d2:	4648      	mov	r0, r9
 80008d4:	462a      	mov	r2, r5
 80008d6:	4639      	mov	r1, r7
 80008d8:	f7ff fe54 	bl	8000584 <_Unwind_SetGR>
 80008dc:	2007      	movs	r0, #7
 80008de:	e701      	b.n	80006e4 <__gnu_unwind_pr_common+0xd0>
 80008e0:	080033ff 	.word	0x080033ff

080008e4 <__aeabi_unwind_cpp_pr0>:
 80008e4:	2300      	movs	r3, #0
 80008e6:	e695      	b.n	8000614 <__gnu_unwind_pr_common>

080008e8 <__aeabi_unwind_cpp_pr1>:
 80008e8:	2301      	movs	r3, #1
 80008ea:	e693      	b.n	8000614 <__gnu_unwind_pr_common>

080008ec <__aeabi_unwind_cpp_pr2>:
 80008ec:	2302      	movs	r3, #2
 80008ee:	e691      	b.n	8000614 <__gnu_unwind_pr_common>

080008f0 <_Unwind_VRS_Pop>:
 80008f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f2:	4604      	mov	r4, r0
 80008f4:	b0c5      	sub	sp, #276	; 0x114
 80008f6:	2904      	cmp	r1, #4
 80008f8:	d80d      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 80008fa:	e8df f001 	tbb	[pc, r1]
 80008fe:	0355      	.short	0x0355
 8000900:	310c      	.short	0x310c
 8000902:	0f          	.byte	0x0f
 8000903:	00          	.byte	0x00
 8000904:	2b01      	cmp	r3, #1
 8000906:	ea4f 4612 	mov.w	r6, r2, lsr #16
 800090a:	b295      	uxth	r5, r2
 800090c:	d164      	bne.n	80009d8 <_Unwind_VRS_Pop+0xe8>
 800090e:	1972      	adds	r2, r6, r5
 8000910:	2a10      	cmp	r2, #16
 8000912:	f240 809d 	bls.w	8000a50 <_Unwind_VRS_Pop+0x160>
 8000916:	2002      	movs	r0, #2
 8000918:	b045      	add	sp, #276	; 0x114
 800091a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1fa      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000920:	2a10      	cmp	r2, #16
 8000922:	d8f8      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	06d8      	lsls	r0, r3, #27
 8000928:	f100 80c8 	bmi.w	8000abc <_Unwind_VRS_Pop+0x1cc>
 800092c:	ae22      	add	r6, sp, #136	; 0x88
 800092e:	4630      	mov	r0, r6
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	2501      	movs	r5, #1
 8000934:	f000 f974 	bl	8000c20 <__gnu_Unwind_Save_WMMXC>
 8000938:	2300      	movs	r3, #0
 800093a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800093c:	9a01      	ldr	r2, [sp, #4]
 800093e:	fa05 f103 	lsl.w	r1, r5, r3
 8000942:	4211      	tst	r1, r2
 8000944:	d003      	beq.n	800094e <_Unwind_VRS_Pop+0x5e>
 8000946:	6801      	ldr	r1, [r0, #0]
 8000948:	3004      	adds	r0, #4
 800094a:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800094e:	3301      	adds	r3, #1
 8000950:	2b04      	cmp	r3, #4
 8000952:	d1f4      	bne.n	800093e <_Unwind_VRS_Pop+0x4e>
 8000954:	63a0      	str	r0, [r4, #56]	; 0x38
 8000956:	4630      	mov	r0, r6
 8000958:	f000 f958 	bl	8000c0c <__gnu_Unwind_Restore_WMMXC>
 800095c:	2000      	movs	r0, #0
 800095e:	e7db      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 8000960:	2b03      	cmp	r3, #3
 8000962:	d1d8      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 8000964:	0c15      	lsrs	r5, r2, #16
 8000966:	b297      	uxth	r7, r2
 8000968:	19eb      	adds	r3, r5, r7
 800096a:	2b10      	cmp	r3, #16
 800096c:	d8d3      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 800096e:	6823      	ldr	r3, [r4, #0]
 8000970:	071e      	lsls	r6, r3, #28
 8000972:	f100 80b7 	bmi.w	8000ae4 <_Unwind_VRS_Pop+0x1f4>
 8000976:	ae22      	add	r6, sp, #136	; 0x88
 8000978:	4630      	mov	r0, r6
 800097a:	f000 f925 	bl	8000bc8 <__gnu_Unwind_Save_WMMXD>
 800097e:	00ed      	lsls	r5, r5, #3
 8000980:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000982:	b15f      	cbz	r7, 800099c <_Unwind_VRS_Pop+0xac>
 8000984:	3d04      	subs	r5, #4
 8000986:	4603      	mov	r3, r0
 8000988:	1971      	adds	r1, r6, r5
 800098a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800098e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000992:	4283      	cmp	r3, r0
 8000994:	f841 2f04 	str.w	r2, [r1, #4]!
 8000998:	d1f9      	bne.n	800098e <_Unwind_VRS_Pop+0x9e>
 800099a:	4618      	mov	r0, r3
 800099c:	63a0      	str	r0, [r4, #56]	; 0x38
 800099e:	4630      	mov	r0, r6
 80009a0:	f000 f8f0 	bl	8000b84 <__gnu_Unwind_Restore_WMMXD>
 80009a4:	2000      	movs	r0, #0
 80009a6:	e7b7      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1b4      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009ac:	2701      	movs	r7, #1
 80009ae:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80009b0:	b296      	uxth	r6, r2
 80009b2:	1d20      	adds	r0, r4, #4
 80009b4:	fa07 f103 	lsl.w	r1, r7, r3
 80009b8:	4231      	tst	r1, r6
 80009ba:	f103 0301 	add.w	r3, r3, #1
 80009be:	d002      	beq.n	80009c6 <_Unwind_VRS_Pop+0xd6>
 80009c0:	6829      	ldr	r1, [r5, #0]
 80009c2:	3504      	adds	r5, #4
 80009c4:	6001      	str	r1, [r0, #0]
 80009c6:	2b10      	cmp	r3, #16
 80009c8:	f100 0004 	add.w	r0, r0, #4
 80009cc:	d1f2      	bne.n	80009b4 <_Unwind_VRS_Pop+0xc4>
 80009ce:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009d2:	d13b      	bne.n	8000a4c <_Unwind_VRS_Pop+0x15c>
 80009d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80009d6:	e79f      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 80009d8:	2b05      	cmp	r3, #5
 80009da:	d19c      	bne.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009dc:	1977      	adds	r7, r6, r5
 80009de:	2f20      	cmp	r7, #32
 80009e0:	d899      	bhi.n	8000916 <_Unwind_VRS_Pop+0x26>
 80009e2:	2e0f      	cmp	r6, #15
 80009e4:	d966      	bls.n	8000ab4 <_Unwind_VRS_Pop+0x1c4>
 80009e6:	462f      	mov	r7, r5
 80009e8:	2d00      	cmp	r5, #0
 80009ea:	d13a      	bne.n	8000a62 <_Unwind_VRS_Pop+0x172>
 80009ec:	462a      	mov	r2, r5
 80009ee:	2700      	movs	r7, #0
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009f4:	dd72      	ble.n	8000adc <_Unwind_VRS_Pop+0x1ec>
 80009f6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009fa:	4601      	mov	r1, r0
 80009fc:	a844      	add	r0, sp, #272	; 0x110
 80009fe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000a02:	388c      	subs	r0, #140	; 0x8c
 8000a04:	f851 5b04 	ldr.w	r5, [r1], #4
 8000a08:	4291      	cmp	r1, r2
 8000a0a:	f840 5f04 	str.w	r5, [r0, #4]!
 8000a0e:	d1f9      	bne.n	8000a04 <_Unwind_VRS_Pop+0x114>
 8000a10:	4608      	mov	r0, r1
 8000a12:	b197      	cbz	r7, 8000a3a <_Unwind_VRS_Pop+0x14a>
 8000a14:	2e10      	cmp	r6, #16
 8000a16:	4632      	mov	r2, r6
 8000a18:	bf38      	it	cc
 8000a1a:	2210      	movcc	r2, #16
 8000a1c:	a944      	add	r1, sp, #272	; 0x110
 8000a1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a22:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a26:	0079      	lsls	r1, r7, #1
 8000a28:	3a04      	subs	r2, #4
 8000a2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a2e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a32:	4288      	cmp	r0, r1
 8000a34:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a38:	d1f9      	bne.n	8000a2e <_Unwind_VRS_Pop+0x13e>
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d048      	beq.n	8000ad0 <_Unwind_VRS_Pop+0x1e0>
 8000a3e:	2e0f      	cmp	r6, #15
 8000a40:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a42:	d933      	bls.n	8000aac <_Unwind_VRS_Pop+0x1bc>
 8000a44:	b117      	cbz	r7, 8000a4c <_Unwind_VRS_Pop+0x15c>
 8000a46:	a802      	add	r0, sp, #8
 8000a48:	f000 f894 	bl	8000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e763      	b.n	8000918 <_Unwind_VRS_Pop+0x28>
 8000a50:	2e0f      	cmp	r6, #15
 8000a52:	f63f af60 	bhi.w	8000916 <_Unwind_VRS_Pop+0x26>
 8000a56:	2700      	movs	r7, #0
 8000a58:	6822      	ldr	r2, [r4, #0]
 8000a5a:	07d1      	lsls	r1, r2, #31
 8000a5c:	d417      	bmi.n	8000a8e <_Unwind_VRS_Pop+0x19e>
 8000a5e:	2f00      	cmp	r7, #0
 8000a60:	d060      	beq.n	8000b24 <_Unwind_VRS_Pop+0x234>
 8000a62:	6822      	ldr	r2, [r4, #0]
 8000a64:	0751      	lsls	r1, r2, #29
 8000a66:	d445      	bmi.n	8000af4 <_Unwind_VRS_Pop+0x204>
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d04d      	beq.n	8000b08 <_Unwind_VRS_Pop+0x218>
 8000a6c:	2e0f      	cmp	r6, #15
 8000a6e:	d806      	bhi.n	8000a7e <_Unwind_VRS_Pop+0x18e>
 8000a70:	a822      	add	r0, sp, #136	; 0x88
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	f000 f87a 	bl	8000b6c <__gnu_Unwind_Save_VFP_D>
 8000a78:	9b01      	ldr	r3, [sp, #4]
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d0b6      	beq.n	80009ec <_Unwind_VRS_Pop+0xfc>
 8000a7e:	a802      	add	r0, sp, #8
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	f000 f87b 	bl	8000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a86:	9b01      	ldr	r3, [sp, #4]
 8000a88:	f1c6 0210 	rsb	r2, r6, #16
 8000a8c:	e7b0      	b.n	80009f0 <_Unwind_VRS_Pop+0x100>
 8000a8e:	f022 0101 	bic.w	r1, r2, #1
 8000a92:	2b05      	cmp	r3, #5
 8000a94:	6021      	str	r1, [r4, #0]
 8000a96:	9301      	str	r3, [sp, #4]
 8000a98:	4620      	mov	r0, r4
 8000a9a:	d03b      	beq.n	8000b14 <_Unwind_VRS_Pop+0x224>
 8000a9c:	f022 0203 	bic.w	r2, r2, #3
 8000aa0:	f840 2b48 	str.w	r2, [r0], #72
 8000aa4:	f000 f85a 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000aa8:	9b01      	ldr	r3, [sp, #4]
 8000aaa:	e7d8      	b.n	8000a5e <_Unwind_VRS_Pop+0x16e>
 8000aac:	a822      	add	r0, sp, #136	; 0x88
 8000aae:	f000 f859 	bl	8000b64 <__gnu_Unwind_Restore_VFP_D>
 8000ab2:	e7c7      	b.n	8000a44 <_Unwind_VRS_Pop+0x154>
 8000ab4:	2f10      	cmp	r7, #16
 8000ab6:	d9ce      	bls.n	8000a56 <_Unwind_VRS_Pop+0x166>
 8000ab8:	3f10      	subs	r7, #16
 8000aba:	e7cd      	b.n	8000a58 <_Unwind_VRS_Pop+0x168>
 8000abc:	f023 0310 	bic.w	r3, r3, #16
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ac6:	9201      	str	r2, [sp, #4]
 8000ac8:	f000 f8aa 	bl	8000c20 <__gnu_Unwind_Save_WMMXC>
 8000acc:	9a01      	ldr	r2, [sp, #4]
 8000ace:	e72d      	b.n	800092c <_Unwind_VRS_Pop+0x3c>
 8000ad0:	3104      	adds	r1, #4
 8000ad2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ad4:	a822      	add	r0, sp, #136	; 0x88
 8000ad6:	f000 f83d 	bl	8000b54 <__gnu_Unwind_Restore_VFP>
 8000ada:	e7b7      	b.n	8000a4c <_Unwind_VRS_Pop+0x15c>
 8000adc:	2f00      	cmp	r7, #0
 8000ade:	d199      	bne.n	8000a14 <_Unwind_VRS_Pop+0x124>
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	e7aa      	b.n	8000a3a <_Unwind_VRS_Pop+0x14a>
 8000ae4:	f023 0308 	bic.w	r3, r3, #8
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000aee:	f000 f86b 	bl	8000bc8 <__gnu_Unwind_Save_WMMXD>
 8000af2:	e740      	b.n	8000976 <_Unwind_VRS_Pop+0x86>
 8000af4:	4620      	mov	r0, r4
 8000af6:	f022 0204 	bic.w	r2, r2, #4
 8000afa:	f840 2bd0 	str.w	r2, [r0], #208
 8000afe:	9301      	str	r3, [sp, #4]
 8000b00:	f000 f83c 	bl	8000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b04:	9b01      	ldr	r3, [sp, #4]
 8000b06:	e7af      	b.n	8000a68 <_Unwind_VRS_Pop+0x178>
 8000b08:	a822      	add	r0, sp, #136	; 0x88
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	f000 f826 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000b10:	9b01      	ldr	r3, [sp, #4]
 8000b12:	e7b9      	b.n	8000a88 <_Unwind_VRS_Pop+0x198>
 8000b14:	f041 0102 	orr.w	r1, r1, #2
 8000b18:	f840 1b48 	str.w	r1, [r0], #72
 8000b1c:	f000 f826 	bl	8000b6c <__gnu_Unwind_Save_VFP_D>
 8000b20:	9b01      	ldr	r3, [sp, #4]
 8000b22:	e79c      	b.n	8000a5e <_Unwind_VRS_Pop+0x16e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d003      	beq.n	8000b30 <_Unwind_VRS_Pop+0x240>
 8000b28:	2e0f      	cmp	r6, #15
 8000b2a:	f63f af5f 	bhi.w	80009ec <_Unwind_VRS_Pop+0xfc>
 8000b2e:	e79f      	b.n	8000a70 <_Unwind_VRS_Pop+0x180>
 8000b30:	a822      	add	r0, sp, #136	; 0x88
 8000b32:	9301      	str	r3, [sp, #4]
 8000b34:	f000 f812 	bl	8000b5c <__gnu_Unwind_Save_VFP>
 8000b38:	9b01      	ldr	r3, [sp, #4]
 8000b3a:	e757      	b.n	80009ec <_Unwind_VRS_Pop+0xfc>

08000b3c <__restore_core_regs>:
 8000b3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b44:	469c      	mov	ip, r3
 8000b46:	46a6      	mov	lr, r4
 8000b48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b50:	46e5      	mov	sp, ip
 8000b52:	bd00      	pop	{pc}

08000b54 <__gnu_Unwind_Restore_VFP>:
 8000b54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__gnu_Unwind_Save_VFP>:
 8000b5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__gnu_Unwind_Restore_VFP_D>:
 8000b64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__gnu_Unwind_Save_VFP_D>:
 8000b6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__gnu_Unwind_Restore_WMMXD>:
 8000b84:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b88:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b90:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b94:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b98:	ecf0 5102 	ldfe	f5, [r0], #8
 8000b9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000ba4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000ba8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bac:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__gnu_Unwind_Save_WMMXD>:
 8000bc8:	ece0 0102 	stfe	f0, [r0], #8
 8000bcc:	ece0 1102 	stfe	f1, [r0], #8
 8000bd0:	ece0 2102 	stfe	f2, [r0], #8
 8000bd4:	ece0 3102 	stfe	f3, [r0], #8
 8000bd8:	ece0 4102 	stfe	f4, [r0], #8
 8000bdc:	ece0 5102 	stfe	f5, [r0], #8
 8000be0:	ece0 6102 	stfe	f6, [r0], #8
 8000be4:	ece0 7102 	stfe	f7, [r0], #8
 8000be8:	ece0 8102 	stfp	f0, [r0], #8
 8000bec:	ece0 9102 	stfp	f1, [r0], #8
 8000bf0:	ece0 a102 	stfp	f2, [r0], #8
 8000bf4:	ece0 b102 	stfp	f3, [r0], #8
 8000bf8:	ece0 c102 	stfp	f4, [r0], #8
 8000bfc:	ece0 d102 	stfp	f5, [r0], #8
 8000c00:	ece0 e102 	stfp	f6, [r0], #8
 8000c04:	ece0 f102 	stfp	f7, [r0], #8
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__gnu_Unwind_Restore_WMMXC>:
 8000c0c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c10:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c14:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c18:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__gnu_Unwind_Save_WMMXC>:
 8000c20:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c24:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c28:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c2c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <_Unwind_RaiseException>:
 8000c34:	46ec      	mov	ip, sp
 8000c36:	b500      	push	{lr}
 8000c38:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c40:	f04f 0300 	mov.w	r3, #0
 8000c44:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c48:	a901      	add	r1, sp, #4
 8000c4a:	f7ff fbed 	bl	8000428 <__gnu_Unwind_RaiseException>
 8000c4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c52:	b012      	add	sp, #72	; 0x48
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_Unwind_Resume>:
 8000c58:	46ec      	mov	ip, sp
 8000c5a:	b500      	push	{lr}
 8000c5c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c64:	f04f 0300 	mov.w	r3, #0
 8000c68:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c6c:	a901      	add	r1, sp, #4
 8000c6e:	f7ff fc15 	bl	800049c <__gnu_Unwind_Resume>
 8000c72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c76:	b012      	add	sp, #72	; 0x48
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <_Unwind_Resume_or_Rethrow>:
 8000c7c:	46ec      	mov	ip, sp
 8000c7e:	b500      	push	{lr}
 8000c80:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c84:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c90:	a901      	add	r1, sp, #4
 8000c92:	f7ff fc25 	bl	80004e0 <__gnu_Unwind_Resume_or_Rethrow>
 8000c96:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c9a:	b012      	add	sp, #72	; 0x48
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <_Unwind_ForcedUnwind>:
 8000ca0:	46ec      	mov	ip, sp
 8000ca2:	b500      	push	{lr}
 8000ca4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ca8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cb4:	ab01      	add	r3, sp, #4
 8000cb6:	f7ff fbe7 	bl	8000488 <__gnu_Unwind_ForcedUnwind>
 8000cba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cbe:	b012      	add	sp, #72	; 0x48
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <_Unwind_Backtrace>:
 8000cc4:	46ec      	mov	ip, sp
 8000cc6:	b500      	push	{lr}
 8000cc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ccc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cd8:	aa01      	add	r2, sp, #4
 8000cda:	f7ff fc61 	bl	80005a0 <__gnu_Unwind_Backtrace>
 8000cde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ce2:	b012      	add	sp, #72	; 0x48
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <next_unwind_byte>:
 8000ce8:	7a02      	ldrb	r2, [r0, #8]
 8000cea:	b91a      	cbnz	r2, 8000cf4 <next_unwind_byte+0xc>
 8000cec:	7a43      	ldrb	r3, [r0, #9]
 8000cee:	b943      	cbnz	r3, 8000d02 <next_unwind_byte+0x1a>
 8000cf0:	20b0      	movs	r0, #176	; 0xb0
 8000cf2:	4770      	bx	lr
 8000cf4:	6803      	ldr	r3, [r0, #0]
 8000cf6:	3a01      	subs	r2, #1
 8000cf8:	7202      	strb	r2, [r0, #8]
 8000cfa:	021a      	lsls	r2, r3, #8
 8000cfc:	6002      	str	r2, [r0, #0]
 8000cfe:	0e18      	lsrs	r0, r3, #24
 8000d00:	4770      	bx	lr
 8000d02:	2103      	movs	r1, #3
 8000d04:	6842      	ldr	r2, [r0, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b410      	push	{r4}
 8000d0a:	7243      	strb	r3, [r0, #9]
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	1d14      	adds	r4, r2, #4
 8000d10:	7201      	strb	r1, [r0, #8]
 8000d12:	021a      	lsls	r2, r3, #8
 8000d14:	6044      	str	r4, [r0, #4]
 8000d16:	6002      	str	r2, [r0, #0]
 8000d18:	bc10      	pop	{r4}
 8000d1a:	0e18      	lsrs	r0, r3, #24
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop

08000d20 <_Unwind_GetGR.constprop.0>:
 8000d20:	2300      	movs	r3, #0
 8000d22:	b500      	push	{lr}
 8000d24:	b085      	sub	sp, #20
 8000d26:	aa03      	add	r2, sp, #12
 8000d28:	9200      	str	r2, [sp, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	f7ff fbe9 	bl	8000504 <_Unwind_VRS_Get>
 8000d32:	9803      	ldr	r0, [sp, #12]
 8000d34:	b005      	add	sp, #20
 8000d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d3a:	bf00      	nop

08000d3c <unwind_UCB_from_context>:
 8000d3c:	e7f0      	b.n	8000d20 <_Unwind_GetGR.constprop.0>
 8000d3e:	bf00      	nop

08000d40 <__gnu_unwind_execute>:
 8000d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d44:	4606      	mov	r6, r0
 8000d46:	460f      	mov	r7, r1
 8000d48:	f04f 0800 	mov.w	r8, #0
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	4638      	mov	r0, r7
 8000d50:	f7ff ffca 	bl	8000ce8 <next_unwind_byte>
 8000d54:	28b0      	cmp	r0, #176	; 0xb0
 8000d56:	4604      	mov	r4, r0
 8000d58:	d023      	beq.n	8000da2 <__gnu_unwind_execute+0x62>
 8000d5a:	0605      	lsls	r5, r0, #24
 8000d5c:	d427      	bmi.n	8000dae <__gnu_unwind_execute+0x6e>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f10d 090c 	add.w	r9, sp, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	0085      	lsls	r5, r0, #2
 8000d68:	220d      	movs	r2, #13
 8000d6a:	f8cd 9000 	str.w	r9, [sp]
 8000d6e:	4630      	mov	r0, r6
 8000d70:	f7ff fbc8 	bl	8000504 <_Unwind_VRS_Get>
 8000d74:	b2ed      	uxtb	r5, r5
 8000d76:	9b03      	ldr	r3, [sp, #12]
 8000d78:	0660      	lsls	r0, r4, #25
 8000d7a:	f105 0504 	add.w	r5, r5, #4
 8000d7e:	bf4c      	ite	mi
 8000d80:	1b5d      	submi	r5, r3, r5
 8000d82:	18ed      	addpl	r5, r5, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	220d      	movs	r2, #13
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f8cd 9000 	str.w	r9, [sp]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	9503      	str	r5, [sp, #12]
 8000d92:	f7ff fbdd 	bl	8000550 <_Unwind_VRS_Set>
 8000d96:	4638      	mov	r0, r7
 8000d98:	f7ff ffa6 	bl	8000ce8 <next_unwind_byte>
 8000d9c:	28b0      	cmp	r0, #176	; 0xb0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	d1db      	bne.n	8000d5a <__gnu_unwind_execute+0x1a>
 8000da2:	f1b8 0f00 	cmp.w	r8, #0
 8000da6:	f000 8094 	beq.w	8000ed2 <__gnu_unwind_execute+0x192>
 8000daa:	2000      	movs	r0, #0
 8000dac:	e01c      	b.n	8000de8 <__gnu_unwind_execute+0xa8>
 8000dae:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000db2:	2b80      	cmp	r3, #128	; 0x80
 8000db4:	d05c      	beq.n	8000e70 <__gnu_unwind_execute+0x130>
 8000db6:	2b90      	cmp	r3, #144	; 0x90
 8000db8:	d019      	beq.n	8000dee <__gnu_unwind_execute+0xae>
 8000dba:	2ba0      	cmp	r3, #160	; 0xa0
 8000dbc:	d02c      	beq.n	8000e18 <__gnu_unwind_execute+0xd8>
 8000dbe:	2bb0      	cmp	r3, #176	; 0xb0
 8000dc0:	d03e      	beq.n	8000e40 <__gnu_unwind_execute+0x100>
 8000dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8000dc4:	d06b      	beq.n	8000e9e <__gnu_unwind_execute+0x15e>
 8000dc6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000dca:	2bd0      	cmp	r3, #208	; 0xd0
 8000dcc:	d10b      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000dce:	f000 0207 	and.w	r2, r0, #7
 8000dd2:	3201      	adds	r2, #1
 8000dd4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dd8:	2305      	movs	r3, #5
 8000dda:	2101      	movs	r1, #1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	f7ff fd87 	bl	80008f0 <_Unwind_VRS_Pop>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d0b3      	beq.n	8000d4e <__gnu_unwind_execute+0xe>
 8000de6:	2009      	movs	r0, #9
 8000de8:	b005      	add	sp, #20
 8000dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dee:	f000 030d 	and.w	r3, r0, #13
 8000df2:	2b0d      	cmp	r3, #13
 8000df4:	d0f7      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000df6:	2300      	movs	r3, #0
 8000df8:	ad03      	add	r5, sp, #12
 8000dfa:	f000 020f 	and.w	r2, r0, #15
 8000dfe:	4619      	mov	r1, r3
 8000e00:	9500      	str	r5, [sp, #0]
 8000e02:	4630      	mov	r0, r6
 8000e04:	f7ff fb7e 	bl	8000504 <_Unwind_VRS_Get>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	9500      	str	r5, [sp, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	220d      	movs	r2, #13
 8000e10:	4630      	mov	r0, r6
 8000e12:	f7ff fb9d 	bl	8000550 <_Unwind_VRS_Set>
 8000e16:	e79a      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e18:	43c3      	mvns	r3, r0
 8000e1a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	411a      	asrs	r2, r3
 8000e24:	2300      	movs	r3, #0
 8000e26:	0701      	lsls	r1, r0, #28
 8000e28:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e2c:	bf48      	it	mi
 8000e2e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e32:	4619      	mov	r1, r3
 8000e34:	4630      	mov	r0, r6
 8000e36:	f7ff fd5b 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d1d3      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e3e:	e786      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e40:	28b1      	cmp	r0, #177	; 0xb1
 8000e42:	d057      	beq.n	8000ef4 <__gnu_unwind_execute+0x1b4>
 8000e44:	28b2      	cmp	r0, #178	; 0xb2
 8000e46:	d068      	beq.n	8000f1a <__gnu_unwind_execute+0x1da>
 8000e48:	28b3      	cmp	r0, #179	; 0xb3
 8000e4a:	f000 8095 	beq.w	8000f78 <__gnu_unwind_execute+0x238>
 8000e4e:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e52:	2bb4      	cmp	r3, #180	; 0xb4
 8000e54:	d0c7      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e56:	2301      	movs	r3, #1
 8000e58:	f000 0207 	and.w	r2, r0, #7
 8000e5c:	441a      	add	r2, r3
 8000e5e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e62:	4619      	mov	r1, r3
 8000e64:	4630      	mov	r0, r6
 8000e66:	f7ff fd43 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d1bb      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e6e:	e76e      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e70:	4638      	mov	r0, r7
 8000e72:	f7ff ff39 	bl	8000ce8 <next_unwind_byte>
 8000e76:	0224      	lsls	r4, r4, #8
 8000e78:	4304      	orrs	r4, r0
 8000e7a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e7e:	d0b2      	beq.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e80:	2300      	movs	r3, #0
 8000e82:	0124      	lsls	r4, r4, #4
 8000e84:	b2a2      	uxth	r2, r4
 8000e86:	4619      	mov	r1, r3
 8000e88:	4630      	mov	r0, r6
 8000e8a:	f7ff fd31 	bl	80008f0 <_Unwind_VRS_Pop>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d1a9      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000e92:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e96:	bf18      	it	ne
 8000e98:	f04f 0801 	movne.w	r8, #1
 8000e9c:	e757      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000e9e:	28c6      	cmp	r0, #198	; 0xc6
 8000ea0:	d07d      	beq.n	8000f9e <__gnu_unwind_execute+0x25e>
 8000ea2:	28c7      	cmp	r0, #199	; 0xc7
 8000ea4:	f000 8086 	beq.w	8000fb4 <__gnu_unwind_execute+0x274>
 8000ea8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000eac:	2bc0      	cmp	r3, #192	; 0xc0
 8000eae:	f000 8094 	beq.w	8000fda <__gnu_unwind_execute+0x29a>
 8000eb2:	28c8      	cmp	r0, #200	; 0xc8
 8000eb4:	f000 809f 	beq.w	8000ff6 <__gnu_unwind_execute+0x2b6>
 8000eb8:	28c9      	cmp	r0, #201	; 0xc9
 8000eba:	d194      	bne.n	8000de6 <__gnu_unwind_execute+0xa6>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	f7ff ff13 	bl	8000ce8 <next_unwind_byte>
 8000ec2:	0302      	lsls	r2, r0, #12
 8000ec4:	f000 000f 	and.w	r0, r0, #15
 8000ec8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000ecc:	3001      	adds	r0, #1
 8000ece:	4302      	orrs	r2, r0
 8000ed0:	e782      	b.n	8000dd8 <__gnu_unwind_execute+0x98>
 8000ed2:	ac03      	add	r4, sp, #12
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	220e      	movs	r2, #14
 8000ed8:	4641      	mov	r1, r8
 8000eda:	9400      	str	r4, [sp, #0]
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff fb11 	bl	8000504 <_Unwind_VRS_Get>
 8000ee2:	9400      	str	r4, [sp, #0]
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	220f      	movs	r2, #15
 8000eea:	4641      	mov	r1, r8
 8000eec:	f7ff fb30 	bl	8000550 <_Unwind_VRS_Set>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e779      	b.n	8000de8 <__gnu_unwind_execute+0xa8>
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f7ff fef7 	bl	8000ce8 <next_unwind_byte>
 8000efa:	2800      	cmp	r0, #0
 8000efc:	f43f af73 	beq.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f00:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f04:	f47f af6f 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f7ff fcef 	bl	80008f0 <_Unwind_VRS_Pop>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	f47f af67 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f18:	e719      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f10d 090c 	add.w	r9, sp, #12
 8000f20:	220d      	movs	r2, #13
 8000f22:	4619      	mov	r1, r3
 8000f24:	f8cd 9000 	str.w	r9, [sp]
 8000f28:	4630      	mov	r0, r6
 8000f2a:	f7ff faeb 	bl	8000504 <_Unwind_VRS_Get>
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f7ff feda 	bl	8000ce8 <next_unwind_byte>
 8000f34:	0602      	lsls	r2, r0, #24
 8000f36:	f04f 0402 	mov.w	r4, #2
 8000f3a:	d50c      	bpl.n	8000f56 <__gnu_unwind_execute+0x216>
 8000f3c:	9b03      	ldr	r3, [sp, #12]
 8000f3e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f42:	40a0      	lsls	r0, r4
 8000f44:	4403      	add	r3, r0
 8000f46:	4638      	mov	r0, r7
 8000f48:	9303      	str	r3, [sp, #12]
 8000f4a:	f7ff fecd 	bl	8000ce8 <next_unwind_byte>
 8000f4e:	0603      	lsls	r3, r0, #24
 8000f50:	f104 0407 	add.w	r4, r4, #7
 8000f54:	d4f2      	bmi.n	8000f3c <__gnu_unwind_execute+0x1fc>
 8000f56:	2300      	movs	r3, #0
 8000f58:	9903      	ldr	r1, [sp, #12]
 8000f5a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f5e:	40a2      	lsls	r2, r4
 8000f60:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f64:	188c      	adds	r4, r1, r2
 8000f66:	f8cd 9000 	str.w	r9, [sp]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	220d      	movs	r2, #13
 8000f6e:	4630      	mov	r0, r6
 8000f70:	9403      	str	r4, [sp, #12]
 8000f72:	f7ff faed 	bl	8000550 <_Unwind_VRS_Set>
 8000f76:	e6ea      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f78:	4638      	mov	r0, r7
 8000f7a:	f7ff feb5 	bl	8000ce8 <next_unwind_byte>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	0301      	lsls	r1, r0, #12
 8000f82:	f000 000f 	and.w	r0, r0, #15
 8000f86:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f8a:	18c2      	adds	r2, r0, r3
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	4630      	mov	r0, r6
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fcad 	bl	80008f0 <_Unwind_VRS_Pop>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	f47f af25 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000f9c:	e6d7      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000f9e:	4638      	mov	r0, r7
 8000fa0:	f7ff fea2 	bl	8000ce8 <next_unwind_byte>
 8000fa4:	0301      	lsls	r1, r0, #12
 8000fa6:	f000 000f 	and.w	r0, r0, #15
 8000faa:	2303      	movs	r3, #3
 8000fac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000fb0:	1c42      	adds	r2, r0, #1
 8000fb2:	e7eb      	b.n	8000f8c <__gnu_unwind_execute+0x24c>
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	f7ff fe97 	bl	8000ce8 <next_unwind_byte>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	f43f af13 	beq.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fc0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fc4:	f47f af0f 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f7ff fc8f 	bl	80008f0 <_Unwind_VRS_Pop>
 8000fd2:	2800      	cmp	r0, #0
 8000fd4:	f47f af07 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000fd8:	e6b9      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	f000 020f 	and.w	r2, r0, #15
 8000fe0:	3201      	adds	r2, #1
 8000fe2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff fc81 	bl	80008f0 <_Unwind_VRS_Pop>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	f47f aef9 	bne.w	8000de6 <__gnu_unwind_execute+0xa6>
 8000ff4:	e6ab      	b.n	8000d4e <__gnu_unwind_execute+0xe>
 8000ff6:	4638      	mov	r0, r7
 8000ff8:	f7ff fe76 	bl	8000ce8 <next_unwind_byte>
 8000ffc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001000:	f000 030f 	and.w	r3, r0, #15
 8001004:	3210      	adds	r2, #16
 8001006:	3301      	adds	r3, #1
 8001008:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800100c:	e6e4      	b.n	8000dd8 <__gnu_unwind_execute+0x98>
 800100e:	bf00      	nop

08001010 <__gnu_unwind_frame>:
 8001010:	b530      	push	{r4, r5, lr}
 8001012:	2403      	movs	r4, #3
 8001014:	460d      	mov	r5, r1
 8001016:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001018:	b085      	sub	sp, #20
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	f88d 400c 	strb.w	r4, [sp, #12]
 8001020:	79dc      	ldrb	r4, [r3, #7]
 8001022:	0212      	lsls	r2, r2, #8
 8001024:	3308      	adds	r3, #8
 8001026:	a901      	add	r1, sp, #4
 8001028:	4628      	mov	r0, r5
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001030:	9302      	str	r3, [sp, #8]
 8001032:	f7ff fe85 	bl	8000d40 <__gnu_unwind_execute>
 8001036:	b005      	add	sp, #20
 8001038:	bd30      	pop	{r4, r5, pc}
 800103a:	bf00      	nop

0800103c <_Unwind_GetRegionStart>:
 800103c:	b508      	push	{r3, lr}
 800103e:	f7ff fe7d 	bl	8000d3c <unwind_UCB_from_context>
 8001042:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop

08001048 <_Unwind_GetLanguageSpecificData>:
 8001048:	b508      	push	{r3, lr}
 800104a:	f7ff fe77 	bl	8000d3c <unwind_UCB_from_context>
 800104e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001050:	79c3      	ldrb	r3, [r0, #7]
 8001052:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001056:	3008      	adds	r0, #8
 8001058:	bd08      	pop	{r3, pc}
 800105a:	bf00      	nop

0800105c <_Unwind_GetTextRelBase>:
 800105c:	b508      	push	{r3, lr}
 800105e:	f002 fa2d 	bl	80034bc <abort>
 8001062:	bf00      	nop

08001064 <_Unwind_GetDataRelBase>:
 8001064:	b508      	push	{r3, lr}
 8001066:	f7ff fff9 	bl	800105c <_Unwind_GetTextRelBase>
 800106a:	bf00      	nop

0800106c <_ZN8AllTasksC1Ev>:
#include <AllTasks.h>


AllTasks allTasks;

AllTasks::AllTasks() {
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <_ZN8AllTasksC1Ev+0x1c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	080036b8 	.word	0x080036b8

0800108c <_ZN8AllTasksD1Ev>:
	mode_manager.proccess();
	motor_manager.process();

}

AllTasks::~AllTasks() {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <_ZN8AllTasksD1Ev+0x1c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	080036b8 	.word	0x080036b8

080010ac <_ZN8AllTasksD0Ev>:
AllTasks::~AllTasks() {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
}
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ffe9 	bl	800108c <_ZN8AllTasksD1Ev>
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 f833 	bl	8003126 <_ZdlPv>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <_Z41__static_initialization_and_destruction_0ii>:
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10c      	bne.n	80010f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d107      	bne.n	80010f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
AllTasks allTasks;
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80010e8:	f7ff ffc0 	bl	800106c <_ZN8AllTasksC1Ev>
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80010ee:	4906      	ldr	r1, [pc, #24]	; (8001108 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80010f0:	4803      	ldr	r0, [pc, #12]	; (8001100 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80010f2:	f002 f81a 	bl	800312a <__aeabi_atexit>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000098 	.word	0x20000098
 8001104:	20000000 	.word	0x20000000
 8001108:	0800108d 	.word	0x0800108d

0800110c <_GLOBAL__sub_I_allTasks>:
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
 8001110:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001114:	2001      	movs	r0, #1
 8001116:	f7ff ffd9 	bl	80010cc <_Z41__static_initialization_and_destruction_0ii>
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN14CanSendManagerC1Ev>:
	uint8_t * msgData = encode_frame_big_endian(data_to_encode,STEERING_FRAME_LENGTH);
	sendMsg(STATUS, msgData);

}

CanSendManager::CanSendManager() {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <_ZN14CanSendManagerC1Ev+0x1c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	080036dc 	.word	0x080036dc

0800113c <_ZN14CanSendManagerD1Ev>:

CanSendManager::~CanSendManager() {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <_ZN14CanSendManagerD1Ev+0x1c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	080036dc 	.word	0x080036dc

0800115c <_ZN14CanSendManagerD0Ev>:
CanSendManager::~CanSendManager() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
}
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffe9 	bl	800113c <_ZN14CanSendManagerD1Ev>
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f001 ffdb 	bl	8003126 <_ZdlPv>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <_Z41__static_initialization_and_destruction_0ii>:
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10c      	bne.n	80011a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001192:	4293      	cmp	r3, r2
 8001194:	d107      	bne.n	80011a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanSendManager canSendManager;
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001198:	f7ff ffc0 	bl	800111c <_ZN14CanSendManagerC1Ev>
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800119e:	4906      	ldr	r1, [pc, #24]	; (80011b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80011a2:	f001 ffc2 	bl	800312a <__aeabi_atexit>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	2000009c 	.word	0x2000009c
 80011b4:	20000000 	.word	0x20000000
 80011b8:	0800113d 	.word	0x0800113d

080011bc <_GLOBAL__sub_I_canSendManager>:
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
 80011c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ffd9 	bl	800117c <_Z41__static_initialization_and_destruction_0ii>
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN6FutabaC1Ev>:
void Futaba::RxCallback(void) {
//	osSignalSet(FutabaTaskHandle, RxSignal);
	Process();
}

Futaba::Futaba() {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	4a20      	ldr	r2, [pc, #128]	; (8001258 <_ZN6FutabaC1Ev+0x8c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2203      	movs	r2, #3
 80011de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800120c:	861a      	strh	r2, [r3, #48]	; 0x30
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	649a      	str	r2, [r3, #72]	; 0x48
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	// TODO Auto-generated constructor stub

}
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	08003708 	.word	0x08003708

0800125c <_ZN6FutabaD1Ev>:

Futaba::~Futaba() {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <_ZN6FutabaD1Ev+0x1c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	08003708 	.word	0x08003708

0800127c <_ZN6FutabaD0Ev>:
Futaba::~Futaba() {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
}
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7ff ffe9 	bl	800125c <_ZN6FutabaD1Ev>
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f001 ff4b 	bl	8003126 <_ZdlPv>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_Z41__static_initialization_and_destruction_0ii>:
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10c      	bne.n	80012c6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d107      	bne.n	80012c6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Futaba futaba;
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80012b8:	f7ff ff88 	bl	80011cc <_ZN6FutabaC1Ev>
 80012bc:	4a05      	ldr	r2, [pc, #20]	; (80012d4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80012be:	4906      	ldr	r1, [pc, #24]	; (80012d8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80012c2:	f001 ff32 	bl	800312a <__aeabi_atexit>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000a0 	.word	0x200000a0
 80012d4:	20000000 	.word	0x20000000
 80012d8:	0800125d 	.word	0x0800125d

080012dc <_GLOBAL__sub_I_futaba>:
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
 80012e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff ffd9 	bl	800129c <_Z41__static_initialization_and_destruction_0ii>
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_ZN11ModeManagerC1Ev>:
	return ride_mode;
}

//UNUSED(rc_mode); //should be checked

ModeManager::ModeManager() {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <_ZN11ModeManagerC1Ev+0x44>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	711a      	strb	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	715a      	strb	r2, [r3, #5]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	719a      	strb	r2, [r3, #6]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	71da      	strb	r2, [r3, #7]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	721a      	strb	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2264      	movs	r2, #100	; 0x64
 8001322:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	08003728 	.word	0x08003728

08001334 <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <_ZN11ModeManagerD1Ev+0x1c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	08003728 	.word	0x08003728

08001354 <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
}
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe9 	bl	8001334 <_ZN11ModeManagerD1Ev>
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f001 fedf 	bl	8003126 <_ZdlPv>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <_Z41__static_initialization_and_destruction_0ii>:
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10c      	bne.n	800139e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138a:	4293      	cmp	r3, r2
 800138c:	d107      	bne.n	800139e <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager mode_manager;
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001390:	f7ff ffac 	bl	80012ec <_ZN11ModeManagerC1Ev>
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001396:	4906      	ldr	r1, [pc, #24]	; (80013b0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800139a:	f001 fec6 	bl	800312a <__aeabi_atexit>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000154 	.word	0x20000154
 80013ac:	20000000 	.word	0x20000000
 80013b0:	08001335 	.word	0x08001335

080013b4 <_GLOBAL__sub_I_mode_manager>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ffd9 	bl	8001374 <_Z41__static_initialization_and_destruction_0ii>
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_ZN12MotorManagerC1Ev>:
}

float MotorManager::getMaxVelocity(){
	return maxVelocity;
}
MotorManager::MotorManager() {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_ZN12MotorManagerC1Ev+0x20>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	08003750 	.word	0x08003750

080013e8 <_ZN12MotorManagerD1Ev>:

MotorManager::~MotorManager() {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <_ZN12MotorManagerD1Ev+0x1c>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	08003750 	.word	0x08003750

08001408 <_ZN12MotorManagerD0Ev>:
MotorManager::~MotorManager() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
}
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffe9 	bl	80013e8 <_ZN12MotorManagerD1Ev>
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 fe85 	bl	8003126 <_ZdlPv>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <_Z41__static_initialization_and_destruction_0ii>:
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d10c      	bne.n	8001452 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143e:	4293      	cmp	r3, r2
 8001440:	d107      	bne.n	8001452 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MotorManager motor_manager;
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001444:	f7ff ffbe 	bl	80013c4 <_ZN12MotorManagerC1Ev>
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800144a:	4906      	ldr	r1, [pc, #24]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800144e:	f001 fe6c 	bl	800312a <__aeabi_atexit>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000168 	.word	0x20000168
 8001460:	20000000 	.word	0x20000000
 8001464:	080013e9 	.word	0x080013e9

08001468 <_GLOBAL__sub_I_motor_manager>:
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
 800146c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff ffd9 	bl	8001428 <_Z41__static_initialization_and_destruction_0ii>
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZN5ToolsC1Ev>:
	}
	return 1;
}


Tools::Tools() {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_ZN5ToolsC1Ev+0x20>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	08003778 	.word	0x08003778

0800149c <_ZN5ToolsD1Ev>:

Tools::~Tools() {
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <_ZN5ToolsD1Ev+0x1c>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	08003778 	.word	0x08003778

080014bc <_ZN5ToolsD0Ev>:
Tools::~Tools() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
}
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe9 	bl	800149c <_ZN5ToolsD1Ev>
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 fe2b 	bl	8003126 <_ZdlPv>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <_Z41__static_initialization_and_destruction_0ii>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10c      	bne.n	8001506 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d107      	bne.n	8001506 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Tools tools;
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80014f8:	f7ff ffbe 	bl	8001478 <_ZN5ToolsC1Ev>
 80014fc:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80014fe:	4906      	ldr	r1, [pc, #24]	; (8001518 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001502:	f001 fe12 	bl	800312a <__aeabi_atexit>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000174 	.word	0x20000174
 8001514:	20000000 	.word	0x20000000
 8001518:	0800149d 	.word	0x0800149d

0800151c <_GLOBAL__sub_I_tools>:
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
 8001520:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff ffd9 	bl	80014dc <_Z41__static_initialization_and_destruction_0ii>
 800152a:	bd80      	pop	{r7, pc}

0800152c <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800152c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <MX_CAN_Init+0x40>)
{
 8001532:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8001534:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001538:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800153a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001540:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8001542:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8001546:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001548:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 800154a:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800154c:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800154e:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001550:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001552:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001554:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001556:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001558:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800155a:	f000 fad7 	bl	8001b0c <HAL_CAN_Init>
 800155e:	b118      	cbz	r0, 8001568 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8001560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001564:	f000 b9b9 	b.w	80018da <Error_Handler>
 8001568:	bd08      	pop	{r3, pc}
 800156a:	bf00      	nop
 800156c:	2000018c 	.word	0x2000018c
 8001570:	40006400 	.word	0x40006400

08001574 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001574:	b510      	push	{r4, lr}
 8001576:	4604      	mov	r4, r0
 8001578:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	2210      	movs	r2, #16
 800157c:	2100      	movs	r1, #0
 800157e:	a802      	add	r0, sp, #8
 8001580:	f001 ffe4 	bl	800354c <memset>
  if(canHandle->Instance==CAN1)
 8001584:	6822      	ldr	r2, [r4, #0]
 8001586:	4b21      	ldr	r3, [pc, #132]	; (800160c <HAL_CAN_MspInit+0x98>)
 8001588:	429a      	cmp	r2, r3
 800158a:	d13d      	bne.n	8001608 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800158c:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001590:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8001592:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001594:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001598:	61da      	str	r2, [r3, #28]
 800159a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800159c:	481c      	ldr	r0, [pc, #112]	; (8001610 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800159e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80015a2:	9200      	str	r2, [sp, #0]
 80015a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	f042 0204 	orr.w	r2, r2, #4
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80015b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015bc:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80015be:	f000 fe49 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80015c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015cc:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80015ce:	a902      	add	r1, sp, #8
 80015d0:	480f      	ldr	r0, [pc, #60]	; (8001610 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f000 fe3e 	bl	8002254 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2013      	movs	r0, #19
 80015dc:	4611      	mov	r1, r2
 80015de:	f000 fd99 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80015e2:	2013      	movs	r0, #19
 80015e4:	f000 fdca 	bl	800217c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2014      	movs	r0, #20
 80015ec:	4611      	mov	r1, r2
 80015ee:	f000 fd91 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80015f2:	2014      	movs	r0, #20
 80015f4:	f000 fdc2 	bl	800217c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2015      	movs	r0, #21
 80015fc:	4611      	mov	r1, r2
 80015fe:	f000 fd89 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001602:	2015      	movs	r0, #21
 8001604:	f000 fdba 	bl	800217c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001608:	b006      	add	sp, #24
 800160a:	bd10      	pop	{r4, pc}
 800160c:	40006400 	.word	0x40006400
 8001610:	40010800 	.word	0x40010800

08001614 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001618:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 800161a:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800161c:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 800161e:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 8001620:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8001622:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8001624:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001626:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8001628:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800162c:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 800162e:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 8001630:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8001632:	f000 bae6 	b.w	8001c02 <HAL_CAN_ConfigFilter>
 8001636:	bf00      	nop
 8001638:	200001b4 	.word	0x200001b4
 800163c:	2000018c 	.word	0x2000018c

08001640 <hal_can_send>:

void hal_can_send(uint8_t data){
	hal_can_messageTx  hal_message;
	hal_message.data[0] = data;
	hal_message.header.DLC = 1;
	hal_message.header.RTR = CAN_RTR_DATA;
 8001640:	2300      	movs	r3, #0
	hal_message.header.DLC = 1;
 8001642:	2201      	movs	r2, #1
	hal_message.header.IDE  = CAN_ID_STD;
	hal_message.header.StdId = 0x21E;
 8001644:	f240 211e 	movw	r1, #542	; 0x21e
void hal_can_send(uint8_t data){
 8001648:	b500      	push	{lr}
 800164a:	b08b      	sub	sp, #44	; 0x2c
	hal_message.data[0] = data;
 800164c:	f88d 0020 	strb.w	r0, [sp, #32]
	hal_message.header.DLC = 1;
 8001650:	9205      	str	r2, [sp, #20]
	hal_message.header.RTR = CAN_RTR_DATA;
 8001652:	9304      	str	r3, [sp, #16]
	hal_message.header.IDE  = CAN_ID_STD;
 8001654:	9303      	str	r3, [sp, #12]
	hal_message.header.StdId = 0x21E;
 8001656:	9101      	str	r1, [sp, #4]
	hal_message.header.ExtId = 0x01;
 8001658:	9202      	str	r2, [sp, #8]
	hal_message.header.TransmitGlobalTime = DISABLE;
 800165a:	f88d 3018 	strb.w	r3, [sp, #24]

	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
 800165e:	aa08      	add	r2, sp, #32
 8001660:	ab07      	add	r3, sp, #28
 8001662:	a901      	add	r1, sp, #4
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <hal_can_send+0x3c>)
 8001666:	f000 fb63 	bl	8001d30 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800166a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <hal_can_send+0x40>)
 8001670:	f000 fed7 	bl	8002422 <HAL_GPIO_TogglePin>
}
 8001674:	b00b      	add	sp, #44	; 0x2c
 8001676:	f85d fb04 	ldr.w	pc, [sp], #4
 800167a:	bf00      	nop
 800167c:	2000018c 	.word	0x2000018c
 8001680:	40011000 	.word	0x40011000

08001684 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 8001684:	b500      	push	{lr}
 8001686:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 8001688:	ab08      	add	r3, sp, #32
 800168a:	466a      	mov	r2, sp
 800168c:	2100      	movs	r1, #0
 800168e:	f000 fb9d 	bl	8001dcc <HAL_CAN_GetRxMessage>
			&hal_message.header,
			hal_message.data );


	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 8001698:	f000 fec3 	bl	8002422 <HAL_GPIO_TogglePin>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 800169c:	b00b      	add	sp, #44	; 0x2c
 800169e:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a2:	bf00      	nop
 80016a4:	40011000 	.word	0x40011000

080016a8 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	2210      	movs	r2, #16
{
 80016aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	eb0d 0002 	add.w	r0, sp, r2
 80016b4:	2100      	movs	r1, #0
 80016b6:	f001 ff49 	bl	800354c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016bc:	4f3c      	ldr	r7, [pc, #240]	; (80017b0 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016be:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016c0:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	619a      	str	r2, [r3, #24]
 80016c8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80016ca:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	f002 0210 	and.w	r2, r2, #16
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d8:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80016e2:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	f002 0220 	and.w	r2, r2, #32
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	f042 0204 	orr.w	r2, r2, #4
 80016f4:	619a      	str	r2, [r3, #24]
 80016f6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 80016f8:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	f002 0204 	and.w	r2, r2, #4
 8001700:	9202      	str	r2, [sp, #8]
 8001702:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80017c4 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	619a      	str	r2, [r3, #24]
 8001710:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	9303      	str	r3, [sp, #12]
 800171a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 800171c:	f000 fe7c 	bl	8002418 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001720:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001724:	a904      	add	r1, sp, #16
 8001726:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001728:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800172a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800172c:	f000 fd92 	bl	8002254 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001730:	a904      	add	r1, sp, #16
 8001732:	4820      	ldr	r0, [pc, #128]	; (80017b4 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001734:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001736:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001738:	f000 fd8c 	bl	8002254 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800173c:	f248 73f1 	movw	r3, #34801	; 0x87f1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	a904      	add	r1, sp, #16
 8001742:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8001744:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001746:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001748:	f000 fd84 	bl	8002254 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800174c:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800174e:	a904      	add	r1, sp, #16
 8001750:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8001754:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175a:	f000 fd7b 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800175e:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001762:	a904      	add	r1, sp, #16
 8001764:	4815      	ldr	r0, [pc, #84]	; (80017bc <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001766:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001768:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f000 fd73 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 800176e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001772:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	a904      	add	r1, sp, #16
 8001778:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f000 fd67 	bl	8002254 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001788:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800178a:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800178c:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800178e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001796:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001798:	4632      	mov	r2, r6
 800179a:	f000 fcbb 	bl	8002114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 fcec 	bl	800217c <HAL_NVIC_EnableIRQ>

}
 80017a4:	b009      	add	sp, #36	; 0x24
 80017a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40011000 	.word	0x40011000
 80017b4:	40011400 	.word	0x40011400
 80017b8:	10110000 	.word	0x10110000
 80017bc:	40010c00 	.word	0x40010c00
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40010800 	.word	0x40010800

080017c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ce:	f000 f979 	bl	8001ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017d2:	f000 f83d 	bl	8001850 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d6:	f7ff ff67 	bl	80016a8 <MX_GPIO_Init>
  MX_CAN_Init();
 80017da:	f7ff fea7 	bl	800152c <MX_CAN_Init>
  MX_TIM3_Init();
 80017de:	f000 f8db 	bl	8001998 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hal_can_filter_init();
 80017e2:	f7ff ff17 	bl	8001614 <hal_can_filter_init>

  HAL_CAN_Start(&hcan);
 80017e6:	4817      	ldr	r0, [pc, #92]	; (8001844 <main+0x7c>)
 80017e8:	f000 fa77 	bl	8001cda <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 80017ec:	2102      	movs	r1, #2
 80017ee:	4815      	ldr	r0, [pc, #84]	; (8001844 <main+0x7c>)
 80017f0:	f000 fb62 	bl	8001eb8 <HAL_CAN_ActivateNotification>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf0c      	ite	eq
 80017fa:	2301      	moveq	r3, #1
 80017fc:	2300      	movne	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <main+0x46>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001808:	480f      	ldr	r0, [pc, #60]	; (8001848 <main+0x80>)
 800180a:	f000 fe0a 	bl	8002422 <HAL_GPIO_TogglePin>
  }

  uint8_t data = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint32_t i = 0; i <150000; i ++){
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <main+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d8f9      	bhi.n	8001812 <main+0x4a>
		 if (i ==0){
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10b      	bne.n	800183c <main+0x74>
			 if(data>10) data =1;
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b0a      	cmp	r3, #10
 8001828:	dd01      	ble.n	800182e <main+0x66>
 800182a:	2301      	movs	r3, #1
 800182c:	71fb      	strb	r3, [r7, #7]
			 hal_can_send(data);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff05 	bl	8001640 <hal_can_send>
			 data++;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	3301      	adds	r3, #1
 800183a:	71fb      	strb	r3, [r7, #7]
	 for(uint32_t i = 0; i <150000; i ++){
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	e7e8      	b.n	8001816 <main+0x4e>
 8001844:	2000018c 	.word	0x2000018c
 8001848:	40011000 	.word	0x40011000
 800184c:	000249ef 	.word	0x000249ef

08001850 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b090      	sub	sp, #64	; 0x40
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	2228      	movs	r2, #40	; 0x28
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fe74 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001876:	2301      	movs	r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187a:	2310      	movs	r3, #16
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001882:	f107 0318 	add.w	r3, r7, #24
 8001886:	4618      	mov	r0, r3
 8001888:	f000 fde2 	bl	8002450 <HAL_RCC_OscConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 800189c:	f000 f81d 	bl	80018da <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 ffa3 	bl	8002804 <HAL_RCC_ClockConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80018ce:	f000 f804 	bl	80018da <Error_Handler>
  }
}
 80018d2:	bf00      	nop
 80018d4:	3740      	adds	r7, #64	; 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
	...

080018e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_MspInit+0x3c>)
{
 80018ea:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	699a      	ldr	r2, [r3, #24]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	619a      	str	r2, [r3, #24]
 80018f4:	699a      	ldr	r2, [r3, #24]
 80018f6:	f002 0201 	and.w	r2, r2, #1
 80018fa:	9200      	str	r2, [sp, #0]
 80018fc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001904:	61da      	str	r2, [r3, #28]
 8001906:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001908:	4a07      	ldr	r2, [pc, #28]	; (8001928 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001912:	6853      	ldr	r3, [r2, #4]
 8001914:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	b002      	add	sp, #8
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <NMI_Handler>:
 800192c:	4770      	bx	lr

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	e7fe      	b.n	800192e <HardFault_Handler>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler>

08001936 <SVC_Handler>:
 8001936:	4770      	bx	lr

08001938 <DebugMon_Handler>:
 8001938:	4770      	bx	lr

0800193a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193a:	4770      	bx	lr

0800193c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 b8d4 	b.w	8001ae8 <HAL_IncTick>

08001940 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001940:	2002      	movs	r0, #2
 8001942:	f000 bd79 	b.w	8002438 <HAL_GPIO_EXTI_IRQHandler>
	...

08001948 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001948:	4801      	ldr	r0, [pc, #4]	; (8001950 <CAN1_RX1_IRQHandler+0x8>)
 800194a:	f000 bad2 	b.w	8001ef2 <HAL_CAN_IRQHandler>
 800194e:	bf00      	nop
 8001950:	2000018c 	.word	0x2000018c

08001954 <USB_LP_CAN1_RX0_IRQHandler>:
 8001954:	f7ff bff8 	b.w	8001948 <CAN1_RX1_IRQHandler>

08001958 <USB_HP_CAN1_TX_IRQHandler>:
 8001958:	f7ff bff6 	b.w	8001948 <CAN1_RX1_IRQHandler>

0800195c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <TIM3_IRQHandler+0x8>)
 800195e:	f000 bff4 	b.w	800294a <HAL_TIM_IRQHandler>
 8001962:	bf00      	nop
 8001964:	200001dc 	.word	0x200001dc

08001968 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <USART2_IRQHandler+0x8>)
 800196a:	f001 ba8b 	b.w	8002e84 <HAL_UART_IRQHandler>
 800196e:	bf00      	nop
 8001970:	2000026c 	.word	0x2000026c

08001974 <_getpid>:
 8001974:	2001      	movs	r0, #1
 8001976:	4770      	bx	lr

08001978 <_kill>:
 8001978:	b508      	push	{r3, lr}
 800197a:	f001 fdb5 	bl	80034e8 <__errno>
 800197e:	2316      	movs	r3, #22
 8001980:	6003      	str	r3, [r0, #0]
 8001982:	f04f 30ff 	mov.w	r0, #4294967295
 8001986:	bd08      	pop	{r3, pc}

08001988 <_exit>:
 8001988:	b508      	push	{r3, lr}
 800198a:	f001 fdad 	bl	80034e8 <__errno>
 800198e:	2316      	movs	r3, #22
 8001990:	6003      	str	r3, [r0, #0]
 8001992:	e7fe      	b.n	8001992 <_exit+0xa>

08001994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	4770      	bx	lr
	...

08001998 <MX_TIM3_Init>:
  }

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001998:	b510      	push	{r4, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199c:	2210      	movs	r2, #16
 800199e:	2100      	movs	r1, #0
 80019a0:	a803      	add	r0, sp, #12
 80019a2:	f001 fdd3 	bl	800354c <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019a6:	2214      	movs	r2, #20
 80019a8:	2100      	movs	r1, #0
 80019aa:	a807      	add	r0, sp, #28
 80019ac:	f001 fdce 	bl	800354c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 64;
 80019b2:	2240      	movs	r2, #64	; 0x40
  htim3.Instance = TIM3;
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_TIM3_Init+0x80>)
  htim3.Init.Prescaler = 64;
 80019b6:	4919      	ldr	r1, [pc, #100]	; (8001a1c <MX_TIM3_Init+0x84>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9302      	str	r3, [sp, #8]
  htim3.Init.Prescaler = 64;
 80019bc:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80019c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c8:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80019ca:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019cc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ce:	f001 f897 	bl	8002b00 <HAL_TIM_Base_Init>
 80019d2:	b108      	cbz	r0, 80019d8 <MX_TIM3_Init+0x40>
  {
    Error_Handler();
 80019d4:	f7ff ff81 	bl	80018da <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019dc:	a903      	add	r1, sp, #12
 80019de:	480e      	ldr	r0, [pc, #56]	; (8001a18 <MX_TIM3_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e0:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e2:	f001 f8c3 	bl	8002b6c <HAL_TIM_ConfigClockSource>
 80019e6:	b108      	cbz	r0, 80019ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019e8:	f7ff ff77 	bl	80018da <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80019ec:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80019ee:	a907      	add	r1, sp, #28
 80019f0:	4809      	ldr	r0, [pc, #36]	; (8001a18 <MX_TIM3_Init+0x80>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80019f2:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80019f4:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80019f6:	f001 f99f 	bl	8002d38 <HAL_TIM_SlaveConfigSynchro>
 80019fa:	b108      	cbz	r0, 8001a00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019fc:	f7ff ff6d 	bl	80018da <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a00:	a901      	add	r1, sp, #4
 8001a02:	4805      	ldr	r0, [pc, #20]	; (8001a18 <MX_TIM3_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a04:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a06:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a08:	f001 f9be 	bl	8002d88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	b108      	cbz	r0, 8001a12 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001a0e:	f7ff ff64 	bl	80018da <Error_Handler>
  }

}
 8001a12:	b00c      	add	sp, #48	; 0x30
 8001a14:	bd10      	pop	{r4, pc}
 8001a16:	bf00      	nop
 8001a18:	200001dc 	.word	0x200001dc
 8001a1c:	40000400 	.word	0x40000400

08001a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001a20:	6803      	ldr	r3, [r0, #0]
{
 8001a22:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a2e:	69da      	ldr	r2, [r3, #28]
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	61da      	str	r2, [r3, #28]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a40:	b003      	add	sp, #12
 8001a42:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_TIM_Base_MspInit+0x54>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d1f9      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a4e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	f042 0202 	orr.w	r2, r2, #2
 8001a56:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a58:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a5c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a66:	f000 fb55 	bl	8002114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a6a:	201d      	movs	r0, #29
 8001a6c:	f000 fb86 	bl	800217c <HAL_NVIC_EnableIRQ>
}
 8001a70:	e7e6      	b.n	8001a40 <HAL_TIM_Base_MspInit+0x20>
 8001a72:	bf00      	nop
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40021000 	.word	0x40021000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_InitTick+0x3c>)
{
 8001a80:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a82:	7818      	ldrb	r0, [r3, #0]
 8001a84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a88:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_InitTick+0x40>)
 8001a8e:	6810      	ldr	r0, [r2, #0]
 8001a90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a94:	f000 fb80 	bl	8002198 <HAL_SYSTICK_Config>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	b958      	cbnz	r0, 8001ab4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9c:	2d0f      	cmp	r5, #15
 8001a9e:	d809      	bhi.n	8001ab4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f000 fb34 	bl	8002114 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_InitTick+0x44>)
 8001aae:	4620      	mov	r0, r4
 8001ab0:	601d      	str	r5, [r3, #0]
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001ab6:	bd38      	pop	{r3, r4, r5, pc}
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	2000000c 	.word	0x2000000c

08001ac4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x20>)
{
 8001ac6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad2:	f000 fb0d 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff ffd0 	bl	8001a7c <HAL_InitTick>
  HAL_MspInit();
 8001adc:	f7ff ff04 	bl	80018e8 <HAL_MspInit>
}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	bd08      	pop	{r3, pc}
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ae8:	4a03      	ldr	r2, [pc, #12]	; (8001af8 <HAL_IncTick+0x10>)
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_IncTick+0x14>)
 8001aec:	6811      	ldr	r1, [r2, #0]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	440b      	add	r3, r1
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200002ac 	.word	0x200002ac
 8001afc:	20000008 	.word	0x20000008

08001b00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b00:	4b01      	ldr	r3, [pc, #4]	; (8001b08 <HAL_GetTick+0x8>)
 8001b02:	6818      	ldr	r0, [r3, #0]
}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200002ac 	.word	0x200002ac

08001b0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b0c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b0e:	4604      	mov	r4, r0
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d06e      	beq.n	8001bf2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b14:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001b18:	b90b      	cbnz	r3, 8001b1e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b1a:	f7ff fd2b 	bl	8001574 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b1e:	6822      	ldr	r2, [r4, #0]
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f023 0302 	bic.w	r3, r3, #2
 8001b26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b28:	f7ff ffea 	bl	8001b00 <HAL_GetTick>
 8001b2c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	0791      	lsls	r1, r2, #30
 8001b34:	d451      	bmi.n	8001bda <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b3e:	f7ff ffdf 	bl	8001b00 <HAL_GetTick>
 8001b42:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	07d2      	lsls	r2, r2, #31
 8001b4a:	d554      	bpl.n	8001bf6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b4c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b4e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b50:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	bf0c      	ite	eq
 8001b56:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b5a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001b5e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b60:	7e62      	ldrb	r2, [r4, #25]
 8001b62:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	bf0c      	ite	eq
 8001b68:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b6c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001b70:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b72:	7ea2      	ldrb	r2, [r4, #26]
 8001b74:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	bf0c      	ite	eq
 8001b7a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b7e:	f022 0220 	bicne.w	r2, r2, #32
 8001b82:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b84:	7ee2      	ldrb	r2, [r4, #27]
 8001b86:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	bf0c      	ite	eq
 8001b8c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b90:	f042 0210 	orrne.w	r2, r2, #16
 8001b94:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b96:	7f22      	ldrb	r2, [r4, #28]
 8001b98:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	bf0c      	ite	eq
 8001b9e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ba2:	f022 0208 	bicne.w	r2, r2, #8
 8001ba6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ba8:	7f62      	ldrb	r2, [r4, #29]
 8001baa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	bf0c      	ite	eq
 8001bb0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb4:	f022 0204 	bicne.w	r2, r2, #4
 8001bb8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bba:	68e1      	ldr	r1, [r4, #12]
 8001bbc:	68a2      	ldr	r2, [r4, #8]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	6921      	ldr	r1, [r4, #16]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	6961      	ldr	r1, [r4, #20]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	6861      	ldr	r1, [r4, #4]
 8001bca:	3901      	subs	r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001bd0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bd2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001bd4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8001bd8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bda:	f7ff ff91 	bl	8001b00 <HAL_GetTick>
 8001bde:	1b40      	subs	r0, r0, r5
 8001be0:	280a      	cmp	r0, #10
 8001be2:	d9a4      	bls.n	8001b2e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bea:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bec:	2305      	movs	r3, #5
 8001bee:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001bf2:	2001      	movs	r0, #1
}
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001bf6:	f7ff ff83 	bl	8001b00 <HAL_GetTick>
 8001bfa:	1b40      	subs	r0, r0, r5
 8001bfc:	280a      	cmp	r0, #10
 8001bfe:	d9a1      	bls.n	8001b44 <HAL_CAN_Init+0x38>
 8001c00:	e7f0      	b.n	8001be4 <HAL_CAN_Init+0xd8>

08001c02 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c02:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001c06:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d85f      	bhi.n	8001cce <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c0e:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c10:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c12:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001c20:	f000 021f 	and.w	r2, r0, #31
 8001c24:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001c28:	43d4      	mvns	r4, r2
 8001c2a:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8001c2e:	4025      	ands	r5, r4
 8001c30:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001c34:	69cd      	ldr	r5, [r1, #28]
 8001c36:	bb85      	cbnz	r5, 8001c9a <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c38:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c3c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001c3e:	4025      	ands	r5, r4
 8001c40:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c44:	888d      	ldrh	r5, [r1, #4]
 8001c46:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c4a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c4e:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c52:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c54:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c56:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c5a:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c5e:	6988      	ldr	r0, [r1, #24]
 8001c60:	bb68      	cbnz	r0, 8001cbe <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c62:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001c66:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001c68:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001c6c:	6908      	ldr	r0, [r1, #16]
 8001c6e:	bb50      	cbnz	r0, 8001cc6 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c70:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001c74:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c76:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c7a:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c7e:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c80:	bf02      	ittt	eq
 8001c82:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8001c86:	430a      	orreq	r2, r1
 8001c88:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c9a:	2d01      	cmp	r5, #1
 8001c9c:	d1df      	bne.n	8001c5e <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c9e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ca2:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ca4:	4315      	orrs	r5, r2
 8001ca6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001caa:	888d      	ldrh	r5, [r1, #4]
 8001cac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001cb0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001cb4:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001cb8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001cba:	898d      	ldrh	r5, [r1, #12]
 8001cbc:	e7cb      	b.n	8001c56 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cbe:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001cc2:	4310      	orrs	r0, r2
 8001cc4:	e7d0      	b.n	8001c68 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cc6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001cca:	4310      	orrs	r0, r2
 8001ccc:	e7d3      	b.n	8001c76 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001cd6:	2001      	movs	r0, #1
  }
}
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}

08001cda <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001cda:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001cdc:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001ce0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d11f      	bne.n	8001d26 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ce6:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce8:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001cea:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cee:	6813      	ldr	r3, [r2, #0]
 8001cf0:	f023 0301 	bic.w	r3, r3, #1
 8001cf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001cf6:	f7ff ff03 	bl	8001b00 <HAL_GetTick>
 8001cfa:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	6858      	ldr	r0, [r3, #4]
 8001d00:	f010 0001 	ands.w	r0, r0, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d06:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d0a:	f7ff fef9 	bl	8001b00 <HAL_GetTick>
 8001d0e:	1b40      	subs	r0, r0, r5
 8001d10:	280a      	cmp	r0, #10
 8001d12:	d9f3      	bls.n	8001cfc <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
  }
}
 8001d24:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001d26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d2c:	6243      	str	r3, [r0, #36]	; 0x24
 8001d2e:	e7f8      	b.n	8001d22 <HAL_CAN_Start+0x48>

08001d30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d32:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d36:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d38:	3d01      	subs	r5, #1
 8001d3a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d3c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001d3e:	d841      	bhi.n	8001dc4 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d40:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001d44:	d03a      	beq.n	8001dbc <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d46:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d4a:	2c03      	cmp	r4, #3
 8001d4c:	f04f 0501 	mov.w	r5, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d58:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
  }
}
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d5e:	40a5      	lsls	r5, r4
 8001d60:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001d62:	6888      	ldr	r0, [r1, #8]
 8001d64:	68cf      	ldr	r7, [r1, #12]
 8001d66:	f104 0318 	add.w	r3, r4, #24
 8001d6a:	bb10      	cbnz	r0, 8001db2 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d6c:	6808      	ldr	r0, [r1, #0]
 8001d6e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d76:	6908      	ldr	r0, [r1, #16]
 8001d78:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d7a:	7d09      	ldrb	r1, [r1, #20]
 8001d7c:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d7e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d82:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d84:	bf08      	it	eq
 8001d86:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d8a:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d8c:	bf04      	itt	eq
 8001d8e:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001d92:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d96:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8001d98:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d9a:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001da4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001db2:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001db4:	4338      	orrs	r0, r7
 8001db6:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001dba:	e7da      	b.n	8001d72 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc2:	e7c9      	b.n	8001d58 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dca:	e7c5      	b.n	8001d58 <HAL_CAN_AddTxMessage+0x28>

08001dcc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dce:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dd2:	3c01      	subs	r4, #1
 8001dd4:	2c01      	cmp	r4, #1
 8001dd6:	d86b      	bhi.n	8001eb0 <HAL_CAN_GetRxMessage+0xe4>
 8001dd8:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dda:	b941      	cbnz	r1, 8001dee <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ddc:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dde:	07a4      	lsls	r4, r4, #30
 8001de0:	d107      	bne.n	8001df2 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001de2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001de4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001de8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001dea:	2001      	movs	r0, #1
  }
}
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001dee:	6934      	ldr	r4, [r6, #16]
 8001df0:	e7f5      	b.n	8001dde <HAL_CAN_GetRxMessage+0x12>
 8001df2:	010c      	lsls	r4, r1, #4
 8001df4:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001df6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001dfa:	f007 0704 	and.w	r7, r7, #4
 8001dfe:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e00:	2f00      	cmp	r7, #0
 8001e02:	d14b      	bne.n	8001e9c <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e04:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001e08:	0d7f      	lsrs	r7, r7, #21
 8001e0a:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e0c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e10:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001e12:	f007 0702 	and.w	r7, r7, #2
 8001e16:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e18:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8001e1c:	f007 070f 	and.w	r7, r7, #15
 8001e20:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e22:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e26:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e2a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e2e:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e30:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e32:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e34:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8001e38:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	4422      	add	r2, r4
 8001e3e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001e42:	0a12      	lsrs	r2, r2, #8
 8001e44:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e46:	6802      	ldr	r2, [r0, #0]
 8001e48:	4422      	add	r2, r4
 8001e4a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001e4e:	0c12      	lsrs	r2, r2, #16
 8001e50:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e52:	6802      	ldr	r2, [r0, #0]
 8001e54:	4422      	add	r2, r4
 8001e56:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001e5a:	0e12      	lsrs	r2, r2, #24
 8001e5c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e5e:	6802      	ldr	r2, [r0, #0]
 8001e60:	4422      	add	r2, r4
 8001e62:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001e66:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e68:	6802      	ldr	r2, [r0, #0]
 8001e6a:	4422      	add	r2, r4
 8001e6c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001e70:	0a12      	lsrs	r2, r2, #8
 8001e72:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e74:	6802      	ldr	r2, [r0, #0]
 8001e76:	4422      	add	r2, r4
 8001e78:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001e7c:	0c12      	lsrs	r2, r2, #16
 8001e7e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e80:	6802      	ldr	r2, [r0, #0]
 8001e82:	4414      	add	r4, r2
 8001e84:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001e88:	0e12      	lsrs	r2, r2, #24
 8001e8a:	71da      	strb	r2, [r3, #7]
 8001e8c:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e8e:	b951      	cbnz	r1, 8001ea6 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001e9c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001ea0:	08ff      	lsrs	r7, r7, #3
 8001ea2:	6057      	str	r7, [r2, #4]
 8001ea4:	e7b2      	b.n	8001e0c <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	e7f3      	b.n	8001e98 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb6:	e797      	b.n	8001de8 <HAL_CAN_GetRxMessage+0x1c>

08001eb8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d805      	bhi.n	8001ece <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ec2:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001ec4:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ec6:	6953      	ldr	r3, [r2, #20]
 8001ec8:	4319      	orrs	r1, r3
 8001eca:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001ecc:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ece:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001ed6:	2001      	movs	r0, #1
  }
}
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_TxMailbox0CompleteCallback>:
 8001eda:	4770      	bx	lr

08001edc <HAL_CAN_TxMailbox1CompleteCallback>:
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_TxMailbox2CompleteCallback>:
 8001ede:	4770      	bx	lr

08001ee0 <HAL_CAN_TxMailbox0AbortCallback>:
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_TxMailbox1AbortCallback>:
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_CAN_TxMailbox2AbortCallback>:
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_CAN_RxFifo0FullCallback>:
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_RxFifo1FullCallback>:
 8001eea:	4770      	bx	lr

08001eec <HAL_CAN_SleepCallback>:
 8001eec:	4770      	bx	lr

08001eee <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001eee:	4770      	bx	lr

08001ef0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_CAN_IRQHandler>:
{
 8001ef2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ef6:	6803      	ldr	r3, [r0, #0]
{
 8001ef8:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001efa:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001efc:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f00:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f04:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f06:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f0a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f0e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f12:	d022      	beq.n	8001f5a <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f14:	f017 0401 	ands.w	r4, r7, #1
 8001f18:	d007      	beq.n	8001f2a <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f1a:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f1c:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f1e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f20:	f140 80a3 	bpl.w	800206a <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f24:	f7ff ffd9 	bl	8001eda <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f28:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f2a:	05fb      	lsls	r3, r7, #23
 8001f2c:	d509      	bpl.n	8001f42 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f32:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f34:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f36:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f38:	f140 80a5 	bpl.w	8002086 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f3c:	4628      	mov	r0, r5
 8001f3e:	f7ff ffcd 	bl	8001edc <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f42:	03fb      	lsls	r3, r7, #15
 8001f44:	d509      	bpl.n	8001f5a <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f4a:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f4c:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f4e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f50:	f140 80a7 	bpl.w	80020a2 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f54:	4628      	mov	r0, r5
 8001f56:	f7ff ffc2 	bl	8001ede <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f5a:	0733      	lsls	r3, r6, #28
 8001f5c:	d507      	bpl.n	8001f6e <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f5e:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f62:	bf1f      	itttt	ne
 8001f64:	2210      	movne	r2, #16
 8001f66:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f68:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f6c:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f6e:	0777      	lsls	r7, r6, #29
 8001f70:	d508      	bpl.n	8001f84 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f72:	f01b 0f08 	tst.w	fp, #8
 8001f76:	d005      	beq.n	8001f84 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f78:	2208      	movs	r2, #8
 8001f7a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f7c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f7e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f80:	f7ff ffb1 	bl	8001ee6 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f84:	07b0      	lsls	r0, r6, #30
 8001f86:	d506      	bpl.n	8001f96 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f88:	682b      	ldr	r3, [r5, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0799      	lsls	r1, r3, #30
 8001f8e:	d002      	beq.n	8001f96 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f90:	4628      	mov	r0, r5
 8001f92:	f7ff fb77 	bl	8001684 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f96:	0672      	lsls	r2, r6, #25
 8001f98:	d507      	bpl.n	8001faa <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f9a:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f9e:	bf1f      	itttt	ne
 8001fa0:	2210      	movne	r2, #16
 8001fa2:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fa4:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fa8:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001faa:	06b3      	lsls	r3, r6, #26
 8001fac:	d508      	bpl.n	8001fc0 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fae:	f01a 0f08 	tst.w	sl, #8
 8001fb2:	d005      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fb8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fba:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fbc:	f7ff ff95 	bl	8001eea <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fc0:	06f7      	lsls	r7, r6, #27
 8001fc2:	d506      	bpl.n	8001fd2 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fc4:	682b      	ldr	r3, [r5, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	0798      	lsls	r0, r3, #30
 8001fca:	d002      	beq.n	8001fd2 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fcc:	4628      	mov	r0, r5
 8001fce:	f7ff ff8b 	bl	8001ee8 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fd2:	03b1      	lsls	r1, r6, #14
 8001fd4:	d508      	bpl.n	8001fe8 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fd6:	f019 0f10 	tst.w	r9, #16
 8001fda:	d005      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fdc:	2210      	movs	r2, #16
 8001fde:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8001fe0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fe2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001fe4:	f7ff ff82 	bl	8001eec <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fe8:	03f2      	lsls	r2, r6, #15
 8001fea:	d508      	bpl.n	8001ffe <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fec:	f019 0f08 	tst.w	r9, #8
 8001ff0:	d005      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ff6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ffa:	f7ff ff78 	bl	8001eee <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ffe:	0433      	lsls	r3, r6, #16
 8002000:	d52a      	bpl.n	8002058 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002002:	f019 0f04 	tst.w	r9, #4
 8002006:	682a      	ldr	r2, [r5, #0]
 8002008:	d024      	beq.n	8002054 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800200a:	05f7      	lsls	r7, r6, #23
 800200c:	d504      	bpl.n	8002018 <HAL_CAN_IRQHandler+0x126>
 800200e:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8002012:	bf18      	it	ne
 8002014:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002018:	05b0      	lsls	r0, r6, #22
 800201a:	d504      	bpl.n	8002026 <HAL_CAN_IRQHandler+0x134>
 800201c:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8002020:	bf18      	it	ne
 8002022:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002026:	0571      	lsls	r1, r6, #21
 8002028:	d504      	bpl.n	8002034 <HAL_CAN_IRQHandler+0x142>
 800202a:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800202e:	bf18      	it	ne
 8002030:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002034:	0533      	lsls	r3, r6, #20
 8002036:	d50d      	bpl.n	8002054 <HAL_CAN_IRQHandler+0x162>
 8002038:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800203c:	d00a      	beq.n	8002054 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 800203e:	2b30      	cmp	r3, #48	; 0x30
 8002040:	d04c      	beq.n	80020dc <HAL_CAN_IRQHandler+0x1ea>
 8002042:	d83c      	bhi.n	80020be <HAL_CAN_IRQHandler+0x1cc>
 8002044:	2b10      	cmp	r3, #16
 8002046:	d043      	beq.n	80020d0 <HAL_CAN_IRQHandler+0x1de>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d044      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800204c:	6993      	ldr	r3, [r2, #24]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002054:	2304      	movs	r3, #4
 8002056:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002058:	b12c      	cbz	r4, 8002066 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 800205a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800205c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800205e:	431c      	orrs	r4, r3
 8002060:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8002062:	f7ff ff45 	bl	8001ef0 <HAL_CAN_ErrorCallback>
 8002066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800206a:	077a      	lsls	r2, r7, #29
 800206c:	d405      	bmi.n	800207a <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800206e:	f017 0408 	ands.w	r4, r7, #8
 8002072:	d105      	bne.n	8002080 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002074:	f7ff ff34 	bl	8001ee0 <HAL_CAN_TxMailbox0AbortCallback>
 8002078:	e757      	b.n	8001f2a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800207a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800207e:	e754      	b.n	8001f2a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002080:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8002084:	e751      	b.n	8001f2a <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002086:	0579      	lsls	r1, r7, #21
 8002088:	d502      	bpl.n	8002090 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800208a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 800208e:	e758      	b.n	8001f42 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002090:	053a      	lsls	r2, r7, #20
 8002092:	d502      	bpl.n	800209a <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002094:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8002098:	e753      	b.n	8001f42 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800209a:	4628      	mov	r0, r5
 800209c:	f7ff ff21 	bl	8001ee2 <HAL_CAN_TxMailbox1AbortCallback>
 80020a0:	e74f      	b.n	8001f42 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020a2:	0379      	lsls	r1, r7, #13
 80020a4:	d502      	bpl.n	80020ac <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020a6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80020aa:	e756      	b.n	8001f5a <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020ac:	033a      	lsls	r2, r7, #12
 80020ae:	d502      	bpl.n	80020b6 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020b0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80020b4:	e751      	b.n	8001f5a <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020b6:	4628      	mov	r0, r5
 80020b8:	f7ff ff14 	bl	8001ee4 <HAL_CAN_TxMailbox2AbortCallback>
 80020bc:	e74d      	b.n	8001f5a <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80020be:	2b50      	cmp	r3, #80	; 0x50
 80020c0:	d00f      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x1f0>
 80020c2:	2b60      	cmp	r3, #96	; 0x60
 80020c4:	d010      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x1f6>
 80020c6:	2b40      	cmp	r3, #64	; 0x40
 80020c8:	d1c0      	bne.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80020ce:	e7bd      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 80020d0:	f044 0408 	orr.w	r4, r4, #8
            break;
 80020d4:	e7ba      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d6:	f044 0410 	orr.w	r4, r4, #16
            break;
 80020da:	e7b7      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020dc:	f044 0420 	orr.w	r4, r4, #32
            break;
 80020e0:	e7b4      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 80020e2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80020e6:	e7b1      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020e8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80020ec:	e7ae      	b.n	800204c <HAL_CAN_IRQHandler+0x15a>
	...

080020f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020f6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020fe:	041b      	lsls	r3, r3, #16
 8002100:	0c1b      	lsrs	r3, r3, #16
 8002102:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800210a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800210c:	60d3      	str	r3, [r2, #12]
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002116:	b530      	push	{r4, r5, lr}
 8002118:	68dc      	ldr	r4, [r3, #12]
 800211a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800211e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002122:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	2b04      	cmp	r3, #4
 8002126:	bf28      	it	cs
 8002128:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002130:	bf98      	it	ls
 8002132:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	fa05 f303 	lsl.w	r3, r5, r3
 8002138:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213c:	bf88      	it	hi
 800213e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	4019      	ands	r1, r3
 8002142:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	fa05 f404 	lsl.w	r4, r5, r4
 8002148:	3c01      	subs	r4, #1
 800214a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800214c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214e:	ea42 0201 	orr.w	r2, r2, r1
 8002152:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	bfa9      	itett	ge
 8002158:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	4b06      	ldrlt	r3, [pc, #24]	; (8002178 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	b2d2      	uxtbge	r2, r2
 8002160:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	bfbb      	ittet	lt
 8002166:	f000 000f 	andlt.w	r0, r0, #15
 800216a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	541a      	strblt	r2, [r3, r0]
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	e000ed14 	.word	0xe000ed14

0800217c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800217c:	2800      	cmp	r0, #0
 800217e:	db08      	blt.n	8002192 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002180:	2301      	movs	r3, #1
 8002182:	0942      	lsrs	r2, r0, #5
 8002184:	f000 001f 	and.w	r0, r0, #31
 8002188:	fa03 f000 	lsl.w	r0, r3, r0
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <HAL_NVIC_EnableIRQ+0x18>)
 800218e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100

08002198 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002198:	3801      	subs	r0, #1
 800219a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800219e:	d20a      	bcs.n	80021b6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021c4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80021c8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d003      	beq.n	80021d6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	2304      	movs	r3, #4
 80021d0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80021d2:	2001      	movs	r0, #1
 80021d4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d6:	6803      	ldr	r3, [r0, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f022 020e 	bic.w	r2, r2, #14
 80021de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f022 0201 	bic.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021e8:	4a18      	ldr	r2, [pc, #96]	; (800224c <HAL_DMA_Abort_IT+0x88>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d01f      	beq.n	800222e <HAL_DMA_Abort_IT+0x6a>
 80021ee:	3214      	adds	r2, #20
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01e      	beq.n	8002232 <HAL_DMA_Abort_IT+0x6e>
 80021f4:	3214      	adds	r2, #20
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01d      	beq.n	8002236 <HAL_DMA_Abort_IT+0x72>
 80021fa:	3214      	adds	r2, #20
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01d      	beq.n	800223c <HAL_DMA_Abort_IT+0x78>
 8002200:	3214      	adds	r2, #20
 8002202:	4293      	cmp	r3, r2
 8002204:	d01d      	beq.n	8002242 <HAL_DMA_Abort_IT+0x7e>
 8002206:	3214      	adds	r2, #20
 8002208:	4293      	cmp	r3, r2
 800220a:	bf0c      	ite	eq
 800220c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002210:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002216:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002218:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800221a:	2301      	movs	r3, #1
 800221c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002220:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002222:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002226:	b17b      	cbz	r3, 8002248 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8002228:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	4620      	mov	r0, r4
 800222c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800222e:	2301      	movs	r3, #1
 8002230:	e7f0      	b.n	8002214 <HAL_DMA_Abort_IT+0x50>
 8002232:	2310      	movs	r3, #16
 8002234:	e7ee      	b.n	8002214 <HAL_DMA_Abort_IT+0x50>
 8002236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223a:	e7eb      	b.n	8002214 <HAL_DMA_Abort_IT+0x50>
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	e7e8      	b.n	8002214 <HAL_DMA_Abort_IT+0x50>
 8002242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002246:	e7e5      	b.n	8002214 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800224a:	bd10      	pop	{r4, pc}
 800224c:	40020008 	.word	0x40020008
 8002250:	40020000 	.word	0x40020000

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002258:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800225a:	4626      	mov	r6, r4
 800225c:	4b66      	ldr	r3, [pc, #408]	; (80023f8 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002408 <HAL_GPIO_Init+0x1b4>
 8002262:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800240c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	680a      	ldr	r2, [r1, #0]
 8002268:	fa32 f506 	lsrs.w	r5, r2, r6
 800226c:	d102      	bne.n	8002274 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800226e:	b003      	add	sp, #12
 8002270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002274:	f04f 0801 	mov.w	r8, #1
 8002278:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800227c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8002280:	4590      	cmp	r8, r2
 8002282:	d17f      	bne.n	8002384 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8002284:	684d      	ldr	r5, [r1, #4]
 8002286:	2d12      	cmp	r5, #18
 8002288:	f000 80aa 	beq.w	80023e0 <HAL_GPIO_Init+0x18c>
 800228c:	f200 8083 	bhi.w	8002396 <HAL_GPIO_Init+0x142>
 8002290:	2d02      	cmp	r5, #2
 8002292:	f000 80a2 	beq.w	80023da <HAL_GPIO_Init+0x186>
 8002296:	d877      	bhi.n	8002388 <HAL_GPIO_Init+0x134>
 8002298:	2d00      	cmp	r5, #0
 800229a:	f000 8089 	beq.w	80023b0 <HAL_GPIO_Init+0x15c>
 800229e:	2d01      	cmp	r5, #1
 80022a0:	f000 8099 	beq.w	80023d6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022a4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022a8:	2aff      	cmp	r2, #255	; 0xff
 80022aa:	bf93      	iteet	ls
 80022ac:	4682      	movls	sl, r0
 80022ae:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80022b2:	3d08      	subhi	r5, #8
 80022b4:	f8d0 b000 	ldrls.w	fp, [r0]
 80022b8:	bf92      	itee	ls
 80022ba:	00b5      	lslls	r5, r6, #2
 80022bc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80022c0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c2:	fa09 f805 	lsl.w	r8, r9, r5
 80022c6:	ea2b 0808 	bic.w	r8, fp, r8
 80022ca:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ce:	bf88      	it	hi
 80022d0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d4:	ea48 0505 	orr.w	r5, r8, r5
 80022d8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022dc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80022e0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80022e4:	d04e      	beq.n	8002384 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e6:	4d45      	ldr	r5, [pc, #276]	; (80023fc <HAL_GPIO_Init+0x1a8>)
 80022e8:	4f44      	ldr	r7, [pc, #272]	; (80023fc <HAL_GPIO_Init+0x1a8>)
 80022ea:	69ad      	ldr	r5, [r5, #24]
 80022ec:	f026 0803 	bic.w	r8, r6, #3
 80022f0:	f045 0501 	orr.w	r5, r5, #1
 80022f4:	61bd      	str	r5, [r7, #24]
 80022f6:	69bd      	ldr	r5, [r7, #24]
 80022f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80022fc:	f005 0501 	and.w	r5, r5, #1
 8002300:	9501      	str	r5, [sp, #4]
 8002302:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002306:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002310:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002314:	fa09 f90b 	lsl.w	r9, r9, fp
 8002318:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800231c:	4d38      	ldr	r5, [pc, #224]	; (8002400 <HAL_GPIO_Init+0x1ac>)
 800231e:	42a8      	cmp	r0, r5
 8002320:	d063      	beq.n	80023ea <HAL_GPIO_Init+0x196>
 8002322:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002326:	42a8      	cmp	r0, r5
 8002328:	d061      	beq.n	80023ee <HAL_GPIO_Init+0x19a>
 800232a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800232e:	42a8      	cmp	r0, r5
 8002330:	d05f      	beq.n	80023f2 <HAL_GPIO_Init+0x19e>
 8002332:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002336:	42a8      	cmp	r0, r5
 8002338:	bf0c      	ite	eq
 800233a:	2503      	moveq	r5, #3
 800233c:	2504      	movne	r5, #4
 800233e:	fa05 f50b 	lsl.w	r5, r5, fp
 8002342:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002346:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800234a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800234c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002350:	bf14      	ite	ne
 8002352:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002354:	4395      	biceq	r5, r2
 8002356:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002358:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800235a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800235e:	bf14      	ite	ne
 8002360:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002362:	4395      	biceq	r5, r2
 8002364:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002366:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002368:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800236c:	bf14      	ite	ne
 800236e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002370:	4395      	biceq	r5, r2
 8002372:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002374:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002376:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800237a:	bf14      	ite	ne
 800237c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237e:	ea25 0202 	biceq.w	r2, r5, r2
 8002382:	60da      	str	r2, [r3, #12]
	position++;
 8002384:	3601      	adds	r6, #1
 8002386:	e76e      	b.n	8002266 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002388:	2d03      	cmp	r5, #3
 800238a:	d022      	beq.n	80023d2 <HAL_GPIO_Init+0x17e>
 800238c:	2d11      	cmp	r5, #17
 800238e:	d189      	bne.n	80022a4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002390:	68cc      	ldr	r4, [r1, #12]
 8002392:	3404      	adds	r4, #4
          break;
 8002394:	e786      	b.n	80022a4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8002396:	4f1b      	ldr	r7, [pc, #108]	; (8002404 <HAL_GPIO_Init+0x1b0>)
 8002398:	42bd      	cmp	r5, r7
 800239a:	d009      	beq.n	80023b0 <HAL_GPIO_Init+0x15c>
 800239c:	d812      	bhi.n	80023c4 <HAL_GPIO_Init+0x170>
 800239e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002410 <HAL_GPIO_Init+0x1bc>
 80023a2:	454d      	cmp	r5, r9
 80023a4:	d004      	beq.n	80023b0 <HAL_GPIO_Init+0x15c>
 80023a6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80023aa:	454d      	cmp	r5, r9
 80023ac:	f47f af7a 	bne.w	80022a4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023b0:	688c      	ldr	r4, [r1, #8]
 80023b2:	b1c4      	cbz	r4, 80023e6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80023b6:	bf0c      	ite	eq
 80023b8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80023bc:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023c0:	2408      	movs	r4, #8
 80023c2:	e76f      	b.n	80022a4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80023c4:	4575      	cmp	r5, lr
 80023c6:	d0f3      	beq.n	80023b0 <HAL_GPIO_Init+0x15c>
 80023c8:	4565      	cmp	r5, ip
 80023ca:	d0f1      	beq.n	80023b0 <HAL_GPIO_Init+0x15c>
 80023cc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002414 <HAL_GPIO_Init+0x1c0>
 80023d0:	e7eb      	b.n	80023aa <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d2:	2400      	movs	r4, #0
 80023d4:	e766      	b.n	80022a4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d6:	68cc      	ldr	r4, [r1, #12]
          break;
 80023d8:	e764      	b.n	80022a4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023da:	68cc      	ldr	r4, [r1, #12]
 80023dc:	3408      	adds	r4, #8
          break;
 80023de:	e761      	b.n	80022a4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	68cc      	ldr	r4, [r1, #12]
 80023e2:	340c      	adds	r4, #12
          break;
 80023e4:	e75e      	b.n	80022a4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e6:	2404      	movs	r4, #4
 80023e8:	e75c      	b.n	80022a4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ea:	2500      	movs	r5, #0
 80023ec:	e7a7      	b.n	800233e <HAL_GPIO_Init+0xea>
 80023ee:	2501      	movs	r5, #1
 80023f0:	e7a5      	b.n	800233e <HAL_GPIO_Init+0xea>
 80023f2:	2502      	movs	r5, #2
 80023f4:	e7a3      	b.n	800233e <HAL_GPIO_Init+0xea>
 80023f6:	bf00      	nop
 80023f8:	40010400 	.word	0x40010400
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010800 	.word	0x40010800
 8002404:	10210000 	.word	0x10210000
 8002408:	10310000 	.word	0x10310000
 800240c:	10320000 	.word	0x10320000
 8002410:	10110000 	.word	0x10110000
 8002414:	10220000 	.word	0x10220000

08002418 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	b10a      	cbz	r2, 800241e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800241a:	6101      	str	r1, [r0, #16]
 800241c:	4770      	bx	lr
 800241e:	0409      	lsls	r1, r1, #16
 8002420:	e7fb      	b.n	800241a <HAL_GPIO_WritePin+0x2>

08002422 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002422:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002424:	ea03 0201 	and.w	r2, r3, r1
 8002428:	ea21 0103 	bic.w	r1, r1, r3
 800242c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002430:	6101      	str	r1, [r0, #16]
 8002432:	4770      	bx	lr

08002434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002434:	4770      	bx	lr
	...

08002438 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002438:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800243a:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800243c:	6959      	ldr	r1, [r3, #20]
 800243e:	4201      	tst	r1, r0
 8002440:	d002      	beq.n	8002448 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002442:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002444:	f7ff fff6 	bl	8002434 <HAL_GPIO_EXTI_Callback>
 8002448:	bd08      	pop	{r3, pc}
 800244a:	bf00      	nop
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002454:	4605      	mov	r5, r0
 8002456:	b908      	cbnz	r0, 800245c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8002458:	2001      	movs	r0, #1
 800245a:	e03c      	b.n	80024d6 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	07db      	lsls	r3, r3, #31
 8002460:	d410      	bmi.n	8002484 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	079f      	lsls	r7, r3, #30
 8002466:	d45d      	bmi.n	8002524 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	0719      	lsls	r1, r3, #28
 800246c:	f100 8094 	bmi.w	8002598 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	075a      	lsls	r2, r3, #29
 8002474:	f100 80be 	bmi.w	80025f4 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002478:	69e8      	ldr	r0, [r5, #28]
 800247a:	2800      	cmp	r0, #0
 800247c:	f040 812c 	bne.w	80026d8 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8002480:	2000      	movs	r0, #0
 8002482:	e028      	b.n	80024d6 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002484:	4c8f      	ldr	r4, [pc, #572]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002486:	6863      	ldr	r3, [r4, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d007      	beq.n	80024a0 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d109      	bne.n	80024ae <HAL_RCC_OscConfig+0x5e>
 800249a:	6863      	ldr	r3, [r4, #4]
 800249c:	03de      	lsls	r6, r3, #15
 800249e:	d506      	bpl.n	80024ae <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	039c      	lsls	r4, r3, #14
 80024a4:	d5dd      	bpl.n	8002462 <HAL_RCC_OscConfig+0x12>
 80024a6:	686b      	ldr	r3, [r5, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1da      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
 80024ac:	e7d4      	b.n	8002458 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ae:	686b      	ldr	r3, [r5, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x8c>
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024be:	f7ff fb1f 	bl	8001b00 <HAL_GetTick>
 80024c2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	0398      	lsls	r0, r3, #14
 80024c8:	d4cb      	bmi.n	8002462 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ca:	f7ff fb19 	bl	8001b00 <HAL_GetTick>
 80024ce:	1b80      	subs	r0, r0, r6
 80024d0:	2864      	cmp	r0, #100	; 0x64
 80024d2:	d9f7      	bls.n	80024c4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80024d4:	2003      	movs	r0, #3
}
 80024d6:	b002      	add	sp, #8
 80024d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	b99b      	cbnz	r3, 8002506 <HAL_RCC_OscConfig+0xb6>
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e4:	6023      	str	r3, [r4, #0]
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024ee:	f7ff fb07 	bl	8001b00 <HAL_GetTick>
 80024f2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	0399      	lsls	r1, r3, #14
 80024f8:	d5b3      	bpl.n	8002462 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fa:	f7ff fb01 	bl	8001b00 <HAL_GetTick>
 80024fe:	1b80      	subs	r0, r0, r6
 8002500:	2864      	cmp	r0, #100	; 0x64
 8002502:	d9f7      	bls.n	80024f4 <HAL_RCC_OscConfig+0xa4>
 8002504:	e7e6      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	d103      	bne.n	8002516 <HAL_RCC_OscConfig+0xc6>
 800250e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	e7cf      	b.n	80024b6 <HAL_RCC_OscConfig+0x66>
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6023      	str	r3, [r4, #0]
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	e7cb      	b.n	80024bc <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002524:	4c67      	ldr	r4, [pc, #412]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 8002526:	6863      	ldr	r3, [r4, #4]
 8002528:	f013 0f0c 	tst.w	r3, #12
 800252c:	d007      	beq.n	800253e <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d110      	bne.n	800255a <HAL_RCC_OscConfig+0x10a>
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	03da      	lsls	r2, r3, #15
 800253c:	d40d      	bmi.n	800255a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	079b      	lsls	r3, r3, #30
 8002542:	d502      	bpl.n	800254a <HAL_RCC_OscConfig+0xfa>
 8002544:	692b      	ldr	r3, [r5, #16]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d186      	bne.n	8002458 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	696a      	ldr	r2, [r5, #20]
 800254e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002556:	6023      	str	r3, [r4, #0]
 8002558:	e786      	b.n	8002468 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800255a:	692a      	ldr	r2, [r5, #16]
 800255c:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x278>)
 800255e:	b16a      	cbz	r2, 800257c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002564:	f7ff facc 	bl	8001b00 <HAL_GetTick>
 8002568:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	079f      	lsls	r7, r3, #30
 800256e:	d4ec      	bmi.n	800254a <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fac6 	bl	8001b00 <HAL_GetTick>
 8002574:	1b80      	subs	r0, r0, r6
 8002576:	2802      	cmp	r0, #2
 8002578:	d9f7      	bls.n	800256a <HAL_RCC_OscConfig+0x11a>
 800257a:	e7ab      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800257c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800257e:	f7ff fabf 	bl	8001b00 <HAL_GetTick>
 8002582:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	0798      	lsls	r0, r3, #30
 8002588:	f57f af6e 	bpl.w	8002468 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7ff fab8 	bl	8001b00 <HAL_GetTick>
 8002590:	1b80      	subs	r0, r0, r6
 8002592:	2802      	cmp	r0, #2
 8002594:	d9f6      	bls.n	8002584 <HAL_RCC_OscConfig+0x134>
 8002596:	e79d      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002598:	69aa      	ldr	r2, [r5, #24]
 800259a:	4c4a      	ldr	r4, [pc, #296]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 800259c:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <HAL_RCC_OscConfig+0x27c>)
 800259e:	b1da      	cbz	r2, 80025d8 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025a4:	f7ff faac 	bl	8001b00 <HAL_GetTick>
 80025a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ac:	079b      	lsls	r3, r3, #30
 80025ae:	d50d      	bpl.n	80025cc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80025b4:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_RCC_OscConfig+0x280>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025bc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80025be:	bf00      	nop
  }
  while (Delay --);
 80025c0:	9b01      	ldr	r3, [sp, #4]
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	9201      	str	r2, [sp, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f9      	bne.n	80025be <HAL_RCC_OscConfig+0x16e>
 80025ca:	e751      	b.n	8002470 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025cc:	f7ff fa98 	bl	8001b00 <HAL_GetTick>
 80025d0:	1b80      	subs	r0, r0, r6
 80025d2:	2802      	cmp	r0, #2
 80025d4:	d9e9      	bls.n	80025aa <HAL_RCC_OscConfig+0x15a>
 80025d6:	e77d      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80025d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025da:	f7ff fa91 	bl	8001b00 <HAL_GetTick>
 80025de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e2:	079f      	lsls	r7, r3, #30
 80025e4:	f57f af44 	bpl.w	8002470 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7ff fa8a 	bl	8001b00 <HAL_GetTick>
 80025ec:	1b80      	subs	r0, r0, r6
 80025ee:	2802      	cmp	r0, #2
 80025f0:	d9f6      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
 80025f2:	e76f      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f4:	4c33      	ldr	r4, [pc, #204]	; (80026c4 <HAL_RCC_OscConfig+0x274>)
 80025f6:	69e3      	ldr	r3, [r4, #28]
 80025f8:	00d8      	lsls	r0, r3, #3
 80025fa:	d424      	bmi.n	8002646 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80025fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	69e3      	ldr	r3, [r4, #28]
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	61e3      	str	r3, [r4, #28]
 8002606:	69e3      	ldr	r3, [r4, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4e30      	ldr	r6, [pc, #192]	; (80026d4 <HAL_RCC_OscConfig+0x284>)
 8002612:	6833      	ldr	r3, [r6, #0]
 8002614:	05d9      	lsls	r1, r3, #23
 8002616:	d518      	bpl.n	800264a <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002618:	68eb      	ldr	r3, [r5, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d126      	bne.n	800266c <HAL_RCC_OscConfig+0x21c>
 800261e:	6a23      	ldr	r3, [r4, #32]
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002626:	f7ff fa6b 	bl	8001b00 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800262e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002630:	6a23      	ldr	r3, [r4, #32]
 8002632:	079b      	lsls	r3, r3, #30
 8002634:	d53f      	bpl.n	80026b6 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8002636:	2f00      	cmp	r7, #0
 8002638:	f43f af1e 	beq.w	8002478 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	69e3      	ldr	r3, [r4, #28]
 800263e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002642:	61e3      	str	r3, [r4, #28]
 8002644:	e718      	b.n	8002478 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2700      	movs	r7, #0
 8002648:	e7e2      	b.n	8002610 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	6833      	ldr	r3, [r6, #0]
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002652:	f7ff fa55 	bl	8001b00 <HAL_GetTick>
 8002656:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	6833      	ldr	r3, [r6, #0]
 800265a:	05da      	lsls	r2, r3, #23
 800265c:	d4dc      	bmi.n	8002618 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff fa4f 	bl	8001b00 <HAL_GetTick>
 8002662:	eba0 0008 	sub.w	r0, r0, r8
 8002666:	2864      	cmp	r0, #100	; 0x64
 8002668:	d9f6      	bls.n	8002658 <HAL_RCC_OscConfig+0x208>
 800266a:	e733      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266c:	b9ab      	cbnz	r3, 800269a <HAL_RCC_OscConfig+0x24a>
 800266e:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6223      	str	r3, [r4, #32]
 800267a:	6a23      	ldr	r3, [r4, #32]
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002682:	f7ff fa3d 	bl	8001b00 <HAL_GetTick>
 8002686:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	6a23      	ldr	r3, [r4, #32]
 800268a:	0798      	lsls	r0, r3, #30
 800268c:	d5d3      	bpl.n	8002636 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7ff fa37 	bl	8001b00 <HAL_GetTick>
 8002692:	1b80      	subs	r0, r0, r6
 8002694:	4540      	cmp	r0, r8
 8002696:	d9f7      	bls.n	8002688 <HAL_RCC_OscConfig+0x238>
 8002698:	e71c      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269a:	2b05      	cmp	r3, #5
 800269c:	6a23      	ldr	r3, [r4, #32]
 800269e:	d103      	bne.n	80026a8 <HAL_RCC_OscConfig+0x258>
 80026a0:	f043 0304 	orr.w	r3, r3, #4
 80026a4:	6223      	str	r3, [r4, #32]
 80026a6:	e7ba      	b.n	800261e <HAL_RCC_OscConfig+0x1ce>
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6223      	str	r3, [r4, #32]
 80026ae:	6a23      	ldr	r3, [r4, #32]
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	e7b6      	b.n	8002624 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7ff fa23 	bl	8001b00 <HAL_GetTick>
 80026ba:	eba0 0008 	sub.w	r0, r0, r8
 80026be:	42b0      	cmp	r0, r6
 80026c0:	d9b6      	bls.n	8002630 <HAL_RCC_OscConfig+0x1e0>
 80026c2:	e707      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
 80026c4:	40021000 	.word	0x40021000
 80026c8:	42420000 	.word	0x42420000
 80026cc:	42420480 	.word	0x42420480
 80026d0:	20000004 	.word	0x20000004
 80026d4:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x334>)
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	461c      	mov	r4, r3
 80026de:	f002 020c 	and.w	r2, r2, #12
 80026e2:	2a08      	cmp	r2, #8
 80026e4:	d03d      	beq.n	8002762 <HAL_RCC_OscConfig+0x312>
 80026e6:	2300      	movs	r3, #0
 80026e8:	4e27      	ldr	r6, [pc, #156]	; (8002788 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80026ec:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ee:	d12b      	bne.n	8002748 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80026f0:	f7ff fa06 	bl	8001b00 <HAL_GetTick>
 80026f4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	0199      	lsls	r1, r3, #6
 80026fa:	d41f      	bmi.n	800273c <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026fc:	6a2b      	ldr	r3, [r5, #32]
 80026fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002702:	d105      	bne.n	8002710 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002704:	6862      	ldr	r2, [r4, #4]
 8002706:	68a9      	ldr	r1, [r5, #8]
 8002708:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800270c:	430a      	orrs	r2, r1
 800270e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002712:	6862      	ldr	r2, [r4, #4]
 8002714:	430b      	orrs	r3, r1
 8002716:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800271a:	4313      	orrs	r3, r2
 800271c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800271e:	2301      	movs	r3, #1
 8002720:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002722:	f7ff f9ed 	bl	8001b00 <HAL_GetTick>
 8002726:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	019a      	lsls	r2, r3, #6
 800272c:	f53f aea8 	bmi.w	8002480 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff f9e6 	bl	8001b00 <HAL_GetTick>
 8002734:	1b40      	subs	r0, r0, r5
 8002736:	2802      	cmp	r0, #2
 8002738:	d9f6      	bls.n	8002728 <HAL_RCC_OscConfig+0x2d8>
 800273a:	e6cb      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff f9e0 	bl	8001b00 <HAL_GetTick>
 8002740:	1bc0      	subs	r0, r0, r7
 8002742:	2802      	cmp	r0, #2
 8002744:	d9d7      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2a6>
 8002746:	e6c5      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002748:	f7ff f9da 	bl	8001b00 <HAL_GetTick>
 800274c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	f57f ae95 	bpl.w	8002480 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff f9d3 	bl	8001b00 <HAL_GetTick>
 800275a:	1b40      	subs	r0, r0, r5
 800275c:	2802      	cmp	r0, #2
 800275e:	d9f6      	bls.n	800274e <HAL_RCC_OscConfig+0x2fe>
 8002760:	e6b8      	b.n	80024d4 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002762:	2801      	cmp	r0, #1
 8002764:	f43f aeb7 	beq.w	80024d6 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8002768:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	6a2b      	ldr	r3, [r5, #32]
 800276c:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8002770:	429a      	cmp	r2, r3
 8002772:	f47f ae71 	bne.w	8002458 <HAL_RCC_OscConfig+0x8>
 8002776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002778:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 800277c:	1ac0      	subs	r0, r0, r3
 800277e:	bf18      	it	ne
 8002780:	2001      	movne	r0, #1
 8002782:	e6a8      	b.n	80024d6 <HAL_RCC_OscConfig+0x86>
 8002784:	40021000 	.word	0x40021000
 8002788:	42420060 	.word	0x42420060

0800278c <HAL_RCC_GetSysClockFreq>:
{
 800278c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800278e:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002790:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002792:	ac02      	add	r4, sp, #8
 8002794:	f103 0510 	add.w	r5, r3, #16
 8002798:	4622      	mov	r2, r4
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	3308      	adds	r3, #8
 80027a0:	c203      	stmia	r2!, {r0, r1}
 80027a2:	42ab      	cmp	r3, r5
 80027a4:	4614      	mov	r4, r2
 80027a6:	d1f7      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a8:	2301      	movs	r3, #1
 80027aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80027ae:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80027b0:	4911      	ldr	r1, [pc, #68]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80027b6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80027b8:	f003 020c 	and.w	r2, r3, #12
 80027bc:	2a08      	cmp	r2, #8
 80027be:	d117      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80027c4:	a806      	add	r0, sp, #24
 80027c6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027c8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ce:	d50c      	bpl.n	80027ea <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d2:	480a      	ldr	r0, [pc, #40]	; (80027fc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027d8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027da:	aa06      	add	r2, sp, #24
 80027dc:	4413      	add	r3, r2
 80027de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027e2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80027e6:	b007      	add	sp, #28
 80027e8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_RCC_GetSysClockFreq+0x74>)
 80027ec:	4350      	muls	r0, r2
 80027ee:	e7fa      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80027f2:	e7f8      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x5a>
 80027f4:	0800378f 	.word	0x0800378f
 80027f8:	40021000 	.word	0x40021000
 80027fc:	007a1200 	.word	0x007a1200
 8002800:	003d0900 	.word	0x003d0900

08002804 <HAL_RCC_ClockConfig>:
{
 8002804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002808:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800280a:	4604      	mov	r4, r0
 800280c:	b910      	cbnz	r0, 8002814 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002814:	4a45      	ldr	r2, [pc, #276]	; (800292c <HAL_RCC_ClockConfig+0x128>)
 8002816:	6813      	ldr	r3, [r2, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	428b      	cmp	r3, r1
 800281e:	d329      	bcc.n	8002874 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	6821      	ldr	r1, [r4, #0]
 8002822:	078e      	lsls	r6, r1, #30
 8002824:	d431      	bmi.n	800288a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002826:	07ca      	lsls	r2, r1, #31
 8002828:	d444      	bmi.n	80028b4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800282a:	4a40      	ldr	r2, [pc, #256]	; (800292c <HAL_RCC_ClockConfig+0x128>)
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	429d      	cmp	r5, r3
 8002834:	d367      	bcc.n	8002906 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	4d3d      	ldr	r5, [pc, #244]	; (8002930 <HAL_RCC_ClockConfig+0x12c>)
 800283a:	f012 0f04 	tst.w	r2, #4
 800283e:	d16e      	bne.n	800291e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	0713      	lsls	r3, r2, #28
 8002842:	d506      	bpl.n	8002852 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002844:	686b      	ldr	r3, [r5, #4]
 8002846:	6922      	ldr	r2, [r4, #16]
 8002848:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800284c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002850:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002852:	f7ff ff9b 	bl	800278c <HAL_RCC_GetSysClockFreq>
 8002856:	686b      	ldr	r3, [r5, #4]
 8002858:	4a36      	ldr	r2, [pc, #216]	; (8002934 <HAL_RCC_ClockConfig+0x130>)
 800285a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	40d8      	lsrs	r0, r3
 8002862:	4b35      	ldr	r3, [pc, #212]	; (8002938 <HAL_RCC_ClockConfig+0x134>)
 8002864:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_ClockConfig+0x138>)
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	f7ff f907 	bl	8001a7c <HAL_InitTick>
  return HAL_OK;
 800286e:	2000      	movs	r0, #0
 8002870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002874:	6813      	ldr	r3, [r2, #0]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	430b      	orrs	r3, r1
 800287c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	6813      	ldr	r3, [r2, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4299      	cmp	r1, r3
 8002886:	d1c2      	bne.n	800280e <HAL_RCC_ClockConfig+0xa>
 8002888:	e7ca      	b.n	8002820 <HAL_RCC_ClockConfig+0x1c>
 800288a:	4b29      	ldr	r3, [pc, #164]	; (8002930 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	bf1e      	ittt	ne
 8002892:	685a      	ldrne	r2, [r3, #4]
 8002894:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002898:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	bf42      	ittt	mi
 800289e:	685a      	ldrmi	r2, [r3, #4]
 80028a0:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80028a4:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68a0      	ldr	r0, [r4, #8]
 80028aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028ae:	4302      	orrs	r2, r0
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e7b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	4e1e      	ldr	r6, [pc, #120]	; (8002930 <HAL_RCC_ClockConfig+0x12c>)
 80028b8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028bc:	d11b      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	d0a4      	beq.n	800280e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c4:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80028d2:	f7ff f915 	bl	8001b00 <HAL_GetTick>
 80028d6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d8:	6873      	ldr	r3, [r6, #4]
 80028da:	6862      	ldr	r2, [r4, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028e4:	d0a1      	beq.n	800282a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e6:	f7ff f90b 	bl	8001b00 <HAL_GetTick>
 80028ea:	1bc0      	subs	r0, r0, r7
 80028ec:	4540      	cmp	r0, r8
 80028ee:	d9f3      	bls.n	80028d8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80028f0:	2003      	movs	r0, #3
}
 80028f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028f6:	2a02      	cmp	r2, #2
 80028f8:	d102      	bne.n	8002900 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028fe:	e7e0      	b.n	80028c2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	f013 0f02 	tst.w	r3, #2
 8002904:	e7dd      	b.n	80028c2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	f023 0307 	bic.w	r3, r3, #7
 800290c:	432b      	orrs	r3, r5
 800290e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	429d      	cmp	r5, r3
 8002918:	f47f af79 	bne.w	800280e <HAL_RCC_ClockConfig+0xa>
 800291c:	e78b      	b.n	8002836 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291e:	686b      	ldr	r3, [r5, #4]
 8002920:	68e1      	ldr	r1, [r4, #12]
 8002922:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002926:	430b      	orrs	r3, r1
 8002928:	606b      	str	r3, [r5, #4]
 800292a:	e789      	b.n	8002840 <HAL_RCC_ClockConfig+0x3c>
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	0800379f 	.word	0x0800379f
 8002938:	20000004 	.word	0x20000004
 800293c:	2000000c 	.word	0x2000000c

08002940 <HAL_TIM_PeriodElapsedCallback>:
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_OC_DelayElapsedCallback>:
 8002942:	4770      	bx	lr

08002944 <HAL_TIM_IC_CaptureCallback>:
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_TriggerCallback>:
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800294a:	6803      	ldr	r3, [r0, #0]
{
 800294c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800294e:	691a      	ldr	r2, [r3, #16]
{
 8002950:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002952:	0791      	lsls	r1, r2, #30
 8002954:	d50e      	bpl.n	8002974 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	0792      	lsls	r2, r2, #30
 800295a:	d50b      	bpl.n	8002974 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295c:	f06f 0202 	mvn.w	r2, #2
 8002960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002962:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002966:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002968:	079b      	lsls	r3, r3, #30
 800296a:	d077      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296c:	f7ff ffea 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002970:	2300      	movs	r3, #0
 8002972:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	0750      	lsls	r0, r2, #29
 800297a:	d510      	bpl.n	800299e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	0751      	lsls	r1, r2, #29
 8002980:	d50d      	bpl.n	800299e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002982:	f06f 0204 	mvn.w	r2, #4
 8002986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002988:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002994:	d068      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	f7ff ffd5 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	2300      	movs	r3, #0
 800299c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	0712      	lsls	r2, r2, #28
 80029a4:	d50f      	bpl.n	80029c6 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	0710      	lsls	r0, r2, #28
 80029aa:	d50c      	bpl.n	80029c6 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	f06f 0208 	mvn.w	r2, #8
 80029b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b2:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b8:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	d05a      	beq.n	8002a74 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	f7ff ffc1 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c2:	2300      	movs	r3, #0
 80029c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	06d2      	lsls	r2, r2, #27
 80029cc:	d510      	bpl.n	80029f0 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	06d0      	lsls	r0, r2, #27
 80029d2:	d50d      	bpl.n	80029f0 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d4:	f06f 0210 	mvn.w	r2, #16
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029da:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029dc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e0:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e6:	d04b      	beq.n	8002a80 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	f7ff ffac 	bl	8002944 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	2300      	movs	r3, #0
 80029ee:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	07d1      	lsls	r1, r2, #31
 80029f6:	d508      	bpl.n	8002a0a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	07d2      	lsls	r2, r2, #31
 80029fc:	d505      	bpl.n	8002a0a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029fe:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a06:	f7ff ff9b 	bl	8002940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	0610      	lsls	r0, r2, #24
 8002a10:	d508      	bpl.n	8002a24 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	0611      	lsls	r1, r2, #24
 8002a16:	d505      	bpl.n	8002a24 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a20:	f000 f9e5 	bl	8002dee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	0652      	lsls	r2, r2, #25
 8002a2a:	d508      	bpl.n	8002a3e <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	0650      	lsls	r0, r2, #25
 8002a30:	d505      	bpl.n	8002a3e <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a32:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a3a:	f7ff ff85 	bl	8002948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	0691      	lsls	r1, r2, #26
 8002a44:	d522      	bpl.n	8002a8c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	0692      	lsls	r2, r2, #26
 8002a4a:	d51f      	bpl.n	8002a8c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a4c:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a50:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a56:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002a58:	f000 b9c8 	b.w	8002dec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5c:	f7ff ff71 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff ff70 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a66:	e783      	b.n	8002970 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a68:	f7ff ff6b 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff ff6a 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a72:	e792      	b.n	800299a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a74:	f7ff ff65 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f7ff ff64 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a7e:	e7a0      	b.n	80029c2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a80:	f7ff ff5f 	bl	8002942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff ff5e 	bl	8002946 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a8a:	e7af      	b.n	80029ec <HAL_TIM_IRQHandler+0xa2>
 8002a8c:	bd10      	pop	{r4, pc}
	...

08002a90 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002a92:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d00a      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002a98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a9c:	d007      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002a9e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002aa2:	4290      	cmp	r0, r2
 8002aa4:	d003      	beq.n	8002aae <TIM_Base_SetConfig+0x1e>
 8002aa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aaa:	4290      	cmp	r0, r2
 8002aac:	d115      	bne.n	8002ada <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002aae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <TIM_Base_SetConfig+0x6c>)
 8002ab8:	4290      	cmp	r0, r2
 8002aba:	d00a      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002abc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ac0:	d007      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002ac2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ac6:	4290      	cmp	r0, r2
 8002ac8:	d003      	beq.n	8002ad2 <TIM_Base_SetConfig+0x42>
 8002aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ace:	4290      	cmp	r0, r2
 8002ad0:	d103      	bne.n	8002ada <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ada:	694a      	ldr	r2, [r1, #20]
 8002adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002ae2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae4:	688b      	ldr	r3, [r1, #8]
 8002ae6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	680b      	ldr	r3, [r1, #0]
 8002aea:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <TIM_Base_SetConfig+0x6c>)
 8002aee:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af0:	bf04      	itt	eq
 8002af2:	690b      	ldreq	r3, [r1, #16]
 8002af4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af6:	2301      	movs	r3, #1
 8002af8:	6143      	str	r3, [r0, #20]
 8002afa:	4770      	bx	lr
 8002afc:	40012c00 	.word	0x40012c00

08002b00 <HAL_TIM_Base_Init>:
{
 8002b00:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002b02:	4604      	mov	r4, r0
 8002b04:	b330      	cbz	r0, 8002b54 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b0e:	b91b      	cbnz	r3, 8002b18 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b14:	f7fe ff84 	bl	8001a20 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	1d21      	adds	r1, r4, #4
 8002b22:	f7ff ffb5 	bl	8002a90 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b26:	2301      	movs	r3, #1
  return HAL_OK;
 8002b28:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b32:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b36:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b3a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b46:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002b52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b54:	2001      	movs	r0, #1
}
 8002b56:	bd10      	pop	{r4, pc}

08002b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b58:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b5a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b5c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b5e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b62:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002b66:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b68:	6083      	str	r3, [r0, #8]
 8002b6a:	bd10      	pop	{r4, pc}

08002b6c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002b6c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002b72:	2b01      	cmp	r3, #1
{
 8002b74:	4604      	mov	r4, r0
 8002b76:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002b7a:	d019      	beq.n	8002bb0 <HAL_TIM_ConfigClockSource+0x44>
 8002b7c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002b82:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002b84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b88:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b92:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002b94:	680b      	ldr	r3, [r1, #0]
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d065      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xfa>
 8002b9a:	d815      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x5c>
 8002b9c:	2b10      	cmp	r3, #16
 8002b9e:	d00c      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x4e>
 8002ba0:	d807      	bhi.n	8002bb2 <HAL_TIM_ConfigClockSource+0x46>
 8002ba2:	b153      	cbz	r3, 8002bba <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002ba6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ba8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002bac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d001      	beq.n	8002bba <HAL_TIM_ConfigClockSource+0x4e>
 8002bb6:	2b30      	cmp	r3, #48	; 0x30
 8002bb8:	d1f4      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002bba:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bbc:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bc0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	e01a      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002bc8:	2b60      	cmp	r3, #96	; 0x60
 8002bca:	d034      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0xca>
 8002bcc:	d819      	bhi.n	8002c02 <HAL_TIM_ConfigClockSource+0x96>
 8002bce:	2b50      	cmp	r3, #80	; 0x50
 8002bd0:	d1e8      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	684a      	ldr	r2, [r1, #4]
 8002bd4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002bd6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bda:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	f025 0501 	bic.w	r5, r5, #1
 8002be2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002be6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bec:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002bf0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002bf2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002bf4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002bfe:	6083      	str	r3, [r0, #8]
 8002c00:	e7d0      	b.n	8002ba4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002c02:	2b70      	cmp	r3, #112	; 0x70
 8002c04:	d00c      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0xb4>
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	d1cb      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002c0c:	68cb      	ldr	r3, [r1, #12]
 8002c0e:	684a      	ldr	r2, [r1, #4]
 8002c10:	6889      	ldr	r1, [r1, #8]
 8002c12:	f7ff ffa1 	bl	8002b58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	6893      	ldr	r3, [r2, #8]
 8002c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c1e:	e008      	b.n	8002c32 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	68cb      	ldr	r3, [r1, #12]
 8002c22:	684a      	ldr	r2, [r1, #4]
 8002c24:	6889      	ldr	r1, [r1, #8]
 8002c26:	f7ff ff97 	bl	8002b58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c2a:	6822      	ldr	r2, [r4, #0]
 8002c2c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c32:	6093      	str	r3, [r2, #8]
      break;
 8002c34:	e7b6      	b.n	8002ba4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c36:	684d      	ldr	r5, [r1, #4]
 8002c38:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3a:	6a01      	ldr	r1, [r0, #32]
 8002c3c:	f021 0110 	bic.w	r1, r1, #16
 8002c40:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002c44:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c46:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c52:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c56:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c58:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c5a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c60:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002c64:	e7cb      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c66:	684a      	ldr	r2, [r1, #4]
 8002c68:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c6a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c72:	f025 0501 	bic.w	r5, r5, #1
 8002c76:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c78:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002c7a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c80:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c84:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002c86:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002c88:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002c92:	e7b4      	b.n	8002bfe <HAL_TIM_ConfigClockSource+0x92>

08002c94 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8002c94:	6800      	ldr	r0, [r0, #0]
{
 8002c96:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002c98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002c9a:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ca0:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002ca2:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002ca4:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ca8:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 8002caa:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8002cac:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8002cae:	d01e      	beq.n	8002cee <TIM_SlaveTimer_SetConfig+0x5a>
 8002cb0:	d803      	bhi.n	8002cba <TIM_SlaveTimer_SetConfig+0x26>
 8002cb2:	2a40      	cmp	r2, #64	; 0x40
 8002cb4:	d00b      	beq.n	8002cce <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 8002cba:	2a60      	cmp	r2, #96	; 0x60
 8002cbc:	d027      	beq.n	8002d0e <TIM_SlaveTimer_SetConfig+0x7a>
 8002cbe:	2a70      	cmp	r2, #112	; 0x70
 8002cc0:	d1f9      	bne.n	8002cb6 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	690b      	ldr	r3, [r1, #16]
 8002cc4:	688a      	ldr	r2, [r1, #8]
 8002cc6:	68c9      	ldr	r1, [r1, #12]
 8002cc8:	f7ff ff46 	bl	8002b58 <TIM_ETR_SetConfig>
 8002ccc:	e7f3      	b.n	8002cb6 <TIM_SlaveTimer_SetConfig+0x22>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002cce:	2c05      	cmp	r4, #5
 8002cd0:	d030      	beq.n	8002d34 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8002cd2:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002cd4:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002cd6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002cd8:	f023 0301 	bic.w	r3, r3, #1
 8002cdc:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002cde:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ce0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002ce4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002ce8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002cea:	6202      	str	r2, [r0, #32]
 8002cec:	e7e3      	b.n	8002cb6 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	688a      	ldr	r2, [r1, #8]
 8002cf0:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002cf2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cf4:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cf6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cfa:	f024 0401 	bic.w	r4, r4, #1
 8002cfe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d00:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002d02:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002d0c:	e7ec      	b.n	8002ce8 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	688c      	ldr	r4, [r1, #8]
 8002d10:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d12:	6a01      	ldr	r1, [r0, #32]
 8002d14:	f021 0110 	bic.w	r1, r1, #16
 8002d18:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002d1c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d1e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d26:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d2a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002d2e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002d30:	6203      	str	r3, [r0, #32]
 8002d32:	e7c0      	b.n	8002cb6 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
}
 8002d36:	bd38      	pop	{r3, r4, r5, pc}

08002d38 <HAL_TIM_SlaveConfigSynchro>:
{
 8002d38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002d3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d3e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f04f 0302 	mov.w	r3, #2
 8002d46:	d01c      	beq.n	8002d82 <HAL_TIM_SlaveConfigSynchro+0x4a>
 8002d48:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002d4e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002d52:	f7ff ff9f 	bl	8002c94 <TIM_SlaveTimer_SetConfig>
 8002d56:	b130      	cbz	r0, 8002d66 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8002d58:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8002d5a:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002d5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8002d62:	4628      	mov	r0, r5
 8002d64:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d76:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d7c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002d80:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002d82:	4618      	mov	r0, r3
}
 8002d84:	bd38      	pop	{r3, r4, r5, pc}
	...

08002d88 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002d8c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	f04f 0302 	mov.w	r3, #2
 8002d94:	d025      	beq.n	8002de2 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002d96:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002da0:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8002da2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002daa:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002dac:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dae:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db0:	4c0d      	ldr	r4, [pc, #52]	; (8002de8 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002db2:	42a3      	cmp	r3, r4
 8002db4:	d00a      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d007      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002dbc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002dc0:	42a3      	cmp	r3, r4
 8002dc2:	d003      	beq.n	8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002dc4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d104      	bne.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dcc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd2:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002de2:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002de4:	bd30      	pop	{r4, r5, pc}
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00

08002dec <HAL_TIMEx_CommutCallback>:
 8002dec:	4770      	bx	lr

08002dee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	4770      	bx	lr

08002df0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002df8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e02:	2320      	movs	r3, #32
 8002e04:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002e08:	4770      	bx	lr

08002e0a <HAL_UART_TxCpltCallback>:
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_RxCpltCallback>:
 8002e0c:	4770      	bx	lr

08002e0e <UART_Receive_IT>:
{
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e0e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8002e12:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e14:	2b22      	cmp	r3, #34	; 0x22
 8002e16:	d132      	bne.n	8002e7e <UART_Receive_IT+0x70>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e18:	6881      	ldr	r1, [r0, #8]
 8002e1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e1c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	d120      	bne.n	8002e66 <UART_Receive_IT+0x58>
 8002e24:	6901      	ldr	r1, [r0, #16]
 8002e26:	bb09      	cbnz	r1, 8002e6c <UART_Receive_IT+0x5e>
    {
      pdata8bits  = NULL;
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e28:	6852      	ldr	r2, [r2, #4]
 8002e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e2e:	f823 2b02 	strh.w	r2, [r3], #2
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
      }
      huart->pRxBuffPtr += 1U;
    }

    if (--huart->RxXferCount == 0U)
 8002e32:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8002e34:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002e36:	3c01      	subs	r4, #1
 8002e38:	b2a4      	uxth	r4, r4
 8002e3a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002e3c:	b98c      	cbnz	r4, 8002e62 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e3e:	6803      	ldr	r3, [r0, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	f022 0220 	bic.w	r2, r2, #32
 8002e46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e5e:	f7ff ffd5 	bl	8002e0c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8002e62:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002e64:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e66:	b931      	cbnz	r1, 8002e76 <UART_Receive_IT+0x68>
 8002e68:	6901      	ldr	r1, [r0, #16]
 8002e6a:	b921      	cbnz	r1, 8002e76 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e6c:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002e72:	3301      	adds	r3, #1
 8002e74:	e7dd      	b.n	8002e32 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e7c:	e7f7      	b.n	8002e6e <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8002e7e:	2002      	movs	r0, #2
 8002e80:	bd10      	pop	{r4, pc}

08002e82 <HAL_UART_ErrorCallback>:
 8002e82:	4770      	bx	lr

08002e84 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e84:	6803      	ldr	r3, [r0, #0]
{
 8002e86:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e88:	681a      	ldr	r2, [r3, #0]
{
 8002e8a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002e8c:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e8e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e90:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8002e92:	d107      	bne.n	8002ea4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e94:	0696      	lsls	r6, r2, #26
 8002e96:	d55c      	bpl.n	8002f52 <HAL_UART_IRQHandler+0xce>
 8002e98:	068d      	lsls	r5, r1, #26
 8002e9a:	d55a      	bpl.n	8002f52 <HAL_UART_IRQHandler+0xce>
}
 8002e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002ea0:	f7ff bfb5 	b.w	8002e0e <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ea4:	f015 0501 	ands.w	r5, r5, #1
 8002ea8:	d102      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x2c>
 8002eaa:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002eae:	d050      	beq.n	8002f52 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eb0:	07d0      	lsls	r0, r2, #31
 8002eb2:	d505      	bpl.n	8002ec0 <HAL_UART_IRQHandler+0x3c>
 8002eb4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb6:	bf42      	ittt	mi
 8002eb8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8002eba:	f043 0301 	orrmi.w	r3, r3, #1
 8002ebe:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ec0:	0756      	lsls	r6, r2, #29
 8002ec2:	d504      	bpl.n	8002ece <HAL_UART_IRQHandler+0x4a>
 8002ec4:	b11d      	cbz	r5, 8002ece <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ece:	0790      	lsls	r0, r2, #30
 8002ed0:	d504      	bpl.n	8002edc <HAL_UART_IRQHandler+0x58>
 8002ed2:	b11d      	cbz	r5, 8002edc <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ed4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002edc:	0713      	lsls	r3, r2, #28
 8002ede:	d506      	bpl.n	8002eee <HAL_UART_IRQHandler+0x6a>
 8002ee0:	068e      	lsls	r6, r1, #26
 8002ee2:	d400      	bmi.n	8002ee6 <HAL_UART_IRQHandler+0x62>
 8002ee4:	b11d      	cbz	r5, 8002eee <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ee8:	f043 0308 	orr.w	r3, r3, #8
 8002eec:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d064      	beq.n	8002fbe <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef4:	0695      	lsls	r5, r2, #26
 8002ef6:	d504      	bpl.n	8002f02 <HAL_UART_IRQHandler+0x7e>
 8002ef8:	0688      	lsls	r0, r1, #26
 8002efa:	d502      	bpl.n	8002f02 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff ff86 	bl	8002e0e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002f04:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f06:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f0a:	0711      	lsls	r1, r2, #28
 8002f0c:	d402      	bmi.n	8002f14 <HAL_UART_IRQHandler+0x90>
 8002f0e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002f12:	d01a      	beq.n	8002f4a <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8002f14:	f7ff ff6c 	bl	8002df0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	0652      	lsls	r2, r2, #25
 8002f1e:	d510      	bpl.n	8002f42 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f20:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f22:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002f2a:	b150      	cbz	r0, 8002f42 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f2c:	4b24      	ldr	r3, [pc, #144]	; (8002fc0 <HAL_UART_IRQHandler+0x13c>)
 8002f2e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f30:	f7ff f948 	bl	80021c4 <HAL_DMA_Abort_IT>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d042      	beq.n	8002fbe <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f38:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f3e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f40:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ff9d 	bl	8002e82 <HAL_UART_ErrorCallback>
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002f4a:	f7ff ff9a 	bl	8002e82 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002f50:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f52:	0616      	lsls	r6, r2, #24
 8002f54:	d525      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0x11e>
 8002f56:	060d      	lsls	r5, r1, #24
 8002f58:	d523      	bpl.n	8002fa2 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f5a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002f5e:	2a21      	cmp	r2, #33	; 0x21
 8002f60:	d12d      	bne.n	8002fbe <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f62:	68a2      	ldr	r2, [r4, #8]
 8002f64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002f68:	6a22      	ldr	r2, [r4, #32]
 8002f6a:	d115      	bne.n	8002f98 <HAL_UART_IRQHandler+0x114>
 8002f6c:	6921      	ldr	r1, [r4, #16]
 8002f6e:	b999      	cbnz	r1, 8002f98 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f70:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002f74:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002f78:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f7a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002f7c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002f7e:	3a01      	subs	r2, #1
 8002f80:	b292      	uxth	r2, r2
 8002f82:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002f84:	b9da      	cbnz	r2, 8002fbe <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f8c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f98:	1c51      	adds	r1, r2, #1
 8002f9a:	6221      	str	r1, [r4, #32]
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e7ec      	b.n	8002f7c <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fa2:	0650      	lsls	r0, r2, #25
 8002fa4:	d50b      	bpl.n	8002fbe <HAL_UART_IRQHandler+0x13a>
 8002fa6:	064a      	lsls	r2, r1, #25
 8002fa8:	d509      	bpl.n	8002fbe <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002faa:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002fac:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fb2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002fba:	f7ff ff26 	bl	8002e0a <HAL_UART_TxCpltCallback>
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	08002fc5 	.word	0x08002fc5

08002fc4 <UART_DMAAbortOnError>:
{
 8002fc4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8002fc6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8002fca:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fcc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002fce:	f7ff ff58 	bl	8002e82 <HAL_UART_ErrorCallback>
 8002fd2:	bd08      	pop	{r3, pc}

08002fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fd4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fd6:	e003      	b.n	8002fe0 <LoopCopyDataInit>

08002fd8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002fda:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002fdc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002fde:	3104      	adds	r1, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002fe0:	480a      	ldr	r0, [pc, #40]	; (800300c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002fe4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002fe6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002fe8:	d3f6      	bcc.n	8002fd8 <CopyDataInit>
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002fec:	e002      	b.n	8002ff4 <LoopFillZerobss>

08002fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ff0:	f842 3b04 	str.w	r3, [r2], #4

08002ff4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ff6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ff8:	d3f9      	bcc.n	8002fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ffa:	f7fe fccb 	bl	8001994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffe:	f000 fa79 	bl	80034f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003002:	f7fe fbe1 	bl	80017c8 <main>
  bx lr
 8003006:	4770      	bx	lr
  ldr r3, =_sidata
 8003008:	080039f8 	.word	0x080039f8
  ldr r0, =_sdata
 800300c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003010:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8003014:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8003018:	200002b4 	.word	0x200002b4

0800301c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC1_2_IRQHandler>
	...

08003020 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003020:	b510      	push	{r4, lr}
 8003022:	4604      	mov	r4, r0
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003026:	6003      	str	r3, [r0, #0]
 8003028:	f000 f962 	bl	80032f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800302c:	4620      	mov	r0, r4
 800302e:	bd10      	pop	{r4, pc}
 8003030:	080037ec 	.word	0x080037ec

08003034 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8003034:	b510      	push	{r4, lr}
 8003036:	4604      	mov	r4, r0
 8003038:	f7ff fff2 	bl	8003020 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 800303c:	4620      	mov	r0, r4
 800303e:	210c      	movs	r1, #12
 8003040:	f000 f933 	bl	80032aa <_ZdlPvj>
 8003044:	4620      	mov	r0, r4
 8003046:	bd10      	pop	{r4, pc}

08003048 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8003048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800304c:	9e06      	ldr	r6, [sp, #24]
 800304e:	4680      	mov	r8, r0
 8003050:	4296      	cmp	r6, r2
 8003052:	460f      	mov	r7, r1
 8003054:	4614      	mov	r4, r2
 8003056:	461d      	mov	r5, r3
 8003058:	d103      	bne.n	8003062 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 800305a:	4619      	mov	r1, r3
 800305c:	f000 f99c 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003060:	b958      	cbnz	r0, 800307a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8003062:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003066:	4622      	mov	r2, r4
 8003068:	6803      	ldr	r3, [r0, #0]
 800306a:	9606      	str	r6, [sp, #24]
 800306c:	6a1e      	ldr	r6, [r3, #32]
 800306e:	4639      	mov	r1, r7
 8003070:	462b      	mov	r3, r5
 8003072:	46b4      	mov	ip, r6
 8003074:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003078:	4760      	bx	ip
 800307a:	2006      	movs	r0, #6
 800307c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003080 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8003080:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003084:	460e      	mov	r6, r1
 8003086:	4619      	mov	r1, r3
 8003088:	4683      	mov	fp, r0
 800308a:	4617      	mov	r7, r2
 800308c:	4699      	mov	r9, r3
 800308e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003090:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8003094:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8003098:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800309a:	f000 f97d 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 800309e:	b190      	cbz	r0, 80030c6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80030a0:	2e00      	cmp	r6, #0
 80030a2:	602c      	str	r4, [r5, #0]
 80030a4:	712f      	strb	r7, [r5, #4]
 80030a6:	db09      	blt.n	80030bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80030a8:	4434      	add	r4, r6
 80030aa:	45a0      	cmp	r8, r4
 80030ac:	bf0c      	ite	eq
 80030ae:	2406      	moveq	r4, #6
 80030b0:	2401      	movne	r4, #1
 80030b2:	71ac      	strb	r4, [r5, #6]
 80030b4:	2000      	movs	r0, #0
 80030b6:	b001      	add	sp, #4
 80030b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030bc:	3602      	adds	r6, #2
 80030be:	d1f9      	bne.n	80030b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80030c0:	2301      	movs	r3, #1
 80030c2:	71ab      	strb	r3, [r5, #6]
 80030c4:	e7f6      	b.n	80030b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80030c6:	4544      	cmp	r4, r8
 80030c8:	d104      	bne.n	80030d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80030ca:	4651      	mov	r1, sl
 80030cc:	4658      	mov	r0, fp
 80030ce:	f000 f963 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 80030d2:	b988      	cbnz	r0, 80030f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80030d4:	f8db 0008 	ldr.w	r0, [fp, #8]
 80030d8:	463a      	mov	r2, r7
 80030da:	6803      	ldr	r3, [r0, #0]
 80030dc:	950d      	str	r5, [sp, #52]	; 0x34
 80030de:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80030e2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80030e6:	940a      	str	r4, [sp, #40]	; 0x28
 80030e8:	69dc      	ldr	r4, [r3, #28]
 80030ea:	4631      	mov	r1, r6
 80030ec:	464b      	mov	r3, r9
 80030ee:	46a4      	mov	ip, r4
 80030f0:	b001      	add	sp, #4
 80030f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f6:	4760      	bx	ip
 80030f8:	716f      	strb	r7, [r5, #5]
 80030fa:	e7db      	b.n	80030b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

080030fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80030fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003100:	4604      	mov	r4, r0
 8003102:	460d      	mov	r5, r1
 8003104:	4616      	mov	r6, r2
 8003106:	461f      	mov	r7, r3
 8003108:	f000 f906 	bl	8003318 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800310c:	b948      	cbnz	r0, 8003122 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800310e:	68a0      	ldr	r0, [r4, #8]
 8003110:	4632      	mov	r2, r6
 8003112:	6803      	ldr	r3, [r0, #0]
 8003114:	4629      	mov	r1, r5
 8003116:	699c      	ldr	r4, [r3, #24]
 8003118:	463b      	mov	r3, r7
 800311a:	46a4      	mov	ip, r4
 800311c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003120:	4760      	bx	ip
 8003122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003126 <_ZdlPv>:
 8003126:	f000 ba09 	b.w	800353c <free>

0800312a <__aeabi_atexit>:
 800312a:	460b      	mov	r3, r1
 800312c:	4601      	mov	r1, r0
 800312e:	4618      	mov	r0, r3
 8003130:	f000 b9cc 	b.w	80034cc <__cxa_atexit>

08003134 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003134:	b508      	push	{r3, lr}
 8003136:	4780      	blx	r0
 8003138:	f000 f9c0 	bl	80034bc <abort>

0800313c <_ZSt13get_terminatev>:
 800313c:	4b02      	ldr	r3, [pc, #8]	; (8003148 <_ZSt13get_terminatev+0xc>)
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	f3bf 8f5b 	dmb	ish
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000010 	.word	0x20000010

0800314c <_ZSt9terminatev>:
 800314c:	b508      	push	{r3, lr}
 800314e:	f7ff fff5 	bl	800313c <_ZSt13get_terminatev>
 8003152:	f7ff ffef 	bl	8003134 <_ZN10__cxxabiv111__terminateEPFvvE>

08003156 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8003156:	b508      	push	{r3, lr}
 8003158:	4780      	blx	r0
 800315a:	f7ff fff7 	bl	800314c <_ZSt9terminatev>
	...

08003160 <_ZSt14get_unexpectedv>:
 8003160:	4b02      	ldr	r3, [pc, #8]	; (800316c <_ZSt14get_unexpectedv+0xc>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	f3bf 8f5b 	dmb	ish
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000014 	.word	0x20000014

08003170 <_ZSt10unexpectedv>:
 8003170:	b508      	push	{r3, lr}
 8003172:	f7ff fff5 	bl	8003160 <_ZSt14get_unexpectedv>
 8003176:	f7ff ffee 	bl	8003156 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800317a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800317a:	7803      	ldrb	r3, [r0, #0]
 800317c:	2b47      	cmp	r3, #71	; 0x47
 800317e:	d117      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003180:	7843      	ldrb	r3, [r0, #1]
 8003182:	2b4e      	cmp	r3, #78	; 0x4e
 8003184:	d114      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003186:	7883      	ldrb	r3, [r0, #2]
 8003188:	2b55      	cmp	r3, #85	; 0x55
 800318a:	d111      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800318c:	78c3      	ldrb	r3, [r0, #3]
 800318e:	2b43      	cmp	r3, #67	; 0x43
 8003190:	d10e      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003192:	7903      	ldrb	r3, [r0, #4]
 8003194:	2b43      	cmp	r3, #67	; 0x43
 8003196:	d10b      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003198:	7943      	ldrb	r3, [r0, #5]
 800319a:	2b2b      	cmp	r3, #43	; 0x2b
 800319c:	d108      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800319e:	7983      	ldrb	r3, [r0, #6]
 80031a0:	2b2b      	cmp	r3, #43	; 0x2b
 80031a2:	d105      	bne.n	80031b0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80031a4:	79c0      	ldrb	r0, [r0, #7]
 80031a6:	2801      	cmp	r0, #1
 80031a8:	bf8c      	ite	hi
 80031aa:	2000      	movhi	r0, #0
 80031ac:	2001      	movls	r0, #1
 80031ae:	4770      	bx	lr
 80031b0:	2000      	movs	r0, #0
 80031b2:	4770      	bx	lr

080031b4 <__cxa_type_match>:
 80031b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80031b8:	461e      	mov	r6, r3
 80031ba:	7803      	ldrb	r3, [r0, #0]
 80031bc:	460d      	mov	r5, r1
 80031be:	2b47      	cmp	r3, #71	; 0x47
 80031c0:	4602      	mov	r2, r0
 80031c2:	79c1      	ldrb	r1, [r0, #7]
 80031c4:	d147      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031c6:	7843      	ldrb	r3, [r0, #1]
 80031c8:	2b4e      	cmp	r3, #78	; 0x4e
 80031ca:	d144      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031cc:	7883      	ldrb	r3, [r0, #2]
 80031ce:	2b55      	cmp	r3, #85	; 0x55
 80031d0:	d141      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031d2:	78c3      	ldrb	r3, [r0, #3]
 80031d4:	2b43      	cmp	r3, #67	; 0x43
 80031d6:	d13e      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031d8:	7903      	ldrb	r3, [r0, #4]
 80031da:	2b46      	cmp	r3, #70	; 0x46
 80031dc:	d13b      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031de:	7943      	ldrb	r3, [r0, #5]
 80031e0:	2b4f      	cmp	r3, #79	; 0x4f
 80031e2:	d138      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031e4:	7983      	ldrb	r3, [r0, #6]
 80031e6:	2b52      	cmp	r3, #82	; 0x52
 80031e8:	d135      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031ea:	2900      	cmp	r1, #0
 80031ec:	d133      	bne.n	8003256 <__cxa_type_match+0xa2>
 80031ee:	2301      	movs	r3, #1
 80031f0:	4608      	mov	r0, r1
 80031f2:	2400      	movs	r4, #0
 80031f4:	9401      	str	r4, [sp, #4]
 80031f6:	bb33      	cbnz	r3, 8003246 <__cxa_type_match+0x92>
 80031f8:	bb38      	cbnz	r0, 800324a <__cxa_type_match+0x96>
 80031fa:	2901      	cmp	r1, #1
 80031fc:	bf0a      	itet	eq
 80031fe:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8003202:	f1a2 0320 	subne.w	r3, r2, #32
 8003206:	3b78      	subeq	r3, #120	; 0x78
 8003208:	2901      	cmp	r1, #1
 800320a:	bf0c      	ite	eq
 800320c:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8003210:	3258      	addne	r2, #88	; 0x58
 8003212:	681c      	ldr	r4, [r3, #0]
 8003214:	9201      	str	r2, [sp, #4]
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	4620      	mov	r0, r4
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	4798      	blx	r3
 800321e:	b1b0      	cbz	r0, 800324e <__cxa_type_match+0x9a>
 8003220:	2702      	movs	r7, #2
 8003222:	9b01      	ldr	r3, [sp, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	aa01      	add	r2, sp, #4
 800322c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8003230:	4621      	mov	r1, r4
 8003232:	2301      	movs	r3, #1
 8003234:	4628      	mov	r0, r5
 8003236:	47c0      	blx	r8
 8003238:	b158      	cbz	r0, 8003252 <__cxa_type_match+0x9e>
 800323a:	9b01      	ldr	r3, [sp, #4]
 800323c:	6033      	str	r3, [r6, #0]
 800323e:	4638      	mov	r0, r7
 8003240:	b002      	add	sp, #8
 8003242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003246:	4c08      	ldr	r4, [pc, #32]	; (8003268 <__cxa_type_match+0xb4>)
 8003248:	e7e5      	b.n	8003216 <__cxa_type_match+0x62>
 800324a:	4c08      	ldr	r4, [pc, #32]	; (800326c <__cxa_type_match+0xb8>)
 800324c:	e7e3      	b.n	8003216 <__cxa_type_match+0x62>
 800324e:	2701      	movs	r7, #1
 8003250:	e7ea      	b.n	8003228 <__cxa_type_match+0x74>
 8003252:	4607      	mov	r7, r0
 8003254:	e7f3      	b.n	800323e <__cxa_type_match+0x8a>
 8003256:	4610      	mov	r0, r2
 8003258:	f7ff ff8f 	bl	800317a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800325c:	f080 0001 	eor.w	r0, r0, #1
 8003260:	b2c0      	uxtb	r0, r0
 8003262:	2300      	movs	r3, #0
 8003264:	e7c5      	b.n	80031f2 <__cxa_type_match+0x3e>
 8003266:	bf00      	nop
 8003268:	08003884 	.word	0x08003884
 800326c:	0800388c 	.word	0x0800388c

08003270 <__cxa_begin_cleanup>:
 8003270:	b510      	push	{r4, lr}
 8003272:	4604      	mov	r4, r0
 8003274:	f000 f91e 	bl	80034b4 <__cxa_get_globals>
 8003278:	4602      	mov	r2, r0
 800327a:	4620      	mov	r0, r4
 800327c:	f1a4 0120 	sub.w	r1, r4, #32
 8003280:	f7ff ff7b 	bl	800317a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003284:	b160      	cbz	r0, 80032a0 <__cxa_begin_cleanup+0x30>
 8003286:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800328a:	3301      	adds	r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	f844 3c04 	str.w	r3, [r4, #-4]
 8003292:	d103      	bne.n	800329c <__cxa_begin_cleanup+0x2c>
 8003294:	6893      	ldr	r3, [r2, #8]
 8003296:	f844 3c08 	str.w	r3, [r4, #-8]
 800329a:	6091      	str	r1, [r2, #8]
 800329c:	2001      	movs	r0, #1
 800329e:	bd10      	pop	{r4, pc}
 80032a0:	6893      	ldr	r3, [r2, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f9      	beq.n	800329a <__cxa_begin_cleanup+0x2a>
 80032a6:	f7ff ff51 	bl	800314c <_ZSt9terminatev>

080032aa <_ZdlPvj>:
 80032aa:	f7ff bf3c 	b.w	8003126 <_ZdlPv>

080032ae <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80032ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80032b0:	2310      	movs	r3, #16
 80032b2:	2400      	movs	r4, #0
 80032b4:	9302      	str	r3, [sp, #8]
 80032b6:	6803      	ldr	r3, [r0, #0]
 80032b8:	4615      	mov	r5, r2
 80032ba:	699e      	ldr	r6, [r3, #24]
 80032bc:	9400      	str	r4, [sp, #0]
 80032be:	466b      	mov	r3, sp
 80032c0:	f88d 4004 	strb.w	r4, [sp, #4]
 80032c4:	9403      	str	r4, [sp, #12]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	47b0      	blx	r6
 80032ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80032ce:	f003 0306 	and.w	r3, r3, #6
 80032d2:	2b06      	cmp	r3, #6
 80032d4:	bf09      	itett	eq
 80032d6:	2001      	moveq	r0, #1
 80032d8:	4620      	movne	r0, r4
 80032da:	9b00      	ldreq	r3, [sp, #0]
 80032dc:	602b      	streq	r3, [r5, #0]
 80032de:	b004      	add	sp, #16
 80032e0:	bd70      	pop	{r4, r5, r6, pc}

080032e2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80032e2:	9800      	ldr	r0, [sp, #0]
 80032e4:	4290      	cmp	r0, r2
 80032e6:	bf0c      	ite	eq
 80032e8:	2006      	moveq	r0, #6
 80032ea:	2001      	movne	r0, #1
 80032ec:	4770      	bx	lr
	...

080032f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4604      	mov	r4, r0
 80032f4:	4b02      	ldr	r3, [pc, #8]	; (8003300 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80032f6:	6003      	str	r3, [r0, #0]
 80032f8:	f000 f84b 	bl	8003392 <_ZNSt9type_infoD1Ev>
 80032fc:	4620      	mov	r0, r4
 80032fe:	bd10      	pop	{r4, pc}
 8003300:	08003848 	.word	0x08003848

08003304 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
 8003308:	f7ff fff2 	bl	80032f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800330c:	4620      	mov	r0, r4
 800330e:	2108      	movs	r1, #8
 8003310:	f7ff ffcb 	bl	80032aa <_ZdlPvj>
 8003314:	4620      	mov	r0, r4
 8003316:	bd10      	pop	{r4, pc}

08003318 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4615      	mov	r5, r2
 800331c:	461c      	mov	r4, r3
 800331e:	f000 f83b 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003322:	b120      	cbz	r0, 800332e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8003324:	2308      	movs	r3, #8
 8003326:	60e3      	str	r3, [r4, #12]
 8003328:	2306      	movs	r3, #6
 800332a:	6025      	str	r5, [r4, #0]
 800332c:	7123      	strb	r3, [r4, #4]
 800332e:	bd38      	pop	{r3, r4, r5, pc}

08003330 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8003330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003334:	4605      	mov	r5, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4616      	mov	r6, r2
 800333a:	461f      	mov	r7, r3
 800333c:	f000 f82c 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003340:	b948      	cbnz	r0, 8003356 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003342:	2f03      	cmp	r7, #3
 8003344:	d807      	bhi.n	8003356 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8003346:	6823      	ldr	r3, [r4, #0]
 8003348:	4632      	mov	r2, r6
 800334a:	4629      	mov	r1, r5
 800334c:	4620      	mov	r0, r4
 800334e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4718      	bx	r3
 8003356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800335a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800335a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800335e:	9e06      	ldr	r6, [sp, #24]
 8003360:	4698      	mov	r8, r3
 8003362:	9b08      	ldr	r3, [sp, #32]
 8003364:	4607      	mov	r7, r0
 8003366:	429e      	cmp	r6, r3
 8003368:	4615      	mov	r5, r2
 800336a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800336c:	d103      	bne.n	8003376 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 800336e:	9907      	ldr	r1, [sp, #28]
 8003370:	f000 f812 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003374:	b958      	cbnz	r0, 800338e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8003376:	4641      	mov	r1, r8
 8003378:	4638      	mov	r0, r7
 800337a:	f000 f80d 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 800337e:	b118      	cbz	r0, 8003388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8003380:	2301      	movs	r3, #1
 8003382:	6026      	str	r6, [r4, #0]
 8003384:	7125      	strb	r5, [r4, #4]
 8003386:	71a3      	strb	r3, [r4, #6]
 8003388:	2000      	movs	r0, #0
 800338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338e:	7165      	strb	r5, [r4, #5]
 8003390:	e7fa      	b.n	8003388 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08003392 <_ZNSt9type_infoD1Ev>:
 8003392:	4770      	bx	lr

08003394 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003394:	2000      	movs	r0, #0
 8003396:	4770      	bx	lr

08003398 <_ZNKSt9type_infoeqERKS_>:
 8003398:	4281      	cmp	r1, r0
 800339a:	b508      	push	{r3, lr}
 800339c:	d00e      	beq.n	80033bc <_ZNKSt9type_infoeqERKS_+0x24>
 800339e:	6840      	ldr	r0, [r0, #4]
 80033a0:	7803      	ldrb	r3, [r0, #0]
 80033a2:	2b2a      	cmp	r3, #42	; 0x2a
 80033a4:	d00c      	beq.n	80033c0 <_ZNKSt9type_infoeqERKS_+0x28>
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	780b      	ldrb	r3, [r1, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	bf08      	it	eq
 80033ae:	3101      	addeq	r1, #1
 80033b0:	f7fc fecc 	bl	800014c <strcmp>
 80033b4:	fab0 f080 	clz	r0, r0
 80033b8:	0940      	lsrs	r0, r0, #5
 80033ba:	bd08      	pop	{r3, pc}
 80033bc:	2001      	movs	r0, #1
 80033be:	bd08      	pop	{r3, pc}
 80033c0:	2000      	movs	r0, #0
 80033c2:	bd08      	pop	{r3, pc}

080033c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80033c4:	7803      	ldrb	r3, [r0, #0]
 80033c6:	2b47      	cmp	r3, #71	; 0x47
 80033c8:	d117      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033ca:	7843      	ldrb	r3, [r0, #1]
 80033cc:	2b4e      	cmp	r3, #78	; 0x4e
 80033ce:	d114      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033d0:	7883      	ldrb	r3, [r0, #2]
 80033d2:	2b55      	cmp	r3, #85	; 0x55
 80033d4:	d111      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033d6:	78c3      	ldrb	r3, [r0, #3]
 80033d8:	2b43      	cmp	r3, #67	; 0x43
 80033da:	d10e      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033dc:	7903      	ldrb	r3, [r0, #4]
 80033de:	2b43      	cmp	r3, #67	; 0x43
 80033e0:	d10b      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033e2:	7943      	ldrb	r3, [r0, #5]
 80033e4:	2b2b      	cmp	r3, #43	; 0x2b
 80033e6:	d108      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033e8:	7983      	ldrb	r3, [r0, #6]
 80033ea:	2b2b      	cmp	r3, #43	; 0x2b
 80033ec:	d105      	bne.n	80033fa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80033ee:	79c0      	ldrb	r0, [r0, #7]
 80033f0:	2801      	cmp	r0, #1
 80033f2:	bf8c      	ite	hi
 80033f4:	2000      	movhi	r0, #0
 80033f6:	2001      	movls	r0, #1
 80033f8:	4770      	bx	lr
 80033fa:	2000      	movs	r0, #0
 80033fc:	4770      	bx	lr

080033fe <__cxa_call_unexpected>:
 80033fe:	b538      	push	{r3, r4, r5, lr}
 8003400:	4602      	mov	r2, r0
 8003402:	f7ff ffdf 	bl	80033c4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003406:	b140      	cbz	r0, 800341a <__cxa_call_unexpected+0x1c>
 8003408:	2500      	movs	r5, #0
 800340a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800340e:	4610      	mov	r0, r2
 8003410:	f000 f826 	bl	8003460 <__cxa_begin_catch>
 8003414:	b125      	cbz	r5, 8003420 <__cxa_call_unexpected+0x22>
 8003416:	f7ff feab 	bl	8003170 <_ZSt10unexpectedv>
 800341a:	4604      	mov	r4, r0
 800341c:	2501      	movs	r5, #1
 800341e:	e7f6      	b.n	800340e <__cxa_call_unexpected+0x10>
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fe98 	bl	8003156 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08003426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003426:	7803      	ldrb	r3, [r0, #0]
 8003428:	2b47      	cmp	r3, #71	; 0x47
 800342a:	d117      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800342c:	7843      	ldrb	r3, [r0, #1]
 800342e:	2b4e      	cmp	r3, #78	; 0x4e
 8003430:	d114      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003432:	7883      	ldrb	r3, [r0, #2]
 8003434:	2b55      	cmp	r3, #85	; 0x55
 8003436:	d111      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003438:	78c3      	ldrb	r3, [r0, #3]
 800343a:	2b43      	cmp	r3, #67	; 0x43
 800343c:	d10e      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800343e:	7903      	ldrb	r3, [r0, #4]
 8003440:	2b43      	cmp	r3, #67	; 0x43
 8003442:	d10b      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003444:	7943      	ldrb	r3, [r0, #5]
 8003446:	2b2b      	cmp	r3, #43	; 0x2b
 8003448:	d108      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800344a:	7983      	ldrb	r3, [r0, #6]
 800344c:	2b2b      	cmp	r3, #43	; 0x2b
 800344e:	d105      	bne.n	800345c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003450:	79c0      	ldrb	r0, [r0, #7]
 8003452:	2801      	cmp	r0, #1
 8003454:	bf8c      	ite	hi
 8003456:	2000      	movhi	r0, #0
 8003458:	2001      	movls	r0, #1
 800345a:	4770      	bx	lr
 800345c:	2000      	movs	r0, #0
 800345e:	4770      	bx	lr

08003460 <__cxa_begin_catch>:
 8003460:	b538      	push	{r3, r4, r5, lr}
 8003462:	4605      	mov	r5, r0
 8003464:	f000 f826 	bl	80034b4 <__cxa_get_globals>
 8003468:	4601      	mov	r1, r0
 800346a:	6802      	ldr	r2, [r0, #0]
 800346c:	4628      	mov	r0, r5
 800346e:	f1a5 0420 	sub.w	r4, r5, #32
 8003472:	f7ff ffd8 	bl	8003426 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003476:	b930      	cbnz	r0, 8003486 <__cxa_begin_catch+0x26>
 8003478:	b10a      	cbz	r2, 800347e <__cxa_begin_catch+0x1e>
 800347a:	f7ff fe67 	bl	800314c <_ZSt9terminatev>
 800347e:	600c      	str	r4, [r1, #0]
 8003480:	4614      	mov	r4, r2
 8003482:	4620      	mov	r0, r4
 8003484:	bd38      	pop	{r3, r4, r5, pc}
 8003486:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 800348a:	4628      	mov	r0, r5
 800348c:	2b00      	cmp	r3, #0
 800348e:	bfb4      	ite	lt
 8003490:	f1c3 0301 	rsblt	r3, r3, #1
 8003494:	3301      	addge	r3, #1
 8003496:	f845 3c0c 	str.w	r3, [r5, #-12]
 800349a:	684b      	ldr	r3, [r1, #4]
 800349c:	42a2      	cmp	r2, r4
 800349e:	f103 33ff 	add.w	r3, r3, #4294967295
 80034a2:	604b      	str	r3, [r1, #4]
 80034a4:	bf1c      	itt	ne
 80034a6:	f845 2c10 	strne.w	r2, [r5, #-16]
 80034aa:	600c      	strne	r4, [r1, #0]
 80034ac:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80034ae:	f7fd f821 	bl	80004f4 <_Unwind_Complete>
 80034b2:	e7e6      	b.n	8003482 <__cxa_begin_catch+0x22>

080034b4 <__cxa_get_globals>:
 80034b4:	4800      	ldr	r0, [pc, #0]	; (80034b8 <__cxa_get_globals+0x4>)
 80034b6:	4770      	bx	lr
 80034b8:	2000017c 	.word	0x2000017c

080034bc <abort>:
 80034bc:	b508      	push	{r3, lr}
 80034be:	2006      	movs	r0, #6
 80034c0:	f000 f8c0 	bl	8003644 <raise>
 80034c4:	2001      	movs	r0, #1
 80034c6:	f7fe fa5f 	bl	8001988 <_exit>
	...

080034cc <__cxa_atexit>:
 80034cc:	b510      	push	{r4, lr}
 80034ce:	4c05      	ldr	r4, [pc, #20]	; (80034e4 <__cxa_atexit+0x18>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	b12c      	cbz	r4, 80034e0 <__cxa_atexit+0x14>
 80034d4:	460a      	mov	r2, r1
 80034d6:	4601      	mov	r1, r0
 80034d8:	2002      	movs	r0, #2
 80034da:	f3af 8000 	nop.w
 80034de:	bd10      	pop	{r4, pc}
 80034e0:	4620      	mov	r0, r4
 80034e2:	bd10      	pop	{r4, pc}
 80034e4:	00000000 	.word	0x00000000

080034e8 <__errno>:
 80034e8:	4b01      	ldr	r3, [pc, #4]	; (80034f0 <__errno+0x8>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000018 	.word	0x20000018

080034f4 <__libc_init_array>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	2500      	movs	r5, #0
 80034f8:	4e0c      	ldr	r6, [pc, #48]	; (800352c <__libc_init_array+0x38>)
 80034fa:	4c0d      	ldr	r4, [pc, #52]	; (8003530 <__libc_init_array+0x3c>)
 80034fc:	1ba4      	subs	r4, r4, r6
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	42a5      	cmp	r5, r4
 8003502:	d109      	bne.n	8003518 <__libc_init_array+0x24>
 8003504:	f000 f8c8 	bl	8003698 <_init>
 8003508:	2500      	movs	r5, #0
 800350a:	4e0a      	ldr	r6, [pc, #40]	; (8003534 <__libc_init_array+0x40>)
 800350c:	4c0a      	ldr	r4, [pc, #40]	; (8003538 <__libc_init_array+0x44>)
 800350e:	1ba4      	subs	r4, r4, r6
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	42a5      	cmp	r5, r4
 8003514:	d105      	bne.n	8003522 <__libc_init_array+0x2e>
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800351c:	4798      	blx	r3
 800351e:	3501      	adds	r5, #1
 8003520:	e7ee      	b.n	8003500 <__libc_init_array+0xc>
 8003522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003526:	4798      	blx	r3
 8003528:	3501      	adds	r5, #1
 800352a:	e7f2      	b.n	8003512 <__libc_init_array+0x1e>
 800352c:	080039d8 	.word	0x080039d8
 8003530:	080039d8 	.word	0x080039d8
 8003534:	080039d8 	.word	0x080039d8
 8003538:	080039f4 	.word	0x080039f4

0800353c <free>:
 800353c:	4b02      	ldr	r3, [pc, #8]	; (8003548 <free+0xc>)
 800353e:	4601      	mov	r1, r0
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	f000 b80b 	b.w	800355c <_free_r>
 8003546:	bf00      	nop
 8003548:	20000018 	.word	0x20000018

0800354c <memset>:
 800354c:	4603      	mov	r3, r0
 800354e:	4402      	add	r2, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_free_r>:
 800355c:	b538      	push	{r3, r4, r5, lr}
 800355e:	4605      	mov	r5, r0
 8003560:	2900      	cmp	r1, #0
 8003562:	d043      	beq.n	80035ec <_free_r+0x90>
 8003564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003568:	1f0c      	subs	r4, r1, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	bfb8      	it	lt
 800356e:	18e4      	addlt	r4, r4, r3
 8003570:	f000 f884 	bl	800367c <__malloc_lock>
 8003574:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <_free_r+0x94>)
 8003576:	6813      	ldr	r3, [r2, #0]
 8003578:	4610      	mov	r0, r2
 800357a:	b933      	cbnz	r3, 800358a <_free_r+0x2e>
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6014      	str	r4, [r2, #0]
 8003580:	4628      	mov	r0, r5
 8003582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003586:	f000 b87a 	b.w	800367e <__malloc_unlock>
 800358a:	42a3      	cmp	r3, r4
 800358c:	d90b      	bls.n	80035a6 <_free_r+0x4a>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	1862      	adds	r2, r4, r1
 8003592:	4293      	cmp	r3, r2
 8003594:	bf01      	itttt	eq
 8003596:	681a      	ldreq	r2, [r3, #0]
 8003598:	685b      	ldreq	r3, [r3, #4]
 800359a:	1852      	addeq	r2, r2, r1
 800359c:	6022      	streq	r2, [r4, #0]
 800359e:	6063      	str	r3, [r4, #4]
 80035a0:	6004      	str	r4, [r0, #0]
 80035a2:	e7ed      	b.n	8003580 <_free_r+0x24>
 80035a4:	4613      	mov	r3, r2
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	b10a      	cbz	r2, 80035ae <_free_r+0x52>
 80035aa:	42a2      	cmp	r2, r4
 80035ac:	d9fa      	bls.n	80035a4 <_free_r+0x48>
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	1858      	adds	r0, r3, r1
 80035b2:	42a0      	cmp	r0, r4
 80035b4:	d10b      	bne.n	80035ce <_free_r+0x72>
 80035b6:	6820      	ldr	r0, [r4, #0]
 80035b8:	4401      	add	r1, r0
 80035ba:	1858      	adds	r0, r3, r1
 80035bc:	4282      	cmp	r2, r0
 80035be:	6019      	str	r1, [r3, #0]
 80035c0:	d1de      	bne.n	8003580 <_free_r+0x24>
 80035c2:	6810      	ldr	r0, [r2, #0]
 80035c4:	6852      	ldr	r2, [r2, #4]
 80035c6:	4401      	add	r1, r0
 80035c8:	6019      	str	r1, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	e7d8      	b.n	8003580 <_free_r+0x24>
 80035ce:	d902      	bls.n	80035d6 <_free_r+0x7a>
 80035d0:	230c      	movs	r3, #12
 80035d2:	602b      	str	r3, [r5, #0]
 80035d4:	e7d4      	b.n	8003580 <_free_r+0x24>
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	1821      	adds	r1, r4, r0
 80035da:	428a      	cmp	r2, r1
 80035dc:	bf01      	itttt	eq
 80035de:	6811      	ldreq	r1, [r2, #0]
 80035e0:	6852      	ldreq	r2, [r2, #4]
 80035e2:	1809      	addeq	r1, r1, r0
 80035e4:	6021      	streq	r1, [r4, #0]
 80035e6:	6062      	str	r2, [r4, #4]
 80035e8:	605c      	str	r4, [r3, #4]
 80035ea:	e7c9      	b.n	8003580 <_free_r+0x24>
 80035ec:	bd38      	pop	{r3, r4, r5, pc}
 80035ee:	bf00      	nop
 80035f0:	20000188 	.word	0x20000188

080035f4 <_raise_r>:
 80035f4:	291f      	cmp	r1, #31
 80035f6:	b538      	push	{r3, r4, r5, lr}
 80035f8:	4604      	mov	r4, r0
 80035fa:	460d      	mov	r5, r1
 80035fc:	d904      	bls.n	8003608 <_raise_r+0x14>
 80035fe:	2316      	movs	r3, #22
 8003600:	6003      	str	r3, [r0, #0]
 8003602:	f04f 30ff 	mov.w	r0, #4294967295
 8003606:	bd38      	pop	{r3, r4, r5, pc}
 8003608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800360a:	b112      	cbz	r2, 8003612 <_raise_r+0x1e>
 800360c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003610:	b94b      	cbnz	r3, 8003626 <_raise_r+0x32>
 8003612:	4620      	mov	r0, r4
 8003614:	f000 f830 	bl	8003678 <_getpid_r>
 8003618:	462a      	mov	r2, r5
 800361a:	4601      	mov	r1, r0
 800361c:	4620      	mov	r0, r4
 800361e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003622:	f000 b817 	b.w	8003654 <_kill_r>
 8003626:	2b01      	cmp	r3, #1
 8003628:	d00a      	beq.n	8003640 <_raise_r+0x4c>
 800362a:	1c59      	adds	r1, r3, #1
 800362c:	d103      	bne.n	8003636 <_raise_r+0x42>
 800362e:	2316      	movs	r3, #22
 8003630:	6003      	str	r3, [r0, #0]
 8003632:	2001      	movs	r0, #1
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	2400      	movs	r4, #0
 8003638:	4628      	mov	r0, r5
 800363a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800363e:	4798      	blx	r3
 8003640:	2000      	movs	r0, #0
 8003642:	bd38      	pop	{r3, r4, r5, pc}

08003644 <raise>:
 8003644:	4b02      	ldr	r3, [pc, #8]	; (8003650 <raise+0xc>)
 8003646:	4601      	mov	r1, r0
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	f7ff bfd3 	b.w	80035f4 <_raise_r>
 800364e:	bf00      	nop
 8003650:	20000018 	.word	0x20000018

08003654 <_kill_r>:
 8003654:	b538      	push	{r3, r4, r5, lr}
 8003656:	2300      	movs	r3, #0
 8003658:	4c06      	ldr	r4, [pc, #24]	; (8003674 <_kill_r+0x20>)
 800365a:	4605      	mov	r5, r0
 800365c:	4608      	mov	r0, r1
 800365e:	4611      	mov	r1, r2
 8003660:	6023      	str	r3, [r4, #0]
 8003662:	f7fe f989 	bl	8001978 <_kill>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d102      	bne.n	8003670 <_kill_r+0x1c>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	b103      	cbz	r3, 8003670 <_kill_r+0x1c>
 800366e:	602b      	str	r3, [r5, #0]
 8003670:	bd38      	pop	{r3, r4, r5, pc}
 8003672:	bf00      	nop
 8003674:	200002b0 	.word	0x200002b0

08003678 <_getpid_r>:
 8003678:	f7fe b97c 	b.w	8001974 <_getpid>

0800367c <__malloc_lock>:
 800367c:	4770      	bx	lr

0800367e <__malloc_unlock>:
 800367e:	4770      	bx	lr

08003680 <memcpy>:
 8003680:	b510      	push	{r4, lr}
 8003682:	1e43      	subs	r3, r0, #1
 8003684:	440a      	add	r2, r1
 8003686:	4291      	cmp	r1, r2
 8003688:	d100      	bne.n	800368c <memcpy+0xc>
 800368a:	bd10      	pop	{r4, pc}
 800368c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003690:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003694:	e7f7      	b.n	8003686 <memcpy+0x6>
	...

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
