
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080029d4  080029d4  000129d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d0  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000070  20000000  08002afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000000bc  20000070  08002b6c  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000012c  08002b6c  0002012c  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000c3a2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e53  00000000  00000000  0002c43b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006288  00000000  00000000  0002e28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  00034d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004cde  00000000  00000000  00035810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003569  00000000  00000000  0003a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003da57  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000018cc  00000000  00000000  0003dad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080029bc 	.word	0x080029bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080029bc 	.word	0x080029bc

0800014c <selfrel_offset31>:
 800014c:	6803      	ldr	r3, [r0, #0]
 800014e:	005a      	lsls	r2, r3, #1
 8000150:	bf4c      	ite	mi
 8000152:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000156:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800015a:	4418      	add	r0, r3
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop

08000160 <search_EIT_table>:
 8000160:	b361      	cbz	r1, 80001bc <search_EIT_table+0x5c>
 8000162:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000166:	f101 3aff 	add.w	sl, r1, #4294967295
 800016a:	4690      	mov	r8, r2
 800016c:	4606      	mov	r6, r0
 800016e:	46d1      	mov	r9, sl
 8000170:	2700      	movs	r7, #0
 8000172:	eb07 0409 	add.w	r4, r7, r9
 8000176:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800017a:	1064      	asrs	r4, r4, #1
 800017c:	00e5      	lsls	r5, r4, #3
 800017e:	1971      	adds	r1, r6, r5
 8000180:	4608      	mov	r0, r1
 8000182:	f7ff ffe3 	bl	800014c <selfrel_offset31>
 8000186:	45a2      	cmp	sl, r4
 8000188:	4683      	mov	fp, r0
 800018a:	f105 0008 	add.w	r0, r5, #8
 800018e:	4430      	add	r0, r6
 8000190:	d009      	beq.n	80001a6 <search_EIT_table+0x46>
 8000192:	f7ff ffdb 	bl	800014c <selfrel_offset31>
 8000196:	45c3      	cmp	fp, r8
 8000198:	f100 30ff 	add.w	r0, r0, #4294967295
 800019c:	d805      	bhi.n	80001aa <search_EIT_table+0x4a>
 800019e:	4540      	cmp	r0, r8
 80001a0:	d209      	bcs.n	80001b6 <search_EIT_table+0x56>
 80001a2:	1c67      	adds	r7, r4, #1
 80001a4:	e7e5      	b.n	8000172 <search_EIT_table+0x12>
 80001a6:	45c3      	cmp	fp, r8
 80001a8:	d905      	bls.n	80001b6 <search_EIT_table+0x56>
 80001aa:	42a7      	cmp	r7, r4
 80001ac:	d002      	beq.n	80001b4 <search_EIT_table+0x54>
 80001ae:	f104 39ff 	add.w	r9, r4, #4294967295
 80001b2:	e7de      	b.n	8000172 <search_EIT_table+0x12>
 80001b4:	2100      	movs	r1, #0
 80001b6:	4608      	mov	r0, r1
 80001b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80001bc:	4608      	mov	r0, r1
 80001be:	4770      	bx	lr

080001c0 <__gnu_unwind_get_pr_addr>:
 80001c0:	2801      	cmp	r0, #1
 80001c2:	d007      	beq.n	80001d4 <__gnu_unwind_get_pr_addr+0x14>
 80001c4:	2802      	cmp	r0, #2
 80001c6:	d007      	beq.n	80001d8 <__gnu_unwind_get_pr_addr+0x18>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__gnu_unwind_get_pr_addr+0x1c>)
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf0c      	ite	eq
 80001ce:	4618      	moveq	r0, r3
 80001d0:	2000      	movne	r0, #0
 80001d2:	4770      	bx	lr
 80001d4:	4802      	ldr	r0, [pc, #8]	; (80001e0 <__gnu_unwind_get_pr_addr+0x20>)
 80001d6:	4770      	bx	lr
 80001d8:	4802      	ldr	r0, [pc, #8]	; (80001e4 <__gnu_unwind_get_pr_addr+0x24>)
 80001da:	4770      	bx	lr
 80001dc:	080008d1 	.word	0x080008d1
 80001e0:	080008d5 	.word	0x080008d5
 80001e4:	080008d9 	.word	0x080008d9

080001e8 <get_eit_entry>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	4b25      	ldr	r3, [pc, #148]	; (8000280 <get_eit_entry+0x98>)
 80001ec:	b083      	sub	sp, #12
 80001ee:	4604      	mov	r4, r0
 80001f0:	1e8d      	subs	r5, r1, #2
 80001f2:	b373      	cbz	r3, 8000252 <get_eit_entry+0x6a>
 80001f4:	a901      	add	r1, sp, #4
 80001f6:	4628      	mov	r0, r5
 80001f8:	f3af 8000 	nop.w
 80001fc:	b318      	cbz	r0, 8000246 <get_eit_entry+0x5e>
 80001fe:	9901      	ldr	r1, [sp, #4]
 8000200:	462a      	mov	r2, r5
 8000202:	f7ff ffad 	bl	8000160 <search_EIT_table>
 8000206:	4601      	mov	r1, r0
 8000208:	b1e8      	cbz	r0, 8000246 <get_eit_entry+0x5e>
 800020a:	f7ff ff9f 	bl	800014c <selfrel_offset31>
 800020e:	684b      	ldr	r3, [r1, #4]
 8000210:	64a0      	str	r0, [r4, #72]	; 0x48
 8000212:	2b01      	cmp	r3, #1
 8000214:	d011      	beq.n	800023a <get_eit_entry+0x52>
 8000216:	2b00      	cmp	r3, #0
 8000218:	db22      	blt.n	8000260 <get_eit_entry+0x78>
 800021a:	1d08      	adds	r0, r1, #4
 800021c:	f7ff ff96 	bl	800014c <selfrel_offset31>
 8000220:	2300      	movs	r3, #0
 8000222:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000224:	6523      	str	r3, [r4, #80]	; 0x50
 8000226:	6803      	ldr	r3, [r0, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	db1e      	blt.n	800026a <get_eit_entry+0x82>
 800022c:	f7ff ff8e 	bl	800014c <selfrel_offset31>
 8000230:	2300      	movs	r3, #0
 8000232:	6120      	str	r0, [r4, #16]
 8000234:	4618      	mov	r0, r3
 8000236:	b003      	add	sp, #12
 8000238:	bd30      	pop	{r4, r5, pc}
 800023a:	2305      	movs	r3, #5
 800023c:	2200      	movs	r2, #0
 800023e:	4618      	mov	r0, r3
 8000240:	6122      	str	r2, [r4, #16]
 8000242:	b003      	add	sp, #12
 8000244:	bd30      	pop	{r4, r5, pc}
 8000246:	2309      	movs	r3, #9
 8000248:	2200      	movs	r2, #0
 800024a:	4618      	mov	r0, r3
 800024c:	6122      	str	r2, [r4, #16]
 800024e:	b003      	add	sp, #12
 8000250:	bd30      	pop	{r4, r5, pc}
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <get_eit_entry+0x9c>)
 8000254:	490c      	ldr	r1, [pc, #48]	; (8000288 <get_eit_entry+0xa0>)
 8000256:	4618      	mov	r0, r3
 8000258:	1ac9      	subs	r1, r1, r3
 800025a:	10c9      	asrs	r1, r1, #3
 800025c:	9101      	str	r1, [sp, #4]
 800025e:	e7cf      	b.n	8000200 <get_eit_entry+0x18>
 8000260:	2301      	movs	r3, #1
 8000262:	1d08      	adds	r0, r1, #4
 8000264:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000266:	6523      	str	r3, [r4, #80]	; 0x50
 8000268:	e7dd      	b.n	8000226 <get_eit_entry+0x3e>
 800026a:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800026e:	f7ff ffa7 	bl	80001c0 <__gnu_unwind_get_pr_addr>
 8000272:	2800      	cmp	r0, #0
 8000274:	6120      	str	r0, [r4, #16]
 8000276:	bf14      	ite	ne
 8000278:	2300      	movne	r3, #0
 800027a:	2309      	moveq	r3, #9
 800027c:	e7da      	b.n	8000234 <get_eit_entry+0x4c>
 800027e:	bf00      	nop
 8000280:	00000000 	.word	0x00000000
 8000284:	08002a24 	.word	0x08002a24
 8000288:	08002af4 	.word	0x08002af4

0800028c <restore_non_core_regs>:
 800028c:	6803      	ldr	r3, [r0, #0]
 800028e:	b510      	push	{r4, lr}
 8000290:	07da      	lsls	r2, r3, #31
 8000292:	4604      	mov	r4, r0
 8000294:	d406      	bmi.n	80002a4 <restore_non_core_regs+0x18>
 8000296:	079b      	lsls	r3, r3, #30
 8000298:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800029c:	d509      	bpl.n	80002b2 <restore_non_core_regs+0x26>
 800029e:	f000 fc57 	bl	8000b50 <__gnu_Unwind_Restore_VFP_D>
 80002a2:	6823      	ldr	r3, [r4, #0]
 80002a4:	0759      	lsls	r1, r3, #29
 80002a6:	d509      	bpl.n	80002bc <restore_non_core_regs+0x30>
 80002a8:	071a      	lsls	r2, r3, #28
 80002aa:	d50e      	bpl.n	80002ca <restore_non_core_regs+0x3e>
 80002ac:	06db      	lsls	r3, r3, #27
 80002ae:	d513      	bpl.n	80002d8 <restore_non_core_regs+0x4c>
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	f000 fc45 	bl	8000b40 <__gnu_Unwind_Restore_VFP>
 80002b6:	6823      	ldr	r3, [r4, #0]
 80002b8:	0759      	lsls	r1, r3, #29
 80002ba:	d4f5      	bmi.n	80002a8 <restore_non_core_regs+0x1c>
 80002bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002c0:	f000 fc4e 	bl	8000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002c4:	6823      	ldr	r3, [r4, #0]
 80002c6:	071a      	lsls	r2, r3, #28
 80002c8:	d4f0      	bmi.n	80002ac <restore_non_core_regs+0x20>
 80002ca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002ce:	f000 fc4f 	bl	8000b70 <__gnu_Unwind_Restore_WMMXD>
 80002d2:	6823      	ldr	r3, [r4, #0]
 80002d4:	06db      	lsls	r3, r3, #27
 80002d6:	d4eb      	bmi.n	80002b0 <restore_non_core_regs+0x24>
 80002d8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002e0:	f000 bc8a 	b.w	8000bf8 <__gnu_Unwind_Restore_WMMXC>

080002e4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80002e4:	6803      	ldr	r3, [r0, #0]
 80002e6:	b103      	cbz	r3, 80002ea <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80002e8:	4403      	add	r3, r0
 80002ea:	4618      	mov	r0, r3
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__gnu_unwind_24bit.isra.1>:
 80002f0:	2009      	movs	r0, #9
 80002f2:	4770      	bx	lr

080002f4 <_Unwind_DebugHook>:
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop

080002f8 <unwind_phase2>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4604      	mov	r4, r0
 80002fc:	460d      	mov	r5, r1
 80002fe:	e008      	b.n	8000312 <unwind_phase2+0x1a>
 8000300:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000302:	6923      	ldr	r3, [r4, #16]
 8000304:	6162      	str	r2, [r4, #20]
 8000306:	4621      	mov	r1, r4
 8000308:	462a      	mov	r2, r5
 800030a:	2001      	movs	r0, #1
 800030c:	4798      	blx	r3
 800030e:	2808      	cmp	r0, #8
 8000310:	d108      	bne.n	8000324 <unwind_phase2+0x2c>
 8000312:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000314:	4620      	mov	r0, r4
 8000316:	f7ff ff67 	bl	80001e8 <get_eit_entry>
 800031a:	4606      	mov	r6, r0
 800031c:	2800      	cmp	r0, #0
 800031e:	d0ef      	beq.n	8000300 <unwind_phase2+0x8>
 8000320:	f002 faf6 	bl	8002910 <abort>
 8000324:	2807      	cmp	r0, #7
 8000326:	d1fb      	bne.n	8000320 <unwind_phase2+0x28>
 8000328:	4630      	mov	r0, r6
 800032a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800032c:	f7ff ffe2 	bl	80002f4 <_Unwind_DebugHook>
 8000330:	1d28      	adds	r0, r5, #4
 8000332:	f000 fbf9 	bl	8000b28 <__restore_core_regs>
 8000336:	bf00      	nop

08000338 <unwind_phase2_forced>:
 8000338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800033c:	4605      	mov	r5, r0
 800033e:	2700      	movs	r7, #0
 8000340:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000344:	ac03      	add	r4, sp, #12
 8000346:	1d0e      	adds	r6, r1, #4
 8000348:	4692      	mov	sl, r2
 800034a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800034c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000352:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000356:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800035a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800035e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000366:	ac02      	add	r4, sp, #8
 8000368:	4628      	mov	r0, r5
 800036a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800036c:	6027      	str	r7, [r4, #0]
 800036e:	f7ff ff3b 	bl	80001e8 <get_eit_entry>
 8000372:	f1ba 0f00 	cmp.w	sl, #0
 8000376:	4607      	mov	r7, r0
 8000378:	bf14      	ite	ne
 800037a:	260a      	movne	r6, #10
 800037c:	2609      	moveq	r6, #9
 800037e:	b17f      	cbz	r7, 80003a0 <unwind_phase2_forced+0x68>
 8000380:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000382:	f046 0110 	orr.w	r1, r6, #16
 8000386:	e88d 0210 	stmia.w	sp, {r4, r9}
 800038a:	462a      	mov	r2, r5
 800038c:	6463      	str	r3, [r4, #68]	; 0x44
 800038e:	2001      	movs	r0, #1
 8000390:	462b      	mov	r3, r5
 8000392:	47c0      	blx	r8
 8000394:	bb78      	cbnz	r0, 80003f6 <unwind_phase2_forced+0xbe>
 8000396:	4638      	mov	r0, r7
 8000398:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800039c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80003a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003a6:	616b      	str	r3, [r5, #20]
 80003a8:	4621      	mov	r1, r4
 80003aa:	a87a      	add	r0, sp, #488	; 0x1e8
 80003ac:	f002 fab7 	bl	800291e <memcpy>
 80003b0:	692b      	ldr	r3, [r5, #16]
 80003b2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003b4:	4629      	mov	r1, r5
 80003b6:	4630      	mov	r0, r6
 80003b8:	4798      	blx	r3
 80003ba:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80003bc:	4682      	mov	sl, r0
 80003be:	e88d 0210 	stmia.w	sp, {r4, r9}
 80003c2:	4631      	mov	r1, r6
 80003c4:	6463      	str	r3, [r4, #68]	; 0x44
 80003c6:	462a      	mov	r2, r5
 80003c8:	462b      	mov	r3, r5
 80003ca:	2001      	movs	r0, #1
 80003cc:	47c0      	blx	r8
 80003ce:	b990      	cbnz	r0, 80003f6 <unwind_phase2_forced+0xbe>
 80003d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003d4:	a97a      	add	r1, sp, #488	; 0x1e8
 80003d6:	4620      	mov	r0, r4
 80003d8:	f002 faa1 	bl	800291e <memcpy>
 80003dc:	f1ba 0f08 	cmp.w	sl, #8
 80003e0:	d106      	bne.n	80003f0 <unwind_phase2_forced+0xb8>
 80003e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80003e4:	4628      	mov	r0, r5
 80003e6:	f7ff feff 	bl	80001e8 <get_eit_entry>
 80003ea:	2609      	movs	r6, #9
 80003ec:	4607      	mov	r7, r0
 80003ee:	e7c6      	b.n	800037e <unwind_phase2_forced+0x46>
 80003f0:	f1ba 0f07 	cmp.w	sl, #7
 80003f4:	d005      	beq.n	8000402 <unwind_phase2_forced+0xca>
 80003f6:	2709      	movs	r7, #9
 80003f8:	4638      	mov	r0, r7
 80003fa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	4638      	mov	r0, r7
 8000404:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000406:	f7ff ff75 	bl	80002f4 <_Unwind_DebugHook>
 800040a:	a803      	add	r0, sp, #12
 800040c:	f000 fb8c 	bl	8000b28 <__restore_core_regs>

08000410 <_Unwind_GetCFA>:
 8000410:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000412:	4770      	bx	lr

08000414 <__gnu_Unwind_RaiseException>:
 8000414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000416:	f04f 3eff 	mov.w	lr, #4294967295
 800041a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800041c:	b0f9      	sub	sp, #484	; 0x1e4
 800041e:	640b      	str	r3, [r1, #64]	; 0x40
 8000420:	1d0e      	adds	r6, r1, #4
 8000422:	ad01      	add	r5, sp, #4
 8000424:	460f      	mov	r7, r1
 8000426:	4604      	mov	r4, r0
 8000428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800042a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800042c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800042e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000430:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000434:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000438:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800043c:	f8cd e000 	str.w	lr, [sp]
 8000440:	e006      	b.n	8000450 <__gnu_Unwind_RaiseException+0x3c>
 8000442:	6923      	ldr	r3, [r4, #16]
 8000444:	466a      	mov	r2, sp
 8000446:	4621      	mov	r1, r4
 8000448:	4798      	blx	r3
 800044a:	2808      	cmp	r0, #8
 800044c:	4605      	mov	r5, r0
 800044e:	d108      	bne.n	8000462 <__gnu_Unwind_RaiseException+0x4e>
 8000450:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000452:	4620      	mov	r0, r4
 8000454:	f7ff fec8 	bl	80001e8 <get_eit_entry>
 8000458:	2800      	cmp	r0, #0
 800045a:	d0f2      	beq.n	8000442 <__gnu_Unwind_RaiseException+0x2e>
 800045c:	2009      	movs	r0, #9
 800045e:	b079      	add	sp, #484	; 0x1e4
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	4668      	mov	r0, sp
 8000464:	f7ff ff12 	bl	800028c <restore_non_core_regs>
 8000468:	2d06      	cmp	r5, #6
 800046a:	d1f7      	bne.n	800045c <__gnu_Unwind_RaiseException+0x48>
 800046c:	4639      	mov	r1, r7
 800046e:	4620      	mov	r0, r4
 8000470:	f7ff ff42 	bl	80002f8 <unwind_phase2>

08000474 <__gnu_Unwind_ForcedUnwind>:
 8000474:	b430      	push	{r4, r5}
 8000476:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000478:	60c1      	str	r1, [r0, #12]
 800047a:	6182      	str	r2, [r0, #24]
 800047c:	4619      	mov	r1, r3
 800047e:	641d      	str	r5, [r3, #64]	; 0x40
 8000480:	2200      	movs	r2, #0
 8000482:	bc30      	pop	{r4, r5}
 8000484:	e758      	b.n	8000338 <unwind_phase2_forced>
 8000486:	bf00      	nop

08000488 <__gnu_Unwind_Resume>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	6943      	ldr	r3, [r0, #20]
 800048c:	68c6      	ldr	r6, [r0, #12]
 800048e:	640b      	str	r3, [r1, #64]	; 0x40
 8000490:	b126      	cbz	r6, 800049c <__gnu_Unwind_Resume+0x14>
 8000492:	2201      	movs	r2, #1
 8000494:	f7ff ff50 	bl	8000338 <unwind_phase2_forced>
 8000498:	f002 fa3a 	bl	8002910 <abort>
 800049c:	6903      	ldr	r3, [r0, #16]
 800049e:	460a      	mov	r2, r1
 80004a0:	4604      	mov	r4, r0
 80004a2:	460d      	mov	r5, r1
 80004a4:	4601      	mov	r1, r0
 80004a6:	2002      	movs	r0, #2
 80004a8:	4798      	blx	r3
 80004aa:	2807      	cmp	r0, #7
 80004ac:	d007      	beq.n	80004be <__gnu_Unwind_Resume+0x36>
 80004ae:	2808      	cmp	r0, #8
 80004b0:	d103      	bne.n	80004ba <__gnu_Unwind_Resume+0x32>
 80004b2:	4629      	mov	r1, r5
 80004b4:	4620      	mov	r0, r4
 80004b6:	f7ff ff1f 	bl	80002f8 <unwind_phase2>
 80004ba:	f002 fa29 	bl	8002910 <abort>
 80004be:	4630      	mov	r0, r6
 80004c0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004c2:	f7ff ff17 	bl	80002f4 <_Unwind_DebugHook>
 80004c6:	1d28      	adds	r0, r5, #4
 80004c8:	f000 fb2e 	bl	8000b28 <__restore_core_regs>

080004cc <__gnu_Unwind_Resume_or_Rethrow>:
 80004cc:	68c2      	ldr	r2, [r0, #12]
 80004ce:	b12a      	cbz	r2, 80004dc <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004d0:	b410      	push	{r4}
 80004d2:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80004d4:	2200      	movs	r2, #0
 80004d6:	640c      	str	r4, [r1, #64]	; 0x40
 80004d8:	bc10      	pop	{r4}
 80004da:	e72d      	b.n	8000338 <unwind_phase2_forced>
 80004dc:	e79a      	b.n	8000414 <__gnu_Unwind_RaiseException>
 80004de:	bf00      	nop

080004e0 <_Unwind_Complete>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <_Unwind_DeleteException>:
 80004e4:	6883      	ldr	r3, [r0, #8]
 80004e6:	b113      	cbz	r3, 80004ee <_Unwind_DeleteException+0xa>
 80004e8:	4601      	mov	r1, r0
 80004ea:	2001      	movs	r0, #1
 80004ec:	4718      	bx	r3
 80004ee:	4770      	bx	lr

080004f0 <_Unwind_VRS_Get>:
 80004f0:	b500      	push	{lr}
 80004f2:	2904      	cmp	r1, #4
 80004f4:	d807      	bhi.n	8000506 <_Unwind_VRS_Get+0x16>
 80004f6:	e8df f001 	tbb	[pc, r1]
 80004fa:	0903      	.short	0x0903
 80004fc:	0906      	.short	0x0906
 80004fe:	09          	.byte	0x09
 80004ff:	00          	.byte	0x00
 8000500:	b90b      	cbnz	r3, 8000506 <_Unwind_VRS_Get+0x16>
 8000502:	2a0f      	cmp	r2, #15
 8000504:	d905      	bls.n	8000512 <_Unwind_VRS_Get+0x22>
 8000506:	2002      	movs	r0, #2
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4
 800050c:	2001      	movs	r0, #1
 800050e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000512:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000516:	6852      	ldr	r2, [r2, #4]
 8000518:	4618      	mov	r0, r3
 800051a:	9b01      	ldr	r3, [sp, #4]
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000522:	bf00      	nop

08000524 <_Unwind_GetGR>:
 8000524:	2300      	movs	r3, #0
 8000526:	b510      	push	{r4, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	ac03      	add	r4, sp, #12
 800052c:	460a      	mov	r2, r1
 800052e:	9400      	str	r4, [sp, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	f7ff ffdd 	bl	80004f0 <_Unwind_VRS_Get>
 8000536:	9803      	ldr	r0, [sp, #12]
 8000538:	b004      	add	sp, #16
 800053a:	bd10      	pop	{r4, pc}

0800053c <_Unwind_VRS_Set>:
 800053c:	b500      	push	{lr}
 800053e:	2904      	cmp	r1, #4
 8000540:	d807      	bhi.n	8000552 <_Unwind_VRS_Set+0x16>
 8000542:	e8df f001 	tbb	[pc, r1]
 8000546:	0903      	.short	0x0903
 8000548:	0906      	.short	0x0906
 800054a:	09          	.byte	0x09
 800054b:	00          	.byte	0x00
 800054c:	b90b      	cbnz	r3, 8000552 <_Unwind_VRS_Set+0x16>
 800054e:	2a0f      	cmp	r2, #15
 8000550:	d905      	bls.n	800055e <_Unwind_VRS_Set+0x22>
 8000552:	2002      	movs	r0, #2
 8000554:	f85d fb04 	ldr.w	pc, [sp], #4
 8000558:	2001      	movs	r0, #1
 800055a:	f85d fb04 	ldr.w	pc, [sp], #4
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000564:	6809      	ldr	r1, [r1, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	6051      	str	r1, [r2, #4]
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
 800056e:	bf00      	nop

08000570 <_Unwind_SetGR>:
 8000570:	2300      	movs	r3, #0
 8000572:	b510      	push	{r4, lr}
 8000574:	b084      	sub	sp, #16
 8000576:	ac04      	add	r4, sp, #16
 8000578:	f844 2d04 	str.w	r2, [r4, #-4]!
 800057c:	9400      	str	r4, [sp, #0]
 800057e:	460a      	mov	r2, r1
 8000580:	4619      	mov	r1, r3
 8000582:	f7ff ffdb 	bl	800053c <_Unwind_VRS_Set>
 8000586:	b004      	add	sp, #16
 8000588:	bd10      	pop	{r4, pc}
 800058a:	bf00      	nop

0800058c <__gnu_Unwind_Backtrace>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	f04f 3eff 	mov.w	lr, #4294967295
 8000592:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000594:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	1d15      	adds	r5, r2, #4
 800059c:	ac17      	add	r4, sp, #92	; 0x5c
 800059e:	4607      	mov	r7, r0
 80005a0:	460e      	mov	r6, r1
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80005b6:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80005ba:	e012      	b.n	80005e2 <__gnu_Unwind_Backtrace+0x56>
 80005bc:	210c      	movs	r1, #12
 80005be:	a816      	add	r0, sp, #88	; 0x58
 80005c0:	466a      	mov	r2, sp
 80005c2:	f7ff ffd5 	bl	8000570 <_Unwind_SetGR>
 80005c6:	4631      	mov	r1, r6
 80005c8:	a816      	add	r0, sp, #88	; 0x58
 80005ca:	47b8      	blx	r7
 80005cc:	b978      	cbnz	r0, 80005ee <__gnu_Unwind_Backtrace+0x62>
 80005ce:	9b04      	ldr	r3, [sp, #16]
 80005d0:	aa16      	add	r2, sp, #88	; 0x58
 80005d2:	4669      	mov	r1, sp
 80005d4:	2008      	movs	r0, #8
 80005d6:	4798      	blx	r3
 80005d8:	2805      	cmp	r0, #5
 80005da:	4604      	mov	r4, r0
 80005dc:	d008      	beq.n	80005f0 <__gnu_Unwind_Backtrace+0x64>
 80005de:	2809      	cmp	r0, #9
 80005e0:	d005      	beq.n	80005ee <__gnu_Unwind_Backtrace+0x62>
 80005e2:	9926      	ldr	r1, [sp, #152]	; 0x98
 80005e4:	4668      	mov	r0, sp
 80005e6:	f7ff fdff 	bl	80001e8 <get_eit_entry>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	d0e6      	beq.n	80005bc <__gnu_Unwind_Backtrace+0x30>
 80005ee:	2409      	movs	r4, #9
 80005f0:	a816      	add	r0, sp, #88	; 0x58
 80005f2:	f7ff fe4b 	bl	800028c <restore_non_core_regs>
 80005f6:	4620      	mov	r0, r4
 80005f8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80005fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fe:	bf00      	nop

08000600 <__gnu_unwind_pr_common>:
 8000600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000604:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000606:	4691      	mov	r9, r2
 8000608:	6822      	ldr	r2, [r4, #0]
 800060a:	b08b      	sub	sp, #44	; 0x2c
 800060c:	3404      	adds	r4, #4
 800060e:	460d      	mov	r5, r1
 8000610:	9207      	str	r2, [sp, #28]
 8000612:	9408      	str	r4, [sp, #32]
 8000614:	f000 0b03 	and.w	fp, r0, #3
 8000618:	461e      	mov	r6, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d160      	bne.n	80006e0 <__gnu_unwind_pr_common+0xe0>
 800061e:	2303      	movs	r3, #3
 8000620:	0212      	lsls	r2, r2, #8
 8000622:	9207      	str	r2, [sp, #28]
 8000624:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000628:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800062c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800062e:	f1bb 0f02 	cmp.w	fp, #2
 8000632:	bf08      	it	eq
 8000634:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000636:	f013 0301 	ands.w	r3, r3, #1
 800063a:	d140      	bne.n	80006be <__gnu_unwind_pr_common+0xbe>
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	f000 0308 	and.w	r3, r0, #8
 8000642:	9303      	str	r3, [sp, #12]
 8000644:	f8d4 8000 	ldr.w	r8, [r4]
 8000648:	f1b8 0f00 	cmp.w	r8, #0
 800064c:	d039      	beq.n	80006c2 <__gnu_unwind_pr_common+0xc2>
 800064e:	2e02      	cmp	r6, #2
 8000650:	d043      	beq.n	80006da <__gnu_unwind_pr_common+0xda>
 8000652:	f8b4 8000 	ldrh.w	r8, [r4]
 8000656:	8867      	ldrh	r7, [r4, #2]
 8000658:	3404      	adds	r4, #4
 800065a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800065c:	f027 0a01 	bic.w	sl, r7, #1
 8000660:	210f      	movs	r1, #15
 8000662:	4648      	mov	r0, r9
 8000664:	449a      	add	sl, r3
 8000666:	f7ff ff5d 	bl	8000524 <_Unwind_GetGR>
 800066a:	4582      	cmp	sl, r0
 800066c:	d833      	bhi.n	80006d6 <__gnu_unwind_pr_common+0xd6>
 800066e:	f028 0301 	bic.w	r3, r8, #1
 8000672:	449a      	add	sl, r3
 8000674:	4550      	cmp	r0, sl
 8000676:	bf2c      	ite	cs
 8000678:	2000      	movcs	r0, #0
 800067a:	2001      	movcc	r0, #1
 800067c:	007f      	lsls	r7, r7, #1
 800067e:	f007 0702 	and.w	r7, r7, #2
 8000682:	f008 0801 	and.w	r8, r8, #1
 8000686:	ea47 0708 	orr.w	r7, r7, r8
 800068a:	2f01      	cmp	r7, #1
 800068c:	d03e      	beq.n	800070c <__gnu_unwind_pr_common+0x10c>
 800068e:	d335      	bcc.n	80006fc <__gnu_unwind_pr_common+0xfc>
 8000690:	2f02      	cmp	r7, #2
 8000692:	d11c      	bne.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000694:	6823      	ldr	r3, [r4, #0]
 8000696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800069a:	9202      	str	r2, [sp, #8]
 800069c:	f1bb 0f00 	cmp.w	fp, #0
 80006a0:	d176      	bne.n	8000790 <__gnu_unwind_pr_common+0x190>
 80006a2:	b128      	cbz	r0, 80006b0 <__gnu_unwind_pr_common+0xb0>
 80006a4:	9903      	ldr	r1, [sp, #12]
 80006a6:	2900      	cmp	r1, #0
 80006a8:	d07e      	beq.n	80007a8 <__gnu_unwind_pr_common+0x1a8>
 80006aa:	2a00      	cmp	r2, #0
 80006ac:	f000 80a6 	beq.w	80007fc <__gnu_unwind_pr_common+0x1fc>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db77      	blt.n	80007a4 <__gnu_unwind_pr_common+0x1a4>
 80006b4:	9b02      	ldr	r3, [sp, #8]
 80006b6:	3301      	adds	r3, #1
 80006b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006bc:	e7c2      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 80006be:	2300      	movs	r3, #0
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	2e02      	cmp	r6, #2
 80006c4:	dd3e      	ble.n	8000744 <__gnu_unwind_pr_common+0x144>
 80006c6:	f7ff fe13 	bl	80002f0 <__gnu_unwind_24bit.isra.1>
 80006ca:	2800      	cmp	r0, #0
 80006cc:	d040      	beq.n	8000750 <__gnu_unwind_pr_common+0x150>
 80006ce:	2009      	movs	r0, #9
 80006d0:	b00b      	add	sp, #44	; 0x2c
 80006d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006d6:	2000      	movs	r0, #0
 80006d8:	e7d0      	b.n	800067c <__gnu_unwind_pr_common+0x7c>
 80006da:	6867      	ldr	r7, [r4, #4]
 80006dc:	3408      	adds	r4, #8
 80006de:	e7bc      	b.n	800065a <__gnu_unwind_pr_common+0x5a>
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	dca3      	bgt.n	800062c <__gnu_unwind_pr_common+0x2c>
 80006e4:	2102      	movs	r1, #2
 80006e6:	0c13      	lsrs	r3, r2, #16
 80006e8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80006ec:	0412      	lsls	r2, r2, #16
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80006f4:	9207      	str	r2, [sp, #28]
 80006f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80006fa:	e797      	b.n	800062c <__gnu_unwind_pr_common+0x2c>
 80006fc:	f1bb 0f00 	cmp.w	fp, #0
 8000700:	d002      	beq.n	8000708 <__gnu_unwind_pr_common+0x108>
 8000702:	2800      	cmp	r0, #0
 8000704:	f040 80bd 	bne.w	8000882 <__gnu_unwind_pr_common+0x282>
 8000708:	3404      	adds	r4, #4
 800070a:	e79b      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 800070c:	f1bb 0f00 	cmp.w	fp, #0
 8000710:	d125      	bne.n	800075e <__gnu_unwind_pr_common+0x15e>
 8000712:	b1a8      	cbz	r0, 8000740 <__gnu_unwind_pr_common+0x140>
 8000714:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000718:	1c99      	adds	r1, r3, #2
 800071a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800071e:	d0d6      	beq.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000720:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000724:	3301      	adds	r3, #1
 8000726:	9106      	str	r1, [sp, #24]
 8000728:	f000 80a3 	beq.w	8000872 <__gnu_unwind_pr_common+0x272>
 800072c:	1d20      	adds	r0, r4, #4
 800072e:	f7ff fdd9 	bl	80002e4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000732:	ab06      	add	r3, sp, #24
 8000734:	4601      	mov	r1, r0
 8000736:	4628      	mov	r0, r5
 8000738:	f3af 8000 	nop.w
 800073c:	2800      	cmp	r0, #0
 800073e:	d177      	bne.n	8000830 <__gnu_unwind_pr_common+0x230>
 8000740:	3408      	adds	r4, #8
 8000742:	e77f      	b.n	8000644 <__gnu_unwind_pr_common+0x44>
 8000744:	a907      	add	r1, sp, #28
 8000746:	4648      	mov	r0, r9
 8000748:	f000 faf0 	bl	8000d2c <__gnu_unwind_execute>
 800074c:	2800      	cmp	r0, #0
 800074e:	d1be      	bne.n	80006ce <__gnu_unwind_pr_common+0xce>
 8000750:	9b01      	ldr	r3, [sp, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d15c      	bne.n	8000810 <__gnu_unwind_pr_common+0x210>
 8000756:	2008      	movs	r0, #8
 8000758:	b00b      	add	sp, #44	; 0x2c
 800075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800075e:	210d      	movs	r1, #13
 8000760:	4648      	mov	r0, r9
 8000762:	6a2f      	ldr	r7, [r5, #32]
 8000764:	f7ff fede 	bl	8000524 <_Unwind_GetGR>
 8000768:	4287      	cmp	r7, r0
 800076a:	d1e9      	bne.n	8000740 <__gnu_unwind_pr_common+0x140>
 800076c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800076e:	429c      	cmp	r4, r3
 8000770:	d1e6      	bne.n	8000740 <__gnu_unwind_pr_common+0x140>
 8000772:	4620      	mov	r0, r4
 8000774:	f7ff fcea 	bl	800014c <selfrel_offset31>
 8000778:	210f      	movs	r1, #15
 800077a:	4602      	mov	r2, r0
 800077c:	4648      	mov	r0, r9
 800077e:	f7ff fef7 	bl	8000570 <_Unwind_SetGR>
 8000782:	4648      	mov	r0, r9
 8000784:	462a      	mov	r2, r5
 8000786:	2100      	movs	r1, #0
 8000788:	f7ff fef2 	bl	8000570 <_Unwind_SetGR>
 800078c:	2007      	movs	r0, #7
 800078e:	e79f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000790:	210d      	movs	r1, #13
 8000792:	4648      	mov	r0, r9
 8000794:	6a2f      	ldr	r7, [r5, #32]
 8000796:	f7ff fec5 	bl	8000524 <_Unwind_GetGR>
 800079a:	4287      	cmp	r7, r0
 800079c:	d058      	beq.n	8000850 <__gnu_unwind_pr_common+0x250>
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	da87      	bge.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 80007a4:	3404      	adds	r4, #4
 80007a6:	e785      	b.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 80007a8:	9b02      	ldr	r3, [sp, #8]
 80007aa:	b33b      	cbz	r3, 80007fc <__gnu_unwind_pr_common+0x1fc>
 80007ac:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80007b0:	1d27      	adds	r7, r4, #4
 80007b2:	f8cd b010 	str.w	fp, [sp, #16]
 80007b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80007ba:	46a3      	mov	fp, r4
 80007bc:	f8dd a008 	ldr.w	sl, [sp, #8]
 80007c0:	461c      	mov	r4, r3
 80007c2:	9605      	str	r6, [sp, #20]
 80007c4:	e002      	b.n	80007cc <__gnu_unwind_pr_common+0x1cc>
 80007c6:	45b2      	cmp	sl, r6
 80007c8:	46b0      	mov	r8, r6
 80007ca:	d016      	beq.n	80007fa <__gnu_unwind_pr_common+0x1fa>
 80007cc:	4638      	mov	r0, r7
 80007ce:	9406      	str	r4, [sp, #24]
 80007d0:	f7ff fd88 	bl	80002e4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80007d4:	ab06      	add	r3, sp, #24
 80007d6:	4601      	mov	r1, r0
 80007d8:	2200      	movs	r2, #0
 80007da:	4628      	mov	r0, r5
 80007dc:	f3af 8000 	nop.w
 80007e0:	f108 0601 	add.w	r6, r8, #1
 80007e4:	3704      	adds	r7, #4
 80007e6:	2800      	cmp	r0, #0
 80007e8:	d0ed      	beq.n	80007c6 <__gnu_unwind_pr_common+0x1c6>
 80007ea:	9b02      	ldr	r3, [sp, #8]
 80007ec:	465c      	mov	r4, fp
 80007ee:	4543      	cmp	r3, r8
 80007f0:	f8dd b010 	ldr.w	fp, [sp, #16]
 80007f4:	9e05      	ldr	r6, [sp, #20]
 80007f6:	d1d2      	bne.n	800079e <__gnu_unwind_pr_common+0x19e>
 80007f8:	e000      	b.n	80007fc <__gnu_unwind_pr_common+0x1fc>
 80007fa:	465c      	mov	r4, fp
 80007fc:	4648      	mov	r0, r9
 80007fe:	210d      	movs	r1, #13
 8000800:	f7ff fe90 	bl	8000524 <_Unwind_GetGR>
 8000804:	9b06      	ldr	r3, [sp, #24]
 8000806:	6228      	str	r0, [r5, #32]
 8000808:	62ac      	str	r4, [r5, #40]	; 0x28
 800080a:	626b      	str	r3, [r5, #36]	; 0x24
 800080c:	2006      	movs	r0, #6
 800080e:	e75f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000810:	210f      	movs	r1, #15
 8000812:	4648      	mov	r0, r9
 8000814:	f7ff fe86 	bl	8000524 <_Unwind_GetGR>
 8000818:	210e      	movs	r1, #14
 800081a:	4602      	mov	r2, r0
 800081c:	4648      	mov	r0, r9
 800081e:	f7ff fea7 	bl	8000570 <_Unwind_SetGR>
 8000822:	4648      	mov	r0, r9
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <__gnu_unwind_pr_common+0x2cc>)
 8000826:	210f      	movs	r1, #15
 8000828:	f7ff fea2 	bl	8000570 <_Unwind_SetGR>
 800082c:	2007      	movs	r0, #7
 800082e:	e74f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000830:	4607      	mov	r7, r0
 8000832:	210d      	movs	r1, #13
 8000834:	4648      	mov	r0, r9
 8000836:	f7ff fe75 	bl	8000524 <_Unwind_GetGR>
 800083a:	2f02      	cmp	r7, #2
 800083c:	6228      	str	r0, [r5, #32]
 800083e:	d11d      	bne.n	800087c <__gnu_unwind_pr_common+0x27c>
 8000840:	462b      	mov	r3, r5
 8000842:	9a06      	ldr	r2, [sp, #24]
 8000844:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000848:	626b      	str	r3, [r5, #36]	; 0x24
 800084a:	62ac      	str	r4, [r5, #40]	; 0x28
 800084c:	2006      	movs	r0, #6
 800084e:	e73f      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 8000850:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000852:	429c      	cmp	r4, r3
 8000854:	d1a3      	bne.n	800079e <__gnu_unwind_pr_common+0x19e>
 8000856:	2204      	movs	r2, #4
 8000858:	2700      	movs	r7, #0
 800085a:	9902      	ldr	r1, [sp, #8]
 800085c:	18a3      	adds	r3, r4, r2
 800085e:	62a9      	str	r1, [r5, #40]	; 0x28
 8000860:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000862:	632a      	str	r2, [r5, #48]	; 0x30
 8000864:	636b      	str	r3, [r5, #52]	; 0x34
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	42bb      	cmp	r3, r7
 800086a:	db1d      	blt.n	80008a8 <__gnu_unwind_pr_common+0x2a8>
 800086c:	2301      	movs	r3, #1
 800086e:	9301      	str	r3, [sp, #4]
 8000870:	e720      	b.n	80006b4 <__gnu_unwind_pr_common+0xb4>
 8000872:	4648      	mov	r0, r9
 8000874:	210d      	movs	r1, #13
 8000876:	f7ff fe55 	bl	8000524 <_Unwind_GetGR>
 800087a:	6228      	str	r0, [r5, #32]
 800087c:	9b06      	ldr	r3, [sp, #24]
 800087e:	626b      	str	r3, [r5, #36]	; 0x24
 8000880:	e7e3      	b.n	800084a <__gnu_unwind_pr_common+0x24a>
 8000882:	4620      	mov	r0, r4
 8000884:	f7ff fc62 	bl	800014c <selfrel_offset31>
 8000888:	3404      	adds	r4, #4
 800088a:	4606      	mov	r6, r0
 800088c:	63ac      	str	r4, [r5, #56]	; 0x38
 800088e:	4628      	mov	r0, r5
 8000890:	f3af 8000 	nop.w
 8000894:	2800      	cmp	r0, #0
 8000896:	f43f af1a 	beq.w	80006ce <__gnu_unwind_pr_common+0xce>
 800089a:	4648      	mov	r0, r9
 800089c:	4632      	mov	r2, r6
 800089e:	210f      	movs	r1, #15
 80008a0:	f7ff fe66 	bl	8000570 <_Unwind_SetGR>
 80008a4:	2007      	movs	r0, #7
 80008a6:	e713      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 80008a8:	4608      	mov	r0, r1
 80008aa:	3001      	adds	r0, #1
 80008ac:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008b0:	f7ff fc4c 	bl	800014c <selfrel_offset31>
 80008b4:	210f      	movs	r1, #15
 80008b6:	4602      	mov	r2, r0
 80008b8:	4648      	mov	r0, r9
 80008ba:	f7ff fe59 	bl	8000570 <_Unwind_SetGR>
 80008be:	4648      	mov	r0, r9
 80008c0:	462a      	mov	r2, r5
 80008c2:	4639      	mov	r1, r7
 80008c4:	f7ff fe54 	bl	8000570 <_Unwind_SetGR>
 80008c8:	2007      	movs	r0, #7
 80008ca:	e701      	b.n	80006d0 <__gnu_unwind_pr_common+0xd0>
 80008cc:	00000000 	.word	0x00000000

080008d0 <__aeabi_unwind_cpp_pr0>:
 80008d0:	2300      	movs	r3, #0
 80008d2:	e695      	b.n	8000600 <__gnu_unwind_pr_common>

080008d4 <__aeabi_unwind_cpp_pr1>:
 80008d4:	2301      	movs	r3, #1
 80008d6:	e693      	b.n	8000600 <__gnu_unwind_pr_common>

080008d8 <__aeabi_unwind_cpp_pr2>:
 80008d8:	2302      	movs	r3, #2
 80008da:	e691      	b.n	8000600 <__gnu_unwind_pr_common>

080008dc <_Unwind_VRS_Pop>:
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	b0c5      	sub	sp, #276	; 0x114
 80008e2:	2904      	cmp	r1, #4
 80008e4:	d80d      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 80008e6:	e8df f001 	tbb	[pc, r1]
 80008ea:	0355      	.short	0x0355
 80008ec:	310c      	.short	0x310c
 80008ee:	0f          	.byte	0x0f
 80008ef:	00          	.byte	0x00
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80008f6:	b295      	uxth	r5, r2
 80008f8:	d164      	bne.n	80009c4 <_Unwind_VRS_Pop+0xe8>
 80008fa:	1972      	adds	r2, r6, r5
 80008fc:	2a10      	cmp	r2, #16
 80008fe:	f240 809d 	bls.w	8000a3c <_Unwind_VRS_Pop+0x160>
 8000902:	2002      	movs	r0, #2
 8000904:	b045      	add	sp, #276	; 0x114
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1fa      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 800090c:	2a10      	cmp	r2, #16
 800090e:	d8f8      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000910:	6823      	ldr	r3, [r4, #0]
 8000912:	06d8      	lsls	r0, r3, #27
 8000914:	f100 80c8 	bmi.w	8000aa8 <_Unwind_VRS_Pop+0x1cc>
 8000918:	ae22      	add	r6, sp, #136	; 0x88
 800091a:	4630      	mov	r0, r6
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	2501      	movs	r5, #1
 8000920:	f000 f974 	bl	8000c0c <__gnu_Unwind_Save_WMMXC>
 8000924:	2300      	movs	r3, #0
 8000926:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000928:	9a01      	ldr	r2, [sp, #4]
 800092a:	fa05 f103 	lsl.w	r1, r5, r3
 800092e:	4211      	tst	r1, r2
 8000930:	d003      	beq.n	800093a <_Unwind_VRS_Pop+0x5e>
 8000932:	6801      	ldr	r1, [r0, #0]
 8000934:	3004      	adds	r0, #4
 8000936:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800093a:	3301      	adds	r3, #1
 800093c:	2b04      	cmp	r3, #4
 800093e:	d1f4      	bne.n	800092a <_Unwind_VRS_Pop+0x4e>
 8000940:	63a0      	str	r0, [r4, #56]	; 0x38
 8000942:	4630      	mov	r0, r6
 8000944:	f000 f958 	bl	8000bf8 <__gnu_Unwind_Restore_WMMXC>
 8000948:	2000      	movs	r0, #0
 800094a:	e7db      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 800094c:	2b03      	cmp	r3, #3
 800094e:	d1d8      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000950:	0c15      	lsrs	r5, r2, #16
 8000952:	b297      	uxth	r7, r2
 8000954:	19eb      	adds	r3, r5, r7
 8000956:	2b10      	cmp	r3, #16
 8000958:	d8d3      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 800095a:	6823      	ldr	r3, [r4, #0]
 800095c:	071e      	lsls	r6, r3, #28
 800095e:	f100 80b7 	bmi.w	8000ad0 <_Unwind_VRS_Pop+0x1f4>
 8000962:	ae22      	add	r6, sp, #136	; 0x88
 8000964:	4630      	mov	r0, r6
 8000966:	f000 f925 	bl	8000bb4 <__gnu_Unwind_Save_WMMXD>
 800096a:	00ed      	lsls	r5, r5, #3
 800096c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800096e:	b15f      	cbz	r7, 8000988 <_Unwind_VRS_Pop+0xac>
 8000970:	3d04      	subs	r5, #4
 8000972:	4603      	mov	r3, r0
 8000974:	1971      	adds	r1, r6, r5
 8000976:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 800097a:	f853 2b04 	ldr.w	r2, [r3], #4
 800097e:	4283      	cmp	r3, r0
 8000980:	f841 2f04 	str.w	r2, [r1, #4]!
 8000984:	d1f9      	bne.n	800097a <_Unwind_VRS_Pop+0x9e>
 8000986:	4618      	mov	r0, r3
 8000988:	63a0      	str	r0, [r4, #56]	; 0x38
 800098a:	4630      	mov	r0, r6
 800098c:	f000 f8f0 	bl	8000b70 <__gnu_Unwind_Restore_WMMXD>
 8000990:	2000      	movs	r0, #0
 8000992:	e7b7      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1b4      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 8000998:	2701      	movs	r7, #1
 800099a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800099c:	b296      	uxth	r6, r2
 800099e:	1d20      	adds	r0, r4, #4
 80009a0:	fa07 f103 	lsl.w	r1, r7, r3
 80009a4:	4231      	tst	r1, r6
 80009a6:	f103 0301 	add.w	r3, r3, #1
 80009aa:	d002      	beq.n	80009b2 <_Unwind_VRS_Pop+0xd6>
 80009ac:	6829      	ldr	r1, [r5, #0]
 80009ae:	3504      	adds	r5, #4
 80009b0:	6001      	str	r1, [r0, #0]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	f100 0004 	add.w	r0, r0, #4
 80009b8:	d1f2      	bne.n	80009a0 <_Unwind_VRS_Pop+0xc4>
 80009ba:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80009be:	d13b      	bne.n	8000a38 <_Unwind_VRS_Pop+0x15c>
 80009c0:	63a5      	str	r5, [r4, #56]	; 0x38
 80009c2:	e79f      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d19c      	bne.n	8000902 <_Unwind_VRS_Pop+0x26>
 80009c8:	1977      	adds	r7, r6, r5
 80009ca:	2f20      	cmp	r7, #32
 80009cc:	d899      	bhi.n	8000902 <_Unwind_VRS_Pop+0x26>
 80009ce:	2e0f      	cmp	r6, #15
 80009d0:	d966      	bls.n	8000aa0 <_Unwind_VRS_Pop+0x1c4>
 80009d2:	462f      	mov	r7, r5
 80009d4:	2d00      	cmp	r5, #0
 80009d6:	d13a      	bne.n	8000a4e <_Unwind_VRS_Pop+0x172>
 80009d8:	462a      	mov	r2, r5
 80009da:	2700      	movs	r7, #0
 80009dc:	2a00      	cmp	r2, #0
 80009de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80009e0:	dd72      	ble.n	8000ac8 <_Unwind_VRS_Pop+0x1ec>
 80009e2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80009e6:	4601      	mov	r1, r0
 80009e8:	a844      	add	r0, sp, #272	; 0x110
 80009ea:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80009ee:	388c      	subs	r0, #140	; 0x8c
 80009f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80009f4:	4291      	cmp	r1, r2
 80009f6:	f840 5f04 	str.w	r5, [r0, #4]!
 80009fa:	d1f9      	bne.n	80009f0 <_Unwind_VRS_Pop+0x114>
 80009fc:	4608      	mov	r0, r1
 80009fe:	b197      	cbz	r7, 8000a26 <_Unwind_VRS_Pop+0x14a>
 8000a00:	2e10      	cmp	r6, #16
 8000a02:	4632      	mov	r2, r6
 8000a04:	bf38      	it	cc
 8000a06:	2210      	movcc	r2, #16
 8000a08:	a944      	add	r1, sp, #272	; 0x110
 8000a0a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000a0e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000a12:	0079      	lsls	r1, r7, #1
 8000a14:	3a04      	subs	r2, #4
 8000a16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000a1a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000a1e:	4288      	cmp	r0, r1
 8000a20:	f842 5f04 	str.w	r5, [r2, #4]!
 8000a24:	d1f9      	bne.n	8000a1a <_Unwind_VRS_Pop+0x13e>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d048      	beq.n	8000abc <_Unwind_VRS_Pop+0x1e0>
 8000a2a:	2e0f      	cmp	r6, #15
 8000a2c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000a2e:	d933      	bls.n	8000a98 <_Unwind_VRS_Pop+0x1bc>
 8000a30:	b117      	cbz	r7, 8000a38 <_Unwind_VRS_Pop+0x15c>
 8000a32:	a802      	add	r0, sp, #8
 8000a34:	f000 f894 	bl	8000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a38:	2000      	movs	r0, #0
 8000a3a:	e763      	b.n	8000904 <_Unwind_VRS_Pop+0x28>
 8000a3c:	2e0f      	cmp	r6, #15
 8000a3e:	f63f af60 	bhi.w	8000902 <_Unwind_VRS_Pop+0x26>
 8000a42:	2700      	movs	r7, #0
 8000a44:	6822      	ldr	r2, [r4, #0]
 8000a46:	07d1      	lsls	r1, r2, #31
 8000a48:	d417      	bmi.n	8000a7a <_Unwind_VRS_Pop+0x19e>
 8000a4a:	2f00      	cmp	r7, #0
 8000a4c:	d060      	beq.n	8000b10 <_Unwind_VRS_Pop+0x234>
 8000a4e:	6822      	ldr	r2, [r4, #0]
 8000a50:	0751      	lsls	r1, r2, #29
 8000a52:	d445      	bmi.n	8000ae0 <_Unwind_VRS_Pop+0x204>
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d04d      	beq.n	8000af4 <_Unwind_VRS_Pop+0x218>
 8000a58:	2e0f      	cmp	r6, #15
 8000a5a:	d806      	bhi.n	8000a6a <_Unwind_VRS_Pop+0x18e>
 8000a5c:	a822      	add	r0, sp, #136	; 0x88
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	f000 f87a 	bl	8000b58 <__gnu_Unwind_Save_VFP_D>
 8000a64:	9b01      	ldr	r3, [sp, #4]
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d0b6      	beq.n	80009d8 <_Unwind_VRS_Pop+0xfc>
 8000a6a:	a802      	add	r0, sp, #8
 8000a6c:	9301      	str	r3, [sp, #4]
 8000a6e:	f000 f87b 	bl	8000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000a72:	9b01      	ldr	r3, [sp, #4]
 8000a74:	f1c6 0210 	rsb	r2, r6, #16
 8000a78:	e7b0      	b.n	80009dc <_Unwind_VRS_Pop+0x100>
 8000a7a:	f022 0101 	bic.w	r1, r2, #1
 8000a7e:	2b05      	cmp	r3, #5
 8000a80:	6021      	str	r1, [r4, #0]
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4620      	mov	r0, r4
 8000a86:	d03b      	beq.n	8000b00 <_Unwind_VRS_Pop+0x224>
 8000a88:	f022 0203 	bic.w	r2, r2, #3
 8000a8c:	f840 2b48 	str.w	r2, [r0], #72
 8000a90:	f000 f85a 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000a94:	9b01      	ldr	r3, [sp, #4]
 8000a96:	e7d8      	b.n	8000a4a <_Unwind_VRS_Pop+0x16e>
 8000a98:	a822      	add	r0, sp, #136	; 0x88
 8000a9a:	f000 f859 	bl	8000b50 <__gnu_Unwind_Restore_VFP_D>
 8000a9e:	e7c7      	b.n	8000a30 <_Unwind_VRS_Pop+0x154>
 8000aa0:	2f10      	cmp	r7, #16
 8000aa2:	d9ce      	bls.n	8000a42 <_Unwind_VRS_Pop+0x166>
 8000aa4:	3f10      	subs	r7, #16
 8000aa6:	e7cd      	b.n	8000a44 <_Unwind_VRS_Pop+0x168>
 8000aa8:	f023 0310 	bic.w	r3, r3, #16
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ab2:	9201      	str	r2, [sp, #4]
 8000ab4:	f000 f8aa 	bl	8000c0c <__gnu_Unwind_Save_WMMXC>
 8000ab8:	9a01      	ldr	r2, [sp, #4]
 8000aba:	e72d      	b.n	8000918 <_Unwind_VRS_Pop+0x3c>
 8000abc:	3104      	adds	r1, #4
 8000abe:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ac0:	a822      	add	r0, sp, #136	; 0x88
 8000ac2:	f000 f83d 	bl	8000b40 <__gnu_Unwind_Restore_VFP>
 8000ac6:	e7b7      	b.n	8000a38 <_Unwind_VRS_Pop+0x15c>
 8000ac8:	2f00      	cmp	r7, #0
 8000aca:	d199      	bne.n	8000a00 <_Unwind_VRS_Pop+0x124>
 8000acc:	4601      	mov	r1, r0
 8000ace:	e7aa      	b.n	8000a26 <_Unwind_VRS_Pop+0x14a>
 8000ad0:	f023 0308 	bic.w	r3, r3, #8
 8000ad4:	6023      	str	r3, [r4, #0]
 8000ad6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000ada:	f000 f86b 	bl	8000bb4 <__gnu_Unwind_Save_WMMXD>
 8000ade:	e740      	b.n	8000962 <_Unwind_VRS_Pop+0x86>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f022 0204 	bic.w	r2, r2, #4
 8000ae6:	f840 2bd0 	str.w	r2, [r0], #208
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f000 f83c 	bl	8000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	e7af      	b.n	8000a54 <_Unwind_VRS_Pop+0x178>
 8000af4:	a822      	add	r0, sp, #136	; 0x88
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	f000 f826 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000afc:	9b01      	ldr	r3, [sp, #4]
 8000afe:	e7b9      	b.n	8000a74 <_Unwind_VRS_Pop+0x198>
 8000b00:	f041 0102 	orr.w	r1, r1, #2
 8000b04:	f840 1b48 	str.w	r1, [r0], #72
 8000b08:	f000 f826 	bl	8000b58 <__gnu_Unwind_Save_VFP_D>
 8000b0c:	9b01      	ldr	r3, [sp, #4]
 8000b0e:	e79c      	b.n	8000a4a <_Unwind_VRS_Pop+0x16e>
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d003      	beq.n	8000b1c <_Unwind_VRS_Pop+0x240>
 8000b14:	2e0f      	cmp	r6, #15
 8000b16:	f63f af5f 	bhi.w	80009d8 <_Unwind_VRS_Pop+0xfc>
 8000b1a:	e79f      	b.n	8000a5c <_Unwind_VRS_Pop+0x180>
 8000b1c:	a822      	add	r0, sp, #136	; 0x88
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	f000 f812 	bl	8000b48 <__gnu_Unwind_Save_VFP>
 8000b24:	9b01      	ldr	r3, [sp, #4]
 8000b26:	e757      	b.n	80009d8 <_Unwind_VRS_Pop+0xfc>

08000b28 <__restore_core_regs>:
 8000b28:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b2c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b30:	469c      	mov	ip, r3
 8000b32:	46a6      	mov	lr, r4
 8000b34:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b38:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b3c:	46e5      	mov	sp, ip
 8000b3e:	bd00      	pop	{pc}

08000b40 <__gnu_Unwind_Restore_VFP>:
 8000b40:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__gnu_Unwind_Save_VFP>:
 8000b48:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__gnu_Unwind_Restore_VFP_D>:
 8000b50:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__gnu_Unwind_Save_VFP_D>:
 8000b58:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b60:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b68:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__gnu_Unwind_Restore_WMMXD>:
 8000b70:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b74:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b78:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b7c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b80:	ecf0 4102 	ldfe	f4, [r0], #8
 8000b84:	ecf0 5102 	ldfe	f5, [r0], #8
 8000b88:	ecf0 6102 	ldfe	f6, [r0], #8
 8000b8c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000b90:	ecf0 8102 	ldfp	f0, [r0], #8
 8000b94:	ecf0 9102 	ldfp	f1, [r0], #8
 8000b98:	ecf0 a102 	ldfp	f2, [r0], #8
 8000b9c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000ba0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000ba4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000ba8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bac:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__gnu_Unwind_Save_WMMXD>:
 8000bb4:	ece0 0102 	stfe	f0, [r0], #8
 8000bb8:	ece0 1102 	stfe	f1, [r0], #8
 8000bbc:	ece0 2102 	stfe	f2, [r0], #8
 8000bc0:	ece0 3102 	stfe	f3, [r0], #8
 8000bc4:	ece0 4102 	stfe	f4, [r0], #8
 8000bc8:	ece0 5102 	stfe	f5, [r0], #8
 8000bcc:	ece0 6102 	stfe	f6, [r0], #8
 8000bd0:	ece0 7102 	stfe	f7, [r0], #8
 8000bd4:	ece0 8102 	stfp	f0, [r0], #8
 8000bd8:	ece0 9102 	stfp	f1, [r0], #8
 8000bdc:	ece0 a102 	stfp	f2, [r0], #8
 8000be0:	ece0 b102 	stfp	f3, [r0], #8
 8000be4:	ece0 c102 	stfp	f4, [r0], #8
 8000be8:	ece0 d102 	stfp	f5, [r0], #8
 8000bec:	ece0 e102 	stfp	f6, [r0], #8
 8000bf0:	ece0 f102 	stfp	f7, [r0], #8
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__gnu_Unwind_Restore_WMMXC>:
 8000bf8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000bfc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c00:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c04:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__gnu_Unwind_Save_WMMXC>:
 8000c0c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c10:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c14:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c18:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <_Unwind_RaiseException>:
 8000c20:	46ec      	mov	ip, sp
 8000c22:	b500      	push	{lr}
 8000c24:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c28:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c34:	a901      	add	r1, sp, #4
 8000c36:	f7ff fbed 	bl	8000414 <__gnu_Unwind_RaiseException>
 8000c3a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c3e:	b012      	add	sp, #72	; 0x48
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop

08000c44 <_Unwind_Resume>:
 8000c44:	46ec      	mov	ip, sp
 8000c46:	b500      	push	{lr}
 8000c48:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c4c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c58:	a901      	add	r1, sp, #4
 8000c5a:	f7ff fc15 	bl	8000488 <__gnu_Unwind_Resume>
 8000c5e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c62:	b012      	add	sp, #72	; 0x48
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <_Unwind_Resume_or_Rethrow>:
 8000c68:	46ec      	mov	ip, sp
 8000c6a:	b500      	push	{lr}
 8000c6c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c70:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c7c:	a901      	add	r1, sp, #4
 8000c7e:	f7ff fc25 	bl	80004cc <__gnu_Unwind_Resume_or_Rethrow>
 8000c82:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c86:	b012      	add	sp, #72	; 0x48
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <_Unwind_ForcedUnwind>:
 8000c8c:	46ec      	mov	ip, sp
 8000c8e:	b500      	push	{lr}
 8000c90:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c94:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ca0:	ab01      	add	r3, sp, #4
 8000ca2:	f7ff fbe7 	bl	8000474 <__gnu_Unwind_ForcedUnwind>
 8000ca6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000caa:	b012      	add	sp, #72	; 0x48
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <_Unwind_Backtrace>:
 8000cb0:	46ec      	mov	ip, sp
 8000cb2:	b500      	push	{lr}
 8000cb4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cc4:	aa01      	add	r2, sp, #4
 8000cc6:	f7ff fc61 	bl	800058c <__gnu_Unwind_Backtrace>
 8000cca:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cce:	b012      	add	sp, #72	; 0x48
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop

08000cd4 <next_unwind_byte>:
 8000cd4:	7a02      	ldrb	r2, [r0, #8]
 8000cd6:	b91a      	cbnz	r2, 8000ce0 <next_unwind_byte+0xc>
 8000cd8:	7a43      	ldrb	r3, [r0, #9]
 8000cda:	b943      	cbnz	r3, 8000cee <next_unwind_byte+0x1a>
 8000cdc:	20b0      	movs	r0, #176	; 0xb0
 8000cde:	4770      	bx	lr
 8000ce0:	6803      	ldr	r3, [r0, #0]
 8000ce2:	3a01      	subs	r2, #1
 8000ce4:	7202      	strb	r2, [r0, #8]
 8000ce6:	021a      	lsls	r2, r3, #8
 8000ce8:	6002      	str	r2, [r0, #0]
 8000cea:	0e18      	lsrs	r0, r3, #24
 8000cec:	4770      	bx	lr
 8000cee:	2103      	movs	r1, #3
 8000cf0:	6842      	ldr	r2, [r0, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b410      	push	{r4}
 8000cf6:	7243      	strb	r3, [r0, #9]
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	1d14      	adds	r4, r2, #4
 8000cfc:	7201      	strb	r1, [r0, #8]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	6044      	str	r4, [r0, #4]
 8000d02:	6002      	str	r2, [r0, #0]
 8000d04:	bc10      	pop	{r4}
 8000d06:	0e18      	lsrs	r0, r3, #24
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <_Unwind_GetGR.constprop.0>:
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	b500      	push	{lr}
 8000d10:	b085      	sub	sp, #20
 8000d12:	aa03      	add	r2, sp, #12
 8000d14:	9200      	str	r2, [sp, #0]
 8000d16:	4619      	mov	r1, r3
 8000d18:	220c      	movs	r2, #12
 8000d1a:	f7ff fbe9 	bl	80004f0 <_Unwind_VRS_Get>
 8000d1e:	9803      	ldr	r0, [sp, #12]
 8000d20:	b005      	add	sp, #20
 8000d22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d26:	bf00      	nop

08000d28 <unwind_UCB_from_context>:
 8000d28:	e7f0      	b.n	8000d0c <_Unwind_GetGR.constprop.0>
 8000d2a:	bf00      	nop

08000d2c <__gnu_unwind_execute>:
 8000d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d30:	4606      	mov	r6, r0
 8000d32:	460f      	mov	r7, r1
 8000d34:	f04f 0800 	mov.w	r8, #0
 8000d38:	b085      	sub	sp, #20
 8000d3a:	4638      	mov	r0, r7
 8000d3c:	f7ff ffca 	bl	8000cd4 <next_unwind_byte>
 8000d40:	28b0      	cmp	r0, #176	; 0xb0
 8000d42:	4604      	mov	r4, r0
 8000d44:	d023      	beq.n	8000d8e <__gnu_unwind_execute+0x62>
 8000d46:	0605      	lsls	r5, r0, #24
 8000d48:	d427      	bmi.n	8000d9a <__gnu_unwind_execute+0x6e>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f10d 090c 	add.w	r9, sp, #12
 8000d50:	4619      	mov	r1, r3
 8000d52:	0085      	lsls	r5, r0, #2
 8000d54:	220d      	movs	r2, #13
 8000d56:	f8cd 9000 	str.w	r9, [sp]
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	f7ff fbc8 	bl	80004f0 <_Unwind_VRS_Get>
 8000d60:	b2ed      	uxtb	r5, r5
 8000d62:	9b03      	ldr	r3, [sp, #12]
 8000d64:	0660      	lsls	r0, r4, #25
 8000d66:	f105 0504 	add.w	r5, r5, #4
 8000d6a:	bf4c      	ite	mi
 8000d6c:	1b5d      	submi	r5, r3, r5
 8000d6e:	18ed      	addpl	r5, r5, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	220d      	movs	r2, #13
 8000d74:	4619      	mov	r1, r3
 8000d76:	f8cd 9000 	str.w	r9, [sp]
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	9503      	str	r5, [sp, #12]
 8000d7e:	f7ff fbdd 	bl	800053c <_Unwind_VRS_Set>
 8000d82:	4638      	mov	r0, r7
 8000d84:	f7ff ffa6 	bl	8000cd4 <next_unwind_byte>
 8000d88:	28b0      	cmp	r0, #176	; 0xb0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	d1db      	bne.n	8000d46 <__gnu_unwind_execute+0x1a>
 8000d8e:	f1b8 0f00 	cmp.w	r8, #0
 8000d92:	f000 8094 	beq.w	8000ebe <__gnu_unwind_execute+0x192>
 8000d96:	2000      	movs	r0, #0
 8000d98:	e01c      	b.n	8000dd4 <__gnu_unwind_execute+0xa8>
 8000d9a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000d9e:	2b80      	cmp	r3, #128	; 0x80
 8000da0:	d05c      	beq.n	8000e5c <__gnu_unwind_execute+0x130>
 8000da2:	2b90      	cmp	r3, #144	; 0x90
 8000da4:	d019      	beq.n	8000dda <__gnu_unwind_execute+0xae>
 8000da6:	2ba0      	cmp	r3, #160	; 0xa0
 8000da8:	d02c      	beq.n	8000e04 <__gnu_unwind_execute+0xd8>
 8000daa:	2bb0      	cmp	r3, #176	; 0xb0
 8000dac:	d03e      	beq.n	8000e2c <__gnu_unwind_execute+0x100>
 8000dae:	2bc0      	cmp	r3, #192	; 0xc0
 8000db0:	d06b      	beq.n	8000e8a <__gnu_unwind_execute+0x15e>
 8000db2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000db6:	2bd0      	cmp	r3, #208	; 0xd0
 8000db8:	d10b      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000dba:	f000 0207 	and.w	r2, r0, #7
 8000dbe:	3201      	adds	r2, #1
 8000dc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000dc4:	2305      	movs	r3, #5
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	4630      	mov	r0, r6
 8000dca:	f7ff fd87 	bl	80008dc <_Unwind_VRS_Pop>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d0b3      	beq.n	8000d3a <__gnu_unwind_execute+0xe>
 8000dd2:	2009      	movs	r0, #9
 8000dd4:	b005      	add	sp, #20
 8000dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000dda:	f000 030d 	and.w	r3, r0, #13
 8000dde:	2b0d      	cmp	r3, #13
 8000de0:	d0f7      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000de2:	2300      	movs	r3, #0
 8000de4:	ad03      	add	r5, sp, #12
 8000de6:	f000 020f 	and.w	r2, r0, #15
 8000dea:	4619      	mov	r1, r3
 8000dec:	9500      	str	r5, [sp, #0]
 8000dee:	4630      	mov	r0, r6
 8000df0:	f7ff fb7e 	bl	80004f0 <_Unwind_VRS_Get>
 8000df4:	2300      	movs	r3, #0
 8000df6:	9500      	str	r5, [sp, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	220d      	movs	r2, #13
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f7ff fb9d 	bl	800053c <_Unwind_VRS_Set>
 8000e02:	e79a      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e04:	43c3      	mvns	r3, r0
 8000e06:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	411a      	asrs	r2, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	0701      	lsls	r1, r0, #28
 8000e14:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e18:	bf48      	it	mi
 8000e1a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4630      	mov	r0, r6
 8000e22:	f7ff fd5b 	bl	80008dc <_Unwind_VRS_Pop>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d1d3      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e2a:	e786      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e2c:	28b1      	cmp	r0, #177	; 0xb1
 8000e2e:	d057      	beq.n	8000ee0 <__gnu_unwind_execute+0x1b4>
 8000e30:	28b2      	cmp	r0, #178	; 0xb2
 8000e32:	d068      	beq.n	8000f06 <__gnu_unwind_execute+0x1da>
 8000e34:	28b3      	cmp	r0, #179	; 0xb3
 8000e36:	f000 8095 	beq.w	8000f64 <__gnu_unwind_execute+0x238>
 8000e3a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e3e:	2bb4      	cmp	r3, #180	; 0xb4
 8000e40:	d0c7      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e42:	2301      	movs	r3, #1
 8000e44:	f000 0207 	and.w	r2, r0, #7
 8000e48:	441a      	add	r2, r3
 8000e4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4630      	mov	r0, r6
 8000e52:	f7ff fd43 	bl	80008dc <_Unwind_VRS_Pop>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d1bb      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e5a:	e76e      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f7ff ff39 	bl	8000cd4 <next_unwind_byte>
 8000e62:	0224      	lsls	r4, r4, #8
 8000e64:	4304      	orrs	r4, r0
 8000e66:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8000e6a:	d0b2      	beq.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	0124      	lsls	r4, r4, #4
 8000e70:	b2a2      	uxth	r2, r4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4630      	mov	r0, r6
 8000e76:	f7ff fd31 	bl	80008dc <_Unwind_VRS_Pop>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d1a9      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000e7e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e82:	bf18      	it	ne
 8000e84:	f04f 0801 	movne.w	r8, #1
 8000e88:	e757      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000e8a:	28c6      	cmp	r0, #198	; 0xc6
 8000e8c:	d07d      	beq.n	8000f8a <__gnu_unwind_execute+0x25e>
 8000e8e:	28c7      	cmp	r0, #199	; 0xc7
 8000e90:	f000 8086 	beq.w	8000fa0 <__gnu_unwind_execute+0x274>
 8000e94:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000e98:	2bc0      	cmp	r3, #192	; 0xc0
 8000e9a:	f000 8094 	beq.w	8000fc6 <__gnu_unwind_execute+0x29a>
 8000e9e:	28c8      	cmp	r0, #200	; 0xc8
 8000ea0:	f000 809f 	beq.w	8000fe2 <__gnu_unwind_execute+0x2b6>
 8000ea4:	28c9      	cmp	r0, #201	; 0xc9
 8000ea6:	d194      	bne.n	8000dd2 <__gnu_unwind_execute+0xa6>
 8000ea8:	4638      	mov	r0, r7
 8000eaa:	f7ff ff13 	bl	8000cd4 <next_unwind_byte>
 8000eae:	0302      	lsls	r2, r0, #12
 8000eb0:	f000 000f 	and.w	r0, r0, #15
 8000eb4:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8000eb8:	3001      	adds	r0, #1
 8000eba:	4302      	orrs	r2, r0
 8000ebc:	e782      	b.n	8000dc4 <__gnu_unwind_execute+0x98>
 8000ebe:	ac03      	add	r4, sp, #12
 8000ec0:	4643      	mov	r3, r8
 8000ec2:	220e      	movs	r2, #14
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	9400      	str	r4, [sp, #0]
 8000ec8:	4630      	mov	r0, r6
 8000eca:	f7ff fb11 	bl	80004f0 <_Unwind_VRS_Get>
 8000ece:	9400      	str	r4, [sp, #0]
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	220f      	movs	r2, #15
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	f7ff fb30 	bl	800053c <_Unwind_VRS_Set>
 8000edc:	4640      	mov	r0, r8
 8000ede:	e779      	b.n	8000dd4 <__gnu_unwind_execute+0xa8>
 8000ee0:	4638      	mov	r0, r7
 8000ee2:	f7ff fef7 	bl	8000cd4 <next_unwind_byte>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	f43f af73 	beq.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000eec:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000ef0:	f47f af6f 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4630      	mov	r0, r6
 8000efa:	f7ff fcef 	bl	80008dc <_Unwind_VRS_Pop>
 8000efe:	2800      	cmp	r0, #0
 8000f00:	f47f af67 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000f04:	e719      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f06:	2300      	movs	r3, #0
 8000f08:	f10d 090c 	add.w	r9, sp, #12
 8000f0c:	220d      	movs	r2, #13
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f8cd 9000 	str.w	r9, [sp]
 8000f14:	4630      	mov	r0, r6
 8000f16:	f7ff faeb 	bl	80004f0 <_Unwind_VRS_Get>
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	f7ff feda 	bl	8000cd4 <next_unwind_byte>
 8000f20:	0602      	lsls	r2, r0, #24
 8000f22:	f04f 0402 	mov.w	r4, #2
 8000f26:	d50c      	bpl.n	8000f42 <__gnu_unwind_execute+0x216>
 8000f28:	9b03      	ldr	r3, [sp, #12]
 8000f2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000f2e:	40a0      	lsls	r0, r4
 8000f30:	4403      	add	r3, r0
 8000f32:	4638      	mov	r0, r7
 8000f34:	9303      	str	r3, [sp, #12]
 8000f36:	f7ff fecd 	bl	8000cd4 <next_unwind_byte>
 8000f3a:	0603      	lsls	r3, r0, #24
 8000f3c:	f104 0407 	add.w	r4, r4, #7
 8000f40:	d4f2      	bmi.n	8000f28 <__gnu_unwind_execute+0x1fc>
 8000f42:	2300      	movs	r3, #0
 8000f44:	9903      	ldr	r1, [sp, #12]
 8000f46:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8000f4a:	40a2      	lsls	r2, r4
 8000f4c:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8000f50:	188c      	adds	r4, r1, r2
 8000f52:	f8cd 9000 	str.w	r9, [sp]
 8000f56:	4619      	mov	r1, r3
 8000f58:	220d      	movs	r2, #13
 8000f5a:	4630      	mov	r0, r6
 8000f5c:	9403      	str	r4, [sp, #12]
 8000f5e:	f7ff faed 	bl	800053c <_Unwind_VRS_Set>
 8000f62:	e6ea      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f64:	4638      	mov	r0, r7
 8000f66:	f7ff feb5 	bl	8000cd4 <next_unwind_byte>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	0301      	lsls	r1, r0, #12
 8000f6e:	f000 000f 	and.w	r0, r0, #15
 8000f72:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f76:	18c2      	adds	r2, r0, r3
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f7ff fcad 	bl	80008dc <_Unwind_VRS_Pop>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	f47f af25 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000f88:	e6d7      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f7ff fea2 	bl	8000cd4 <next_unwind_byte>
 8000f90:	0301      	lsls	r1, r0, #12
 8000f92:	f000 000f 	and.w	r0, r0, #15
 8000f96:	2303      	movs	r3, #3
 8000f98:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8000f9c:	1c42      	adds	r2, r0, #1
 8000f9e:	e7eb      	b.n	8000f78 <__gnu_unwind_execute+0x24c>
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f7ff fe97 	bl	8000cd4 <next_unwind_byte>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	f43f af13 	beq.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fac:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000fb0:	f47f af0f 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f7ff fc8f 	bl	80008dc <_Unwind_VRS_Pop>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	f47f af07 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fc4:	e6b9      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f000 020f 	and.w	r2, r0, #15
 8000fcc:	3201      	adds	r2, #1
 8000fce:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	f7ff fc81 	bl	80008dc <_Unwind_VRS_Pop>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	f47f aef9 	bne.w	8000dd2 <__gnu_unwind_execute+0xa6>
 8000fe0:	e6ab      	b.n	8000d3a <__gnu_unwind_execute+0xe>
 8000fe2:	4638      	mov	r0, r7
 8000fe4:	f7ff fe76 	bl	8000cd4 <next_unwind_byte>
 8000fe8:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8000fec:	f000 030f 	and.w	r3, r0, #15
 8000ff0:	3210      	adds	r2, #16
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8000ff8:	e6e4      	b.n	8000dc4 <__gnu_unwind_execute+0x98>
 8000ffa:	bf00      	nop

08000ffc <__gnu_unwind_frame>:
 8000ffc:	b530      	push	{r4, r5, lr}
 8000ffe:	2403      	movs	r4, #3
 8001000:	460d      	mov	r5, r1
 8001002:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001004:	b085      	sub	sp, #20
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	f88d 400c 	strb.w	r4, [sp, #12]
 800100c:	79dc      	ldrb	r4, [r3, #7]
 800100e:	0212      	lsls	r2, r2, #8
 8001010:	3308      	adds	r3, #8
 8001012:	a901      	add	r1, sp, #4
 8001014:	4628      	mov	r0, r5
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	f88d 400d 	strb.w	r4, [sp, #13]
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	f7ff fe85 	bl	8000d2c <__gnu_unwind_execute>
 8001022:	b005      	add	sp, #20
 8001024:	bd30      	pop	{r4, r5, pc}
 8001026:	bf00      	nop

08001028 <_Unwind_GetRegionStart>:
 8001028:	b508      	push	{r3, lr}
 800102a:	f7ff fe7d 	bl	8000d28 <unwind_UCB_from_context>
 800102e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001030:	bd08      	pop	{r3, pc}
 8001032:	bf00      	nop

08001034 <_Unwind_GetLanguageSpecificData>:
 8001034:	b508      	push	{r3, lr}
 8001036:	f7ff fe77 	bl	8000d28 <unwind_UCB_from_context>
 800103a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800103c:	79c3      	ldrb	r3, [r0, #7]
 800103e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001042:	3008      	adds	r0, #8
 8001044:	bd08      	pop	{r3, pc}
 8001046:	bf00      	nop

08001048 <_Unwind_GetTextRelBase>:
 8001048:	b508      	push	{r3, lr}
 800104a:	f001 fc61 	bl	8002910 <abort>
 800104e:	bf00      	nop

08001050 <_Unwind_GetDataRelBase>:
 8001050:	b508      	push	{r3, lr}
 8001052:	f7ff fff9 	bl	8001048 <_Unwind_GetTextRelBase>
 8001056:	bf00      	nop

08001058 <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001058:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <MX_CAN_Init+0x40>)
{
 800105e:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8001060:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001064:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001066:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800106c:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 800106e:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8001072:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001074:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 8001076:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001078:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800107a:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800107c:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800107e:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001080:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001082:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001084:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001086:	f000 fac1 	bl	800160c <HAL_CAN_Init>
 800108a:	b118      	cbz	r0, 8001094 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 800108c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001090:	f000 b9b9 	b.w	8001406 <Error_Handler>
 8001094:	bd08      	pop	{r3, pc}
 8001096:	bf00      	nop
 8001098:	2000008c 	.word	0x2000008c
 800109c:	40006400 	.word	0x40006400

080010a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010a0:	b510      	push	{r4, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	2210      	movs	r2, #16
 80010a8:	2100      	movs	r1, #0
 80010aa:	a802      	add	r0, sp, #8
 80010ac:	f001 fc28 	bl	8002900 <memset>
  if(canHandle->Instance==CAN1)
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_CAN_MspInit+0x98>)
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d13d      	bne.n	8001134 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010b8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80010bc:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80010be:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010ca:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80010e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f000 fdeb 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80010ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80010fa:	a902      	add	r1, sp, #8
 80010fc:	480f      	ldr	r0, [pc, #60]	; (800113c <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8001100:	f000 fde0 	bl	8001cc4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2013      	movs	r0, #19
 8001108:	4611      	mov	r1, r2
 800110a:	f000 fd83 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800110e:	2013      	movs	r0, #19
 8001110:	f000 fdb4 	bl	8001c7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2014      	movs	r0, #20
 8001118:	4611      	mov	r1, r2
 800111a:	f000 fd7b 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800111e:	2014      	movs	r0, #20
 8001120:	f000 fdac 	bl	8001c7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2015      	movs	r0, #21
 8001128:	4611      	mov	r1, r2
 800112a:	f000 fd73 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800112e:	2015      	movs	r0, #21
 8001130:	f000 fda4 	bl	8001c7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001134:	b006      	add	sp, #24
 8001136:	bd10      	pop	{r4, pc}
 8001138:	40006400 	.word	0x40006400
 800113c:	40010800 	.word	0x40010800

08001140 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	4908      	ldr	r1, [pc, #32]	; (8001164 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001144:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 8001146:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001148:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 800114a:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 800114c:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 800114e:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8001150:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001152:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8001154:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001158:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 800115a:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 800115c:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 800115e:	f000 bad0 	b.w	8001702 <HAL_CAN_ConfigFilter>
 8001162:	bf00      	nop
 8001164:	200000b4 	.word	0x200000b4
 8001168:	2000008c 	.word	0x2000008c

0800116c <hal_can_send>:

void hal_can_send(uint8_t data){
	hal_can_messageTx  hal_message;
	hal_message.data[0] = data;
	hal_message.header.DLC = 1;
	hal_message.header.RTR = CAN_RTR_DATA;
 800116c:	2300      	movs	r3, #0
	hal_message.header.DLC = 1;
 800116e:	2201      	movs	r2, #1
	hal_message.header.IDE  = CAN_ID_STD;
	hal_message.header.StdId = 0x21E;
 8001170:	f240 211e 	movw	r1, #542	; 0x21e
void hal_can_send(uint8_t data){
 8001174:	b500      	push	{lr}
 8001176:	b08b      	sub	sp, #44	; 0x2c
	hal_message.data[0] = data;
 8001178:	f88d 0020 	strb.w	r0, [sp, #32]
	hal_message.header.DLC = 1;
 800117c:	9205      	str	r2, [sp, #20]
	hal_message.header.RTR = CAN_RTR_DATA;
 800117e:	9304      	str	r3, [sp, #16]
	hal_message.header.IDE  = CAN_ID_STD;
 8001180:	9303      	str	r3, [sp, #12]
	hal_message.header.StdId = 0x21E;
 8001182:	9101      	str	r1, [sp, #4]
	hal_message.header.ExtId = 0x01;
 8001184:	9202      	str	r2, [sp, #8]
	hal_message.header.TransmitGlobalTime = DISABLE;
 8001186:	f88d 3018 	strb.w	r3, [sp, #24]

	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
 800118a:	aa08      	add	r2, sp, #32
 800118c:	ab07      	add	r3, sp, #28
 800118e:	a901      	add	r1, sp, #4
 8001190:	4805      	ldr	r0, [pc, #20]	; (80011a8 <hal_can_send+0x3c>)
 8001192:	f000 fb4d 	bl	8001830 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4804      	ldr	r0, [pc, #16]	; (80011ac <hal_can_send+0x40>)
 800119c:	f000 fe79 	bl	8001e92 <HAL_GPIO_TogglePin>
}
 80011a0:	b00b      	add	sp, #44	; 0x2c
 80011a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011a6:	bf00      	nop
 80011a8:	2000008c 	.word	0x2000008c
 80011ac:	40011000 	.word	0x40011000

080011b0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 80011b0:	b500      	push	{lr}
 80011b2:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 80011b4:	ab08      	add	r3, sp, #32
 80011b6:	466a      	mov	r2, sp
 80011b8:	2100      	movs	r1, #0
 80011ba:	f000 fb87 	bl	80018cc <HAL_CAN_GetRxMessage>
			&hal_message.header,
			hal_message.data );


	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80011be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80011c4:	f000 fe65 	bl	8001e92 <HAL_GPIO_TogglePin>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 80011c8:	b00b      	add	sp, #44	; 0x2c
 80011ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ce:	bf00      	nop
 80011d0:	40011000 	.word	0x40011000

080011d4 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	2210      	movs	r2, #16
{
 80011d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011da:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	eb0d 0002 	add.w	r0, sp, r2
 80011e0:	2100      	movs	r1, #0
 80011e2:	f001 fb8d 	bl	8002900 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e6:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011e8:	4f3c      	ldr	r7, [pc, #240]	; (80012dc <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011ec:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	619a      	str	r2, [r3, #24]
 80011f4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011f6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fa:	f002 0210 	and.w	r2, r2, #16
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001204:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001206:	f042 0220 	orr.w	r2, r2, #32
 800120a:	619a      	str	r2, [r3, #24]
 800120c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800120e:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001210:	f002 0220 	and.w	r2, r2, #32
 8001214:	9201      	str	r2, [sp, #4]
 8001216:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	f042 0204 	orr.w	r2, r2, #4
 8001220:	619a      	str	r2, [r3, #24]
 8001222:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8001224:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	f002 0204 	and.w	r2, r2, #4
 800122c:	9202      	str	r2, [sp, #8]
 800122e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80012f0 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	f042 0208 	orr.w	r2, r2, #8
 800123a:	619a      	str	r2, [r3, #24]
 800123c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	9303      	str	r3, [sp, #12]
 8001246:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001248:	f000 fe1e 	bl	8001e88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 800124c:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001250:	a904      	add	r1, sp, #16
 8001252:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8001254:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001258:	f000 fd34 	bl	8001cc4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	a904      	add	r1, sp, #16
 800125e:	4820      	ldr	r0, [pc, #128]	; (80012e0 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001260:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f000 fd2e 	bl	8001cc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001268:	f248 73fd 	movw	r3, #34813	; 0x87fd
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	a904      	add	r1, sp, #16
 800126e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001270:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f000 fd26 	bl	8001cc4 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127a:	a904      	add	r1, sp, #16
 800127c:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8001280:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001286:	f000 fd1d 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	a904      	add	r1, sp, #16
 8001290:	4815      	ldr	r0, [pc, #84]	; (80012e8 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8001292:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001294:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f000 fd15 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 800129a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800129e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	a904      	add	r1, sp, #16
 80012a4:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	f000 fd09 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012b4:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80012b6:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012b8:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80012ba:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80012be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c2:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80012c4:	4632      	mov	r2, r6
 80012c6:	f000 fca5 	bl	8001c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80012ca:	4628      	mov	r0, r5
 80012cc:	f000 fcd6 	bl	8001c7c <HAL_NVIC_EnableIRQ>

}
 80012d0:	b009      	add	sp, #36	; 0x24
 80012d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40011000 	.word	0x40011000
 80012e0:	40011400 	.word	0x40011400
 80012e4:	10110000 	.word	0x10110000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40010000 	.word	0x40010000
 80012f0:	40010800 	.word	0x40010800

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fa:	f000 f963 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fe:	f000 f83d 	bl	800137c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001302:	f7ff ff67 	bl	80011d4 <MX_GPIO_Init>
  MX_CAN_Init();
 8001306:	f7ff fea7 	bl	8001058 <MX_CAN_Init>
  MX_TIM3_Init();
 800130a:	f000 f8d5 	bl	80014b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hal_can_filter_init();
 800130e:	f7ff ff17 	bl	8001140 <hal_can_filter_init>

  HAL_CAN_Start(&hcan);
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <main+0x7c>)
 8001314:	f000 fa61 	bl	80017da <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 8001318:	2102      	movs	r1, #2
 800131a:	4815      	ldr	r0, [pc, #84]	; (8001370 <main+0x7c>)
 800131c:	f000 fb4c 	bl	80019b8 <HAL_CAN_ActivateNotification>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <main+0x46>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	480f      	ldr	r0, [pc, #60]	; (8001374 <main+0x80>)
 8001336:	f000 fdac 	bl	8001e92 <HAL_GPIO_TogglePin>
  }

  uint8_t data = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint32_t i = 0; i <150000; i ++){
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <main+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d8f9      	bhi.n	800133e <main+0x4a>
		 if (i ==0){
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10b      	bne.n	8001368 <main+0x74>
			 if(data>10) data =1;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b0a      	cmp	r3, #10
 8001354:	dd01      	ble.n	800135a <main+0x66>
 8001356:	2301      	movs	r3, #1
 8001358:	71fb      	strb	r3, [r7, #7]
			 hal_can_send(data);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff05 	bl	800116c <hal_can_send>
			 data++;
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	3301      	adds	r3, #1
 8001366:	71fb      	strb	r3, [r7, #7]
	 for(uint32_t i = 0; i <150000; i ++){
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	e7e8      	b.n	8001342 <main+0x4e>
 8001370:	2000008c 	.word	0x2000008c
 8001374:	40011000 	.word	0x40011000
 8001378:	000249ef 	.word	0x000249ef

0800137c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	; 0x40
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f001 fab8 	bl	8002900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0318 	add.w	r3, r7, #24
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fd84 	bl	8001ec0 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 80013c8:	f000 f81d 	bl	8001406 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 ff45 	bl	8002274 <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 80013fa:	f000 f804 	bl	8001406 <Error_Handler>
  }
}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	; 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_MspInit+0x3c>)
{
 8001416:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	619a      	str	r2, [r3, #24]
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	f002 0201 	and.w	r2, r2, #1
 8001426:	9200      	str	r2, [sp, #0]
 8001428:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	69da      	ldr	r2, [r3, #28]
 800142c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001430:	61da      	str	r2, [r3, #28]
 8001432:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143e:	6853      	ldr	r3, [r2, #4]
 8001440:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001448:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	b002      	add	sp, #8
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000

08001458 <NMI_Handler>:
 8001458:	4770      	bx	lr

0800145a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145a:	e7fe      	b.n	800145a <HardFault_Handler>

0800145c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800145c:	e7fe      	b.n	800145c <MemManage_Handler>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	e7fe      	b.n	800145e <BusFault_Handler>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler>

08001462 <SVC_Handler>:
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	4770      	bx	lr

08001468 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 b8be 	b.w	80015e8 <HAL_IncTick>

0800146c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800146c:	2002      	movs	r0, #2
 800146e:	f000 bd1b 	b.w	8001ea8 <HAL_GPIO_EXTI_IRQHandler>
	...

08001474 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001474:	4801      	ldr	r0, [pc, #4]	; (800147c <CAN1_RX1_IRQHandler+0x8>)
 8001476:	f000 babc 	b.w	80019f2 <HAL_CAN_IRQHandler>
 800147a:	bf00      	nop
 800147c:	2000008c 	.word	0x2000008c

08001480 <USB_LP_CAN1_RX0_IRQHandler>:
 8001480:	f7ff bff8 	b.w	8001474 <CAN1_RX1_IRQHandler>

08001484 <USB_HP_CAN1_TX_IRQHandler>:
 8001484:	f7ff bff6 	b.w	8001474 <CAN1_RX1_IRQHandler>

08001488 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001488:	4801      	ldr	r0, [pc, #4]	; (8001490 <TIM3_IRQHandler+0x8>)
 800148a:	f000 bf96 	b.w	80023ba <HAL_TIM_IRQHandler>
 800148e:	bf00      	nop
 8001490:	200000dc 	.word	0x200000dc

08001494 <_getpid>:
 8001494:	2001      	movs	r0, #1
 8001496:	4770      	bx	lr

08001498 <_kill>:
 8001498:	b508      	push	{r3, lr}
 800149a:	f001 fa07 	bl	80028ac <__errno>
 800149e:	2316      	movs	r3, #22
 80014a0:	6003      	str	r3, [r0, #0]
 80014a2:	f04f 30ff 	mov.w	r0, #4294967295
 80014a6:	bd08      	pop	{r3, pc}

080014a8 <_exit>:
 80014a8:	b508      	push	{r3, lr}
 80014aa:	f001 f9ff 	bl	80028ac <__errno>
 80014ae:	2316      	movs	r3, #22
 80014b0:	6003      	str	r3, [r0, #0]
 80014b2:	e7fe      	b.n	80014b2 <_exit+0xa>

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	4770      	bx	lr
	...

080014b8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014b8:	b510      	push	{r4, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014bc:	2210      	movs	r2, #16
 80014be:	2100      	movs	r1, #0
 80014c0:	a803      	add	r0, sp, #12
 80014c2:	f001 fa1d 	bl	8002900 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014c6:	2214      	movs	r2, #20
 80014c8:	2100      	movs	r1, #0
 80014ca:	a807      	add	r0, sp, #28
 80014cc:	f001 fa18 	bl	8002900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d0:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 64;
 80014d2:	2240      	movs	r2, #64	; 0x40
  htim3.Instance = TIM3;
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <MX_TIM3_Init+0x80>)
  htim3.Init.Prescaler = 64;
 80014d6:	4919      	ldr	r1, [pc, #100]	; (800153c <MX_TIM3_Init+0x84>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9302      	str	r3, [sp, #8]
  htim3.Init.Prescaler = 64;
 80014dc:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 80014e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 80014ea:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ec:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ee:	f001 f83f 	bl	8002570 <HAL_TIM_Base_Init>
 80014f2:	b108      	cbz	r0, 80014f8 <MX_TIM3_Init+0x40>
  {
    Error_Handler();
 80014f4:	f7ff ff87 	bl	8001406 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014fc:	a903      	add	r1, sp, #12
 80014fe:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_TIM3_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001502:	f001 f86b 	bl	80025dc <HAL_TIM_ConfigClockSource>
 8001506:	b108      	cbz	r0, 800150c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001508:	f7ff ff7d 	bl	8001406 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800150c:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800150e:	a907      	add	r1, sp, #28
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <MX_TIM3_Init+0x80>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001512:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001514:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001516:	f001 f947 	bl	80027a8 <HAL_TIM_SlaveConfigSynchro>
 800151a:	b108      	cbz	r0, 8001520 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800151c:	f7ff ff73 	bl	8001406 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001520:	a901      	add	r1, sp, #4
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM3_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001528:	f001 f966 	bl	80027f8 <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	b108      	cbz	r0, 8001532 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800152e:	f7ff ff6a 	bl	8001406 <Error_Handler>
  }

}
 8001532:	b00c      	add	sp, #48	; 0x30
 8001534:	bd10      	pop	{r4, pc}
 8001536:	bf00      	nop
 8001538:	200000dc 	.word	0x200000dc
 800153c:	40000400 	.word	0x40000400

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 8001542:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_TIM_Base_MspInit+0x38>)
 8001544:	6802      	ldr	r2, [r0, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d112      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154a:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800154e:	69da      	ldr	r2, [r3, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001550:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001552:	f042 0202 	orr.w	r2, r2, #2
 8001556:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800155c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001566:	f000 fb55 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800156a:	201d      	movs	r0, #29
 800156c:	f000 fb86 	bl	8001c7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001570:	b003      	add	sp, #12
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
 8001576:	bf00      	nop
 8001578:	40000400 	.word	0x40000400

0800157c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800157c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_InitTick+0x3c>)
{
 8001580:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001582:	7818      	ldrb	r0, [r3, #0]
 8001584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001588:	fbb3 f3f0 	udiv	r3, r3, r0
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_InitTick+0x40>)
 800158e:	6810      	ldr	r0, [r2, #0]
 8001590:	fbb0 f0f3 	udiv	r0, r0, r3
 8001594:	f000 fb80 	bl	8001c98 <HAL_SYSTICK_Config>
 8001598:	4604      	mov	r4, r0
 800159a:	b958      	cbnz	r0, 80015b4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159c:	2d0f      	cmp	r5, #15
 800159e:	d809      	bhi.n	80015b4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	4602      	mov	r2, r0
 80015a2:	4629      	mov	r1, r5
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 fb34 	bl	8001c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_InitTick+0x44>)
 80015ae:	4620      	mov	r0, r4
 80015b0:	601d      	str	r5, [r3, #0]
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000008 	.word	0x20000008

080015c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x20>)
{
 80015c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d2:	f000 fb0d 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff ffd0 	bl	800157c <HAL_InitTick>
  HAL_MspInit();
 80015dc:	f7ff ff1a 	bl	8001414 <HAL_MspInit>
}
 80015e0:	2000      	movs	r0, #0
 80015e2:	bd08      	pop	{r3, pc}
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015e8:	4a03      	ldr	r2, [pc, #12]	; (80015f8 <HAL_IncTick+0x10>)
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_IncTick+0x14>)
 80015ec:	6811      	ldr	r1, [r2, #0]
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	440b      	add	r3, r1
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000124 	.word	0x20000124
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <HAL_GetTick+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000124 	.word	0x20000124

0800160c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800160c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800160e:	4604      	mov	r4, r0
 8001610:	2800      	cmp	r0, #0
 8001612:	d06e      	beq.n	80016f2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001614:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001618:	b90b      	cbnz	r3, 800161e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800161a:	f7ff fd41 	bl	80010a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	f023 0302 	bic.w	r3, r3, #2
 8001626:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001628:	f7ff ffea 	bl	8001600 <HAL_GetTick>
 800162c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	0791      	lsls	r1, r2, #30
 8001634:	d451      	bmi.n	80016da <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163e:	f7ff ffdf 	bl	8001600 <HAL_GetTick>
 8001642:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001644:	6823      	ldr	r3, [r4, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	07d2      	lsls	r2, r2, #31
 800164a:	d554      	bpl.n	80016f6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800164c:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800164e:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001650:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	bf0c      	ite	eq
 8001656:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800165a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800165e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001660:	7e62      	ldrb	r2, [r4, #25]
 8001662:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	bf0c      	ite	eq
 8001668:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800166c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001670:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001672:	7ea2      	ldrb	r2, [r4, #26]
 8001674:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	bf0c      	ite	eq
 800167a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167e:	f022 0220 	bicne.w	r2, r2, #32
 8001682:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001684:	7ee2      	ldrb	r2, [r4, #27]
 8001686:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	bf0c      	ite	eq
 800168c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001690:	f042 0210 	orrne.w	r2, r2, #16
 8001694:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001696:	7f22      	ldrb	r2, [r4, #28]
 8001698:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	bf0c      	ite	eq
 800169e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a2:	f022 0208 	bicne.w	r2, r2, #8
 80016a6:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016a8:	7f62      	ldrb	r2, [r4, #29]
 80016aa:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	bf0c      	ite	eq
 80016b0:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016b4:	f022 0204 	bicne.w	r2, r2, #4
 80016b8:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016ba:	68e1      	ldr	r1, [r4, #12]
 80016bc:	68a2      	ldr	r2, [r4, #8]
 80016be:	430a      	orrs	r2, r1
 80016c0:	6921      	ldr	r1, [r4, #16]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	6961      	ldr	r1, [r4, #20]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	6861      	ldr	r1, [r4, #4]
 80016ca:	3901      	subs	r1, #1
 80016cc:	430a      	orrs	r2, r1
 80016ce:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016d0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016d2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80016d4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80016d8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016da:	f7ff ff91 	bl	8001600 <HAL_GetTick>
 80016de:	1b40      	subs	r0, r0, r5
 80016e0:	280a      	cmp	r0, #10
 80016e2:	d9a4      	bls.n	800162e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ea:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ec:	2305      	movs	r3, #5
 80016ee:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
}
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f6:	f7ff ff83 	bl	8001600 <HAL_GetTick>
 80016fa:	1b40      	subs	r0, r0, r5
 80016fc:	280a      	cmp	r0, #10
 80016fe:	d9a1      	bls.n	8001644 <HAL_CAN_Init+0x38>
 8001700:	e7f0      	b.n	80016e4 <HAL_CAN_Init+0xd8>

08001702 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001702:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8001706:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8001708:	3b01      	subs	r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d85f      	bhi.n	80017ce <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800170e:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8001710:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001712:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001714:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001720:	f000 021f 	and.w	r2, r0, #31
 8001724:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001728:	43d4      	mvns	r4, r2
 800172a:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 800172e:	4025      	ands	r5, r4
 8001730:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001734:	69cd      	ldr	r5, [r1, #28]
 8001736:	bb85      	cbnz	r5, 800179a <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001738:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800173c:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800173e:	4025      	ands	r5, r4
 8001740:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001744:	888d      	ldrh	r5, [r1, #4]
 8001746:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800174a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800174e:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001752:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001754:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001756:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800175a:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800175e:	6988      	ldr	r0, [r1, #24]
 8001760:	bb68      	cbnz	r0, 80017be <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001762:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8001766:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001768:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800176c:	6908      	ldr	r0, [r1, #16]
 800176e:	bb50      	cbnz	r0, 80017c6 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001770:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8001774:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001776:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800177a:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 800177c:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800177e:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001780:	bf02      	ittt	eq
 8001782:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8001786:	430a      	orreq	r2, r1
 8001788:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800178c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8001798:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800179a:	2d01      	cmp	r5, #1
 800179c:	d1df      	bne.n	800175e <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800179e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017a2:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80017a4:	4315      	orrs	r5, r2
 80017a6:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017aa:	888d      	ldrh	r5, [r1, #4]
 80017ac:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80017b0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017b4:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017b8:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80017ba:	898d      	ldrh	r5, [r1, #12]
 80017bc:	e7cb      	b.n	8001756 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017be:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80017c2:	4310      	orrs	r0, r2
 80017c4:	e7d0      	b.n	8001768 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017c6:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80017ca:	4310      	orrs	r0, r2
 80017cc:	e7d3      	b.n	8001776 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
  }
}
 80017d8:	bd70      	pop	{r4, r5, r6, pc}

080017da <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017da:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017dc:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80017e0:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d11f      	bne.n	8001826 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017e6:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017e8:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017ea:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017f6:	f7ff ff03 	bl	8001600 <HAL_GetTick>
 80017fa:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017fc:	6823      	ldr	r3, [r4, #0]
 80017fe:	6858      	ldr	r0, [r3, #4]
 8001800:	f010 0001 	ands.w	r0, r0, #1
 8001804:	d101      	bne.n	800180a <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001806:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001808:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800180a:	f7ff fef9 	bl	8001600 <HAL_GetTick>
 800180e:	1b40      	subs	r0, r0, r5
 8001810:	280a      	cmp	r0, #10
 8001812:	d9f3      	bls.n	80017fc <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001814:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181a:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800181c:	2305      	movs	r3, #5
 800181e:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8001822:	2001      	movs	r0, #1
  }
}
 8001824:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001826:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001828:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800182c:	6243      	str	r3, [r0, #36]	; 0x24
 800182e:	e7f8      	b.n	8001822 <HAL_CAN_Start+0x48>

08001830 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001832:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001836:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001838:	3d01      	subs	r5, #1
 800183a:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800183c:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800183e:	d841      	bhi.n	80018c4 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001840:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001844:	d03a      	beq.n	80018bc <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001846:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800184a:	2c03      	cmp	r4, #3
 800184c:	f04f 0501 	mov.w	r5, #1
 8001850:	d105      	bne.n	800185e <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001858:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
  }
}
 800185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800185e:	40a5      	lsls	r5, r4
 8001860:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001862:	6888      	ldr	r0, [r1, #8]
 8001864:	68cf      	ldr	r7, [r1, #12]
 8001866:	f104 0318 	add.w	r3, r4, #24
 800186a:	bb10      	cbnz	r0, 80018b2 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800186c:	6808      	ldr	r0, [r1, #0]
 800186e:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001876:	6908      	ldr	r0, [r1, #16]
 8001878:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 800187a:	7d09      	ldrb	r1, [r1, #20]
 800187c:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800187e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001882:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001884:	bf08      	it	eq
 8001886:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800188a:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800188c:	bf04      	itt	eq
 800188e:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001892:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001896:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8001898:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800189a:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018a4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80018a8:	f042 0201 	orr.w	r2, r2, #1
 80018ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80018b2:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80018b4:	4338      	orrs	r0, r7
 80018b6:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 80018ba:	e7da      	b.n	8001872 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c2:	e7c9      	b.n	8001858 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ca:	e7c5      	b.n	8001858 <HAL_CAN_AddTxMessage+0x28>

080018cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ce:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d2:	3c01      	subs	r4, #1
 80018d4:	2c01      	cmp	r4, #1
 80018d6:	d86b      	bhi.n	80019b0 <HAL_CAN_GetRxMessage+0xe4>
 80018d8:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018da:	b941      	cbnz	r1, 80018ee <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018dc:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018de:	07a4      	lsls	r4, r4, #30
 80018e0:	d107      	bne.n	80018f2 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018e8:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80018ea:	2001      	movs	r0, #1
  }
}
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018ee:	6934      	ldr	r4, [r6, #16]
 80018f0:	e7f5      	b.n	80018de <HAL_CAN_GetRxMessage+0x12>
 80018f2:	010c      	lsls	r4, r1, #4
 80018f4:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018f6:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80018fa:	f007 0704 	and.w	r7, r7, #4
 80018fe:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001900:	2f00      	cmp	r7, #0
 8001902:	d14b      	bne.n	800199c <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001904:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8001908:	0d7f      	lsrs	r7, r7, #21
 800190a:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800190c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001910:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001912:	f007 0702 	and.w	r7, r7, #2
 8001916:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001918:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 800191c:	f007 070f 	and.w	r7, r7, #15
 8001920:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001922:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001926:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800192a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800192e:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001930:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001932:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001934:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8001938:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	4422      	add	r2, r4
 800193e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8001942:	0a12      	lsrs	r2, r2, #8
 8001944:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001946:	6802      	ldr	r2, [r0, #0]
 8001948:	4422      	add	r2, r4
 800194a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800194e:	0c12      	lsrs	r2, r2, #16
 8001950:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001952:	6802      	ldr	r2, [r0, #0]
 8001954:	4422      	add	r2, r4
 8001956:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800195a:	0e12      	lsrs	r2, r2, #24
 800195c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800195e:	6802      	ldr	r2, [r0, #0]
 8001960:	4422      	add	r2, r4
 8001962:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001966:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001968:	6802      	ldr	r2, [r0, #0]
 800196a:	4422      	add	r2, r4
 800196c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8001970:	0a12      	lsrs	r2, r2, #8
 8001972:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001974:	6802      	ldr	r2, [r0, #0]
 8001976:	4422      	add	r2, r4
 8001978:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800197c:	0c12      	lsrs	r2, r2, #16
 800197e:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001980:	6802      	ldr	r2, [r0, #0]
 8001982:	4414      	add	r4, r2
 8001984:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8001988:	0e12      	lsrs	r2, r2, #24
 800198a:	71da      	strb	r2, [r3, #7]
 800198c:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800198e:	b951      	cbnz	r1, 80019a6 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8001998:	2000      	movs	r0, #0
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800199c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80019a0:	08ff      	lsrs	r7, r7, #3
 80019a2:	6057      	str	r7, [r2, #4]
 80019a4:	e7b2      	b.n	800190c <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019a6:	691a      	ldr	r2, [r3, #16]
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	611a      	str	r2, [r3, #16]
 80019ae:	e7f3      	b.n	8001998 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b6:	e797      	b.n	80018e8 <HAL_CAN_GetRxMessage+0x1c>

080019b8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80019b8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019bc:	3b01      	subs	r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d805      	bhi.n	80019ce <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019c2:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80019c4:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019c6:	6953      	ldr	r3, [r2, #20]
 80019c8:	4319      	orrs	r1, r3
 80019ca:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80019cc:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80019d6:	2001      	movs	r0, #1
  }
}
 80019d8:	4770      	bx	lr

080019da <HAL_CAN_TxMailbox0CompleteCallback>:
 80019da:	4770      	bx	lr

080019dc <HAL_CAN_TxMailbox1CompleteCallback>:
 80019dc:	4770      	bx	lr

080019de <HAL_CAN_TxMailbox2CompleteCallback>:
 80019de:	4770      	bx	lr

080019e0 <HAL_CAN_TxMailbox0AbortCallback>:
 80019e0:	4770      	bx	lr

080019e2 <HAL_CAN_TxMailbox1AbortCallback>:
 80019e2:	4770      	bx	lr

080019e4 <HAL_CAN_TxMailbox2AbortCallback>:
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_RxFifo0FullCallback>:
 80019e6:	4770      	bx	lr

080019e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_RxFifo1FullCallback>:
 80019ea:	4770      	bx	lr

080019ec <HAL_CAN_SleepCallback>:
 80019ec:	4770      	bx	lr

080019ee <HAL_CAN_WakeUpFromRxMsgCallback>:
 80019ee:	4770      	bx	lr

080019f0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_IRQHandler>:
{
 80019f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019f6:	6803      	ldr	r3, [r0, #0]
{
 80019f8:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019fa:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019fc:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a00:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a04:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a06:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a0a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a0e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a12:	d022      	beq.n	8001a5a <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a14:	f017 0401 	ands.w	r4, r7, #1
 8001a18:	d007      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a1a:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a1c:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a1e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a20:	f140 80a3 	bpl.w	8001b6a <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a24:	f7ff ffd9 	bl	80019da <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a28:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a2a:	05fb      	lsls	r3, r7, #23
 8001a2c:	d509      	bpl.n	8001a42 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a32:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a34:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a36:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a38:	f140 80a5 	bpl.w	8001b86 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a3c:	4628      	mov	r0, r5
 8001a3e:	f7ff ffcd 	bl	80019dc <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a42:	03fb      	lsls	r3, r7, #15
 8001a44:	d509      	bpl.n	8001a5a <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a4a:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a4c:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a4e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a50:	f140 80a7 	bpl.w	8001ba2 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7ff ffc2 	bl	80019de <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a5a:	0733      	lsls	r3, r6, #28
 8001a5c:	d507      	bpl.n	8001a6e <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a5e:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a62:	bf1f      	itttt	ne
 8001a64:	2210      	movne	r2, #16
 8001a66:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a68:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a6c:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a6e:	0777      	lsls	r7, r6, #29
 8001a70:	d508      	bpl.n	8001a84 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a72:	f01b 0f08 	tst.w	fp, #8
 8001a76:	d005      	beq.n	8001a84 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a78:	2208      	movs	r2, #8
 8001a7a:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a7c:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a7e:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a80:	f7ff ffb1 	bl	80019e6 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a84:	07b0      	lsls	r0, r6, #30
 8001a86:	d506      	bpl.n	8001a96 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a88:	682b      	ldr	r3, [r5, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0799      	lsls	r1, r3, #30
 8001a8e:	d002      	beq.n	8001a96 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a90:	4628      	mov	r0, r5
 8001a92:	f7ff fb8d 	bl	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a96:	0672      	lsls	r2, r6, #25
 8001a98:	d507      	bpl.n	8001aaa <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a9a:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a9e:	bf1f      	itttt	ne
 8001aa0:	2210      	movne	r2, #16
 8001aa2:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aa4:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001aa8:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001aaa:	06b3      	lsls	r3, r6, #26
 8001aac:	d508      	bpl.n	8001ac0 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001aae:	f01a 0f08 	tst.w	sl, #8
 8001ab2:	d005      	beq.n	8001ac0 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ab8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aba:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001abc:	f7ff ff95 	bl	80019ea <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ac0:	06f7      	lsls	r7, r6, #27
 8001ac2:	d506      	bpl.n	8001ad2 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ac4:	682b      	ldr	r3, [r5, #0]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	0798      	lsls	r0, r3, #30
 8001aca:	d002      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001acc:	4628      	mov	r0, r5
 8001ace:	f7ff ff8b 	bl	80019e8 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ad2:	03b1      	lsls	r1, r6, #14
 8001ad4:	d508      	bpl.n	8001ae8 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ad6:	f019 0f10 	tst.w	r9, #16
 8001ada:	d005      	beq.n	8001ae8 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001adc:	2210      	movs	r2, #16
 8001ade:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8001ae0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ae2:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001ae4:	f7ff ff82 	bl	80019ec <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001ae8:	03f2      	lsls	r2, r6, #15
 8001aea:	d508      	bpl.n	8001afe <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001aec:	f019 0f08 	tst.w	r9, #8
 8001af0:	d005      	beq.n	8001afe <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001af2:	2208      	movs	r2, #8
 8001af4:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af6:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001af8:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001afa:	f7ff ff78 	bl	80019ee <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001afe:	0433      	lsls	r3, r6, #16
 8001b00:	d52a      	bpl.n	8001b58 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b02:	f019 0f04 	tst.w	r9, #4
 8001b06:	682a      	ldr	r2, [r5, #0]
 8001b08:	d024      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b0a:	05f7      	lsls	r7, r6, #23
 8001b0c:	d504      	bpl.n	8001b18 <HAL_CAN_IRQHandler+0x126>
 8001b0e:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b12:	bf18      	it	ne
 8001b14:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b18:	05b0      	lsls	r0, r6, #22
 8001b1a:	d504      	bpl.n	8001b26 <HAL_CAN_IRQHandler+0x134>
 8001b1c:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b20:	bf18      	it	ne
 8001b22:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b26:	0571      	lsls	r1, r6, #21
 8001b28:	d504      	bpl.n	8001b34 <HAL_CAN_IRQHandler+0x142>
 8001b2a:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b2e:	bf18      	it	ne
 8001b30:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b34:	0533      	lsls	r3, r6, #20
 8001b36:	d50d      	bpl.n	8001b54 <HAL_CAN_IRQHandler+0x162>
 8001b38:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8001b3c:	d00a      	beq.n	8001b54 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8001b3e:	2b30      	cmp	r3, #48	; 0x30
 8001b40:	d04c      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x1ea>
 8001b42:	d83c      	bhi.n	8001bbe <HAL_CAN_IRQHandler+0x1cc>
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d043      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1de>
 8001b48:	2b20      	cmp	r3, #32
 8001b4a:	d044      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b4c:	6993      	ldr	r3, [r2, #24]
 8001b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b52:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b54:	2304      	movs	r3, #4
 8001b56:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001b58:	b12c      	cbz	r4, 8001b66 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8001b5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001b5c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8001b5e:	431c      	orrs	r4, r3
 8001b60:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8001b62:	f7ff ff45 	bl	80019f0 <HAL_CAN_ErrorCallback>
 8001b66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b6a:	077a      	lsls	r2, r7, #29
 8001b6c:	d405      	bmi.n	8001b7a <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b6e:	f017 0408 	ands.w	r4, r7, #8
 8001b72:	d105      	bne.n	8001b80 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b74:	f7ff ff34 	bl	80019e0 <HAL_CAN_TxMailbox0AbortCallback>
 8001b78:	e757      	b.n	8001a2a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b7a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001b7e:	e754      	b.n	8001a2a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b80:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001b84:	e751      	b.n	8001a2a <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b86:	0579      	lsls	r1, r7, #21
 8001b88:	d502      	bpl.n	8001b90 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b8a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8001b8e:	e758      	b.n	8001a42 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b90:	053a      	lsls	r2, r7, #20
 8001b92:	d502      	bpl.n	8001b9a <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b94:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001b98:	e753      	b.n	8001a42 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b9a:	4628      	mov	r0, r5
 8001b9c:	f7ff ff21 	bl	80019e2 <HAL_CAN_TxMailbox1AbortCallback>
 8001ba0:	e74f      	b.n	8001a42 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ba2:	0379      	lsls	r1, r7, #13
 8001ba4:	d502      	bpl.n	8001bac <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ba6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001baa:	e756      	b.n	8001a5a <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bac:	033a      	lsls	r2, r7, #12
 8001bae:	d502      	bpl.n	8001bb6 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bb0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8001bb4:	e751      	b.n	8001a5a <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7ff ff14 	bl	80019e4 <HAL_CAN_TxMailbox2AbortCallback>
 8001bbc:	e74d      	b.n	8001a5a <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8001bbe:	2b50      	cmp	r3, #80	; 0x50
 8001bc0:	d00f      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x1f0>
 8001bc2:	2b60      	cmp	r3, #96	; 0x60
 8001bc4:	d010      	beq.n	8001be8 <HAL_CAN_IRQHandler+0x1f6>
 8001bc6:	2b40      	cmp	r3, #64	; 0x40
 8001bc8:	d1c0      	bne.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8001bce:	e7bd      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001bd0:	f044 0408 	orr.w	r4, r4, #8
            break;
 8001bd4:	e7ba      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bd6:	f044 0410 	orr.w	r4, r4, #16
            break;
 8001bda:	e7b7      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bdc:	f044 0420 	orr.w	r4, r4, #32
            break;
 8001be0:	e7b4      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001be2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8001be6:	e7b1      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001be8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8001bec:	e7ae      	b.n	8001b4c <HAL_CAN_IRQHandler+0x15a>
	...

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bf6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001c0a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001c0c:	60d3      	str	r3, [r2, #12]
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c16:	b530      	push	{r4, r5, lr}
 8001c18:	68dc      	ldr	r4, [r3, #12]
 8001c1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	bf28      	it	cs
 8001c28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c30:	bf98      	it	ls
 8001c32:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	fa05 f303 	lsl.w	r3, r5, r3
 8001c38:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3c:	bf88      	it	hi
 8001c3e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4019      	ands	r1, r3
 8001c42:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	fa05 f404 	lsl.w	r4, r5, r4
 8001c48:	3c01      	subs	r4, #1
 8001c4a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4e:	ea42 0201 	orr.w	r2, r2, r1
 8001c52:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c56:	bfa9      	itett	ge
 8001c58:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	4b06      	ldrlt	r3, [pc, #24]	; (8001c78 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	b2d2      	uxtbge	r2, r2
 8001c60:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	bfbb      	ittet	lt
 8001c66:	f000 000f 	andlt.w	r0, r0, #15
 8001c6a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	541a      	strblt	r2, [r3, r0]
 8001c72:	bd30      	pop	{r4, r5, pc}
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	e000ed14 	.word	0xe000ed14

08001c7c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	db08      	blt.n	8001c92 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c80:	2301      	movs	r3, #1
 8001c82:	0942      	lsrs	r2, r0, #5
 8001c84:	f000 001f 	and.w	r0, r0, #31
 8001c88:	fa03 f000 	lsl.w	r0, r3, r0
 8001c8c:	4b01      	ldr	r3, [pc, #4]	; (8001c94 <HAL_NVIC_EnableIRQ+0x18>)
 8001c8e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	3801      	subs	r0, #1
 8001c9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c9e:	d20a      	bcs.n	8001cb6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc8:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001cca:	4626      	mov	r6, r4
 8001ccc:	4b66      	ldr	r3, [pc, #408]	; (8001e68 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cce:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8001e78 <HAL_GPIO_Init+0x1b4>
 8001cd2:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8001e7c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd6:	680a      	ldr	r2, [r1, #0]
 8001cd8:	fa32 f506 	lsrs.w	r5, r2, r6
 8001cdc:	d102      	bne.n	8001ce4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001cde:	b003      	add	sp, #12
 8001ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001ce4:	f04f 0801 	mov.w	r8, #1
 8001ce8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cec:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001cf0:	4590      	cmp	r8, r2
 8001cf2:	d17f      	bne.n	8001df4 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8001cf4:	684d      	ldr	r5, [r1, #4]
 8001cf6:	2d12      	cmp	r5, #18
 8001cf8:	f000 80aa 	beq.w	8001e50 <HAL_GPIO_Init+0x18c>
 8001cfc:	f200 8083 	bhi.w	8001e06 <HAL_GPIO_Init+0x142>
 8001d00:	2d02      	cmp	r5, #2
 8001d02:	f000 80a2 	beq.w	8001e4a <HAL_GPIO_Init+0x186>
 8001d06:	d877      	bhi.n	8001df8 <HAL_GPIO_Init+0x134>
 8001d08:	2d00      	cmp	r5, #0
 8001d0a:	f000 8089 	beq.w	8001e20 <HAL_GPIO_Init+0x15c>
 8001d0e:	2d01      	cmp	r5, #1
 8001d10:	f000 8099 	beq.w	8001e46 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d14:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d18:	2aff      	cmp	r2, #255	; 0xff
 8001d1a:	bf93      	iteet	ls
 8001d1c:	4682      	movls	sl, r0
 8001d1e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001d22:	3d08      	subhi	r5, #8
 8001d24:	f8d0 b000 	ldrls.w	fp, [r0]
 8001d28:	bf92      	itee	ls
 8001d2a:	00b5      	lslls	r5, r6, #2
 8001d2c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001d30:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d32:	fa09 f805 	lsl.w	r8, r9, r5
 8001d36:	ea2b 0808 	bic.w	r8, fp, r8
 8001d3a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d3e:	bf88      	it	hi
 8001d40:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d44:	ea48 0505 	orr.w	r5, r8, r5
 8001d48:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001d50:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001d54:	d04e      	beq.n	8001df4 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d56:	4d45      	ldr	r5, [pc, #276]	; (8001e6c <HAL_GPIO_Init+0x1a8>)
 8001d58:	4f44      	ldr	r7, [pc, #272]	; (8001e6c <HAL_GPIO_Init+0x1a8>)
 8001d5a:	69ad      	ldr	r5, [r5, #24]
 8001d5c:	f026 0803 	bic.w	r8, r6, #3
 8001d60:	f045 0501 	orr.w	r5, r5, #1
 8001d64:	61bd      	str	r5, [r7, #24]
 8001d66:	69bd      	ldr	r5, [r7, #24]
 8001d68:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001d6c:	f005 0501 	and.w	r5, r5, #1
 8001d70:	9501      	str	r5, [sp, #4]
 8001d72:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d76:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d7a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d7c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001d80:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d84:	fa09 f90b 	lsl.w	r9, r9, fp
 8001d88:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d8c:	4d38      	ldr	r5, [pc, #224]	; (8001e70 <HAL_GPIO_Init+0x1ac>)
 8001d8e:	42a8      	cmp	r0, r5
 8001d90:	d063      	beq.n	8001e5a <HAL_GPIO_Init+0x196>
 8001d92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d96:	42a8      	cmp	r0, r5
 8001d98:	d061      	beq.n	8001e5e <HAL_GPIO_Init+0x19a>
 8001d9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d9e:	42a8      	cmp	r0, r5
 8001da0:	d05f      	beq.n	8001e62 <HAL_GPIO_Init+0x19e>
 8001da2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001da6:	42a8      	cmp	r0, r5
 8001da8:	bf0c      	ite	eq
 8001daa:	2503      	moveq	r5, #3
 8001dac:	2504      	movne	r5, #4
 8001dae:	fa05 f50b 	lsl.w	r5, r5, fp
 8001db2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001db6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001dba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001dc0:	bf14      	ite	ne
 8001dc2:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc4:	4395      	biceq	r5, r2
 8001dc6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001dc8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001dce:	bf14      	ite	ne
 8001dd0:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dd2:	4395      	biceq	r5, r2
 8001dd4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	bf14      	ite	ne
 8001dde:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de0:	4395      	biceq	r5, r2
 8001de2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dea:	bf14      	ite	ne
 8001dec:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dee:	ea25 0202 	biceq.w	r2, r5, r2
 8001df2:	60da      	str	r2, [r3, #12]
	position++;
 8001df4:	3601      	adds	r6, #1
 8001df6:	e76e      	b.n	8001cd6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001df8:	2d03      	cmp	r5, #3
 8001dfa:	d022      	beq.n	8001e42 <HAL_GPIO_Init+0x17e>
 8001dfc:	2d11      	cmp	r5, #17
 8001dfe:	d189      	bne.n	8001d14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	68cc      	ldr	r4, [r1, #12]
 8001e02:	3404      	adds	r4, #4
          break;
 8001e04:	e786      	b.n	8001d14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001e06:	4f1b      	ldr	r7, [pc, #108]	; (8001e74 <HAL_GPIO_Init+0x1b0>)
 8001e08:	42bd      	cmp	r5, r7
 8001e0a:	d009      	beq.n	8001e20 <HAL_GPIO_Init+0x15c>
 8001e0c:	d812      	bhi.n	8001e34 <HAL_GPIO_Init+0x170>
 8001e0e:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8001e80 <HAL_GPIO_Init+0x1bc>
 8001e12:	454d      	cmp	r5, r9
 8001e14:	d004      	beq.n	8001e20 <HAL_GPIO_Init+0x15c>
 8001e16:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001e1a:	454d      	cmp	r5, r9
 8001e1c:	f47f af7a 	bne.w	8001d14 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e20:	688c      	ldr	r4, [r1, #8]
 8001e22:	b1c4      	cbz	r4, 8001e56 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e24:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8001e26:	bf0c      	ite	eq
 8001e28:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001e2c:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2408      	movs	r4, #8
 8001e32:	e76f      	b.n	8001d14 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8001e34:	4575      	cmp	r5, lr
 8001e36:	d0f3      	beq.n	8001e20 <HAL_GPIO_Init+0x15c>
 8001e38:	4565      	cmp	r5, ip
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_GPIO_Init+0x15c>
 8001e3c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001e84 <HAL_GPIO_Init+0x1c0>
 8001e40:	e7eb      	b.n	8001e1a <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e42:	2400      	movs	r4, #0
 8001e44:	e766      	b.n	8001d14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e46:	68cc      	ldr	r4, [r1, #12]
          break;
 8001e48:	e764      	b.n	8001d14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4a:	68cc      	ldr	r4, [r1, #12]
 8001e4c:	3408      	adds	r4, #8
          break;
 8001e4e:	e761      	b.n	8001d14 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e50:	68cc      	ldr	r4, [r1, #12]
 8001e52:	340c      	adds	r4, #12
          break;
 8001e54:	e75e      	b.n	8001d14 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e56:	2404      	movs	r4, #4
 8001e58:	e75c      	b.n	8001d14 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5a:	2500      	movs	r5, #0
 8001e5c:	e7a7      	b.n	8001dae <HAL_GPIO_Init+0xea>
 8001e5e:	2501      	movs	r5, #1
 8001e60:	e7a5      	b.n	8001dae <HAL_GPIO_Init+0xea>
 8001e62:	2502      	movs	r5, #2
 8001e64:	e7a3      	b.n	8001dae <HAL_GPIO_Init+0xea>
 8001e66:	bf00      	nop
 8001e68:	40010400 	.word	0x40010400
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010800 	.word	0x40010800
 8001e74:	10210000 	.word	0x10210000
 8001e78:	10310000 	.word	0x10310000
 8001e7c:	10320000 	.word	0x10320000
 8001e80:	10110000 	.word	0x10110000
 8001e84:	10220000 	.word	0x10220000

08001e88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	b10a      	cbz	r2, 8001e8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e8a:	6101      	str	r1, [r0, #16]
 8001e8c:	4770      	bx	lr
 8001e8e:	0409      	lsls	r1, r1, #16
 8001e90:	e7fb      	b.n	8001e8a <HAL_GPIO_WritePin+0x2>

08001e92 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e92:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e94:	ea03 0201 	and.w	r2, r3, r1
 8001e98:	ea21 0103 	bic.w	r1, r1, r3
 8001e9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001ea0:	6101      	str	r1, [r0, #16]
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ea4:	4770      	bx	lr
	...

08001ea8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001ea8:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001eac:	6959      	ldr	r1, [r3, #20]
 8001eae:	4201      	tst	r1, r0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eb4:	f7ff fff6 	bl	8001ea4 <HAL_GPIO_EXTI_Callback>
 8001eb8:	bd08      	pop	{r3, pc}
 8001eba:	bf00      	nop
 8001ebc:	40010400 	.word	0x40010400

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec4:	4605      	mov	r5, r0
 8001ec6:	b908      	cbnz	r0, 8001ecc <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001ec8:	2001      	movs	r0, #1
 8001eca:	e03c      	b.n	8001f46 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ecc:	6803      	ldr	r3, [r0, #0]
 8001ece:	07db      	lsls	r3, r3, #31
 8001ed0:	d410      	bmi.n	8001ef4 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed2:	682b      	ldr	r3, [r5, #0]
 8001ed4:	079f      	lsls	r7, r3, #30
 8001ed6:	d45d      	bmi.n	8001f94 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	0719      	lsls	r1, r3, #28
 8001edc:	f100 8094 	bmi.w	8002008 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	075a      	lsls	r2, r3, #29
 8001ee4:	f100 80be 	bmi.w	8002064 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee8:	69e8      	ldr	r0, [r5, #28]
 8001eea:	2800      	cmp	r0, #0
 8001eec:	f040 812c 	bne.w	8002148 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	e028      	b.n	8001f46 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef4:	4c8f      	ldr	r4, [pc, #572]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d007      	beq.n	8001f10 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f00:	6863      	ldr	r3, [r4, #4]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5e>
 8001f0a:	6863      	ldr	r3, [r4, #4]
 8001f0c:	03de      	lsls	r6, r3, #15
 8001f0e:	d506      	bpl.n	8001f1e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	039c      	lsls	r4, r3, #14
 8001f14:	d5dd      	bpl.n	8001ed2 <HAL_RCC_OscConfig+0x12>
 8001f16:	686b      	ldr	r3, [r5, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1da      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
 8001f1c:	e7d4      	b.n	8001ec8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	686b      	ldr	r3, [r5, #4]
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d112      	bne.n	8001f4c <HAL_RCC_OscConfig+0x8c>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb67 	bl	8001600 <HAL_GetTick>
 8001f32:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	0398      	lsls	r0, r3, #14
 8001f38:	d4cb      	bmi.n	8001ed2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fb61 	bl	8001600 <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	2864      	cmp	r0, #100	; 0x64
 8001f42:	d9f7      	bls.n	8001f34 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001f44:	2003      	movs	r0, #3
}
 8001f46:	b002      	add	sp, #8
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	b99b      	cbnz	r3, 8001f76 <HAL_RCC_OscConfig+0xb6>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f5e:	f7ff fb4f 	bl	8001600 <HAL_GetTick>
 8001f62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	0399      	lsls	r1, r3, #14
 8001f68:	d5b3      	bpl.n	8001ed2 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb49 	bl	8001600 <HAL_GetTick>
 8001f6e:	1b80      	subs	r0, r0, r6
 8001f70:	2864      	cmp	r0, #100	; 0x64
 8001f72:	d9f7      	bls.n	8001f64 <HAL_RCC_OscConfig+0xa4>
 8001f74:	e7e6      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7a:	6823      	ldr	r3, [r4, #0]
 8001f7c:	d103      	bne.n	8001f86 <HAL_RCC_OscConfig+0xc6>
 8001f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f82:	6023      	str	r3, [r4, #0]
 8001f84:	e7cf      	b.n	8001f26 <HAL_RCC_OscConfig+0x66>
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f8a:	6023      	str	r3, [r4, #0]
 8001f8c:	6823      	ldr	r3, [r4, #0]
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	e7cb      	b.n	8001f2c <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f94:	4c67      	ldr	r4, [pc, #412]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8001f96:	6863      	ldr	r3, [r4, #4]
 8001f98:	f013 0f0c 	tst.w	r3, #12
 8001f9c:	d007      	beq.n	8001fae <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	6863      	ldr	r3, [r4, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d110      	bne.n	8001fca <HAL_RCC_OscConfig+0x10a>
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	03da      	lsls	r2, r3, #15
 8001fac:	d40d      	bmi.n	8001fca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	079b      	lsls	r3, r3, #30
 8001fb2:	d502      	bpl.n	8001fba <HAL_RCC_OscConfig+0xfa>
 8001fb4:	692b      	ldr	r3, [r5, #16]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d186      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	6823      	ldr	r3, [r4, #0]
 8001fbc:	696a      	ldr	r2, [r5, #20]
 8001fbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fc2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fc6:	6023      	str	r3, [r4, #0]
 8001fc8:	e786      	b.n	8001ed8 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fca:	692a      	ldr	r2, [r5, #16]
 8001fcc:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0x278>)
 8001fce:	b16a      	cbz	r2, 8001fec <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb14 	bl	8001600 <HAL_GetTick>
 8001fd8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	079f      	lsls	r7, r3, #30
 8001fde:	d4ec      	bmi.n	8001fba <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fb0e 	bl	8001600 <HAL_GetTick>
 8001fe4:	1b80      	subs	r0, r0, r6
 8001fe6:	2802      	cmp	r0, #2
 8001fe8:	d9f7      	bls.n	8001fda <HAL_RCC_OscConfig+0x11a>
 8001fea:	e7ab      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001fec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fee:	f7ff fb07 	bl	8001600 <HAL_GetTick>
 8001ff2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff4:	6823      	ldr	r3, [r4, #0]
 8001ff6:	0798      	lsls	r0, r3, #30
 8001ff8:	f57f af6e 	bpl.w	8001ed8 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffc:	f7ff fb00 	bl	8001600 <HAL_GetTick>
 8002000:	1b80      	subs	r0, r0, r6
 8002002:	2802      	cmp	r0, #2
 8002004:	d9f6      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x134>
 8002006:	e79d      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002008:	69aa      	ldr	r2, [r5, #24]
 800200a:	4c4a      	ldr	r4, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 800200c:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x27c>)
 800200e:	b1da      	cbz	r2, 8002048 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8002010:	2201      	movs	r2, #1
 8002012:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002014:	f7ff faf4 	bl	8001600 <HAL_GetTick>
 8002018:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800201c:	079b      	lsls	r3, r3, #30
 800201e:	d50d      	bpl.n	800203c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002020:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002024:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_OscConfig+0x280>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fbb3 f3f2 	udiv	r3, r3, r2
 800202c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800202e:	bf00      	nop
  }
  while (Delay --);
 8002030:	9b01      	ldr	r3, [sp, #4]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	9201      	str	r2, [sp, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_RCC_OscConfig+0x16e>
 800203a:	e751      	b.n	8001ee0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff fae0 	bl	8001600 <HAL_GetTick>
 8002040:	1b80      	subs	r0, r0, r6
 8002042:	2802      	cmp	r0, #2
 8002044:	d9e9      	bls.n	800201a <HAL_RCC_OscConfig+0x15a>
 8002046:	e77d      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002048:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800204a:	f7ff fad9 	bl	8001600 <HAL_GetTick>
 800204e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002052:	079f      	lsls	r7, r3, #30
 8002054:	f57f af44 	bpl.w	8001ee0 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff fad2 	bl	8001600 <HAL_GetTick>
 800205c:	1b80      	subs	r0, r0, r6
 800205e:	2802      	cmp	r0, #2
 8002060:	d9f6      	bls.n	8002050 <HAL_RCC_OscConfig+0x190>
 8002062:	e76f      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002064:	4c33      	ldr	r4, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x274>)
 8002066:	69e3      	ldr	r3, [r4, #28]
 8002068:	00d8      	lsls	r0, r3, #3
 800206a:	d424      	bmi.n	80020b6 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 800206c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	69e3      	ldr	r3, [r4, #28]
 8002070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002074:	61e3      	str	r3, [r4, #28]
 8002076:	69e3      	ldr	r3, [r4, #28]
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	4e30      	ldr	r6, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x284>)
 8002082:	6833      	ldr	r3, [r6, #0]
 8002084:	05d9      	lsls	r1, r3, #23
 8002086:	d518      	bpl.n	80020ba <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	68eb      	ldr	r3, [r5, #12]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d126      	bne.n	80020dc <HAL_RCC_OscConfig+0x21c>
 800208e:	6a23      	ldr	r3, [r4, #32]
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002096:	f7ff fab3 	bl	8001600 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800209e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	6a23      	ldr	r3, [r4, #32]
 80020a2:	079b      	lsls	r3, r3, #30
 80020a4:	d53f      	bpl.n	8002126 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80020a6:	2f00      	cmp	r7, #0
 80020a8:	f43f af1e 	beq.w	8001ee8 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	69e3      	ldr	r3, [r4, #28]
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b2:	61e3      	str	r3, [r4, #28]
 80020b4:	e718      	b.n	8001ee8 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2700      	movs	r7, #0
 80020b8:	e7e2      	b.n	8002080 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ba:	6833      	ldr	r3, [r6, #0]
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80020c2:	f7ff fa9d 	bl	8001600 <HAL_GetTick>
 80020c6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	6833      	ldr	r3, [r6, #0]
 80020ca:	05da      	lsls	r2, r3, #23
 80020cc:	d4dc      	bmi.n	8002088 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ce:	f7ff fa97 	bl	8001600 <HAL_GetTick>
 80020d2:	eba0 0008 	sub.w	r0, r0, r8
 80020d6:	2864      	cmp	r0, #100	; 0x64
 80020d8:	d9f6      	bls.n	80020c8 <HAL_RCC_OscConfig+0x208>
 80020da:	e733      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	b9ab      	cbnz	r3, 800210a <HAL_RCC_OscConfig+0x24a>
 80020de:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	6223      	str	r3, [r4, #32]
 80020ea:	6a23      	ldr	r3, [r4, #32]
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80020f2:	f7ff fa85 	bl	8001600 <HAL_GetTick>
 80020f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	6a23      	ldr	r3, [r4, #32]
 80020fa:	0798      	lsls	r0, r3, #30
 80020fc:	d5d3      	bpl.n	80020a6 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff fa7f 	bl	8001600 <HAL_GetTick>
 8002102:	1b80      	subs	r0, r0, r6
 8002104:	4540      	cmp	r0, r8
 8002106:	d9f7      	bls.n	80020f8 <HAL_RCC_OscConfig+0x238>
 8002108:	e71c      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210a:	2b05      	cmp	r3, #5
 800210c:	6a23      	ldr	r3, [r4, #32]
 800210e:	d103      	bne.n	8002118 <HAL_RCC_OscConfig+0x258>
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6223      	str	r3, [r4, #32]
 8002116:	e7ba      	b.n	800208e <HAL_RCC_OscConfig+0x1ce>
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6223      	str	r3, [r4, #32]
 800211e:	6a23      	ldr	r3, [r4, #32]
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	e7b6      	b.n	8002094 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff fa6b 	bl	8001600 <HAL_GetTick>
 800212a:	eba0 0008 	sub.w	r0, r0, r8
 800212e:	42b0      	cmp	r0, r6
 8002130:	d9b6      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1e0>
 8002132:	e707      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
 8002134:	40021000 	.word	0x40021000
 8002138:	42420000 	.word	0x42420000
 800213c:	42420480 	.word	0x42420480
 8002140:	20000000 	.word	0x20000000
 8002144:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x334>)
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	461c      	mov	r4, r3
 800214e:	f002 020c 	and.w	r2, r2, #12
 8002152:	2a08      	cmp	r2, #8
 8002154:	d03d      	beq.n	80021d2 <HAL_RCC_OscConfig+0x312>
 8002156:	2300      	movs	r3, #0
 8002158:	4e27      	ldr	r6, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800215c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800215e:	d12b      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8002160:	f7ff fa4e 	bl	8001600 <HAL_GetTick>
 8002164:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	0199      	lsls	r1, r3, #6
 800216a:	d41f      	bmi.n	80021ac <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800216c:	6a2b      	ldr	r3, [r5, #32]
 800216e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002172:	d105      	bne.n	8002180 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002174:	6862      	ldr	r2, [r4, #4]
 8002176:	68a9      	ldr	r1, [r5, #8]
 8002178:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800217c:	430a      	orrs	r2, r1
 800217e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002180:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002182:	6862      	ldr	r2, [r4, #4]
 8002184:	430b      	orrs	r3, r1
 8002186:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800218a:	4313      	orrs	r3, r2
 800218c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800218e:	2301      	movs	r3, #1
 8002190:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002192:	f7ff fa35 	bl	8001600 <HAL_GetTick>
 8002196:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	019a      	lsls	r2, r3, #6
 800219c:	f53f aea8 	bmi.w	8001ef0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a0:	f7ff fa2e 	bl	8001600 <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	2802      	cmp	r0, #2
 80021a8:	d9f6      	bls.n	8002198 <HAL_RCC_OscConfig+0x2d8>
 80021aa:	e6cb      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7ff fa28 	bl	8001600 <HAL_GetTick>
 80021b0:	1bc0      	subs	r0, r0, r7
 80021b2:	2802      	cmp	r0, #2
 80021b4:	d9d7      	bls.n	8002166 <HAL_RCC_OscConfig+0x2a6>
 80021b6:	e6c5      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80021b8:	f7ff fa22 	bl	8001600 <HAL_GetTick>
 80021bc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021be:	6823      	ldr	r3, [r4, #0]
 80021c0:	019b      	lsls	r3, r3, #6
 80021c2:	f57f ae95 	bpl.w	8001ef0 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7ff fa1b 	bl	8001600 <HAL_GetTick>
 80021ca:	1b40      	subs	r0, r0, r5
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9f6      	bls.n	80021be <HAL_RCC_OscConfig+0x2fe>
 80021d0:	e6b8      	b.n	8001f44 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d2:	2801      	cmp	r0, #1
 80021d4:	f43f aeb7 	beq.w	8001f46 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80021d8:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	6a2b      	ldr	r3, [r5, #32]
 80021dc:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f47f ae71 	bne.w	8001ec8 <HAL_RCC_OscConfig+0x8>
 80021e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021e8:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 80021ec:	1ac0      	subs	r0, r0, r3
 80021ee:	bf18      	it	ne
 80021f0:	2001      	movne	r0, #1
 80021f2:	e6a8      	b.n	8001f46 <HAL_RCC_OscConfig+0x86>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	42420060 	.word	0x42420060

080021fc <HAL_RCC_GetSysClockFreq>:
{
 80021fc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8002200:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002202:	ac02      	add	r4, sp, #8
 8002204:	f103 0510 	add.w	r5, r3, #16
 8002208:	4622      	mov	r2, r4
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	3308      	adds	r3, #8
 8002210:	c203      	stmia	r2!, {r0, r1}
 8002212:	42ab      	cmp	r3, r5
 8002214:	4614      	mov	r4, r2
 8002216:	d1f7      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002218:	2301      	movs	r3, #1
 800221a:	f88d 3004 	strb.w	r3, [sp, #4]
 800221e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8002220:	4911      	ldr	r1, [pc, #68]	; (8002268 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002222:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8002226:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	f003 020c 	and.w	r2, r3, #12
 800222c:	2a08      	cmp	r2, #8
 800222e:	d117      	bne.n	8002260 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002230:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002234:	a806      	add	r0, sp, #24
 8002236:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002238:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223e:	d50c      	bpl.n	800225a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002240:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002242:	480a      	ldr	r0, [pc, #40]	; (800226c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002244:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002248:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800224a:	aa06      	add	r2, sp, #24
 800224c:	4413      	add	r3, r2
 800224e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002252:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8002256:	b007      	add	sp, #28
 8002258:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x74>)
 800225c:	4350      	muls	r0, r2
 800225e:	e7fa      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8002262:	e7f8      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x5a>
 8002264:	080029d4 	.word	0x080029d4
 8002268:	40021000 	.word	0x40021000
 800226c:	007a1200 	.word	0x007a1200
 8002270:	003d0900 	.word	0x003d0900

08002274 <HAL_RCC_ClockConfig>:
{
 8002274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002278:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800227a:	4604      	mov	r4, r0
 800227c:	b910      	cbnz	r0, 8002284 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800227e:	2001      	movs	r0, #1
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002284:	4a45      	ldr	r2, [pc, #276]	; (800239c <HAL_RCC_ClockConfig+0x128>)
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	428b      	cmp	r3, r1
 800228e:	d329      	bcc.n	80022e4 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	6821      	ldr	r1, [r4, #0]
 8002292:	078e      	lsls	r6, r1, #30
 8002294:	d431      	bmi.n	80022fa <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	07ca      	lsls	r2, r1, #31
 8002298:	d444      	bmi.n	8002324 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800229a:	4a40      	ldr	r2, [pc, #256]	; (800239c <HAL_RCC_ClockConfig+0x128>)
 800229c:	6813      	ldr	r3, [r2, #0]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	429d      	cmp	r5, r3
 80022a4:	d367      	bcc.n	8002376 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	4d3d      	ldr	r5, [pc, #244]	; (80023a0 <HAL_RCC_ClockConfig+0x12c>)
 80022aa:	f012 0f04 	tst.w	r2, #4
 80022ae:	d16e      	bne.n	800238e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	0713      	lsls	r3, r2, #28
 80022b2:	d506      	bpl.n	80022c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b4:	686b      	ldr	r3, [r5, #4]
 80022b6:	6922      	ldr	r2, [r4, #16]
 80022b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80022bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022c2:	f7ff ff9b 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80022c6:	686b      	ldr	r3, [r5, #4]
 80022c8:	4a36      	ldr	r2, [pc, #216]	; (80023a4 <HAL_RCC_ClockConfig+0x130>)
 80022ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	40d8      	lsrs	r0, r3
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_RCC_ClockConfig+0x134>)
 80022d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_RCC_ClockConfig+0x138>)
 80022d8:	6818      	ldr	r0, [r3, #0]
 80022da:	f7ff f94f 	bl	800157c <HAL_InitTick>
  return HAL_OK;
 80022de:	2000      	movs	r0, #0
 80022e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	f023 0307 	bic.w	r3, r3, #7
 80022ea:	430b      	orrs	r3, r1
 80022ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	4299      	cmp	r1, r3
 80022f6:	d1c2      	bne.n	800227e <HAL_RCC_ClockConfig+0xa>
 80022f8:	e7ca      	b.n	8002290 <HAL_RCC_ClockConfig+0x1c>
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	bf1e      	ittt	ne
 8002302:	685a      	ldrne	r2, [r3, #4]
 8002304:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8002308:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800230c:	bf42      	ittt	mi
 800230e:	685a      	ldrmi	r2, [r3, #4]
 8002310:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002314:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68a0      	ldr	r0, [r4, #8]
 800231a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800231e:	4302      	orrs	r2, r0
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e7b8      	b.n	8002296 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002324:	6862      	ldr	r2, [r4, #4]
 8002326:	4e1e      	ldr	r6, [pc, #120]	; (80023a0 <HAL_RCC_ClockConfig+0x12c>)
 8002328:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232a:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232c:	d11b      	bne.n	8002366 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	d0a4      	beq.n	800227e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002334:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002336:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	4313      	orrs	r3, r2
 8002340:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002342:	f7ff f95d 	bl	8001600 <HAL_GetTick>
 8002346:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002348:	6873      	ldr	r3, [r6, #4]
 800234a:	6862      	ldr	r2, [r4, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002354:	d0a1      	beq.n	800229a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7ff f953 	bl	8001600 <HAL_GetTick>
 800235a:	1bc0      	subs	r0, r0, r7
 800235c:	4540      	cmp	r0, r8
 800235e:	d9f3      	bls.n	8002348 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
}
 8002362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	2a02      	cmp	r2, #2
 8002368:	d102      	bne.n	8002370 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800236e:	e7e0      	b.n	8002332 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	f013 0f02 	tst.w	r3, #2
 8002374:	e7dd      	b.n	8002332 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	6813      	ldr	r3, [r2, #0]
 8002378:	f023 0307 	bic.w	r3, r3, #7
 800237c:	432b      	orrs	r3, r5
 800237e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	6813      	ldr	r3, [r2, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	429d      	cmp	r5, r3
 8002388:	f47f af79 	bne.w	800227e <HAL_RCC_ClockConfig+0xa>
 800238c:	e78b      	b.n	80022a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238e:	686b      	ldr	r3, [r5, #4]
 8002390:	68e1      	ldr	r1, [r4, #12]
 8002392:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002396:	430b      	orrs	r3, r1
 8002398:	606b      	str	r3, [r5, #4]
 800239a:	e789      	b.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
 800239c:	40022000 	.word	0x40022000
 80023a0:	40021000 	.word	0x40021000
 80023a4:	080029e4 	.word	0x080029e4
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000008 	.word	0x20000008

080023b0 <HAL_TIM_PeriodElapsedCallback>:
 80023b0:	4770      	bx	lr

080023b2 <HAL_TIM_OC_DelayElapsedCallback>:
 80023b2:	4770      	bx	lr

080023b4 <HAL_TIM_IC_CaptureCallback>:
 80023b4:	4770      	bx	lr

080023b6 <HAL_TIM_PWM_PulseFinishedCallback>:
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIM_TriggerCallback>:
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023ba:	6803      	ldr	r3, [r0, #0]
{
 80023bc:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023be:	691a      	ldr	r2, [r3, #16]
{
 80023c0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c2:	0791      	lsls	r1, r2, #30
 80023c4:	d50e      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	0792      	lsls	r2, r2, #30
 80023ca:	d50b      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023cc:	f06f 0202 	mvn.w	r2, #2
 80023d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023d2:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023d6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d8:	079b      	lsls	r3, r3, #30
 80023da:	d077      	beq.n	80024cc <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	f7ff ffea 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e0:	2300      	movs	r3, #0
 80023e2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	0750      	lsls	r0, r2, #29
 80023ea:	d510      	bpl.n	800240e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	0751      	lsls	r1, r2, #29
 80023f0:	d50d      	bpl.n	800240e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023f2:	f06f 0204 	mvn.w	r2, #4
 80023f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f8:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023fc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023fe:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002404:	d068      	beq.n	80024d8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	f7ff ffd5 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	2300      	movs	r3, #0
 800240c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800240e:	6823      	ldr	r3, [r4, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	0712      	lsls	r2, r2, #28
 8002414:	d50f      	bpl.n	8002436 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	0710      	lsls	r0, r2, #28
 800241a:	d50c      	bpl.n	8002436 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002424:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002426:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242c:	d05a      	beq.n	80024e4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800242e:	f7ff ffc1 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002432:	2300      	movs	r3, #0
 8002434:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002436:	6823      	ldr	r3, [r4, #0]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	06d2      	lsls	r2, r2, #27
 800243c:	d510      	bpl.n	8002460 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	06d0      	lsls	r0, r2, #27
 8002442:	d50d      	bpl.n	8002460 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002444:	f06f 0210 	mvn.w	r2, #16
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244a:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800244c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800244e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002450:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002454:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002456:	d04b      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002458:	f7ff ffac 	bl	80023b4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245c:	2300      	movs	r3, #0
 800245e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	07d1      	lsls	r1, r2, #31
 8002466:	d508      	bpl.n	800247a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	07d2      	lsls	r2, r2, #31
 800246c:	d505      	bpl.n	800247a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800246e:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002472:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002474:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002476:	f7ff ff9b 	bl	80023b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	0610      	lsls	r0, r2, #24
 8002480:	d508      	bpl.n	8002494 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	0611      	lsls	r1, r2, #24
 8002486:	d505      	bpl.n	8002494 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002488:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800248e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002490:	f000 f9e5 	bl	800285e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	691a      	ldr	r2, [r3, #16]
 8002498:	0652      	lsls	r2, r2, #25
 800249a:	d508      	bpl.n	80024ae <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	0650      	lsls	r0, r2, #25
 80024a0:	d505      	bpl.n	80024ae <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024aa:	f7ff ff85 	bl	80023b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ae:	6823      	ldr	r3, [r4, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	0691      	lsls	r1, r2, #26
 80024b4:	d522      	bpl.n	80024fc <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	0692      	lsls	r2, r2, #26
 80024ba:	d51f      	bpl.n	80024fc <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024bc:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c0:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80024c8:	f000 b9c8 	b.w	800285c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	f7ff ff71 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff70 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024d6:	e783      	b.n	80023e0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d8:	f7ff ff6b 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024dc:	4620      	mov	r0, r4
 80024de:	f7ff ff6a 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024e2:	e792      	b.n	800240a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e4:	f7ff ff65 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff ff64 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024ee:	e7a0      	b.n	8002432 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f0:	f7ff ff5f 	bl	80023b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f4:	4620      	mov	r0, r4
 80024f6:	f7ff ff5e 	bl	80023b6 <HAL_TIM_PWM_PulseFinishedCallback>
 80024fa:	e7af      	b.n	800245c <HAL_TIM_IRQHandler+0xa2>
 80024fc:	bd10      	pop	{r4, pc}
	...

08002500 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002502:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002504:	4290      	cmp	r0, r2
 8002506:	d00a      	beq.n	800251e <TIM_Base_SetConfig+0x1e>
 8002508:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x1e>
 800250e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002512:	4290      	cmp	r0, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x1e>
 8002516:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800251a:	4290      	cmp	r0, r2
 800251c:	d115      	bne.n	800254a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800251e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002524:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <TIM_Base_SetConfig+0x6c>)
 8002528:	4290      	cmp	r0, r2
 800252a:	d00a      	beq.n	8002542 <TIM_Base_SetConfig+0x42>
 800252c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002530:	d007      	beq.n	8002542 <TIM_Base_SetConfig+0x42>
 8002532:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002536:	4290      	cmp	r0, r2
 8002538:	d003      	beq.n	8002542 <TIM_Base_SetConfig+0x42>
 800253a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800253e:	4290      	cmp	r0, r2
 8002540:	d103      	bne.n	800254a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002542:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002548:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800254a:	694a      	ldr	r2, [r1, #20]
 800254c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002550:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002552:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002554:	688b      	ldr	r3, [r1, #8]
 8002556:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002558:	680b      	ldr	r3, [r1, #0]
 800255a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800255c:	4b03      	ldr	r3, [pc, #12]	; (800256c <TIM_Base_SetConfig+0x6c>)
 800255e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002560:	bf04      	itt	eq
 8002562:	690b      	ldreq	r3, [r1, #16]
 8002564:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002566:	2301      	movs	r3, #1
 8002568:	6143      	str	r3, [r0, #20]
 800256a:	4770      	bx	lr
 800256c:	40012c00 	.word	0x40012c00

08002570 <HAL_TIM_Base_Init>:
{
 8002570:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002572:	4604      	mov	r4, r0
 8002574:	b330      	cbz	r0, 80025c4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002576:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800257a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800257e:	b91b      	cbnz	r3, 8002588 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002580:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002584:	f7fe ffdc 	bl	8001540 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002590:	1d21      	adds	r1, r4, #4
 8002592:	f7ff ffb5 	bl	8002500 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002596:	2301      	movs	r3, #1
  return HAL_OK;
 8002598:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800259e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80025a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80025a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80025aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80025b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80025ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80025be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025c4:	2001      	movs	r0, #1
}
 80025c6:	bd10      	pop	{r4, pc}

080025c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025c8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025ca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025cc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ce:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025d2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80025d6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d8:	6083      	str	r3, [r0, #8]
 80025da:	bd10      	pop	{r4, pc}

080025dc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80025dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80025e0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80025e2:	2b01      	cmp	r3, #1
{
 80025e4:	4604      	mov	r4, r0
 80025e6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025ea:	d019      	beq.n	8002620 <HAL_TIM_ConfigClockSource+0x44>
 80025ec:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80025ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80025f2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80025f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002602:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002604:	680b      	ldr	r3, [r1, #0]
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d065      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0xfa>
 800260a:	d815      	bhi.n	8002638 <HAL_TIM_ConfigClockSource+0x5c>
 800260c:	2b10      	cmp	r3, #16
 800260e:	d00c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4e>
 8002610:	d807      	bhi.n	8002622 <HAL_TIM_ConfigClockSource+0x46>
 8002612:	b153      	cbz	r3, 800262a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002614:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002616:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800261c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002620:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002622:	2b20      	cmp	r3, #32
 8002624:	d001      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x4e>
 8002626:	2b30      	cmp	r3, #48	; 0x30
 8002628:	d1f4      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800262a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800262c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002630:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002634:	4313      	orrs	r3, r2
 8002636:	e01a      	b.n	800266e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002638:	2b60      	cmp	r3, #96	; 0x60
 800263a:	d034      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xca>
 800263c:	d819      	bhi.n	8002672 <HAL_TIM_ConfigClockSource+0x96>
 800263e:	2b50      	cmp	r3, #80	; 0x50
 8002640:	d1e8      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002642:	684a      	ldr	r2, [r1, #4]
 8002644:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002646:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002648:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800264a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800264e:	f025 0501 	bic.w	r5, r5, #1
 8002652:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002654:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002656:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800265c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002660:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002662:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002664:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800266e:	6083      	str	r3, [r0, #8]
 8002670:	e7d0      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002672:	2b70      	cmp	r3, #112	; 0x70
 8002674:	d00c      	beq.n	8002690 <HAL_TIM_ConfigClockSource+0xb4>
 8002676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267a:	d1cb      	bne.n	8002614 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	68cb      	ldr	r3, [r1, #12]
 800267e:	684a      	ldr	r2, [r1, #4]
 8002680:	6889      	ldr	r1, [r1, #8]
 8002682:	f7ff ffa1 	bl	80025c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6893      	ldr	r3, [r2, #8]
 800268a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268e:	e008      	b.n	80026a2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8002690:	68cb      	ldr	r3, [r1, #12]
 8002692:	684a      	ldr	r2, [r1, #4]
 8002694:	6889      	ldr	r1, [r1, #8]
 8002696:	f7ff ff97 	bl	80025c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800269a:	6822      	ldr	r2, [r4, #0]
 800269c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800269e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026a2:	6093      	str	r3, [r2, #8]
      break;
 80026a4:	e7b6      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026a6:	684d      	ldr	r5, [r1, #4]
 80026a8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	6a01      	ldr	r1, [r0, #32]
 80026ac:	f021 0110 	bic.w	r1, r1, #16
 80026b0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80026b4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026b6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80026be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026c2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80026c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80026c8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80026d4:	e7cb      	b.n	800266e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026d6:	684a      	ldr	r2, [r1, #4]
 80026d8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80026da:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026dc:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e2:	f025 0501 	bic.w	r5, r5, #1
 80026e6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e8:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80026ea:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026f0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80026f4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80026f6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80026f8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026fe:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002702:	e7b4      	b.n	800266e <HAL_TIM_ConfigClockSource+0x92>

08002704 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8002704:	6800      	ldr	r0, [r0, #0]
{
 8002706:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 8002708:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800270a:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 800270c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002710:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002712:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002714:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002718:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 800271a:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800271c:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800271e:	d01e      	beq.n	800275e <TIM_SlaveTimer_SetConfig+0x5a>
 8002720:	d803      	bhi.n	800272a <TIM_SlaveTimer_SetConfig+0x26>
 8002722:	2a40      	cmp	r2, #64	; 0x40
 8002724:	d00b      	beq.n	800273e <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 8002726:	2000      	movs	r0, #0
 8002728:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800272a:	2a60      	cmp	r2, #96	; 0x60
 800272c:	d027      	beq.n	800277e <TIM_SlaveTimer_SetConfig+0x7a>
 800272e:	2a70      	cmp	r2, #112	; 0x70
 8002730:	d1f9      	bne.n	8002726 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	690b      	ldr	r3, [r1, #16]
 8002734:	688a      	ldr	r2, [r1, #8]
 8002736:	68c9      	ldr	r1, [r1, #12]
 8002738:	f7ff ff46 	bl	80025c8 <TIM_ETR_SetConfig>
 800273c:	e7f3      	b.n	8002726 <TIM_SlaveTimer_SetConfig+0x22>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800273e:	2c05      	cmp	r4, #5
 8002740:	d030      	beq.n	80027a4 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8002742:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002744:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002746:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800274e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002754:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002758:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800275a:	6202      	str	r2, [r0, #32]
 800275c:	e7e3      	b.n	8002726 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	688a      	ldr	r2, [r1, #8]
 8002760:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002762:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002764:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002766:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276a:	f024 0401 	bic.w	r4, r4, #1
 800276e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002770:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002772:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002778:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800277c:	e7ec      	b.n	8002758 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800277e:	688c      	ldr	r4, [r1, #8]
 8002780:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	6a01      	ldr	r1, [r0, #32]
 8002784:	f021 0110 	bic.w	r1, r1, #16
 8002788:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800278a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800278c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002796:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800279a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800279e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80027a0:	6203      	str	r3, [r0, #32]
 80027a2:	e7c0      	b.n	8002726 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
}
 80027a6:	bd38      	pop	{r3, r4, r5, pc}

080027a8 <HAL_TIM_SlaveConfigSynchro>:
{
 80027a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80027aa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80027ae:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f04f 0302 	mov.w	r3, #2
 80027b6:	d01c      	beq.n	80027f2 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80027b8:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80027ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80027be:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80027c2:	f7ff ff9f 	bl	8002704 <TIM_SlaveTimer_SetConfig>
 80027c6:	b130      	cbz	r0, 80027d6 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80027c8:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80027ca:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80027ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80027d2:	4628      	mov	r0, r5
 80027d4:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027de:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027e6:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80027ec:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80027f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80027f2:	4618      	mov	r0, r3
}
 80027f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080027f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80027fc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80027fe:	2b01      	cmp	r3, #1
 8002800:	f04f 0302 	mov.w	r3, #2
 8002804:	d025      	beq.n	8002852 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 8002806:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800280c:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800280e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002810:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8002812:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 8002816:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800281a:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 800281c:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281e:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002820:	4c0d      	ldr	r4, [pc, #52]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002822:	42a3      	cmp	r3, r4
 8002824:	d00a      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282a:	d007      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800282c:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002830:	42a3      	cmp	r3, r4
 8002832:	d003      	beq.n	800283c <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002834:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002838:	42a3      	cmp	r3, r4
 800283a:	d104      	bne.n	8002846 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800283c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800283e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002842:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002846:	2301      	movs	r3, #1
 8002848:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800284c:	2300      	movs	r3, #0
 800284e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002852:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002854:	bd30      	pop	{r4, r5, pc}
 8002856:	bf00      	nop
 8002858:	40012c00 	.word	0x40012c00

0800285c <HAL_TIMEx_CommutCallback>:
 800285c:	4770      	bx	lr

0800285e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800285e:	4770      	bx	lr

08002860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002860:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002862:	e003      	b.n	800286c <LoopCopyDataInit>

08002864 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002866:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002868:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800286a:	3104      	adds	r1, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800286c:	480a      	ldr	r0, [pc, #40]	; (8002898 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800286e:	4b0b      	ldr	r3, [pc, #44]	; (800289c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002870:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002872:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002874:	d3f6      	bcc.n	8002864 <CopyDataInit>
  ldr r2, =_sbss
 8002876:	4a0a      	ldr	r2, [pc, #40]	; (80028a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002878:	e002      	b.n	8002880 <LoopFillZerobss>

0800287a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800287c:	f842 3b04 	str.w	r3, [r2], #4

08002880 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002882:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002884:	d3f9      	bcc.n	800287a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002886:	f7fe fe15 	bl	80014b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800288a:	f000 f815 	bl	80028b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800288e:	f7fe fd31 	bl	80012f4 <main>
  bx lr
 8002892:	4770      	bx	lr
  ldr r3, =_sidata
 8002894:	08002afc 	.word	0x08002afc
  ldr r0, =_sdata
 8002898:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800289c:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80028a0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80028a4:	2000012c 	.word	0x2000012c

080028a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028a8:	e7fe      	b.n	80028a8 <ADC1_2_IRQHandler>
	...

080028ac <__errno>:
 80028ac:	4b01      	ldr	r3, [pc, #4]	; (80028b4 <__errno+0x8>)
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <__libc_init_array>:
 80028b8:	b570      	push	{r4, r5, r6, lr}
 80028ba:	2500      	movs	r5, #0
 80028bc:	4e0c      	ldr	r6, [pc, #48]	; (80028f0 <__libc_init_array+0x38>)
 80028be:	4c0d      	ldr	r4, [pc, #52]	; (80028f4 <__libc_init_array+0x3c>)
 80028c0:	1ba4      	subs	r4, r4, r6
 80028c2:	10a4      	asrs	r4, r4, #2
 80028c4:	42a5      	cmp	r5, r4
 80028c6:	d109      	bne.n	80028dc <__libc_init_array+0x24>
 80028c8:	f000 f878 	bl	80029bc <_init>
 80028cc:	2500      	movs	r5, #0
 80028ce:	4e0a      	ldr	r6, [pc, #40]	; (80028f8 <__libc_init_array+0x40>)
 80028d0:	4c0a      	ldr	r4, [pc, #40]	; (80028fc <__libc_init_array+0x44>)
 80028d2:	1ba4      	subs	r4, r4, r6
 80028d4:	10a4      	asrs	r4, r4, #2
 80028d6:	42a5      	cmp	r5, r4
 80028d8:	d105      	bne.n	80028e6 <__libc_init_array+0x2e>
 80028da:	bd70      	pop	{r4, r5, r6, pc}
 80028dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e0:	4798      	blx	r3
 80028e2:	3501      	adds	r5, #1
 80028e4:	e7ee      	b.n	80028c4 <__libc_init_array+0xc>
 80028e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ea:	4798      	blx	r3
 80028ec:	3501      	adds	r5, #1
 80028ee:	e7f2      	b.n	80028d6 <__libc_init_array+0x1e>
 80028f0:	08002af4 	.word	0x08002af4
 80028f4:	08002af4 	.word	0x08002af4
 80028f8:	08002af4 	.word	0x08002af4
 80028fc:	08002af8 	.word	0x08002af8

08002900 <memset>:
 8002900:	4603      	mov	r3, r0
 8002902:	4402      	add	r2, r0
 8002904:	4293      	cmp	r3, r2
 8002906:	d100      	bne.n	800290a <memset+0xa>
 8002908:	4770      	bx	lr
 800290a:	f803 1b01 	strb.w	r1, [r3], #1
 800290e:	e7f9      	b.n	8002904 <memset+0x4>

08002910 <abort>:
 8002910:	b508      	push	{r3, lr}
 8002912:	2006      	movs	r0, #6
 8002914:	f000 f836 	bl	8002984 <raise>
 8002918:	2001      	movs	r0, #1
 800291a:	f7fe fdc5 	bl	80014a8 <_exit>

0800291e <memcpy>:
 800291e:	b510      	push	{r4, lr}
 8002920:	1e43      	subs	r3, r0, #1
 8002922:	440a      	add	r2, r1
 8002924:	4291      	cmp	r1, r2
 8002926:	d100      	bne.n	800292a <memcpy+0xc>
 8002928:	bd10      	pop	{r4, pc}
 800292a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800292e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002932:	e7f7      	b.n	8002924 <memcpy+0x6>

08002934 <_raise_r>:
 8002934:	291f      	cmp	r1, #31
 8002936:	b538      	push	{r3, r4, r5, lr}
 8002938:	4604      	mov	r4, r0
 800293a:	460d      	mov	r5, r1
 800293c:	d904      	bls.n	8002948 <_raise_r+0x14>
 800293e:	2316      	movs	r3, #22
 8002940:	6003      	str	r3, [r0, #0]
 8002942:	f04f 30ff 	mov.w	r0, #4294967295
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800294a:	b112      	cbz	r2, 8002952 <_raise_r+0x1e>
 800294c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002950:	b94b      	cbnz	r3, 8002966 <_raise_r+0x32>
 8002952:	4620      	mov	r0, r4
 8002954:	f000 f830 	bl	80029b8 <_getpid_r>
 8002958:	462a      	mov	r2, r5
 800295a:	4601      	mov	r1, r0
 800295c:	4620      	mov	r0, r4
 800295e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002962:	f000 b817 	b.w	8002994 <_kill_r>
 8002966:	2b01      	cmp	r3, #1
 8002968:	d00a      	beq.n	8002980 <_raise_r+0x4c>
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	d103      	bne.n	8002976 <_raise_r+0x42>
 800296e:	2316      	movs	r3, #22
 8002970:	6003      	str	r3, [r0, #0]
 8002972:	2001      	movs	r0, #1
 8002974:	bd38      	pop	{r3, r4, r5, pc}
 8002976:	2400      	movs	r4, #0
 8002978:	4628      	mov	r0, r5
 800297a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800297e:	4798      	blx	r3
 8002980:	2000      	movs	r0, #0
 8002982:	bd38      	pop	{r3, r4, r5, pc}

08002984 <raise>:
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <raise+0xc>)
 8002986:	4601      	mov	r1, r0
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	f7ff bfd3 	b.w	8002934 <_raise_r>
 800298e:	bf00      	nop
 8002990:	2000000c 	.word	0x2000000c

08002994 <_kill_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	2300      	movs	r3, #0
 8002998:	4c06      	ldr	r4, [pc, #24]	; (80029b4 <_kill_r+0x20>)
 800299a:	4605      	mov	r5, r0
 800299c:	4608      	mov	r0, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	f7fe fd79 	bl	8001498 <_kill>
 80029a6:	1c43      	adds	r3, r0, #1
 80029a8:	d102      	bne.n	80029b0 <_kill_r+0x1c>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	b103      	cbz	r3, 80029b0 <_kill_r+0x1c>
 80029ae:	602b      	str	r3, [r5, #0]
 80029b0:	bd38      	pop	{r3, r4, r5, pc}
 80029b2:	bf00      	nop
 80029b4:	20000128 	.word	0x20000128

080029b8 <_getpid_r>:
 80029b8:	f7fe bd6c 	b.w	8001494 <_getpid>

080029bc <_init>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr

080029c8 <_fini>:
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	bf00      	nop
 80029cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ce:	bc08      	pop	{r3}
 80029d0:	469e      	mov	lr, r3
 80029d2:	4770      	bx	lr
