
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002500  08002500  00012500  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002d4  2000000c  0800253c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002e0  0800253c  000202e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013f04  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003241  00000000  00000000  00033f39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ee2  00000000  00000000  0003717a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000d98  00000000  00000000  00041060  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d8  00000000  00000000  00041df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000081b1  00000000  00000000  00042ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004aee  00000000  00000000  0004b081  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004fb6f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028e4  00000000  00000000  0004fbec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024e8 	.word	0x080024e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080024e8 	.word	0x080024e8

0800014c <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800014c:	4824      	ldr	r0, [pc, #144]	; (80001e0 <MX_ADC1_Init+0x94>)
 800014e:	4b25      	ldr	r3, [pc, #148]	; (80001e4 <MX_ADC1_Init+0x98>)
{
 8000150:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 8000152:	6003      	str	r3, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000158:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800015a:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800015e:	2400      	movs	r4, #0
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000160:	2501      	movs	r5, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000162:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 8000164:	2304      	movs	r3, #4
{
 8000166:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000168:	9401      	str	r4, [sp, #4]
 800016a:	9402      	str	r4, [sp, #8]
 800016c:	9403      	str	r4, [sp, #12]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	7305      	strb	r5, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000170:	7504      	strb	r4, [r0, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000172:	6044      	str	r4, [r0, #4]
  hadc1.Init.NbrOfConversion = 4;
 8000174:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000176:	f000 fd37 	bl	8000be8 <HAL_ADC_Init>
 800017a:	b108      	cbz	r0, 8000180 <MX_ADC1_Init+0x34>
  {
    Error_Handler();
 800017c:	f000 fa5e 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000180:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000182:	a901      	add	r1, sp, #4
 8000184:	4816      	ldr	r0, [pc, #88]	; (80001e0 <MX_ADC1_Init+0x94>)
  sConfig.Channel = ADC_CHANNEL_0;
 8000186:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000188:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800018a:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800018c:	f000 fc86 	bl	8000a9c <HAL_ADC_ConfigChannel>
 8000190:	b108      	cbz	r0, 8000196 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8000192:	f000 fa53 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000196:	2301      	movs	r3, #1
 8000198:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800019a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800019c:	a901      	add	r1, sp, #4
 800019e:	4810      	ldr	r0, [pc, #64]	; (80001e0 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001a0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a2:	f000 fc7b 	bl	8000a9c <HAL_ADC_ConfigChannel>
 80001a6:	b108      	cbz	r0, 80001ac <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 80001a8:	f000 fa48 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80001ac:	230e      	movs	r3, #14
 80001ae:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001b0:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b2:	a901      	add	r1, sp, #4
 80001b4:	480a      	ldr	r0, [pc, #40]	; (80001e0 <MX_ADC1_Init+0x94>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001b6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001b8:	f000 fc70 	bl	8000a9c <HAL_ADC_ConfigChannel>
 80001bc:	b108      	cbz	r0, 80001c2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80001be:	f000 fa3d 	bl	800063c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80001c2:	230f      	movs	r3, #15
 80001c4:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001c6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c8:	4805      	ldr	r0, [pc, #20]	; (80001e0 <MX_ADC1_Init+0x94>)
 80001ca:	eb0d 0103 	add.w	r1, sp, r3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80001ce:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001d0:	f000 fc64 	bl	8000a9c <HAL_ADC_ConfigChannel>
 80001d4:	b108      	cbz	r0, 80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fa31 	bl	800063c <Error_Handler>
  }

}
 80001da:	b005      	add	sp, #20
 80001dc:	bd30      	pop	{r4, r5, pc}
 80001de:	bf00      	nop
 80001e0:	20000028 	.word	0x20000028
 80001e4:	40012400 	.word	0x40012400

080001e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e8:	2210      	movs	r2, #16
{
 80001ea:	b530      	push	{r4, r5, lr}
 80001ec:	4605      	mov	r5, r0
 80001ee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f0:	eb0d 0002 	add.w	r0, sp, r2
 80001f4:	2100      	movs	r1, #0
 80001f6:	f002 f96f 	bl	80024d8 <memset>
  if(adcHandle->Instance==ADC1)
 80001fa:	682a      	ldr	r2, [r5, #0]
 80001fc:	4b25      	ldr	r3, [pc, #148]	; (8000294 <HAL_ADC_MspInit+0xac>)
 80001fe:	429a      	cmp	r2, r3
 8000200:	d145      	bne.n	800028e <HAL_ADC_MspInit+0xa6>
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 8000202:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000204:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8000208:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800020a:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 800020c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000210:	619a      	str	r2, [r3, #24]
 8000212:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000214:	4820      	ldr	r0, [pc, #128]	; (8000298 <HAL_ADC_MspInit+0xb0>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000216:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800021a:	9201      	str	r2, [sp, #4]
 800021c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	699a      	ldr	r2, [r3, #24]
 8000220:	f042 0204 	orr.w	r2, r2, #4
 8000224:	619a      	str	r2, [r3, #24]
 8000226:	699a      	ldr	r2, [r3, #24]
 8000228:	f002 0204 	and.w	r2, r2, #4
 800022c:	9202      	str	r2, [sp, #8]
 800022e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	699a      	ldr	r2, [r3, #24]
 8000232:	f042 0210 	orr.w	r2, r2, #16
 8000236:	619a      	str	r2, [r3, #24]
 8000238:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = JOY1_X_Pin|JOY1_Y_Pin;
 800023a:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800023c:	f003 0310 	and.w	r3, r3, #16
 8000240:	9303      	str	r3, [sp, #12]
 8000242:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000244:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f001 f969 	bl	800151c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 800024a:	2330      	movs	r3, #48	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <HAL_ADC_MspInit+0xb4>)
 800024e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOY2_X_Pin|JOY2_Y_Pin;
 8000250:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000252:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000254:	f001 f962 	bl	800151c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000258:	4c11      	ldr	r4, [pc, #68]	; (80002a0 <HAL_ADC_MspInit+0xb8>)
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800025c:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
 800025e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000260:	2300      	movs	r3, #0
 8000262:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000264:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	60e3      	str	r3, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800026a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800026e:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000274:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000276:	2320      	movs	r3, #32
 8000278:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800027a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800027e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000280:	f001 f840 	bl	8001304 <HAL_DMA_Init>
 8000284:	b108      	cbz	r0, 800028a <HAL_ADC_MspInit+0xa2>
    {
      Error_Handler();
 8000286:	f000 f9d9 	bl	800063c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800028a:	622c      	str	r4, [r5, #32]
 800028c:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800028e:	b009      	add	sp, #36	; 0x24
 8000290:	bd30      	pop	{r4, r5, pc}
 8000292:	bf00      	nop
 8000294:	40012400 	.word	0x40012400
 8000298:	40010800 	.word	0x40010800
 800029c:	40011000 	.word	0x40011000
 80002a0:	20000058 	.word	0x20000058
 80002a4:	40020008 	.word	0x40020008

080002a8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80002a8:	b508      	push	{r3, lr}

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 16;
 80002aa:	f04f 0e10 	mov.w	lr, #16
  hcan.Instance = CAN1;
 80002ae:	480b      	ldr	r0, [pc, #44]	; (80002dc <MX_CAN_Init+0x34>)
  hcan.Init.Prescaler = 16;
 80002b0:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_CAN_Init+0x38>)
 80002b2:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ba:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80002bc:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80002be:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c0:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002c2:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002c4:	7683      	strb	r3, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002c6:	76c3      	strb	r3, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002c8:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002ca:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002cc:	f000 fd0c 	bl	8000ce8 <HAL_CAN_Init>
 80002d0:	b118      	cbz	r0, 80002da <MX_CAN_Init+0x32>
  {
    Error_Handler();
  }

}
 80002d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80002d6:	f000 b9b1 	b.w	800063c <Error_Handler>
 80002da:	bd08      	pop	{r3, pc}
 80002dc:	2000009c 	.word	0x2000009c
 80002e0:	40006400 	.word	0x40006400

080002e4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80002e4:	b510      	push	{r4, lr}
 80002e6:	4604      	mov	r4, r0
 80002e8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	2210      	movs	r2, #16
 80002ec:	2100      	movs	r1, #0
 80002ee:	a802      	add	r0, sp, #8
 80002f0:	f002 f8f2 	bl	80024d8 <memset>
  if(canHandle->Instance==CAN1)
 80002f4:	6822      	ldr	r2, [r4, #0]
 80002f6:	4b21      	ldr	r3, [pc, #132]	; (800037c <HAL_CAN_MspInit+0x98>)
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d13d      	bne.n	8000378 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002fc:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000300:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 8000302:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000304:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000308:	61da      	str	r2, [r3, #28]
 800030a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800030c:	481c      	ldr	r0, [pc, #112]	; (8000380 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800030e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000316:	699a      	ldr	r2, [r3, #24]
 8000318:	f042 0204 	orr.w	r2, r2, #4
 800031c:	619a      	str	r2, [r3, #24]
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 8000328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800032c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 800032e:	f001 f8f5 	bl	800151c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 8000332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000336:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000338:	2302      	movs	r3, #2
 800033a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800033c:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 800033e:	a902      	add	r1, sp, #8
 8000340:	480f      	ldr	r0, [pc, #60]	; (8000380 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000342:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8000344:	f001 f8ea 	bl	800151c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000348:	2200      	movs	r2, #0
 800034a:	2013      	movs	r0, #19
 800034c:	4611      	mov	r1, r2
 800034e:	f000 ff81 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000352:	2013      	movs	r0, #19
 8000354:	f000 ffb2 	bl	80012bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	2014      	movs	r0, #20
 800035c:	4611      	mov	r1, r2
 800035e:	f000 ff79 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000362:	2014      	movs	r0, #20
 8000364:	f000 ffaa 	bl	80012bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2015      	movs	r0, #21
 800036c:	4611      	mov	r1, r2
 800036e:	f000 ff71 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000372:	2015      	movs	r0, #21
 8000374:	f000 ffa2 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000378:	b006      	add	sp, #24
 800037a:	bd10      	pop	{r4, pc}
 800037c:	40006400 	.word	0x40006400
 8000380:	40010800 	.word	0x40010800

08000384 <hal_can_filter_init>:
  }
} 

/* USER CODE BEGIN 1 */
void hal_can_filter_init(void){
	hcan_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000384:	2300      	movs	r3, #0
 8000386:	4906      	ldr	r1, [pc, #24]	; (80003a0 <hal_can_filter_init+0x1c>)
	hcan_filter.FilterIdHigh = 0x24D;
	hcan_filter.FilterIdLow = 0x0;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
	hcan_filter.FilterActivation = ENABLE;

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8000388:	4806      	ldr	r0, [pc, #24]	; (80003a4 <hal_can_filter_init+0x20>)
	hcan_filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800038a:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterIdLow = 0x0;
 800038c:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterIdHigh = 0x24D;
 800038e:	f240 234d 	movw	r3, #589	; 0x24d
 8000392:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000394:	2301      	movs	r3, #1
 8000396:	61cb      	str	r3, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 8000398:	620b      	str	r3, [r1, #32]
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 800039a:	f000 bd20 	b.w	8000dde <HAL_CAN_ConfigFilter>
 800039e:	bf00      	nop
 80003a0:	200000c4 	.word	0x200000c4
 80003a4:	2000009c 	.word	0x2000009c

080003a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 80003a8:	b510      	push	{r4, lr}
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
			&hal_message.header,
			hal_message.data );

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003aa:	4c09      	ldr	r4, [pc, #36]	; (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 80003ac:	b08a      	sub	sp, #40	; 0x28
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 80003ae:	ab08      	add	r3, sp, #32
 80003b0:	466a      	mov	r2, sp
 80003b2:	2100      	movs	r1, #0
 80003b4:	f000 fdaa 	bl	8000f0c <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80003b8:	4620      	mov	r0, r4
 80003ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003be:	f001 f994 	bl	80016ea <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4620      	mov	r0, r4
 80003c8:	f001 f98f 	bl	80016ea <HAL_GPIO_TogglePin>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 80003cc:	b00a      	add	sp, #40	; 0x28
 80003ce:	bd10      	pop	{r4, pc}
 80003d0:	40011000 	.word	0x40011000

080003d4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d4:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <MX_DMA_Init+0x6c>)
{
 80003d6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d8:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003da:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003dc:	f042 0201 	orr.w	r2, r2, #1
 80003e0:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003e2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e4:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003e6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003e8:	f003 0301 	and.w	r3, r3, #1
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003f0:	f000 ff30 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003f4:	200b      	movs	r0, #11
 80003f6:	f000 ff61 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	200c      	movs	r0, #12
 80003fe:	4611      	mov	r1, r2
 8000400:	f000 ff28 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000404:	200c      	movs	r0, #12
 8000406:	f000 ff59 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	200d      	movs	r0, #13
 800040e:	4611      	mov	r1, r2
 8000410:	f000 ff20 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000414:	200d      	movs	r0, #13
 8000416:	f000 ff51 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	200e      	movs	r0, #14
 800041e:	4611      	mov	r1, r2
 8000420:	f000 ff18 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000424:	200e      	movs	r0, #14
 8000426:	f000 ff49 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	200f      	movs	r0, #15
 800042e:	4611      	mov	r1, r2
 8000430:	f000 ff10 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000434:	200f      	movs	r0, #15
 8000436:	f000 ff41 	bl	80012bc <HAL_NVIC_EnableIRQ>

}
 800043a:	b003      	add	sp, #12
 800043c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through 
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	f04f 0910 	mov.w	r9, #16
{
 800044c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	464a      	mov	r2, r9
 8000450:	2100      	movs	r1, #0
 8000452:	eb0d 0009 	add.w	r0, sp, r9
 8000456:	f002 f83f 	bl	80024d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045a:	4b49      	ldr	r3, [pc, #292]	; (8000580 <MX_GPIO_Init+0x13c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 800045c:	4e49      	ldr	r6, [pc, #292]	; (8000584 <MX_GPIO_Init+0x140>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	699a      	ldr	r2, [r3, #24]
                          |LCD_CS_Pin|LCD_RS_Pin|LED_Pin|LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 8000460:	4d49      	ldr	r5, [pc, #292]	; (8000588 <MX_GPIO_Init+0x144>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000462:	ea42 0209 	orr.w	r2, r2, r9
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 800046a:	4630      	mov	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046c:	ea02 0209 	and.w	r2, r2, r9
 8000470:	9200      	str	r2, [sp, #0]
 8000472:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000474:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 8000476:	f644 41c7 	movw	r1, #19655	; 0x4cc7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047a:	f042 0220 	orr.w	r2, r2, #32
 800047e:	619a      	str	r2, [r3, #24]
 8000480:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BL_CTRL_Pin|GPIO18_Pin|GPIO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin 
 8000482:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000590 <MX_GPIO_Init+0x14c>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000486:	f002 0220 	and.w	r2, r2, #32
 800048a:	9201      	str	r2, [sp, #4]
 800048c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	699a      	ldr	r2, [r3, #24]
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000490:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	f042 0204 	orr.w	r2, r2, #4
 8000496:	619a      	str	r2, [r3, #24]
 8000498:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
                          |LCD_CS_Pin|LCD_RS_Pin|LED_Pin|LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800049e:	f002 0204 	and.w	r2, r2, #4
 80004a2:	9202      	str	r2, [sp, #8]
 80004a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	f042 0208 	orr.w	r2, r2, #8
 80004ae:	619a      	str	r2, [r3, #24]
 80004b0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 80004b2:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b4:	f003 0308 	and.w	r3, r3, #8
 80004b8:	9303      	str	r3, [sp, #12]
 80004ba:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 80004bc:	f001 f910 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80004c0:	4628      	mov	r0, r5
 80004c2:	2201      	movs	r2, #1
 80004c4:	2104      	movs	r1, #4
 80004c6:	f001 f90b 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BL_CTRL_Pin|GPIO18_Pin|GPIO4_Pin, GPIO_PIN_RESET);
 80004ca:	4628      	mov	r0, r5
 80004cc:	2200      	movs	r2, #0
 80004ce:	f248 1108 	movw	r1, #33032	; 0x8108
 80004d2:	f001 f905 	bl	80016e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin 
 80004d6:	2200      	movs	r2, #0
 80004d8:	4658      	mov	r0, fp
 80004da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004de:	f001 f8ff 	bl	80016e0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_5_Pin;
 80004e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e6:	eb0d 0109 	add.w	r1, sp, r9
 80004ea:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BUTTON_6_Pin|BUTTON_5_Pin;
 80004ec:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ee:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f2:	f001 f813 	bl	800151c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 80004f6:	f644 43c7 	movw	r3, #19655	; 0x4cc7
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fa:	eb0d 0109 	add.w	r1, sp, r9
 80004fe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BLUE_LED_Pin|LCD_RST_Pin|LCD_WR_Pin|LCD_RD_Pin 
 8000500:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pins : PC15 PC3 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000502:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000506:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050e:	f001 f805 	bl	800151c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
 8000512:	f248 3308 	movw	r3, #33544	; 0x8308
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000516:	eb0d 0109 	add.w	r1, sp, r9
 800051a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9;
 800051c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800051e:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000522:	f000 fffb 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|GPIO18_Pin|GPIO4_Pin;
 8000526:	f248 130c 	movw	r3, #33036	; 0x810c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	eb0d 0109 	add.w	r1, sp, r9
 800052e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_CS_Pin|BL_CTRL_Pin|GPIO18_Pin|GPIO4_Pin;
 8000530:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053a:	f000 ffef 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800053e:	eb0d 0109 	add.w	r1, sp, r9
 8000542:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8000544:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000548:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800054c:	f000 ffe6 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin 
 8000550:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |LCD_D15_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin 
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_D8_Pin|LCD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000554:	eb0d 0109 	add.w	r1, sp, r9
 8000558:	4658      	mov	r0, fp
  GPIO_InitStruct.Pin = LCD_D0_Pin|LCD_D1_Pin|LCD_D2_Pin|LCD_D10_Pin 
 800055a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000564:	f000 ffda 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000568:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800056a:	eb0d 0109 	add.w	r1, sp, r9
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000570:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000572:	f8cd a014 	str.w	sl, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000576:	f000 ffd1 	bl	800151c <HAL_GPIO_Init>

}
 800057a:	b009      	add	sp, #36	; 0x24
 800057c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	40011000 	.word	0x40011000
 8000588:	40010800 	.word	0x40010800
 800058c:	40011400 	.word	0x40011400
 8000590:	40010c00 	.word	0x40010c00

08000594 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000594:	2228      	movs	r2, #40	; 0x28
{
 8000596:	b570      	push	{r4, r5, r6, lr}
 8000598:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	eb0d 0002 	add.w	r0, sp, r2
 800059e:	2100      	movs	r1, #0
 80005a0:	f001 ff9a 	bl	80024d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a6:	2410      	movs	r4, #16

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005aa:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	eb0d 0002 	add.w	r0, sp, r2
 80005b0:	2100      	movs	r1, #0
 80005b2:	f001 ff91 	bl	80024d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005b6:	4622      	mov	r2, r4
 80005b8:	2100      	movs	r1, #0
 80005ba:	a801      	add	r0, sp, #4
 80005bc:	f001 ff8c 	bl	80024d8 <memset>
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c4:	950a      	str	r5, [sp, #40]	; 0x28
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c6:	2400      	movs	r4, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	960e      	str	r6, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f001 f897 	bl	80016fc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d0:	4631      	mov	r1, r6
 80005d2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005d6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005de:	f001 fa67 	bl	8001ab0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e4:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80005e6:	9403      	str	r4, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e8:	f001 fb20 	bl	8001c2c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80005ec:	b014      	add	sp, #80	; 0x50
 80005ee:	bd70      	pop	{r4, r5, r6, pc}

080005f0 <main>:
{
 80005f0:	b508      	push	{r3, lr}
  HAL_Init();
 80005f2:	f000 fa2f 	bl	8000a54 <HAL_Init>
  SystemClock_Config();
 80005f6:	f7ff ffcd 	bl	8000594 <SystemClock_Config>
  MX_GPIO_Init();
 80005fa:	f7ff ff23 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fe:	f7ff fee9 	bl	80003d4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000602:	f7ff fda3 	bl	800014c <MX_ADC1_Init>
  MX_CAN_Init();
 8000606:	f7ff fe4f 	bl	80002a8 <MX_CAN_Init>
  MX_SPI1_Init();
 800060a:	f000 f819 	bl	8000640 <MX_SPI1_Init>
  MX_TIM3_Init();
 800060e:	f000 f913 	bl	8000838 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000612:	f000 f973 	bl	80008fc <MX_USART1_UART_Init>
  hal_can_filter_init();
 8000616:	f7ff feb5 	bl	8000384 <hal_can_filter_init>
  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 800061a:	2102      	movs	r1, #2
 800061c:	4805      	ldr	r0, [pc, #20]	; (8000634 <main+0x44>)
 800061e:	f000 fceb 	bl	8000ff8 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 8000622:	4804      	ldr	r0, [pc, #16]	; (8000634 <main+0x44>)
 8000624:	f000 fc47 	bl	8000eb6 <HAL_CAN_Start>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000628:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <main+0x48>)
 800062e:	f001 f85c 	bl	80016ea <HAL_GPIO_TogglePin>
 8000632:	e7fe      	b.n	8000632 <main+0x42>
 8000634:	2000009c 	.word	0x2000009c
 8000638:	40011000 	.word	0x40011000

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	4770      	bx	lr
	...

08000640 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000640:	b508      	push	{r3, lr}

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000642:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi1.Instance = SPI1;
 8000646:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800064a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800064e:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000652:	2300      	movs	r3, #0
 8000654:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000656:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000658:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065c:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000660:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000664:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000666:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8000668:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800066a:	f001 fb57 	bl	8001d1c <HAL_SPI_Init>
 800066e:	b118      	cbz	r0, 8000678 <MX_SPI1_Init+0x38>
  {
    Error_Handler();
  }

}
 8000670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000674:	f7ff bfe2 	b.w	800063c <Error_Handler>
 8000678:	bd08      	pop	{r3, pc}
 800067a:	bf00      	nop
 800067c:	200000ec 	.word	0x200000ec
 8000680:	40013000 	.word	0x40013000

08000684 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4606      	mov	r6, r0
 8000688:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2210      	movs	r2, #16
 800068c:	2100      	movs	r1, #0
 800068e:	a802      	add	r0, sp, #8
 8000690:	f001 ff22 	bl	80024d8 <memset>
  if(spiHandle->Instance==SPI1)
 8000694:	6832      	ldr	r2, [r6, #0]
 8000696:	4b31      	ldr	r3, [pc, #196]	; (800075c <HAL_SPI_MspInit+0xd8>)
 8000698:	429a      	cmp	r2, r3
 800069a:	d15c      	bne.n	8000756 <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800069c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80006a0:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = TP_SCK_Pin|SDI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006a8:	619a      	str	r2, [r3, #24]
 80006aa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	482c      	ldr	r0, [pc, #176]	; (8000760 <HAL_SPI_MspInit+0xdc>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = SDO_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	f042 0204 	orr.w	r2, r2, #4
 80006be:	619a      	str	r2, [r3, #24]
 80006c0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(SDO_GPIO_Port, &GPIO_InitStruct);

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80006c2:	4c28      	ldr	r4, [pc, #160]	; (8000764 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = TP_SCK_Pin|SDI_Pin;
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	2303      	movs	r3, #3
 80006d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f000 ff20 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SDO_Pin;
 80006dc:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(SDO_GPIO_Port, &GPIO_InitStruct);
 80006de:	4820      	ldr	r0, [pc, #128]	; (8000760 <HAL_SPI_MspInit+0xdc>)
 80006e0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = SDO_Pin;
 80006e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(SDO_GPIO_Port, &GPIO_InitStruct);
 80006e8:	f000 ff18 	bl	800151c <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_SPI_MspInit+0xe4>)
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80006ee:	4620      	mov	r0, r4
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f0:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80006f8:	2320      	movs	r3, #32
 80006fa:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000700:	60a5      	str	r5, [r4, #8]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000702:	6125      	str	r5, [r4, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000704:	6165      	str	r5, [r4, #20]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000706:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000708:	f000 fdfc 	bl	8001304 <HAL_DMA_Init>
 800070c:	b108      	cbz	r0, 8000712 <HAL_SPI_MspInit+0x8e>
    {
      Error_Handler();
 800070e:	f7ff ff95 	bl	800063c <Error_Handler>

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000712:	f04f 0c10 	mov.w	ip, #16
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_SPI_MspInit+0xe8>)
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000718:	64f4      	str	r4, [r6, #76]	; 0x4c
 800071a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800071c:	4c14      	ldr	r4, [pc, #80]	; (8000770 <HAL_SPI_MspInit+0xec>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800071e:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000720:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000728:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800072a:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800072c:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000732:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000734:	60e2      	str	r2, [r4, #12]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000736:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000738:	f000 fde4 	bl	8001304 <HAL_DMA_Init>
 800073c:	b108      	cbz	r0, 8000742 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 800073e:	f7ff ff7d 	bl	800063c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000742:	2200      	movs	r2, #0
 8000744:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000746:	64b4      	str	r4, [r6, #72]	; 0x48
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000748:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800074a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800074c:	f000 fd82 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000750:	2023      	movs	r0, #35	; 0x23
 8000752:	f000 fdb3 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000756:	b006      	add	sp, #24
 8000758:	bd70      	pop	{r4, r5, r6, pc}
 800075a:	bf00      	nop
 800075c:	40013000 	.word	0x40013000
 8000760:	40010800 	.word	0x40010800
 8000764:	20000144 	.word	0x20000144
 8000768:	4002001c 	.word	0x4002001c
 800076c:	40020030 	.word	0x40020030
 8000770:	20000188 	.word	0x20000188

08000774 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <HAL_MspInit+0x3c>)
{
 8000776:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000778:	699a      	ldr	r2, [r3, #24]
 800077a:	f042 0201 	orr.w	r2, r2, #1
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	f002 0201 	and.w	r2, r2, #1
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000790:	61da      	str	r2, [r3, #28]
 8000792:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	6853      	ldr	r3, [r2, #4]
 80007a0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	b002      	add	sp, #8
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000

080007b8 <NMI_Handler>:
 80007b8:	4770      	bx	lr

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	e7fe      	b.n	80007be <BusFault_Handler>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler>

080007c2 <SVC_Handler>:
 80007c2:	4770      	bx	lr

080007c4 <DebugMon_Handler>:
 80007c4:	4770      	bx	lr

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 b956 	b.w	8000a78 <HAL_IncTick>

080007cc <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <DMA1_Channel1_IRQHandler+0x8>)
 80007ce:	f000 be11 	b.w	80013f4 <HAL_DMA_IRQHandler>
 80007d2:	bf00      	nop
 80007d4:	20000058 	.word	0x20000058

080007d8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80007d8:	4801      	ldr	r0, [pc, #4]	; (80007e0 <DMA1_Channel2_IRQHandler+0x8>)
 80007da:	f000 be0b 	b.w	80013f4 <HAL_DMA_IRQHandler>
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144

080007e4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80007e4:	4801      	ldr	r0, [pc, #4]	; (80007ec <DMA1_Channel3_IRQHandler+0x8>)
 80007e6:	f000 be05 	b.w	80013f4 <HAL_DMA_IRQHandler>
 80007ea:	bf00      	nop
 80007ec:	20000188 	.word	0x20000188

080007f0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <DMA1_Channel4_IRQHandler+0x8>)
 80007f2:	f000 bdff 	b.w	80013f4 <HAL_DMA_IRQHandler>
 80007f6:	bf00      	nop
 80007f8:	20000214 	.word	0x20000214

080007fc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007fc:	4801      	ldr	r0, [pc, #4]	; (8000804 <DMA1_Channel5_IRQHandler+0x8>)
 80007fe:	f000 bdf9 	b.w	80013f4 <HAL_DMA_IRQHandler>
 8000802:	bf00      	nop
 8000804:	20000258 	.word	0x20000258

08000808 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <CAN1_RX1_IRQHandler+0x8>)
 800080a:	f000 bc12 	b.w	8001032 <HAL_CAN_IRQHandler>
 800080e:	bf00      	nop
 8000810:	2000009c 	.word	0x2000009c

08000814 <USB_LP_CAN1_RX0_IRQHandler>:
 8000814:	f7ff bff8 	b.w	8000808 <CAN1_RX1_IRQHandler>

08000818 <USB_HP_CAN1_TX_IRQHandler>:
 8000818:	f7ff bff6 	b.w	8000808 <CAN1_RX1_IRQHandler>

0800081c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800081c:	4801      	ldr	r0, [pc, #4]	; (8000824 <TIM3_IRQHandler+0x8>)
 800081e:	f001 bb56 	b.w	8001ece <HAL_TIM_IRQHandler>
 8000822:	bf00      	nop
 8000824:	200001cc 	.word	0x200001cc

08000828 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000828:	4801      	ldr	r0, [pc, #4]	; (8000830 <SPI1_IRQHandler+0x8>)
 800082a:	f001 bad1 	b.w	8001dd0 <HAL_SPI_IRQHandler>
 800082e:	bf00      	nop
 8000830:	200000ec 	.word	0x200000ec

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	4770      	bx	lr
	...

08000838 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000838:	b510      	push	{r4, lr}
 800083a:	b08c      	sub	sp, #48	; 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083c:	2210      	movs	r2, #16
 800083e:	2100      	movs	r1, #0
 8000840:	a803      	add	r0, sp, #12
 8000842:	f001 fe49 	bl	80024d8 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000846:	2214      	movs	r2, #20
 8000848:	2100      	movs	r1, #0
 800084a:	a807      	add	r0, sp, #28
 800084c:	f001 fe44 	bl	80024d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 64;
 8000852:	2240      	movs	r2, #64	; 0x40
  htim3.Instance = TIM3;
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <MX_TIM3_Init+0x80>)
  htim3.Init.Prescaler = 64;
 8000856:	4919      	ldr	r1, [pc, #100]	; (80008bc <MX_TIM3_Init+0x84>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	9302      	str	r3, [sp, #8]
  htim3.Init.Prescaler = 64;
 800085c:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8000862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000868:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 800086a:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800086e:	f001 fc09 	bl	8002084 <HAL_TIM_Base_Init>
 8000872:	b108      	cbz	r0, 8000878 <MX_TIM3_Init+0x40>
  {
    Error_Handler();
 8000874:	f7ff fee2 	bl	800063c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800087c:	a903      	add	r1, sp, #12
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <MX_TIM3_Init+0x80>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	f001 fc35 	bl	80020f0 <HAL_TIM_ConfigClockSource>
 8000886:	b108      	cbz	r0, 800088c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000888:	f7ff fed8 	bl	800063c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800088c:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800088e:	a907      	add	r1, sp, #28
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_TIM3_Init+0x80>)
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000892:	9407      	str	r4, [sp, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000894:	9408      	str	r4, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000896:	f001 fd11 	bl	80022bc <HAL_TIM_SlaveConfigSynchro>
 800089a:	b108      	cbz	r0, 80008a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800089c:	f7ff fece 	bl	800063c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a0:	a901      	add	r1, sp, #4
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_TIM3_Init+0x80>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a8:	f001 fd30 	bl	800230c <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	b108      	cbz	r0, 80008b2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80008ae:	f7ff fec5 	bl	800063c <Error_Handler>
  }

}
 80008b2:	b00c      	add	sp, #48	; 0x30
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	bf00      	nop
 80008b8:	200001cc 	.word	0x200001cc
 80008bc:	40000400 	.word	0x40000400

080008c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008c0:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM3)
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_TIM_Base_MspInit+0x38>)
 80008c4:	6802      	ldr	r2, [r0, #0]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d112      	bne.n	80008f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008ca:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80008ce:	69da      	ldr	r2, [r3, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d2:	f042 0202 	orr.w	r2, r2, #2
 80008d6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008da:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008dc:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	9301      	str	r3, [sp, #4]
 80008e4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80008e6:	f000 fcb5 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80008ea:	201d      	movs	r0, #29
 80008ec:	f000 fce6 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80008f0:	b003      	add	sp, #12
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	bf00      	nop
 80008f8:	40000400 	.word	0x40000400

080008fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008fc:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
 80008fe:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart1.Instance = USART1;
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_USART1_UART_Init+0x34>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000906:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000908:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090c:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 800090e:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000910:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000912:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000914:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091a:	f001 fd65 	bl	80023e8 <HAL_UART_Init>
 800091e:	b118      	cbz	r0, 8000928 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8000920:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000924:	f7ff be8a 	b.w	800063c <Error_Handler>
 8000928:	bd08      	pop	{r3, pc}
 800092a:	bf00      	nop
 800092c:	2000029c 	.word	0x2000029c
 8000930:	40013800 	.word	0x40013800

08000934 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4606      	mov	r6, r0
 8000938:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	2210      	movs	r2, #16
 800093c:	2100      	movs	r1, #0
 800093e:	a802      	add	r0, sp, #8
 8000940:	f001 fdca 	bl	80024d8 <memset>
  if(uartHandle->Instance==USART1)
 8000944:	6832      	ldr	r2, [r6, #0]
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_UART_MspInit+0xc0>)
 8000948:	429a      	cmp	r2, r3
 800094a:	d151      	bne.n	80009f0 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000950:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = UART1_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8000952:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8000954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000958:	619a      	str	r2, [r3, #24]
 800095a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 800095c:	4826      	ldr	r0, [pc, #152]	; (80009f8 <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800095e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000962:	9200      	str	r2, [sp, #0]
 8000964:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000968:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	f042 0204 	orr.w	r2, r2, #4
 800096e:	619a      	str	r2, [r3, #24]
 8000970:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000972:	4c22      	ldr	r4, [pc, #136]	; (80009fc <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 800097c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000980:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 800098a:	f000 fdc7 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 800098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8000992:	4819      	ldr	r0, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0xc4>)
 8000994:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 8000996:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000998:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 800099c:	f000 fdbe 	bl	800151c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009a0:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009a2:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009a4:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009a8:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009aa:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ac:	60e3      	str	r3, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ae:	6125      	str	r5, [r4, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b0:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009b2:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b4:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009b6:	f000 fca5 	bl	8001304 <HAL_DMA_Init>
 80009ba:	b108      	cbz	r0, 80009c0 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 80009bc:	f7ff fe3e 	bl	800063c <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009c0:	f04f 0c10 	mov.w	ip, #16
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80009c6:	6374      	str	r4, [r6, #52]	; 0x34
 80009c8:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009ca:	4c0f      	ldr	r4, [pc, #60]	; (8000a08 <HAL_UART_MspInit+0xd4>)
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009cc:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ce:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009d4:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d6:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	60e2      	str	r2, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009da:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009dc:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009de:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009e0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009e2:	f000 fc8f 	bl	8001304 <HAL_DMA_Init>
 80009e6:	b108      	cbz	r0, 80009ec <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80009e8:	f7ff fe28 	bl	800063c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80009ec:	6334      	str	r4, [r6, #48]	; 0x30
 80009ee:	6266      	str	r6, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f0:	b006      	add	sp, #24
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40010800 	.word	0x40010800
 80009fc:	20000258 	.word	0x20000258
 8000a00:	40020058 	.word	0x40020058
 8000a04:	40020044 	.word	0x40020044
 8000a08:	20000214 	.word	0x20000214

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <HAL_InitTick+0x3c>)
{
 8000a10:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a12:	7818      	ldrb	r0, [r3, #0]
 8000a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a18:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_InitTick+0x40>)
 8000a1e:	6810      	ldr	r0, [r2, #0]
 8000a20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a24:	f000 fc58 	bl	80012d8 <HAL_SYSTICK_Config>
 8000a28:	4604      	mov	r4, r0
 8000a2a:	b958      	cbnz	r0, 8000a44 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	2d0f      	cmp	r5, #15
 8000a2e:	d809      	bhi.n	8000a44 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a30:	4602      	mov	r2, r0
 8000a32:	4629      	mov	r1, r5
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f000 fc0c 	bl	8001254 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <HAL_InitTick+0x44>)
 8000a3e:	4620      	mov	r0, r4
 8000a40:	601d      	str	r5, [r3, #0]
 8000a42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a44:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000a46:	bd38      	pop	{r3, r4, r5, pc}
 8000a48:	20000004 	.word	0x20000004
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008

08000a54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x20>)
{
 8000a56:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a58:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a62:	f000 fbe5 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	2000      	movs	r0, #0
 8000a68:	f7ff ffd0 	bl	8000a0c <HAL_InitTick>
  HAL_MspInit();
 8000a6c:	f7ff fe82 	bl	8000774 <HAL_MspInit>
}
 8000a70:	2000      	movs	r0, #0
 8000a72:	bd08      	pop	{r3, pc}
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a78:	4a03      	ldr	r2, [pc, #12]	; (8000a88 <HAL_IncTick+0x10>)
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_IncTick+0x14>)
 8000a7c:	6811      	ldr	r1, [r2, #0]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	440b      	add	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	200002dc 	.word	0x200002dc
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a90:	4b01      	ldr	r3, [pc, #4]	; (8000a98 <HAL_GetTick+0x8>)
 8000a92:	6818      	ldr	r0, [r3, #0]
}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	200002dc 	.word	0x200002dc

08000a9c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000a9c:	2300      	movs	r3, #0
{ 
 8000a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000aa0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000aa2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d074      	beq.n	8000b94 <HAL_ADC_ConfigChannel+0xf8>
 8000aaa:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000aac:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000aae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000ab2:	2d06      	cmp	r5, #6
 8000ab4:	6802      	ldr	r2, [r0, #0]
 8000ab6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000aba:	680c      	ldr	r4, [r1, #0]
 8000abc:	d825      	bhi.n	8000b0a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000abe:	442b      	add	r3, r5
 8000ac0:	251f      	movs	r5, #31
 8000ac2:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000ac4:	3b05      	subs	r3, #5
 8000ac6:	409d      	lsls	r5, r3
 8000ac8:	ea26 0505 	bic.w	r5, r6, r5
 8000acc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ad0:	432b      	orrs	r3, r5
 8000ad2:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ad4:	2c09      	cmp	r4, #9
 8000ad6:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000ada:	688d      	ldr	r5, [r1, #8]
 8000adc:	d92f      	bls.n	8000b3e <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ade:	2607      	movs	r6, #7
 8000ae0:	4423      	add	r3, r4
 8000ae2:	68d1      	ldr	r1, [r2, #12]
 8000ae4:	3b1e      	subs	r3, #30
 8000ae6:	409e      	lsls	r6, r3
 8000ae8:	ea21 0106 	bic.w	r1, r1, r6
 8000aec:	fa05 f303 	lsl.w	r3, r5, r3
 8000af0:	430b      	orrs	r3, r1
 8000af2:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000af4:	f1a4 0310 	sub.w	r3, r4, #16
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d92b      	bls.n	8000b54 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	b002      	add	sp, #8
 8000b08:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b0a:	2d0c      	cmp	r5, #12
 8000b0c:	d80b      	bhi.n	8000b26 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b0e:	442b      	add	r3, r5
 8000b10:	251f      	movs	r5, #31
 8000b12:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b14:	3b23      	subs	r3, #35	; 0x23
 8000b16:	409d      	lsls	r5, r3
 8000b18:	ea26 0505 	bic.w	r5, r6, r5
 8000b1c:	fa04 f303 	lsl.w	r3, r4, r3
 8000b20:	432b      	orrs	r3, r5
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	e7d6      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b26:	442b      	add	r3, r5
 8000b28:	251f      	movs	r5, #31
 8000b2a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000b2c:	3b41      	subs	r3, #65	; 0x41
 8000b2e:	409d      	lsls	r5, r3
 8000b30:	ea26 0505 	bic.w	r5, r6, r5
 8000b34:	fa04 f303 	lsl.w	r3, r4, r3
 8000b38:	432b      	orrs	r3, r5
 8000b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b3c:	e7ca      	b.n	8000ad4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b3e:	2607      	movs	r6, #7
 8000b40:	6911      	ldr	r1, [r2, #16]
 8000b42:	4423      	add	r3, r4
 8000b44:	409e      	lsls	r6, r3
 8000b46:	ea21 0106 	bic.w	r1, r1, r6
 8000b4a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6113      	str	r3, [r2, #16]
 8000b52:	e7cf      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_ADC_ConfigChannel+0xfc>)
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d116      	bne.n	8000b88 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b5a:	6893      	ldr	r3, [r2, #8]
 8000b5c:	021b      	lsls	r3, r3, #8
 8000b5e:	d4cd      	bmi.n	8000afc <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b60:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b62:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b68:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b6a:	d1c7      	bne.n	8000afc <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_ADC_ConfigChannel+0x100>)
 8000b6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <HAL_ADC_ConfigChannel+0x104>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b76:	230a      	movs	r3, #10
 8000b78:	4353      	muls	r3, r2
            wait_loop_index--;
 8000b7a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000b7c:	9b01      	ldr	r3, [sp, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0bc      	beq.n	8000afc <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000b82:	9b01      	ldr	r3, [sp, #4]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	e7f8      	b.n	8000b7a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e7b4      	b.n	8000afe <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000b94:	2302      	movs	r3, #2
 8000b96:	e7b5      	b.n	8000b04 <HAL_ADC_ConfigChannel+0x68>
 8000b98:	40012400 	.word	0x40012400
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	000f4240 	.word	0x000f4240

08000ba4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ba4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ba6:	6803      	ldr	r3, [r0, #0]
{
 8000ba8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	07d2      	lsls	r2, r2, #31
 8000bae:	d401      	bmi.n	8000bb4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	f022 0201 	bic.w	r2, r2, #1
 8000bba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000bbc:	f7ff ff68 	bl	8000a90 <HAL_GetTick>
 8000bc0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	07db      	lsls	r3, r3, #31
 8000bc8:	d5f2      	bpl.n	8000bb0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000bca:	f7ff ff61 	bl	8000a90 <HAL_GetTick>
 8000bce:	1b40      	subs	r0, r0, r5
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000be6:	bd38      	pop	{r3, r4, r5, pc}

08000be8 <HAL_ADC_Init>:
{
 8000be8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d071      	beq.n	8000cd4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000bf2:	b923      	cbnz	r3, 8000bfe <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000bf6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000bfa:	f7ff faf5 	bl	80001e8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f7ff ffd0 	bl	8000ba4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c04:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c06:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c0c:	d164      	bne.n	8000cd8 <HAL_ADC_Init+0xf0>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	d162      	bne.n	8000cd8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c12:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000c1a:	f023 0302 	bic.w	r3, r3, #2
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c22:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c24:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000c26:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c28:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c2a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c2e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c32:	d038      	beq.n	8000ca6 <HAL_ADC_Init+0xbe>
 8000c34:	2901      	cmp	r1, #1
 8000c36:	bf14      	ite	ne
 8000c38:	4606      	movne	r6, r0
 8000c3a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c3e:	7d25      	ldrb	r5, [r4, #20]
 8000c40:	2d01      	cmp	r5, #1
 8000c42:	d107      	bne.n	8000c54 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d130      	bne.n	8000caa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c48:	69a3      	ldr	r3, [r4, #24]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000c50:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000c54:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c56:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000c5a:	685d      	ldr	r5, [r3, #4]
 8000c5c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000c60:	ea45 0506 	orr.w	r5, r5, r6
 8000c64:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000c66:	689e      	ldr	r6, [r3, #8]
 8000c68:	4d1d      	ldr	r5, [pc, #116]	; (8000ce0 <HAL_ADC_Init+0xf8>)
 8000c6a:	ea05 0506 	and.w	r5, r5, r6
 8000c6e:	ea45 0502 	orr.w	r5, r5, r2
 8000c72:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c74:	d001      	beq.n	8000c7a <HAL_ADC_Init+0x92>
 8000c76:	2901      	cmp	r1, #1
 8000c78:	d120      	bne.n	8000cbc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c7a:	6921      	ldr	r1, [r4, #16]
 8000c7c:	3901      	subs	r1, #1
 8000c7e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000c80:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000c82:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000c86:	4329      	orrs	r1, r5
 8000c88:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8a:	6899      	ldr	r1, [r3, #8]
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_ADC_Init+0xfc>)
 8000c8e:	400b      	ands	r3, r1
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d115      	bne.n	8000cc0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000c94:	2300      	movs	r3, #0
 8000c96:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000c98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c9a:	f023 0303 	bic.w	r3, r3, #3
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ca4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ca6:	460e      	mov	r6, r1
 8000ca8:	e7c9      	b.n	8000c3e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000caa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cba:	e7cb      	b.n	8000c54 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e7df      	b.n	8000c80 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000cc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cc2:	f023 0312 	bic.w	r3, r3, #18
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ccc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
}
 8000cd6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cd8:	f043 0310 	orr.w	r3, r3, #16
 8000cdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cde:	e7f9      	b.n	8000cd4 <HAL_ADC_Init+0xec>
 8000ce0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ce4:	ff1f0efe 	.word	0xff1f0efe

08000ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ce8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cea:	4604      	mov	r4, r0
 8000cec:	2800      	cmp	r0, #0
 8000cee:	d06e      	beq.n	8000dce <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cf0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000cf4:	b90b      	cbnz	r3, 8000cfa <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cf6:	f7ff faf5 	bl	80002e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cfa:	6822      	ldr	r2, [r4, #0]
 8000cfc:	6813      	ldr	r3, [r2, #0]
 8000cfe:	f023 0302 	bic.w	r3, r3, #2
 8000d02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff fec4 	bl	8000a90 <HAL_GetTick>
 8000d08:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	0791      	lsls	r1, r2, #30
 8000d10:	d451      	bmi.n	8000db6 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	f042 0201 	orr.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d1a:	f7ff feb9 	bl	8000a90 <HAL_GetTick>
 8000d1e:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	07d2      	lsls	r2, r2, #31
 8000d26:	d554      	bpl.n	8000dd2 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d2a:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d2c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	bf0c      	ite	eq
 8000d32:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d36:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000d3a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d3c:	7e62      	ldrb	r2, [r4, #25]
 8000d3e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	bf0c      	ite	eq
 8000d44:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d48:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000d4c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d4e:	7ea2      	ldrb	r2, [r4, #26]
 8000d50:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	bf0c      	ite	eq
 8000d56:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5a:	f022 0220 	bicne.w	r2, r2, #32
 8000d5e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d60:	7ee2      	ldrb	r2, [r4, #27]
 8000d62:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	bf0c      	ite	eq
 8000d68:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d6c:	f042 0210 	orrne.w	r2, r2, #16
 8000d70:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d72:	7f22      	ldrb	r2, [r4, #28]
 8000d74:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	bf0c      	ite	eq
 8000d7a:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d7e:	f022 0208 	bicne.w	r2, r2, #8
 8000d82:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d84:	7f62      	ldrb	r2, [r4, #29]
 8000d86:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	bf0c      	ite	eq
 8000d8c:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d90:	f022 0204 	bicne.w	r2, r2, #4
 8000d94:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d96:	68e1      	ldr	r1, [r4, #12]
 8000d98:	68a2      	ldr	r2, [r4, #8]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	6921      	ldr	r1, [r4, #16]
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	6961      	ldr	r1, [r4, #20]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	6861      	ldr	r1, [r4, #4]
 8000da6:	3901      	subs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dac:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000dae:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000db0:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db6:	f7ff fe6b 	bl	8000a90 <HAL_GetTick>
 8000dba:	1b40      	subs	r0, r0, r5
 8000dbc:	280a      	cmp	r0, #10
 8000dbe:	d9a4      	bls.n	8000d0a <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc6:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc8:	2305      	movs	r3, #5
 8000dca:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000dce:	2001      	movs	r0, #1
}
 8000dd0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd2:	f7ff fe5d 	bl	8000a90 <HAL_GetTick>
 8000dd6:	1b40      	subs	r0, r0, r5
 8000dd8:	280a      	cmp	r0, #10
 8000dda:	d9a1      	bls.n	8000d20 <HAL_CAN_Init+0x38>
 8000ddc:	e7f0      	b.n	8000dc0 <HAL_CAN_Init+0xd8>

08000dde <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dde:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000de2:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8000de4:	3b01      	subs	r3, #1
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d85f      	bhi.n	8000eaa <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dea:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8000dec:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dee:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000df0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000df4:	f042 0201 	orr.w	r2, r2, #1
 8000df8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000dfc:	f000 021f 	and.w	r2, r0, #31
 8000e00:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e04:	43d4      	mvns	r4, r2
 8000e06:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8000e0a:	4025      	ands	r5, r4
 8000e0c:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e10:	69cd      	ldr	r5, [r1, #28]
 8000e12:	bb85      	cbnz	r5, 8000e76 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e14:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e18:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e1a:	4025      	ands	r5, r4
 8000e1c:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e20:	888d      	ldrh	r5, [r1, #4]
 8000e22:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e26:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e2a:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e2e:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e30:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e32:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e36:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e3a:	6988      	ldr	r0, [r1, #24]
 8000e3c:	bb68      	cbnz	r0, 8000e9a <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e3e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000e42:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e44:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e48:	6908      	ldr	r0, [r1, #16]
 8000e4a:	bb50      	cbnz	r0, 8000ea2 <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e4c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000e50:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e52:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e56:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8000e58:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e5a:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e5c:	bf02      	ittt	eq
 8000e5e:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8000e62:	430a      	orreq	r2, r1
 8000e64:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e68:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8000e74:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e76:	2d01      	cmp	r5, #1
 8000e78:	d1df      	bne.n	8000e3a <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e7a:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e7e:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e80:	4315      	orrs	r5, r2
 8000e82:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e86:	888d      	ldrh	r5, [r1, #4]
 8000e88:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e8c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e90:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e94:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e96:	898d      	ldrh	r5, [r1, #12]
 8000e98:	e7cb      	b.n	8000e32 <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e9a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000e9e:	4310      	orrs	r0, r2
 8000ea0:	e7d0      	b.n	8000e44 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ea2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8000ea6:	4310      	orrs	r0, r2
 8000ea8:	e7d3      	b.n	8000e52 <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000eaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000eb2:	2001      	movs	r0, #1
  }
}
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}

08000eb6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eb6:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000eb8:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8000ebc:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d11f      	bne.n	8000f02 <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec2:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ec4:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ec6:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000eca:	6813      	ldr	r3, [r2, #0]
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ed2:	f7ff fddd 	bl	8000a90 <HAL_GetTick>
 8000ed6:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	6858      	ldr	r0, [r3, #4]
 8000edc:	f010 0001 	ands.w	r0, r0, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee2:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ee4:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee6:	f7ff fdd3 	bl	8000a90 <HAL_GetTick>
 8000eea:	1b40      	subs	r0, r0, r5
 8000eec:	280a      	cmp	r0, #10
 8000eee:	d9f3      	bls.n	8000ed8 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000efe:	2001      	movs	r0, #1
  }
}
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f08:	6243      	str	r3, [r0, #36]	; 0x24
 8000f0a:	e7f8      	b.n	8000efe <HAL_CAN_Start+0x48>

08000f0c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f0e:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f12:	3c01      	subs	r4, #1
 8000f14:	2c01      	cmp	r4, #1
 8000f16:	d86b      	bhi.n	8000ff0 <HAL_CAN_GetRxMessage+0xe4>
 8000f18:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f1a:	b941      	cbnz	r1, 8000f2e <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f1c:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f1e:	07a4      	lsls	r4, r4, #30
 8000f20:	d107      	bne.n	8000f32 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f22:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f28:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000f2a:	2001      	movs	r0, #1
  }
}
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f2e:	6934      	ldr	r4, [r6, #16]
 8000f30:	e7f5      	b.n	8000f1e <HAL_CAN_GetRxMessage+0x12>
 8000f32:	010c      	lsls	r4, r1, #4
 8000f34:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f36:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000f3a:	f007 0704 	and.w	r7, r7, #4
 8000f3e:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f40:	2f00      	cmp	r7, #0
 8000f42:	d14b      	bne.n	8000fdc <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f44:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000f48:	0d7f      	lsrs	r7, r7, #21
 8000f4a:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f4c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f50:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f52:	f007 0702 	and.w	r7, r7, #2
 8000f56:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f58:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000f5c:	f007 070f 	and.w	r7, r7, #15
 8000f60:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f62:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f66:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f6a:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f6e:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f70:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f72:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f74:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000f78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f7a:	6802      	ldr	r2, [r0, #0]
 8000f7c:	4422      	add	r2, r4
 8000f7e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f82:	0a12      	lsrs	r2, r2, #8
 8000f84:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f86:	6802      	ldr	r2, [r0, #0]
 8000f88:	4422      	add	r2, r4
 8000f8a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f8e:	0c12      	lsrs	r2, r2, #16
 8000f90:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f92:	6802      	ldr	r2, [r0, #0]
 8000f94:	4422      	add	r2, r4
 8000f96:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000f9a:	0e12      	lsrs	r2, r2, #24
 8000f9c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f9e:	6802      	ldr	r2, [r0, #0]
 8000fa0:	4422      	add	r2, r4
 8000fa2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fa6:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fa8:	6802      	ldr	r2, [r0, #0]
 8000faa:	4422      	add	r2, r4
 8000fac:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fb0:	0a12      	lsrs	r2, r2, #8
 8000fb2:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fb4:	6802      	ldr	r2, [r0, #0]
 8000fb6:	4422      	add	r2, r4
 8000fb8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000fbc:	0c12      	lsrs	r2, r2, #16
 8000fbe:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fc0:	6802      	ldr	r2, [r0, #0]
 8000fc2:	4414      	add	r4, r2
 8000fc4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000fc8:	0e12      	lsrs	r2, r2, #24
 8000fca:	71da      	strb	r2, [r3, #7]
 8000fcc:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fce:	b951      	cbnz	r1, 8000fe6 <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	f042 0220 	orr.w	r2, r2, #32
 8000fd6:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8000fd8:	2000      	movs	r0, #0
 8000fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fdc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000fe0:	08ff      	lsrs	r7, r7, #3
 8000fe2:	6057      	str	r7, [r2, #4]
 8000fe4:	e7b2      	b.n	8000f4c <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	f042 0220 	orr.w	r2, r2, #32
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	e7f3      	b.n	8000fd8 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff6:	e797      	b.n	8000f28 <HAL_CAN_GetRxMessage+0x1c>

08000ff8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ff8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d805      	bhi.n	800100e <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001002:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 8001004:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001006:	6953      	ldr	r3, [r2, #20]
 8001008:	4319      	orrs	r1, r3
 800100a:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 800100c:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800100e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001014:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
  }
}
 8001018:	4770      	bx	lr

0800101a <HAL_CAN_TxMailbox0CompleteCallback>:
 800101a:	4770      	bx	lr

0800101c <HAL_CAN_TxMailbox1CompleteCallback>:
 800101c:	4770      	bx	lr

0800101e <HAL_CAN_TxMailbox2CompleteCallback>:
 800101e:	4770      	bx	lr

08001020 <HAL_CAN_TxMailbox0AbortCallback>:
 8001020:	4770      	bx	lr

08001022 <HAL_CAN_TxMailbox1AbortCallback>:
 8001022:	4770      	bx	lr

08001024 <HAL_CAN_TxMailbox2AbortCallback>:
 8001024:	4770      	bx	lr

08001026 <HAL_CAN_RxFifo0FullCallback>:
 8001026:	4770      	bx	lr

08001028 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001028:	4770      	bx	lr

0800102a <HAL_CAN_RxFifo1FullCallback>:
 800102a:	4770      	bx	lr

0800102c <HAL_CAN_SleepCallback>:
 800102c:	4770      	bx	lr

0800102e <HAL_CAN_WakeUpFromRxMsgCallback>:
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001030:	4770      	bx	lr

08001032 <HAL_CAN_IRQHandler>:
{
 8001032:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001036:	6803      	ldr	r3, [r0, #0]
{
 8001038:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800103a:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800103c:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001040:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001044:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001046:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800104a:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800104e:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001052:	d022      	beq.n	800109a <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001054:	f017 0401 	ands.w	r4, r7, #1
 8001058:	d007      	beq.n	800106a <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800105a:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800105c:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800105e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001060:	f140 80a3 	bpl.w	80011aa <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001064:	f7ff ffd9 	bl	800101a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001068:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800106a:	05fb      	lsls	r3, r7, #23
 800106c:	d509      	bpl.n	8001082 <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800106e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001072:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001074:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001076:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001078:	f140 80a5 	bpl.w	80011c6 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800107c:	4628      	mov	r0, r5
 800107e:	f7ff ffcd 	bl	800101c <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001082:	03fb      	lsls	r3, r7, #15
 8001084:	d509      	bpl.n	800109a <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001086:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800108a:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800108c:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800108e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001090:	f140 80a7 	bpl.w	80011e2 <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001094:	4628      	mov	r0, r5
 8001096:	f7ff ffc2 	bl	800101e <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800109a:	0733      	lsls	r3, r6, #28
 800109c:	d507      	bpl.n	80010ae <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800109e:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010a2:	bf1f      	itttt	ne
 80010a4:	2210      	movne	r2, #16
 80010a6:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80010a8:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80010ac:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80010ae:	0777      	lsls	r7, r6, #29
 80010b0:	d508      	bpl.n	80010c4 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80010b2:	f01b 0f08 	tst.w	fp, #8
 80010b6:	d005      	beq.n	80010c4 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010b8:	2208      	movs	r2, #8
 80010ba:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010bc:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80010be:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80010c0:	f7ff ffb1 	bl	8001026 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80010c4:	07b0      	lsls	r0, r6, #30
 80010c6:	d506      	bpl.n	80010d6 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80010c8:	682b      	ldr	r3, [r5, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0799      	lsls	r1, r3, #30
 80010ce:	d002      	beq.n	80010d6 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010d0:	4628      	mov	r0, r5
 80010d2:	f7ff f969 	bl	80003a8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010d6:	0672      	lsls	r2, r6, #25
 80010d8:	d507      	bpl.n	80010ea <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010da:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010de:	bf1f      	itttt	ne
 80010e0:	2210      	movne	r2, #16
 80010e2:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010e4:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010e8:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010ea:	06b3      	lsls	r3, r6, #26
 80010ec:	d508      	bpl.n	8001100 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010ee:	f01a 0f08 	tst.w	sl, #8
 80010f2:	d005      	beq.n	8001100 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010f4:	2208      	movs	r2, #8
 80010f6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010f8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010fa:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010fc:	f7ff ff95 	bl	800102a <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001100:	06f7      	lsls	r7, r6, #27
 8001102:	d506      	bpl.n	8001112 <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001104:	682b      	ldr	r3, [r5, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	0798      	lsls	r0, r3, #30
 800110a:	d002      	beq.n	8001112 <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800110c:	4628      	mov	r0, r5
 800110e:	f7ff ff8b 	bl	8001028 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001112:	03b1      	lsls	r1, r6, #14
 8001114:	d508      	bpl.n	8001128 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001116:	f019 0f10 	tst.w	r9, #16
 800111a:	d005      	beq.n	8001128 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800111c:	2210      	movs	r2, #16
 800111e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 8001120:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001122:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001124:	f7ff ff82 	bl	800102c <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001128:	03f2      	lsls	r2, r6, #15
 800112a:	d508      	bpl.n	800113e <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800112c:	f019 0f08 	tst.w	r9, #8
 8001130:	d005      	beq.n	800113e <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001132:	2208      	movs	r2, #8
 8001134:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001136:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001138:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800113a:	f7ff ff78 	bl	800102e <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800113e:	0433      	lsls	r3, r6, #16
 8001140:	d52a      	bpl.n	8001198 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001142:	f019 0f04 	tst.w	r9, #4
 8001146:	682a      	ldr	r2, [r5, #0]
 8001148:	d024      	beq.n	8001194 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800114a:	05f7      	lsls	r7, r6, #23
 800114c:	d504      	bpl.n	8001158 <HAL_CAN_IRQHandler+0x126>
 800114e:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8001152:	bf18      	it	ne
 8001154:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001158:	05b0      	lsls	r0, r6, #22
 800115a:	d504      	bpl.n	8001166 <HAL_CAN_IRQHandler+0x134>
 800115c:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8001160:	bf18      	it	ne
 8001162:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001166:	0571      	lsls	r1, r6, #21
 8001168:	d504      	bpl.n	8001174 <HAL_CAN_IRQHandler+0x142>
 800116a:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 800116e:	bf18      	it	ne
 8001170:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001174:	0533      	lsls	r3, r6, #20
 8001176:	d50d      	bpl.n	8001194 <HAL_CAN_IRQHandler+0x162>
 8001178:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 800117c:	d00a      	beq.n	8001194 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 800117e:	2b30      	cmp	r3, #48	; 0x30
 8001180:	d04c      	beq.n	800121c <HAL_CAN_IRQHandler+0x1ea>
 8001182:	d83c      	bhi.n	80011fe <HAL_CAN_IRQHandler+0x1cc>
 8001184:	2b10      	cmp	r3, #16
 8001186:	d043      	beq.n	8001210 <HAL_CAN_IRQHandler+0x1de>
 8001188:	2b20      	cmp	r3, #32
 800118a:	d044      	beq.n	8001216 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800118c:	6993      	ldr	r3, [r2, #24]
 800118e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001192:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001194:	2304      	movs	r3, #4
 8001196:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001198:	b12c      	cbz	r4, 80011a6 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 800119a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800119c:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 800119e:	431c      	orrs	r4, r3
 80011a0:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80011a2:	f7ff ff45 	bl	8001030 <HAL_CAN_ErrorCallback>
 80011a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011aa:	077a      	lsls	r2, r7, #29
 80011ac:	d405      	bmi.n	80011ba <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ae:	f017 0408 	ands.w	r4, r7, #8
 80011b2:	d105      	bne.n	80011c0 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011b4:	f7ff ff34 	bl	8001020 <HAL_CAN_TxMailbox0AbortCallback>
 80011b8:	e757      	b.n	800106a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011ba:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80011be:	e754      	b.n	800106a <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80011c4:	e751      	b.n	800106a <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011c6:	0579      	lsls	r1, r7, #21
 80011c8:	d502      	bpl.n	80011d0 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011ca:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80011ce:	e758      	b.n	8001082 <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011d0:	053a      	lsls	r2, r7, #20
 80011d2:	d502      	bpl.n	80011da <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011d4:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80011d8:	e753      	b.n	8001082 <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011da:	4628      	mov	r0, r5
 80011dc:	f7ff ff21 	bl	8001022 <HAL_CAN_TxMailbox1AbortCallback>
 80011e0:	e74f      	b.n	8001082 <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011e2:	0379      	lsls	r1, r7, #13
 80011e4:	d502      	bpl.n	80011ec <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011e6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80011ea:	e756      	b.n	800109a <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011ec:	033a      	lsls	r2, r7, #12
 80011ee:	d502      	bpl.n	80011f6 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011f0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80011f4:	e751      	b.n	800109a <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011f6:	4628      	mov	r0, r5
 80011f8:	f7ff ff14 	bl	8001024 <HAL_CAN_TxMailbox2AbortCallback>
 80011fc:	e74d      	b.n	800109a <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80011fe:	2b50      	cmp	r3, #80	; 0x50
 8001200:	d00f      	beq.n	8001222 <HAL_CAN_IRQHandler+0x1f0>
 8001202:	2b60      	cmp	r3, #96	; 0x60
 8001204:	d010      	beq.n	8001228 <HAL_CAN_IRQHandler+0x1f6>
 8001206:	2b40      	cmp	r3, #64	; 0x40
 8001208:	d1c0      	bne.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 800120a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 800120e:	e7bd      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001210:	f044 0408 	orr.w	r4, r4, #8
            break;
 8001214:	e7ba      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001216:	f044 0410 	orr.w	r4, r4, #16
            break;
 800121a:	e7b7      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800121c:	f044 0420 	orr.w	r4, r4, #32
            break;
 8001220:	e7b4      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001222:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8001226:	e7b1      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001228:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 800122c:	e7ae      	b.n	800118c <HAL_CAN_IRQHandler+0x15a>
	...

08001230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001232:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001234:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001236:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800123a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800124a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800124c:	60d3      	str	r3, [r2, #12]
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b530      	push	{r4, r5, lr}
 8001258:	68dc      	ldr	r4, [r3, #12]
 800125a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	2b04      	cmp	r3, #4
 8001266:	bf28      	it	cs
 8001268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001270:	bf98      	it	ls
 8001272:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	fa05 f303 	lsl.w	r3, r5, r3
 8001278:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800127c:	bf88      	it	hi
 800127e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4019      	ands	r1, r3
 8001282:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	fa05 f404 	lsl.w	r4, r5, r4
 8001288:	3c01      	subs	r4, #1
 800128a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800128c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128e:	ea42 0201 	orr.w	r2, r2, r1
 8001292:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	bfa9      	itett	ge
 8001298:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	4b06      	ldrlt	r3, [pc, #24]	; (80012b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	b2d2      	uxtbge	r2, r2
 80012a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	bfbb      	ittet	lt
 80012a6:	f000 000f 	andlt.w	r0, r0, #15
 80012aa:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	541a      	strblt	r2, [r3, r0]
 80012b2:	bd30      	pop	{r4, r5, pc}
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	e000ed14 	.word	0xe000ed14

080012bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012bc:	2800      	cmp	r0, #0
 80012be:	db08      	blt.n	80012d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c0:	2301      	movs	r3, #1
 80012c2:	0942      	lsrs	r2, r0, #5
 80012c4:	f000 001f 	and.w	r0, r0, #31
 80012c8:	fa03 f000 	lsl.w	r0, r3, r0
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <HAL_NVIC_EnableIRQ+0x18>)
 80012ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	3801      	subs	r0, #1
 80012da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012de:	d20a      	bcs.n	80012f6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001304:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001306:	b330      	cbz	r0, 8001356 <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001308:	2214      	movs	r2, #20
 800130a:	6801      	ldr	r1, [r0, #0]
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800130e:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001310:	440b      	add	r3, r1
 8001312:	fbb3 f3f2 	udiv	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 800131c:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 800131e:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001320:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001322:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8001326:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001328:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800132a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800132e:	4323      	orrs	r3, r4
 8001330:	6904      	ldr	r4, [r0, #16]
 8001332:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001334:	6944      	ldr	r4, [r0, #20]
 8001336:	4323      	orrs	r3, r4
 8001338:	6984      	ldr	r4, [r0, #24]
 800133a:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800133c:	69c4      	ldr	r4, [r0, #28]
 800133e:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001340:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001342:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001344:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001346:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001348:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800134e:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001352:	4618      	mov	r0, r3
 8001354:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001356:	2001      	movs	r0, #1
}
 8001358:	bd10      	pop	{r4, pc}
 800135a:	bf00      	nop
 800135c:	bffdfff8 	.word	0xbffdfff8
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001364:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001368:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800136a:	2b02      	cmp	r3, #2
 800136c:	d003      	beq.n	8001376 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136e:	2304      	movs	r3, #4
 8001370:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001372:	2001      	movs	r0, #1
 8001374:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	6803      	ldr	r3, [r0, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	f022 020e 	bic.w	r2, r2, #14
 800137e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_DMA_Abort_IT+0x88>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d01f      	beq.n	80013ce <HAL_DMA_Abort_IT+0x6a>
 800138e:	3214      	adds	r2, #20
 8001390:	4293      	cmp	r3, r2
 8001392:	d01e      	beq.n	80013d2 <HAL_DMA_Abort_IT+0x6e>
 8001394:	3214      	adds	r2, #20
 8001396:	4293      	cmp	r3, r2
 8001398:	d01d      	beq.n	80013d6 <HAL_DMA_Abort_IT+0x72>
 800139a:	3214      	adds	r2, #20
 800139c:	4293      	cmp	r3, r2
 800139e:	d01d      	beq.n	80013dc <HAL_DMA_Abort_IT+0x78>
 80013a0:	3214      	adds	r2, #20
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01d      	beq.n	80013e2 <HAL_DMA_Abort_IT+0x7e>
 80013a6:	3214      	adds	r2, #20
 80013a8:	4293      	cmp	r3, r2
 80013aa:	bf0c      	ite	eq
 80013ac:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80013b0:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013b8:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80013ba:	2301      	movs	r3, #1
 80013bc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 80013c2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80013c6:	b17b      	cbz	r3, 80013e8 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 80013c8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80013ca:	4620      	mov	r0, r4
 80013cc:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ce:	2301      	movs	r3, #1
 80013d0:	e7f0      	b.n	80013b4 <HAL_DMA_Abort_IT+0x50>
 80013d2:	2310      	movs	r3, #16
 80013d4:	e7ee      	b.n	80013b4 <HAL_DMA_Abort_IT+0x50>
 80013d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013da:	e7eb      	b.n	80013b4 <HAL_DMA_Abort_IT+0x50>
 80013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e0:	e7e8      	b.n	80013b4 <HAL_DMA_Abort_IT+0x50>
 80013e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e6:	e7e5      	b.n	80013b4 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 80013ea:	bd10      	pop	{r4, pc}
 80013ec:	40020008 	.word	0x40020008
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013f4:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013f6:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f8:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013fc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80013fe:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001400:	4095      	lsls	r5, r2
 8001402:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001404:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001406:	d032      	beq.n	800146e <HAL_DMA_IRQHandler+0x7a>
 8001408:	074d      	lsls	r5, r1, #29
 800140a:	d530      	bpl.n	800146e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001410:	bf5e      	ittt	pl
 8001412:	681a      	ldrpl	r2, [r3, #0]
 8001414:	f022 0204 	bicpl.w	r2, r2, #4
 8001418:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800141a:	4a3e      	ldr	r2, [pc, #248]	; (8001514 <HAL_DMA_IRQHandler+0x120>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d019      	beq.n	8001454 <HAL_DMA_IRQHandler+0x60>
 8001420:	3214      	adds	r2, #20
 8001422:	4293      	cmp	r3, r2
 8001424:	d018      	beq.n	8001458 <HAL_DMA_IRQHandler+0x64>
 8001426:	3214      	adds	r2, #20
 8001428:	4293      	cmp	r3, r2
 800142a:	d017      	beq.n	800145c <HAL_DMA_IRQHandler+0x68>
 800142c:	3214      	adds	r2, #20
 800142e:	4293      	cmp	r3, r2
 8001430:	d017      	beq.n	8001462 <HAL_DMA_IRQHandler+0x6e>
 8001432:	3214      	adds	r2, #20
 8001434:	4293      	cmp	r3, r2
 8001436:	d017      	beq.n	8001468 <HAL_DMA_IRQHandler+0x74>
 8001438:	3214      	adds	r2, #20
 800143a:	4293      	cmp	r3, r2
 800143c:	bf0c      	ite	eq
 800143e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8001442:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001446:	4a34      	ldr	r2, [pc, #208]	; (8001518 <HAL_DMA_IRQHandler+0x124>)
 8001448:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800144a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 800144c:	2b00      	cmp	r3, #0
 800144e:	d05e      	beq.n	800150e <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8001450:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001452:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001454:	2304      	movs	r3, #4
 8001456:	e7f6      	b.n	8001446 <HAL_DMA_IRQHandler+0x52>
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	e7f4      	b.n	8001446 <HAL_DMA_IRQHandler+0x52>
 800145c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001460:	e7f1      	b.n	8001446 <HAL_DMA_IRQHandler+0x52>
 8001462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001466:	e7ee      	b.n	8001446 <HAL_DMA_IRQHandler+0x52>
 8001468:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800146c:	e7eb      	b.n	8001446 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800146e:	2502      	movs	r5, #2
 8001470:	4095      	lsls	r5, r2
 8001472:	4225      	tst	r5, r4
 8001474:	d035      	beq.n	80014e2 <HAL_DMA_IRQHandler+0xee>
 8001476:	078d      	lsls	r5, r1, #30
 8001478:	d533      	bpl.n	80014e2 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	0694      	lsls	r4, r2, #26
 800147e:	d406      	bmi.n	800148e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	f022 020a 	bic.w	r2, r2, #10
 8001486:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001488:	2201      	movs	r2, #1
 800148a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800148e:	4a21      	ldr	r2, [pc, #132]	; (8001514 <HAL_DMA_IRQHandler+0x120>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d019      	beq.n	80014c8 <HAL_DMA_IRQHandler+0xd4>
 8001494:	3214      	adds	r2, #20
 8001496:	4293      	cmp	r3, r2
 8001498:	d018      	beq.n	80014cc <HAL_DMA_IRQHandler+0xd8>
 800149a:	3214      	adds	r2, #20
 800149c:	4293      	cmp	r3, r2
 800149e:	d017      	beq.n	80014d0 <HAL_DMA_IRQHandler+0xdc>
 80014a0:	3214      	adds	r2, #20
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d017      	beq.n	80014d6 <HAL_DMA_IRQHandler+0xe2>
 80014a6:	3214      	adds	r2, #20
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d017      	beq.n	80014dc <HAL_DMA_IRQHandler+0xe8>
 80014ac:	3214      	adds	r2, #20
 80014ae:	4293      	cmp	r3, r2
 80014b0:	bf0c      	ite	eq
 80014b2:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80014b6:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_DMA_IRQHandler+0x124>)
 80014bc:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80014be:	2300      	movs	r3, #0
 80014c0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80014c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014c6:	e7c1      	b.n	800144c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014c8:	2302      	movs	r3, #2
 80014ca:	e7f6      	b.n	80014ba <HAL_DMA_IRQHandler+0xc6>
 80014cc:	2320      	movs	r3, #32
 80014ce:	e7f4      	b.n	80014ba <HAL_DMA_IRQHandler+0xc6>
 80014d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d4:	e7f1      	b.n	80014ba <HAL_DMA_IRQHandler+0xc6>
 80014d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014da:	e7ee      	b.n	80014ba <HAL_DMA_IRQHandler+0xc6>
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	e7eb      	b.n	80014ba <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014e2:	2508      	movs	r5, #8
 80014e4:	4095      	lsls	r5, r2
 80014e6:	4225      	tst	r5, r4
 80014e8:	d011      	beq.n	800150e <HAL_DMA_IRQHandler+0x11a>
 80014ea:	0709      	lsls	r1, r1, #28
 80014ec:	d50f      	bpl.n	800150e <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	6819      	ldr	r1, [r3, #0]
 80014f0:	f021 010e 	bic.w	r1, r1, #14
 80014f4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014f6:	2301      	movs	r3, #1
 80014f8:	fa03 f202 	lsl.w	r2, r3, r2
 80014fc:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014fe:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001500:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001504:	2300      	movs	r3, #0
 8001506:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800150a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800150c:	e79e      	b.n	800144c <HAL_DMA_IRQHandler+0x58>
}
 800150e:	bc70      	pop	{r4, r5, r6}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40020008 	.word	0x40020008
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001520:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001522:	4626      	mov	r6, r4
 8001524:	4b66      	ldr	r3, [pc, #408]	; (80016c0 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001526:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80016d0 <HAL_GPIO_Init+0x1b4>
 800152a:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80016d4 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	680a      	ldr	r2, [r1, #0]
 8001530:	fa32 f506 	lsrs.w	r5, r2, r6
 8001534:	d102      	bne.n	800153c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8001536:	b003      	add	sp, #12
 8001538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800153c:	f04f 0801 	mov.w	r8, #1
 8001540:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001544:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8001548:	4590      	cmp	r8, r2
 800154a:	d17f      	bne.n	800164c <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 800154c:	684d      	ldr	r5, [r1, #4]
 800154e:	2d12      	cmp	r5, #18
 8001550:	f000 80aa 	beq.w	80016a8 <HAL_GPIO_Init+0x18c>
 8001554:	f200 8083 	bhi.w	800165e <HAL_GPIO_Init+0x142>
 8001558:	2d02      	cmp	r5, #2
 800155a:	f000 80a2 	beq.w	80016a2 <HAL_GPIO_Init+0x186>
 800155e:	d877      	bhi.n	8001650 <HAL_GPIO_Init+0x134>
 8001560:	2d00      	cmp	r5, #0
 8001562:	f000 8089 	beq.w	8001678 <HAL_GPIO_Init+0x15c>
 8001566:	2d01      	cmp	r5, #1
 8001568:	f000 8099 	beq.w	800169e <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800156c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001570:	2aff      	cmp	r2, #255	; 0xff
 8001572:	bf93      	iteet	ls
 8001574:	4682      	movls	sl, r0
 8001576:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800157a:	3d08      	subhi	r5, #8
 800157c:	f8d0 b000 	ldrls.w	fp, [r0]
 8001580:	bf92      	itee	ls
 8001582:	00b5      	lslls	r5, r6, #2
 8001584:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8001588:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800158a:	fa09 f805 	lsl.w	r8, r9, r5
 800158e:	ea2b 0808 	bic.w	r8, fp, r8
 8001592:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001596:	bf88      	it	hi
 8001598:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800159c:	ea48 0505 	orr.w	r5, r8, r5
 80015a0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80015a8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80015ac:	d04e      	beq.n	800164c <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ae:	4d45      	ldr	r5, [pc, #276]	; (80016c4 <HAL_GPIO_Init+0x1a8>)
 80015b0:	4f44      	ldr	r7, [pc, #272]	; (80016c4 <HAL_GPIO_Init+0x1a8>)
 80015b2:	69ad      	ldr	r5, [r5, #24]
 80015b4:	f026 0803 	bic.w	r8, r6, #3
 80015b8:	f045 0501 	orr.w	r5, r5, #1
 80015bc:	61bd      	str	r5, [r7, #24]
 80015be:	69bd      	ldr	r5, [r7, #24]
 80015c0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80015c4:	f005 0501 	and.w	r5, r5, #1
 80015c8:	9501      	str	r5, [sp, #4]
 80015ca:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ce:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80015d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015dc:	fa09 f90b 	lsl.w	r9, r9, fp
 80015e0:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015e4:	4d38      	ldr	r5, [pc, #224]	; (80016c8 <HAL_GPIO_Init+0x1ac>)
 80015e6:	42a8      	cmp	r0, r5
 80015e8:	d063      	beq.n	80016b2 <HAL_GPIO_Init+0x196>
 80015ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015ee:	42a8      	cmp	r0, r5
 80015f0:	d061      	beq.n	80016b6 <HAL_GPIO_Init+0x19a>
 80015f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f6:	42a8      	cmp	r0, r5
 80015f8:	d05f      	beq.n	80016ba <HAL_GPIO_Init+0x19e>
 80015fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015fe:	42a8      	cmp	r0, r5
 8001600:	bf0c      	ite	eq
 8001602:	2503      	moveq	r5, #3
 8001604:	2504      	movne	r5, #4
 8001606:	fa05 f50b 	lsl.w	r5, r5, fp
 800160a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800160e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001612:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001614:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001618:	bf14      	ite	ne
 800161a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161c:	4395      	biceq	r5, r2
 800161e:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001620:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001622:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001626:	bf14      	ite	ne
 8001628:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800162a:	4395      	biceq	r5, r2
 800162c:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800162e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001630:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001634:	bf14      	ite	ne
 8001636:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001638:	4395      	biceq	r5, r2
 800163a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800163c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001642:	bf14      	ite	ne
 8001644:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001646:	ea25 0202 	biceq.w	r2, r5, r2
 800164a:	60da      	str	r2, [r3, #12]
	position++;
 800164c:	3601      	adds	r6, #1
 800164e:	e76e      	b.n	800152e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8001650:	2d03      	cmp	r5, #3
 8001652:	d022      	beq.n	800169a <HAL_GPIO_Init+0x17e>
 8001654:	2d11      	cmp	r5, #17
 8001656:	d189      	bne.n	800156c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001658:	68cc      	ldr	r4, [r1, #12]
 800165a:	3404      	adds	r4, #4
          break;
 800165c:	e786      	b.n	800156c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800165e:	4f1b      	ldr	r7, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x1b0>)
 8001660:	42bd      	cmp	r5, r7
 8001662:	d009      	beq.n	8001678 <HAL_GPIO_Init+0x15c>
 8001664:	d812      	bhi.n	800168c <HAL_GPIO_Init+0x170>
 8001666:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80016d8 <HAL_GPIO_Init+0x1bc>
 800166a:	454d      	cmp	r5, r9
 800166c:	d004      	beq.n	8001678 <HAL_GPIO_Init+0x15c>
 800166e:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001672:	454d      	cmp	r5, r9
 8001674:	f47f af7a 	bne.w	800156c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001678:	688c      	ldr	r4, [r1, #8]
 800167a:	b1c4      	cbz	r4, 80016ae <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800167c:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 800167e:	bf0c      	ite	eq
 8001680:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001684:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001688:	2408      	movs	r4, #8
 800168a:	e76f      	b.n	800156c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 800168c:	4575      	cmp	r5, lr
 800168e:	d0f3      	beq.n	8001678 <HAL_GPIO_Init+0x15c>
 8001690:	4565      	cmp	r5, ip
 8001692:	d0f1      	beq.n	8001678 <HAL_GPIO_Init+0x15c>
 8001694:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80016dc <HAL_GPIO_Init+0x1c0>
 8001698:	e7eb      	b.n	8001672 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800169a:	2400      	movs	r4, #0
 800169c:	e766      	b.n	800156c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169e:	68cc      	ldr	r4, [r1, #12]
          break;
 80016a0:	e764      	b.n	800156c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016a2:	68cc      	ldr	r4, [r1, #12]
 80016a4:	3408      	adds	r4, #8
          break;
 80016a6:	e761      	b.n	800156c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016a8:	68cc      	ldr	r4, [r1, #12]
 80016aa:	340c      	adds	r4, #12
          break;
 80016ac:	e75e      	b.n	800156c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ae:	2404      	movs	r4, #4
 80016b0:	e75c      	b.n	800156c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b2:	2500      	movs	r5, #0
 80016b4:	e7a7      	b.n	8001606 <HAL_GPIO_Init+0xea>
 80016b6:	2501      	movs	r5, #1
 80016b8:	e7a5      	b.n	8001606 <HAL_GPIO_Init+0xea>
 80016ba:	2502      	movs	r5, #2
 80016bc:	e7a3      	b.n	8001606 <HAL_GPIO_Init+0xea>
 80016be:	bf00      	nop
 80016c0:	40010400 	.word	0x40010400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	10210000 	.word	0x10210000
 80016d0:	10310000 	.word	0x10310000
 80016d4:	10320000 	.word	0x10320000
 80016d8:	10110000 	.word	0x10110000
 80016dc:	10220000 	.word	0x10220000

080016e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e0:	b10a      	cbz	r2, 80016e6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e2:	6101      	str	r1, [r0, #16]
 80016e4:	4770      	bx	lr
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	e7fb      	b.n	80016e2 <HAL_GPIO_WritePin+0x2>

080016ea <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016ea:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ec:	ea03 0201 	and.w	r2, r3, r1
 80016f0:	ea21 0103 	bic.w	r1, r1, r3
 80016f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80016f8:	6101      	str	r1, [r0, #16]
 80016fa:	4770      	bx	lr

080016fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001700:	4605      	mov	r5, r0
 8001702:	b908      	cbnz	r0, 8001708 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e03c      	b.n	8001782 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001708:	6803      	ldr	r3, [r0, #0]
 800170a:	07db      	lsls	r3, r3, #31
 800170c:	d410      	bmi.n	8001730 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	682b      	ldr	r3, [r5, #0]
 8001710:	079f      	lsls	r7, r3, #30
 8001712:	d45d      	bmi.n	80017d0 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	0719      	lsls	r1, r3, #28
 8001718:	f100 8094 	bmi.w	8001844 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800171c:	682b      	ldr	r3, [r5, #0]
 800171e:	075a      	lsls	r2, r3, #29
 8001720:	f100 80be 	bmi.w	80018a0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001724:	69e8      	ldr	r0, [r5, #28]
 8001726:	2800      	cmp	r0, #0
 8001728:	f040 812c 	bne.w	8001984 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800172c:	2000      	movs	r0, #0
 800172e:	e028      	b.n	8001782 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001730:	4c8f      	ldr	r4, [pc, #572]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b04      	cmp	r3, #4
 800173a:	d007      	beq.n	800174c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800173c:	6863      	ldr	r3, [r4, #4]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b08      	cmp	r3, #8
 8001744:	d109      	bne.n	800175a <HAL_RCC_OscConfig+0x5e>
 8001746:	6863      	ldr	r3, [r4, #4]
 8001748:	03de      	lsls	r6, r3, #15
 800174a:	d506      	bpl.n	800175a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	039c      	lsls	r4, r3, #14
 8001750:	d5dd      	bpl.n	800170e <HAL_RCC_OscConfig+0x12>
 8001752:	686b      	ldr	r3, [r5, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1da      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
 8001758:	e7d4      	b.n	8001704 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	686b      	ldr	r3, [r5, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001760:	d112      	bne.n	8001788 <HAL_RCC_OscConfig+0x8c>
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001768:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800176a:	f7ff f991 	bl	8000a90 <HAL_GetTick>
 800176e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	0398      	lsls	r0, r3, #14
 8001774:	d4cb      	bmi.n	800170e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff f98b 	bl	8000a90 <HAL_GetTick>
 800177a:	1b80      	subs	r0, r0, r6
 800177c:	2864      	cmp	r0, #100	; 0x64
 800177e:	d9f7      	bls.n	8001770 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001780:	2003      	movs	r0, #3
}
 8001782:	b002      	add	sp, #8
 8001784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	b99b      	cbnz	r3, 80017b2 <HAL_RCC_OscConfig+0xb6>
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001790:	6023      	str	r3, [r4, #0]
 8001792:	6823      	ldr	r3, [r4, #0]
 8001794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001798:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800179a:	f7ff f979 	bl	8000a90 <HAL_GetTick>
 800179e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	0399      	lsls	r1, r3, #14
 80017a4:	d5b3      	bpl.n	800170e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a6:	f7ff f973 	bl	8000a90 <HAL_GetTick>
 80017aa:	1b80      	subs	r0, r0, r6
 80017ac:	2864      	cmp	r0, #100	; 0x64
 80017ae:	d9f7      	bls.n	80017a0 <HAL_RCC_OscConfig+0xa4>
 80017b0:	e7e6      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	d103      	bne.n	80017c2 <HAL_RCC_OscConfig+0xc6>
 80017ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017be:	6023      	str	r3, [r4, #0]
 80017c0:	e7cf      	b.n	8001762 <HAL_RCC_OscConfig+0x66>
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6023      	str	r3, [r4, #0]
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	e7cb      	b.n	8001768 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d0:	4c67      	ldr	r4, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 80017d2:	6863      	ldr	r3, [r4, #4]
 80017d4:	f013 0f0c 	tst.w	r3, #12
 80017d8:	d007      	beq.n	80017ea <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017da:	6863      	ldr	r3, [r4, #4]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d110      	bne.n	8001806 <HAL_RCC_OscConfig+0x10a>
 80017e4:	6863      	ldr	r3, [r4, #4]
 80017e6:	03da      	lsls	r2, r3, #15
 80017e8:	d40d      	bmi.n	8001806 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	079b      	lsls	r3, r3, #30
 80017ee:	d502      	bpl.n	80017f6 <HAL_RCC_OscConfig+0xfa>
 80017f0:	692b      	ldr	r3, [r5, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d186      	bne.n	8001704 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	696a      	ldr	r2, [r5, #20]
 80017fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017fe:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001802:	6023      	str	r3, [r4, #0]
 8001804:	e786      	b.n	8001714 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001806:	692a      	ldr	r2, [r5, #16]
 8001808:	4b5a      	ldr	r3, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x278>)
 800180a:	b16a      	cbz	r2, 8001828 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800180c:	2201      	movs	r2, #1
 800180e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001810:	f7ff f93e 	bl	8000a90 <HAL_GetTick>
 8001814:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	079f      	lsls	r7, r3, #30
 800181a:	d4ec      	bmi.n	80017f6 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181c:	f7ff f938 	bl	8000a90 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2802      	cmp	r0, #2
 8001824:	d9f7      	bls.n	8001816 <HAL_RCC_OscConfig+0x11a>
 8001826:	e7ab      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001828:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800182a:	f7ff f931 	bl	8000a90 <HAL_GetTick>
 800182e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	0798      	lsls	r0, r3, #30
 8001834:	f57f af6e 	bpl.w	8001714 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff f92a 	bl	8000a90 <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	2802      	cmp	r0, #2
 8001840:	d9f6      	bls.n	8001830 <HAL_RCC_OscConfig+0x134>
 8001842:	e79d      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001844:	69aa      	ldr	r2, [r5, #24]
 8001846:	4c4a      	ldr	r4, [pc, #296]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 8001848:	4b4b      	ldr	r3, [pc, #300]	; (8001978 <HAL_RCC_OscConfig+0x27c>)
 800184a:	b1da      	cbz	r2, 8001884 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001850:	f7ff f91e 	bl	8000a90 <HAL_GetTick>
 8001854:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001858:	079b      	lsls	r3, r3, #30
 800185a:	d50d      	bpl.n	8001878 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800185c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001860:	4b46      	ldr	r3, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x280>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fbb3 f3f2 	udiv	r3, r3, r2
 8001868:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800186a:	bf00      	nop
  }
  while (Delay --);
 800186c:	9b01      	ldr	r3, [sp, #4]
 800186e:	1e5a      	subs	r2, r3, #1
 8001870:	9201      	str	r2, [sp, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <HAL_RCC_OscConfig+0x16e>
 8001876:	e751      	b.n	800171c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f90a 	bl	8000a90 <HAL_GetTick>
 800187c:	1b80      	subs	r0, r0, r6
 800187e:	2802      	cmp	r0, #2
 8001880:	d9e9      	bls.n	8001856 <HAL_RCC_OscConfig+0x15a>
 8001882:	e77d      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001884:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001886:	f7ff f903 	bl	8000a90 <HAL_GetTick>
 800188a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800188e:	079f      	lsls	r7, r3, #30
 8001890:	f57f af44 	bpl.w	800171c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff f8fc 	bl	8000a90 <HAL_GetTick>
 8001898:	1b80      	subs	r0, r0, r6
 800189a:	2802      	cmp	r0, #2
 800189c:	d9f6      	bls.n	800188c <HAL_RCC_OscConfig+0x190>
 800189e:	e76f      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a0:	4c33      	ldr	r4, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x274>)
 80018a2:	69e3      	ldr	r3, [r4, #28]
 80018a4:	00d8      	lsls	r0, r3, #3
 80018a6:	d424      	bmi.n	80018f2 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80018a8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	69e3      	ldr	r3, [r4, #28]
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61e3      	str	r3, [r4, #28]
 80018b2:	69e3      	ldr	r3, [r4, #28]
 80018b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4e30      	ldr	r6, [pc, #192]	; (8001980 <HAL_RCC_OscConfig+0x284>)
 80018be:	6833      	ldr	r3, [r6, #0]
 80018c0:	05d9      	lsls	r1, r3, #23
 80018c2:	d518      	bpl.n	80018f6 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c4:	68eb      	ldr	r3, [r5, #12]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d126      	bne.n	8001918 <HAL_RCC_OscConfig+0x21c>
 80018ca:	6a23      	ldr	r3, [r4, #32]
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018d2:	f7ff f8dd 	bl	8000a90 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018da:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018dc:	6a23      	ldr	r3, [r4, #32]
 80018de:	079b      	lsls	r3, r3, #30
 80018e0:	d53f      	bpl.n	8001962 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 80018e2:	2f00      	cmp	r7, #0
 80018e4:	f43f af1e 	beq.w	8001724 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e8:	69e3      	ldr	r3, [r4, #28]
 80018ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ee:	61e3      	str	r3, [r4, #28]
 80018f0:	e718      	b.n	8001724 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 80018f2:	2700      	movs	r7, #0
 80018f4:	e7e2      	b.n	80018bc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	6833      	ldr	r3, [r6, #0]
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018fe:	f7ff f8c7 	bl	8000a90 <HAL_GetTick>
 8001902:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	6833      	ldr	r3, [r6, #0]
 8001906:	05da      	lsls	r2, r3, #23
 8001908:	d4dc      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800190a:	f7ff f8c1 	bl	8000a90 <HAL_GetTick>
 800190e:	eba0 0008 	sub.w	r0, r0, r8
 8001912:	2864      	cmp	r0, #100	; 0x64
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x208>
 8001916:	e733      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001918:	b9ab      	cbnz	r3, 8001946 <HAL_RCC_OscConfig+0x24a>
 800191a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6223      	str	r3, [r4, #32]
 8001926:	6a23      	ldr	r3, [r4, #32]
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800192e:	f7ff f8af 	bl	8000a90 <HAL_GetTick>
 8001932:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	6a23      	ldr	r3, [r4, #32]
 8001936:	0798      	lsls	r0, r3, #30
 8001938:	d5d3      	bpl.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f8a9 	bl	8000a90 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	4540      	cmp	r0, r8
 8001942:	d9f7      	bls.n	8001934 <HAL_RCC_OscConfig+0x238>
 8001944:	e71c      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001946:	2b05      	cmp	r3, #5
 8001948:	6a23      	ldr	r3, [r4, #32]
 800194a:	d103      	bne.n	8001954 <HAL_RCC_OscConfig+0x258>
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	6223      	str	r3, [r4, #32]
 8001952:	e7ba      	b.n	80018ca <HAL_RCC_OscConfig+0x1ce>
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	6223      	str	r3, [r4, #32]
 800195a:	6a23      	ldr	r3, [r4, #32]
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	e7b6      	b.n	80018d0 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001962:	f7ff f895 	bl	8000a90 <HAL_GetTick>
 8001966:	eba0 0008 	sub.w	r0, r0, r8
 800196a:	42b0      	cmp	r0, r6
 800196c:	d9b6      	bls.n	80018dc <HAL_RCC_OscConfig+0x1e0>
 800196e:	e707      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
 8001970:	40021000 	.word	0x40021000
 8001974:	42420000 	.word	0x42420000
 8001978:	42420480 	.word	0x42420480
 800197c:	20000000 	.word	0x20000000
 8001980:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_OscConfig+0x334>)
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	461c      	mov	r4, r3
 800198a:	f002 020c 	and.w	r2, r2, #12
 800198e:	2a08      	cmp	r2, #8
 8001990:	d03d      	beq.n	8001a0e <HAL_RCC_OscConfig+0x312>
 8001992:	2300      	movs	r3, #0
 8001994:	4e27      	ldr	r6, [pc, #156]	; (8001a34 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001998:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	d12b      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 800199c:	f7ff f878 	bl	8000a90 <HAL_GetTick>
 80019a0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	0199      	lsls	r1, r3, #6
 80019a6:	d41f      	bmi.n	80019e8 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019a8:	6a2b      	ldr	r3, [r5, #32]
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019b0:	6862      	ldr	r2, [r4, #4]
 80019b2:	68a9      	ldr	r1, [r5, #8]
 80019b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80019b8:	430a      	orrs	r2, r1
 80019ba:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019bc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80019be:	6862      	ldr	r2, [r4, #4]
 80019c0:	430b      	orrs	r3, r1
 80019c2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80019c6:	4313      	orrs	r3, r2
 80019c8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80019ca:	2301      	movs	r3, #1
 80019cc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019ce:	f7ff f85f 	bl	8000a90 <HAL_GetTick>
 80019d2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	019a      	lsls	r2, r3, #6
 80019d8:	f53f aea8 	bmi.w	800172c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f858 	bl	8000a90 <HAL_GetTick>
 80019e0:	1b40      	subs	r0, r0, r5
 80019e2:	2802      	cmp	r0, #2
 80019e4:	d9f6      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2d8>
 80019e6:	e6cb      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f852 	bl	8000a90 <HAL_GetTick>
 80019ec:	1bc0      	subs	r0, r0, r7
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9d7      	bls.n	80019a2 <HAL_RCC_OscConfig+0x2a6>
 80019f2:	e6c5      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80019f4:	f7ff f84c 	bl	8000a90 <HAL_GetTick>
 80019f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	019b      	lsls	r3, r3, #6
 80019fe:	f57f ae95 	bpl.w	800172c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f845 	bl	8000a90 <HAL_GetTick>
 8001a06:	1b40      	subs	r0, r0, r5
 8001a08:	2802      	cmp	r0, #2
 8001a0a:	d9f6      	bls.n	80019fa <HAL_RCC_OscConfig+0x2fe>
 8001a0c:	e6b8      	b.n	8001780 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a0e:	2801      	cmp	r0, #1
 8001a10:	f43f aeb7 	beq.w	8001782 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001a14:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	6a2b      	ldr	r3, [r5, #32]
 8001a18:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f47f ae71 	bne.w	8001704 <HAL_RCC_OscConfig+0x8>
 8001a22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001a28:	1ac0      	subs	r0, r0, r3
 8001a2a:	bf18      	it	ne
 8001a2c:	2001      	movne	r0, #1
 8001a2e:	e6a8      	b.n	8001782 <HAL_RCC_OscConfig+0x86>
 8001a30:	40021000 	.word	0x40021000
 8001a34:	42420060 	.word	0x42420060

08001a38 <HAL_RCC_GetSysClockFreq>:
{
 8001a38:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001a3c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a3e:	ac02      	add	r4, sp, #8
 8001a40:	f103 0510 	add.w	r5, r3, #16
 8001a44:	4622      	mov	r2, r4
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	6859      	ldr	r1, [r3, #4]
 8001a4a:	3308      	adds	r3, #8
 8001a4c:	c203      	stmia	r2!, {r0, r1}
 8001a4e:	42ab      	cmp	r3, r5
 8001a50:	4614      	mov	r4, r2
 8001a52:	d1f7      	bne.n	8001a44 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a54:	2301      	movs	r3, #1
 8001a56:	f88d 3004 	strb.w	r3, [sp, #4]
 8001a5a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001a5c:	4911      	ldr	r1, [pc, #68]	; (8001aa4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a5e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001a62:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a64:	f003 020c 	and.w	r2, r3, #12
 8001a68:	2a08      	cmp	r2, #8
 8001a6a:	d117      	bne.n	8001a9c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a6c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001a70:	a806      	add	r0, sp, #24
 8001a72:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a76:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a7a:	d50c      	bpl.n	8001a96 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a7c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a7e:	480a      	ldr	r0, [pc, #40]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a80:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a84:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a86:	aa06      	add	r2, sp, #24
 8001a88:	4413      	add	r3, r2
 8001a8a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a8e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001a92:	b007      	add	sp, #28
 8001a94:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <HAL_RCC_GetSysClockFreq+0x74>)
 8001a98:	4350      	muls	r0, r2
 8001a9a:	e7fa      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001a9e:	e7f8      	b.n	8001a92 <HAL_RCC_GetSysClockFreq+0x5a>
 8001aa0:	08002500 	.word	0x08002500
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	007a1200 	.word	0x007a1200
 8001aac:	003d0900 	.word	0x003d0900

08001ab0 <HAL_RCC_ClockConfig>:
{
 8001ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	b910      	cbnz	r0, 8001ac0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001aba:	2001      	movs	r0, #1
 8001abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4a45      	ldr	r2, [pc, #276]	; (8001bd8 <HAL_RCC_ClockConfig+0x128>)
 8001ac2:	6813      	ldr	r3, [r2, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d329      	bcc.n	8001b20 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	6821      	ldr	r1, [r4, #0]
 8001ace:	078e      	lsls	r6, r1, #30
 8001ad0:	d431      	bmi.n	8001b36 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	07ca      	lsls	r2, r1, #31
 8001ad4:	d444      	bmi.n	8001b60 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad6:	4a40      	ldr	r2, [pc, #256]	; (8001bd8 <HAL_RCC_ClockConfig+0x128>)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	429d      	cmp	r5, r3
 8001ae0:	d367      	bcc.n	8001bb2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	4d3d      	ldr	r5, [pc, #244]	; (8001bdc <HAL_RCC_ClockConfig+0x12c>)
 8001ae6:	f012 0f04 	tst.w	r2, #4
 8001aea:	d16e      	bne.n	8001bca <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	0713      	lsls	r3, r2, #28
 8001aee:	d506      	bpl.n	8001afe <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001af0:	686b      	ldr	r3, [r5, #4]
 8001af2:	6922      	ldr	r2, [r4, #16]
 8001af4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001af8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001afc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afe:	f7ff ff9b 	bl	8001a38 <HAL_RCC_GetSysClockFreq>
 8001b02:	686b      	ldr	r3, [r5, #4]
 8001b04:	4a36      	ldr	r2, [pc, #216]	; (8001be0 <HAL_RCC_ClockConfig+0x130>)
 8001b06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	40d8      	lsrs	r0, r3
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_RCC_ClockConfig+0x134>)
 8001b10:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_RCC_ClockConfig+0x138>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f7fe ff79 	bl	8000a0c <HAL_InitTick>
  return HAL_OK;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b20:	6813      	ldr	r3, [r2, #0]
 8001b22:	f023 0307 	bic.w	r3, r3, #7
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	6813      	ldr	r3, [r2, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4299      	cmp	r1, r3
 8001b32:	d1c2      	bne.n	8001aba <HAL_RCC_ClockConfig+0xa>
 8001b34:	e7ca      	b.n	8001acc <HAL_RCC_ClockConfig+0x1c>
 8001b36:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	bf1e      	ittt	ne
 8001b3e:	685a      	ldrne	r2, [r3, #4]
 8001b40:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001b44:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	bf42      	ittt	mi
 8001b4a:	685a      	ldrmi	r2, [r3, #4]
 8001b4c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001b50:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	68a0      	ldr	r0, [r4, #8]
 8001b56:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b5a:	4302      	orrs	r2, r0
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e7b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b60:	6862      	ldr	r2, [r4, #4]
 8001b62:	4e1e      	ldr	r6, [pc, #120]	; (8001bdc <HAL_RCC_ClockConfig+0x12c>)
 8001b64:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b68:	d11b      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	d0a4      	beq.n	8001aba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b70:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b72:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	f023 0303 	bic.w	r3, r3, #3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001b7e:	f7fe ff87 	bl	8000a90 <HAL_GetTick>
 8001b82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b84:	6873      	ldr	r3, [r6, #4]
 8001b86:	6862      	ldr	r2, [r4, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b90:	d0a1      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b92:	f7fe ff7d 	bl	8000a90 <HAL_GetTick>
 8001b96:	1bc0      	subs	r0, r0, r7
 8001b98:	4540      	cmp	r0, r8
 8001b9a:	d9f3      	bls.n	8001b84 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001b9c:	2003      	movs	r0, #3
}
 8001b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba2:	2a02      	cmp	r2, #2
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001baa:	e7e0      	b.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bac:	f013 0f02 	tst.w	r3, #2
 8001bb0:	e7dd      	b.n	8001b6e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	f023 0307 	bic.w	r3, r3, #7
 8001bb8:	432b      	orrs	r3, r5
 8001bba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bbc:	6813      	ldr	r3, [r2, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	429d      	cmp	r5, r3
 8001bc4:	f47f af79 	bne.w	8001aba <HAL_RCC_ClockConfig+0xa>
 8001bc8:	e78b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bca:	686b      	ldr	r3, [r5, #4]
 8001bcc:	68e1      	ldr	r1, [r4, #12]
 8001bce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	606b      	str	r3, [r5, #4]
 8001bd6:	e789      	b.n	8001aec <HAL_RCC_ClockConfig+0x3c>
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08002510 	.word	0x08002510
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	4a03      	ldr	r2, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001bfa:	6810      	ldr	r0, [r2, #0]
}
 8001bfc:	40d8      	lsrs	r0, r3
 8001bfe:	4770      	bx	lr
 8001c00:	40021000 	.word	0x40021000
 8001c04:	08002520 	.word	0x08002520
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	4a03      	ldr	r2, [pc, #12]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c1a:	6810      	ldr	r0, [r2, #0]
}
 8001c1c:	40d8      	lsrs	r0, r3
 8001c1e:	4770      	bx	lr
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08002520 	.word	0x08002520
 8001c28:	20000000 	.word	0x20000000

08001c2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c2c:	6803      	ldr	r3, [r0, #0]
{
 8001c2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c32:	07d9      	lsls	r1, r3, #31
{
 8001c34:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c36:	d520      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c38:	4c35      	ldr	r4, [pc, #212]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c3a:	69e3      	ldr	r3, [r4, #28]
 8001c3c:	00da      	lsls	r2, r3, #3
 8001c3e:	d432      	bmi.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001c40:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	69e3      	ldr	r3, [r4, #28]
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	61e3      	str	r3, [r4, #28]
 8001c4a:	69e3      	ldr	r3, [r4, #28]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4e2f      	ldr	r6, [pc, #188]	; (8001d14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001c56:	6833      	ldr	r3, [r6, #0]
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	d526      	bpl.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c5c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c62:	d136      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c64:	6a23      	ldr	r3, [r4, #32]
 8001c66:	686a      	ldr	r2, [r5, #4]
 8001c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c70:	b11f      	cbz	r7, 8001c7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	69e3      	ldr	r3, [r4, #28]
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c7a:	6828      	ldr	r0, [r5, #0]
 8001c7c:	0783      	lsls	r3, r0, #30
 8001c7e:	d506      	bpl.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c82:	68a9      	ldr	r1, [r5, #8]
 8001c84:	6853      	ldr	r3, [r2, #4]
 8001c86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c8e:	f010 0010 	ands.w	r0, r0, #16
 8001c92:	d01b      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c94:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001c96:	68e9      	ldr	r1, [r5, #12]
 8001c98:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6053      	str	r3, [r2, #4]
 8001ca4:	e012      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2700      	movs	r7, #0
 8001ca8:	e7d4      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	6833      	ldr	r3, [r6, #0]
 8001cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cb2:	f7fe feed 	bl	8000a90 <HAL_GetTick>
 8001cb6:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb8:	6833      	ldr	r3, [r6, #0]
 8001cba:	05d8      	lsls	r0, r3, #23
 8001cbc:	d4ce      	bmi.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7fe fee7 	bl	8000a90 <HAL_GetTick>
 8001cc2:	eba0 0008 	sub.w	r0, r0, r8
 8001cc6:	2864      	cmp	r0, #100	; 0x64
 8001cc8:	d9f6      	bls.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001cca:	2003      	movs	r0, #3
}
 8001ccc:	b002      	add	sp, #8
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cd2:	686a      	ldr	r2, [r5, #4]
 8001cd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d0c3      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cdc:	2001      	movs	r0, #1
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ce2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cea:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001cec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cee:	07d9      	lsls	r1, r3, #31
 8001cf0:	d5b8      	bpl.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fecd 	bl	8000a90 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001cfa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	6a23      	ldr	r3, [r4, #32]
 8001cfe:	079a      	lsls	r2, r3, #30
 8001d00:	d4b0      	bmi.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fec5 	bl	8000a90 <HAL_GetTick>
 8001d06:	1b80      	subs	r0, r0, r6
 8001d08:	4540      	cmp	r0, r8
 8001d0a:	d9f7      	bls.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001d0c:	e7dd      	b.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42420440 	.word	0x42420440

08001d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d1c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d1e:	4604      	mov	r4, r0
 8001d20:	2800      	cmp	r0, #0
 8001d22:	d051      	beq.n	8001dc8 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d14a      	bne.n	8001dc0 <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d2a:	6842      	ldr	r2, [r0, #4]
 8001d2c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001d30:	d000      	beq.n	8001d34 <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d32:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d38:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001d3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d40:	b923      	cbnz	r3, 8001d4c <HAL_SPI_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d42:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7fe fc9c 	bl	8000684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d4c:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d4e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d54:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d56:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d5c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d5e:	6863      	ldr	r3, [r4, #4]
 8001d60:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001d64:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001d68:	4303      	orrs	r3, r0
 8001d6a:	68e0      	ldr	r0, [r4, #12]
 8001d6c:	69a1      	ldr	r1, [r4, #24]
 8001d6e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001d72:	4303      	orrs	r3, r0
 8001d74:	6920      	ldr	r0, [r4, #16]
 8001d76:	f000 0002 	and.w	r0, r0, #2
 8001d7a:	4303      	orrs	r3, r0
 8001d7c:	6960      	ldr	r0, [r4, #20]
 8001d7e:	f000 0001 	and.w	r0, r0, #1
 8001d82:	4303      	orrs	r3, r0
 8001d84:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001d88:	4303      	orrs	r3, r0
 8001d8a:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d8c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d8e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001d92:	4303      	orrs	r3, r0
 8001d94:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d96:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d9a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001d9e:	4303      	orrs	r3, r0
 8001da0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001da2:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001da6:	4303      	orrs	r3, r0
 8001da8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001daa:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dac:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dae:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001db0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001db4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001db6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001dbe:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001dc4:	6143      	str	r3, [r0, #20]
 8001dc6:	e7b5      	b.n	8001d34 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001dc8:	2001      	movs	r0, #1
}
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <HAL_SPI_ErrorCallback>:
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8001dd0:	6803      	ldr	r3, [r0, #0]
{
 8001dd2:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8001dd4:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8001dd6:	689a      	ldr	r2, [r3, #8]
{
 8001dd8:	b085      	sub	sp, #20

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dda:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001dde:	2d01      	cmp	r5, #1
{
 8001de0:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001de2:	d105      	bne.n	8001df0 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001de4:	064d      	lsls	r5, r1, #25
 8001de6:	d503      	bpl.n	8001df0 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8001de8:	6c03      	ldr	r3, [r0, #64]	; 0x40
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8001dea:	4798      	blx	r3
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
  }
}
 8001dec:	b005      	add	sp, #20
 8001dee:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001df0:	0790      	lsls	r0, r2, #30
 8001df2:	d504      	bpl.n	8001dfe <HAL_SPI_IRQHandler+0x2e>
 8001df4:	060d      	lsls	r5, r1, #24
 8001df6:	d502      	bpl.n	8001dfe <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001df8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	e7f5      	b.n	8001dea <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001dfe:	f012 0f60 	tst.w	r2, #96	; 0x60
 8001e02:	d0f3      	beq.n	8001dec <HAL_SPI_IRQHandler+0x1c>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e04:	0688      	lsls	r0, r1, #26
 8001e06:	d5f1      	bpl.n	8001dec <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e08:	0655      	lsls	r5, r2, #25
 8001e0a:	d50e      	bpl.n	8001e2a <HAL_SPI_IRQHandler+0x5a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e0c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001e10:	2500      	movs	r5, #0
 8001e12:	2803      	cmp	r0, #3
 8001e14:	d041      	beq.n	8001e9a <HAL_SPI_IRQHandler+0xca>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e18:	f040 0004 	orr.w	r0, r0, #4
 8001e1c:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e1e:	9501      	str	r5, [sp, #4]
 8001e20:	68d8      	ldr	r0, [r3, #12]
 8001e22:	9001      	str	r0, [sp, #4]
 8001e24:	6898      	ldr	r0, [r3, #8]
 8001e26:	9001      	str	r0, [sp, #4]
 8001e28:	9801      	ldr	r0, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e2a:	0690      	lsls	r0, r2, #26
 8001e2c:	d50c      	bpl.n	8001e48 <HAL_SPI_IRQHandler+0x78>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e30:	f042 0201 	orr.w	r2, r2, #1
 8001e34:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e36:	2200      	movs	r2, #0
 8001e38:	9203      	str	r2, [sp, #12]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	9203      	str	r2, [sp, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e48:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001e4a:	2a00      	cmp	r2, #0
 8001e4c:	d0ce      	beq.n	8001dec <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e54:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8001e56:	2201      	movs	r2, #1
 8001e58:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e5c:	078a      	lsls	r2, r1, #30
 8001e5e:	d023      	beq.n	8001ea8 <HAL_SPI_IRQHandler+0xd8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e60:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001e62:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e64:	f022 0203 	bic.w	r2, r2, #3
 8001e68:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8001e6a:	b140      	cbz	r0, 8001e7e <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_SPI_IRQHandler+0xe0>)
 8001e6e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e70:	f7ff fa78 	bl	8001364 <HAL_DMA_Abort_IT>
 8001e74:	b118      	cbz	r0, 8001e7e <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e7c:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001e7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d0b3      	beq.n	8001dec <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_SPI_IRQHandler+0xe0>)
 8001e86:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001e88:	f7ff fa6c 	bl	8001364 <HAL_DMA_Abort_IT>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0ad      	beq.n	8001dec <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e96:	6563      	str	r3, [r4, #84]	; 0x54
 8001e98:	e7a8      	b.n	8001dec <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e9a:	9502      	str	r5, [sp, #8]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	9202      	str	r2, [sp, #8]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	9b02      	ldr	r3, [sp, #8]
        return;
 8001ea6:	e7a1      	b.n	8001dec <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f7ff ff8f 	bl	8001dcc <HAL_SPI_ErrorCallback>
 8001eae:	e79d      	b.n	8001dec <HAL_SPI_IRQHandler+0x1c>
 8001eb0:	08001eb5 	.word	0x08001eb5

08001eb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
  hspi->RxXferCount = 0U;
 8001eb6:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001eb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8001eba:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001ebc:	86c3      	strh	r3, [r0, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001ebe:	f7ff ff85 	bl	8001dcc <HAL_SPI_ErrorCallback>
 8001ec2:	bd08      	pop	{r3, pc}

08001ec4 <HAL_TIM_PeriodElapsedCallback>:
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_IC_CaptureCallback>:
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_PWM_PulseFinishedCallback>:
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_TriggerCallback>:
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ece:	6803      	ldr	r3, [r0, #0]
{
 8001ed0:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed2:	691a      	ldr	r2, [r3, #16]
{
 8001ed4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed6:	0791      	lsls	r1, r2, #30
 8001ed8:	d50e      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	0792      	lsls	r2, r2, #30
 8001ede:	d50b      	bpl.n	8001ef8 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee0:	f06f 0202 	mvn.w	r2, #2
 8001ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee6:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eec:	079b      	lsls	r3, r3, #30
 8001eee:	d077      	beq.n	8001fe0 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	f7ff ffea 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	0750      	lsls	r0, r2, #29
 8001efe:	d510      	bpl.n	8001f22 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	0751      	lsls	r1, r2, #29
 8001f04:	d50d      	bpl.n	8001f22 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f06:	f06f 0204 	mvn.w	r2, #4
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0c:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f12:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f18:	d068      	beq.n	8001fec <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	f7ff ffd5 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	0712      	lsls	r2, r2, #28
 8001f28:	d50f      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	0710      	lsls	r0, r2, #28
 8001f2e:	d50c      	bpl.n	8001f4a <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f30:	f06f 0208 	mvn.w	r2, #8
 8001f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f36:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f3c:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f40:	d05a      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	f7ff ffc1 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f46:	2300      	movs	r3, #0
 8001f48:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	06d2      	lsls	r2, r2, #27
 8001f50:	d510      	bpl.n	8001f74 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	06d0      	lsls	r0, r2, #27
 8001f56:	d50d      	bpl.n	8001f74 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f58:	f06f 0210 	mvn.w	r2, #16
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f5e:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f60:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f64:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6a:	d04b      	beq.n	8002004 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	f7ff ffac 	bl	8001ec8 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f70:	2300      	movs	r3, #0
 8001f72:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	07d1      	lsls	r1, r2, #31
 8001f7a:	d508      	bpl.n	8001f8e <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	07d2      	lsls	r2, r2, #31
 8001f80:	d505      	bpl.n	8001f8e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f82:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f88:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8a:	f7ff ff9b 	bl	8001ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	0610      	lsls	r0, r2, #24
 8001f94:	d508      	bpl.n	8001fa8 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	0611      	lsls	r1, r2, #24
 8001f9a:	d505      	bpl.n	8001fa8 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fa0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fa4:	f000 f9e5 	bl	8002372 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	0652      	lsls	r2, r2, #25
 8001fae:	d508      	bpl.n	8001fc2 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	0650      	lsls	r0, r2, #25
 8001fb4:	d505      	bpl.n	8001fc2 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fbc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fbe:	f7ff ff85 	bl	8001ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	0691      	lsls	r1, r2, #26
 8001fc8:	d522      	bpl.n	8002010 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	0692      	lsls	r2, r2, #26
 8001fce:	d51f      	bpl.n	8002010 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd0:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd4:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001fdc:	f000 b9c8 	b.w	8002370 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe0:	f7ff ff71 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f7ff ff70 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001fea:	e783      	b.n	8001ef4 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	f7ff ff6b 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f7ff ff6a 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8001ff6:	e792      	b.n	8001f1e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff8:	f7ff ff65 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	f7ff ff64 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 8002002:	e7a0      	b.n	8001f46 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002004:	f7ff ff5f 	bl	8001ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	4620      	mov	r0, r4
 800200a:	f7ff ff5e 	bl	8001eca <HAL_TIM_PWM_PulseFinishedCallback>
 800200e:	e7af      	b.n	8001f70 <HAL_TIM_IRQHandler+0xa2>
 8002010:	bd10      	pop	{r4, pc}
	...

08002014 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002014:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002016:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	4290      	cmp	r0, r2
 800201a:	d00a      	beq.n	8002032 <TIM_Base_SetConfig+0x1e>
 800201c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0x1e>
 8002022:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002026:	4290      	cmp	r0, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0x1e>
 800202a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800202e:	4290      	cmp	r0, r2
 8002030:	d115      	bne.n	800205e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002032:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002038:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <TIM_Base_SetConfig+0x6c>)
 800203c:	4290      	cmp	r0, r2
 800203e:	d00a      	beq.n	8002056 <TIM_Base_SetConfig+0x42>
 8002040:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002044:	d007      	beq.n	8002056 <TIM_Base_SetConfig+0x42>
 8002046:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800204a:	4290      	cmp	r0, r2
 800204c:	d003      	beq.n	8002056 <TIM_Base_SetConfig+0x42>
 800204e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002052:	4290      	cmp	r0, r2
 8002054:	d103      	bne.n	800205e <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800205c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800205e:	694a      	ldr	r2, [r1, #20]
 8002060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002064:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002066:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	688b      	ldr	r3, [r1, #8]
 800206a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800206c:	680b      	ldr	r3, [r1, #0]
 800206e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <TIM_Base_SetConfig+0x6c>)
 8002072:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	bf04      	itt	eq
 8002076:	690b      	ldreq	r3, [r1, #16]
 8002078:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207a:	2301      	movs	r3, #1
 800207c:	6143      	str	r3, [r0, #20]
 800207e:	4770      	bx	lr
 8002080:	40012c00 	.word	0x40012c00

08002084 <HAL_TIM_Base_Init>:
{
 8002084:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002086:	4604      	mov	r4, r0
 8002088:	b330      	cbz	r0, 80020d8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800208e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002092:	b91b      	cbnz	r3, 800209c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002094:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002098:	f7fe fc12 	bl	80008c0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800209c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a4:	1d21      	adds	r1, r4, #4
 80020a6:	f7ff ffb5 	bl	8002014 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020aa:	2301      	movs	r3, #1
  return HAL_OK;
 80020ac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80020b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80020ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80020ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80020d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020d8:	2001      	movs	r0, #1
}
 80020da:	bd10      	pop	{r4, pc}

080020dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020dc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80020de:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020ea:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ec:	6083      	str	r3, [r0, #8]
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80020f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80020f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80020f6:	2b01      	cmp	r3, #1
{
 80020f8:	4604      	mov	r4, r0
 80020fa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80020fe:	d019      	beq.n	8002134 <HAL_TIM_ConfigClockSource+0x44>
 8002100:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002102:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002106:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002108:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800210c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800210e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002116:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002118:	680b      	ldr	r3, [r1, #0]
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d065      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0xfa>
 800211e:	d815      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x5c>
 8002120:	2b10      	cmp	r3, #16
 8002122:	d00c      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x4e>
 8002124:	d807      	bhi.n	8002136 <HAL_TIM_ConfigClockSource+0x46>
 8002126:	b153      	cbz	r3, 800213e <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002128:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800212a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800212c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002130:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002134:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002136:	2b20      	cmp	r3, #32
 8002138:	d001      	beq.n	800213e <HAL_TIM_ConfigClockSource+0x4e>
 800213a:	2b30      	cmp	r3, #48	; 0x30
 800213c:	d1f4      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800213e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002140:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8002144:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002148:	4313      	orrs	r3, r2
 800214a:	e01a      	b.n	8002182 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800214c:	2b60      	cmp	r3, #96	; 0x60
 800214e:	d034      	beq.n	80021ba <HAL_TIM_ConfigClockSource+0xca>
 8002150:	d819      	bhi.n	8002186 <HAL_TIM_ConfigClockSource+0x96>
 8002152:	2b50      	cmp	r3, #80	; 0x50
 8002154:	d1e8      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002156:	684a      	ldr	r2, [r1, #4]
 8002158:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800215a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800215c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800215e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002162:	f025 0501 	bic.w	r5, r5, #1
 8002166:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002168:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800216a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800216c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002170:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002174:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002176:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002178:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800217a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800217e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002182:	6083      	str	r3, [r0, #8]
 8002184:	e7d0      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8002186:	2b70      	cmp	r3, #112	; 0x70
 8002188:	d00c      	beq.n	80021a4 <HAL_TIM_ConfigClockSource+0xb4>
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d1cb      	bne.n	8002128 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002190:	68cb      	ldr	r3, [r1, #12]
 8002192:	684a      	ldr	r2, [r1, #4]
 8002194:	6889      	ldr	r1, [r1, #8]
 8002196:	f7ff ffa1 	bl	80020dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	6893      	ldr	r3, [r2, #8]
 800219e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a2:	e008      	b.n	80021b6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80021a4:	68cb      	ldr	r3, [r1, #12]
 80021a6:	684a      	ldr	r2, [r1, #4]
 80021a8:	6889      	ldr	r1, [r1, #8]
 80021aa:	f7ff ff97 	bl	80020dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021ae:	6822      	ldr	r2, [r4, #0]
 80021b0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b6:	6093      	str	r3, [r2, #8]
      break;
 80021b8:	e7b6      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ba:	684d      	ldr	r5, [r1, #4]
 80021bc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021be:	6a01      	ldr	r1, [r0, #32]
 80021c0:	f021 0110 	bic.w	r1, r1, #16
 80021c4:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80021c8:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80021d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021d6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80021da:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021dc:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021e4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80021e8:	e7cb      	b.n	8002182 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ea:	684a      	ldr	r2, [r1, #4]
 80021ec:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80021ee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021f2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021f6:	f025 0501 	bic.w	r5, r5, #1
 80021fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021fc:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80021fe:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002204:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002208:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800220a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800220c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002212:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002216:	e7b4      	b.n	8002182 <HAL_TIM_ConfigClockSource+0x92>

08002218 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 8002218:	6800      	ldr	r0, [r0, #0]
{
 800221a:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 800221c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800221e:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002224:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002226:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002228:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800222c:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 800222e:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8002230:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8002232:	d01e      	beq.n	8002272 <TIM_SlaveTimer_SetConfig+0x5a>
 8002234:	d803      	bhi.n	800223e <TIM_SlaveTimer_SetConfig+0x26>
 8002236:	2a40      	cmp	r2, #64	; 0x40
 8002238:	d00b      	beq.n	8002252 <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 800223a:	2000      	movs	r0, #0
 800223c:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 800223e:	2a60      	cmp	r2, #96	; 0x60
 8002240:	d027      	beq.n	8002292 <TIM_SlaveTimer_SetConfig+0x7a>
 8002242:	2a70      	cmp	r2, #112	; 0x70
 8002244:	d1f9      	bne.n	800223a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 8002246:	690b      	ldr	r3, [r1, #16]
 8002248:	688a      	ldr	r2, [r1, #8]
 800224a:	68c9      	ldr	r1, [r1, #12]
 800224c:	f7ff ff46 	bl	80020dc <TIM_ETR_SetConfig>
 8002250:	e7f3      	b.n	800223a <TIM_SlaveTimer_SetConfig+0x22>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002252:	2c05      	cmp	r4, #5
 8002254:	d030      	beq.n	80022b8 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 8002256:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002258:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800225a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002262:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002268:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800226c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800226e:	6202      	str	r2, [r0, #32]
 8002270:	e7e3      	b.n	800223a <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002272:	688a      	ldr	r2, [r1, #8]
 8002274:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002276:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002278:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800227a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227e:	f024 0401 	bic.w	r4, r4, #1
 8002282:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002284:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002286:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002288:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800228c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002290:	e7ec      	b.n	800226c <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002292:	688c      	ldr	r4, [r1, #8]
 8002294:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002296:	6a01      	ldr	r1, [r0, #32]
 8002298:	f021 0110 	bic.w	r1, r1, #16
 800229c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800229e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022a0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022a2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022aa:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80022ae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80022b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022b4:	6203      	str	r3, [r0, #32]
 80022b6:	e7c0      	b.n	800223a <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 80022b8:	2001      	movs	r0, #1
}
 80022ba:	bd38      	pop	{r3, r4, r5, pc}

080022bc <HAL_TIM_SlaveConfigSynchro>:
{
 80022bc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022c2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f04f 0302 	mov.w	r3, #2
 80022ca:	d01c      	beq.n	8002306 <HAL_TIM_SlaveConfigSynchro+0x4a>
 80022cc:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80022ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80022d2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80022d6:	f7ff ff9f 	bl	8002218 <TIM_SlaveTimer_SetConfig>
 80022da:	b130      	cbz	r0, 80022ea <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 80022dc:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 80022de:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80022e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80022e6:	4628      	mov	r0, r5
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022f2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022fa:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002300:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8002304:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002306:	4618      	mov	r0, r3
}
 8002308:	bd38      	pop	{r3, r4, r5, pc}
	...

0800230c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800230c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002310:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002312:	2b01      	cmp	r3, #1
 8002314:	f04f 0302 	mov.w	r3, #2
 8002318:	d025      	beq.n	8002366 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800231a:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800231c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002320:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002322:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002324:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8002326:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 800232a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800232e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002330:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002332:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002334:	4c0d      	ldr	r4, [pc, #52]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002336:	42a3      	cmp	r3, r4
 8002338:	d00a      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d007      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002340:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002344:	42a3      	cmp	r3, r4
 8002346:	d003      	beq.n	8002350 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8002348:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800234c:	42a3      	cmp	r3, r4
 800234e:	d104      	bne.n	800235a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002350:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002356:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002358:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800235a:	2301      	movs	r3, #1
 800235c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002360:	2300      	movs	r3, #0
 8002362:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002366:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002368:	bd30      	pop	{r4, r5, pc}
 800236a:	bf00      	nop
 800236c:	40012c00 	.word	0x40012c00

08002370 <HAL_TIMEx_CommutCallback>:
 8002370:	4770      	bx	lr

08002372 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002372:	4770      	bx	lr

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	68c1      	ldr	r1, [r0, #12]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002382:	430a      	orrs	r2, r1
 8002384:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002386:	6882      	ldr	r2, [r0, #8]
 8002388:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800238a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800238c:	4302      	orrs	r2, r0
 800238e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002390:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8002394:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002398:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800239a:	430a      	orrs	r2, r1
 800239c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239e:	695a      	ldr	r2, [r3, #20]
 80023a0:	69a1      	ldr	r1, [r4, #24]
 80023a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023a6:	430a      	orrs	r2, r1
 80023a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023aa:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <UART_SetConfig+0x70>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d115      	bne.n	80023dc <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7ff fc2c 	bl	8001c0c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023b4:	2319      	movs	r3, #25
 80023b6:	4358      	muls	r0, r3
 80023b8:	6863      	ldr	r3, [r4, #4]
 80023ba:	2264      	movs	r2, #100	; 0x64
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fbb0 f0f3 	udiv	r0, r0, r3
 80023c2:	fbb0 f1f2 	udiv	r1, r0, r2
 80023c6:	fb02 0311 	mls	r3, r2, r1, r0
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80023d2:	6825      	ldr	r5, [r4, #0]
 80023d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80023d8:	60ab      	str	r3, [r5, #8]
 80023da:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80023dc:	f7ff fc06 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 80023e0:	e7e8      	b.n	80023b4 <UART_SetConfig+0x40>
 80023e2:	bf00      	nop
 80023e4:	40013800 	.word	0x40013800

080023e8 <HAL_UART_Init>:
{
 80023e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023ea:	4604      	mov	r4, r0
 80023ec:	b340      	cbz	r0, 8002440 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023ee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023f6:	b91b      	cbnz	r3, 8002400 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023f8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023fc:	f7fe fa9a 	bl	8000934 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002400:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002402:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002408:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800240a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800240c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002410:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002412:	f7ff ffaf 	bl	8002374 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002416:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002428:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002430:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002432:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002436:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800243a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800243e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
}
 8002442:	bd10      	pop	{r4, pc}

08002444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002444:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002446:	e003      	b.n	8002450 <LoopCopyDataInit>

08002448 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800244a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800244c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800244e:	3104      	adds	r1, #4

08002450 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002450:	480a      	ldr	r0, [pc, #40]	; (800247c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002454:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002456:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002458:	d3f6      	bcc.n	8002448 <CopyDataInit>
  ldr r2, =_sbss
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800245c:	e002      	b.n	8002464 <LoopFillZerobss>

0800245e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002460:	f842 3b04 	str.w	r3, [r2], #4

08002464 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002466:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002468:	d3f9      	bcc.n	800245e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800246a:	f7fe f9e3 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800246e:	f000 f80f 	bl	8002490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002472:	f7fe f8bd 	bl	80005f0 <main>
  bx lr
 8002476:	4770      	bx	lr
  ldr r3, =_sidata
 8002478:	08002530 	.word	0x08002530
  ldr r0, =_sdata
 800247c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002480:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002484:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002488:	200002e0 	.word	0x200002e0

0800248c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800248c:	e7fe      	b.n	800248c <ADC1_2_IRQHandler>
	...

08002490 <__libc_init_array>:
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	2500      	movs	r5, #0
 8002494:	4e0c      	ldr	r6, [pc, #48]	; (80024c8 <__libc_init_array+0x38>)
 8002496:	4c0d      	ldr	r4, [pc, #52]	; (80024cc <__libc_init_array+0x3c>)
 8002498:	1ba4      	subs	r4, r4, r6
 800249a:	10a4      	asrs	r4, r4, #2
 800249c:	42a5      	cmp	r5, r4
 800249e:	d109      	bne.n	80024b4 <__libc_init_array+0x24>
 80024a0:	f000 f822 	bl	80024e8 <_init>
 80024a4:	2500      	movs	r5, #0
 80024a6:	4e0a      	ldr	r6, [pc, #40]	; (80024d0 <__libc_init_array+0x40>)
 80024a8:	4c0a      	ldr	r4, [pc, #40]	; (80024d4 <__libc_init_array+0x44>)
 80024aa:	1ba4      	subs	r4, r4, r6
 80024ac:	10a4      	asrs	r4, r4, #2
 80024ae:	42a5      	cmp	r5, r4
 80024b0:	d105      	bne.n	80024be <__libc_init_array+0x2e>
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
 80024b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b8:	4798      	blx	r3
 80024ba:	3501      	adds	r5, #1
 80024bc:	e7ee      	b.n	800249c <__libc_init_array+0xc>
 80024be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c2:	4798      	blx	r3
 80024c4:	3501      	adds	r5, #1
 80024c6:	e7f2      	b.n	80024ae <__libc_init_array+0x1e>
 80024c8:	08002528 	.word	0x08002528
 80024cc:	08002528 	.word	0x08002528
 80024d0:	08002528 	.word	0x08002528
 80024d4:	0800252c 	.word	0x0800252c

080024d8 <memset>:
 80024d8:	4603      	mov	r3, r0
 80024da:	4402      	add	r2, r0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d100      	bne.n	80024e2 <memset+0xa>
 80024e0:	4770      	bx	lr
 80024e2:	f803 1b01 	strb.w	r1, [r3], #1
 80024e6:	e7f9      	b.n	80024dc <memset+0x4>

080024e8 <_init>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr

080024f4 <_fini>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	bf00      	nop
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr
