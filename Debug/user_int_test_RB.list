
user_int_test_RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006aec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08006c00  08006c00  00016c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    000000e4  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000188  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08007100  08007100  00017100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08007104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000240  20000084  08007188  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002c4  08007188  000202c4  2**0
                  ALLOC
 10 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017abd  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000415c  00000000  00000000  00037b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e40  00000000  00000000  0003bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001090  00000000  00000000  0003cb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008abc  00000000  00000000  0003db98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005954  00000000  00000000  00046654  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004bfa8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036f4  00000000  00000000  0004c024  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00007f9c  00000000  00000000  0004f718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08006be4 	.word	0x08006be4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08006be4 	.word	0x08006be4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002a2:	f1a4 0401 	sub.w	r4, r4, #1
 80002a6:	d1e9      	bne.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f092 0f00 	teq	r2, #0
 800044e:	bf14      	ite	ne
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e720      	b.n	80002a8 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aedc 	beq.w	8000256 <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6c1      	b.n	8000256 <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <__gedf2>:
 80008f8:	f04f 3cff 	mov.w	ip, #4294967295
 80008fc:	e006      	b.n	800090c <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__ledf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	e002      	b.n	800090c <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__cmpdf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000910:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800091c:	bf18      	it	ne
 800091e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000922:	d01b      	beq.n	800095c <__cmpdf2+0x54>
 8000924:	b001      	add	sp, #4
 8000926:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092a:	bf0c      	ite	eq
 800092c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000930:	ea91 0f03 	teqne	r1, r3
 8000934:	bf02      	ittt	eq
 8000936:	ea90 0f02 	teqeq	r0, r2
 800093a:	2000      	moveq	r0, #0
 800093c:	4770      	bxeq	lr
 800093e:	f110 0f00 	cmn.w	r0, #0
 8000942:	ea91 0f03 	teq	r1, r3
 8000946:	bf58      	it	pl
 8000948:	4299      	cmppl	r1, r3
 800094a:	bf08      	it	eq
 800094c:	4290      	cmpeq	r0, r2
 800094e:	bf2c      	ite	cs
 8000950:	17d8      	asrcs	r0, r3, #31
 8000952:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000956:	f040 0001 	orr.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d102      	bne.n	800096c <__cmpdf2+0x64>
 8000966:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096a:	d107      	bne.n	800097c <__cmpdf2+0x74>
 800096c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000974:	d1d6      	bne.n	8000924 <__cmpdf2+0x1c>
 8000976:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097a:	d0d3      	beq.n	8000924 <__cmpdf2+0x1c>
 800097c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <__aeabi_cdrcmple>:
 8000984:	4684      	mov	ip, r0
 8000986:	4610      	mov	r0, r2
 8000988:	4662      	mov	r2, ip
 800098a:	468c      	mov	ip, r1
 800098c:	4619      	mov	r1, r3
 800098e:	4663      	mov	r3, ip
 8000990:	e000      	b.n	8000994 <__aeabi_cdcmpeq>
 8000992:	bf00      	nop

08000994 <__aeabi_cdcmpeq>:
 8000994:	b501      	push	{r0, lr}
 8000996:	f7ff ffb7 	bl	8000908 <__cmpdf2>
 800099a:	2800      	cmp	r0, #0
 800099c:	bf48      	it	mi
 800099e:	f110 0f00 	cmnmi.w	r0, #0
 80009a2:	bd01      	pop	{r0, pc}

080009a4 <__aeabi_dcmpeq>:
 80009a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a8:	f7ff fff4 	bl	8000994 <__aeabi_cdcmpeq>
 80009ac:	bf0c      	ite	eq
 80009ae:	2001      	moveq	r0, #1
 80009b0:	2000      	movne	r0, #0
 80009b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b6:	bf00      	nop

080009b8 <__aeabi_dcmplt>:
 80009b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009bc:	f7ff ffea 	bl	8000994 <__aeabi_cdcmpeq>
 80009c0:	bf34      	ite	cc
 80009c2:	2001      	movcc	r0, #1
 80009c4:	2000      	movcs	r0, #0
 80009c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ca:	bf00      	nop

080009cc <__aeabi_dcmple>:
 80009cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d0:	f7ff ffe0 	bl	8000994 <__aeabi_cdcmpeq>
 80009d4:	bf94      	ite	ls
 80009d6:	2001      	movls	r0, #1
 80009d8:	2000      	movhi	r0, #0
 80009da:	f85d fb08 	ldr.w	pc, [sp], #8
 80009de:	bf00      	nop

080009e0 <__aeabi_dcmpge>:
 80009e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e4:	f7ff ffce 	bl	8000984 <__aeabi_cdrcmple>
 80009e8:	bf94      	ite	ls
 80009ea:	2001      	movls	r0, #1
 80009ec:	2000      	movhi	r0, #0
 80009ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f2:	bf00      	nop

080009f4 <__aeabi_dcmpgt>:
 80009f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f8:	f7ff ffc4 	bl	8000984 <__aeabi_cdrcmple>
 80009fc:	bf34      	ite	cc
 80009fe:	2001      	movcc	r0, #1
 8000a00:	2000      	movcs	r0, #0
 8000a02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a06:	bf00      	nop

08000a08 <__aeabi_dcmpun>:
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x10>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d10a      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__aeabi_dcmpun+0x20>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_dcmpun+0x26>
 8000a28:	f04f 0000 	mov.w	r0, #0
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0001 	mov.w	r0, #1
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_frsub>:
 8000ac4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	e002      	b.n	8000ad0 <__addsf3>
 8000aca:	bf00      	nop

08000acc <__aeabi_fsub>:
 8000acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad0 <__addsf3>:
 8000ad0:	0042      	lsls	r2, r0, #1
 8000ad2:	bf1f      	itttt	ne
 8000ad4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad8:	ea92 0f03 	teqne	r2, r3
 8000adc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae4:	d06a      	beq.n	8000bbc <__addsf3+0xec>
 8000ae6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aee:	bfc1      	itttt	gt
 8000af0:	18d2      	addgt	r2, r2, r3
 8000af2:	4041      	eorgt	r1, r0
 8000af4:	4048      	eorgt	r0, r1
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	bfb8      	it	lt
 8000afa:	425b      	neglt	r3, r3
 8000afc:	2b19      	cmp	r3, #25
 8000afe:	bf88      	it	hi
 8000b00:	4770      	bxhi	lr
 8000b02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b1e:	bf18      	it	ne
 8000b20:	4249      	negne	r1, r1
 8000b22:	ea92 0f03 	teq	r2, r3
 8000b26:	d03f      	beq.n	8000ba8 <__addsf3+0xd8>
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b30:	eb10 000c 	adds.w	r0, r0, ip
 8000b34:	f1c3 0320 	rsb	r3, r3, #32
 8000b38:	fa01 f103 	lsl.w	r1, r1, r3
 8000b3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b40:	d502      	bpl.n	8000b48 <__addsf3+0x78>
 8000b42:	4249      	negs	r1, r1
 8000b44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b4c:	d313      	bcc.n	8000b76 <__addsf3+0xa6>
 8000b4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b52:	d306      	bcc.n	8000b62 <__addsf3+0x92>
 8000b54:	0840      	lsrs	r0, r0, #1
 8000b56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5a:	f102 0201 	add.w	r2, r2, #1
 8000b5e:	2afe      	cmp	r2, #254	; 0xfe
 8000b60:	d251      	bcs.n	8000c06 <__addsf3+0x136>
 8000b62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6a:	bf08      	it	eq
 8000b6c:	f020 0001 	biceq.w	r0, r0, #1
 8000b70:	ea40 0003 	orr.w	r0, r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	0049      	lsls	r1, r1, #1
 8000b78:	eb40 0000 	adc.w	r0, r0, r0
 8000b7c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b80:	f1a2 0201 	sub.w	r2, r2, #1
 8000b84:	d1ed      	bne.n	8000b62 <__addsf3+0x92>
 8000b86:	fab0 fc80 	clz	ip, r0
 8000b8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b96:	bfaa      	itet	ge
 8000b98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b9c:	4252      	neglt	r2, r2
 8000b9e:	4318      	orrge	r0, r3
 8000ba0:	bfbc      	itt	lt
 8000ba2:	40d0      	lsrlt	r0, r2
 8000ba4:	4318      	orrlt	r0, r3
 8000ba6:	4770      	bx	lr
 8000ba8:	f092 0f00 	teq	r2, #0
 8000bac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb0:	bf06      	itte	eq
 8000bb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bb6:	3201      	addeq	r2, #1
 8000bb8:	3b01      	subne	r3, #1
 8000bba:	e7b5      	b.n	8000b28 <__addsf3+0x58>
 8000bbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc4:	bf18      	it	ne
 8000bc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bca:	d021      	beq.n	8000c10 <__addsf3+0x140>
 8000bcc:	ea92 0f03 	teq	r2, r3
 8000bd0:	d004      	beq.n	8000bdc <__addsf3+0x10c>
 8000bd2:	f092 0f00 	teq	r2, #0
 8000bd6:	bf08      	it	eq
 8000bd8:	4608      	moveq	r0, r1
 8000bda:	4770      	bx	lr
 8000bdc:	ea90 0f01 	teq	r0, r1
 8000be0:	bf1c      	itt	ne
 8000be2:	2000      	movne	r0, #0
 8000be4:	4770      	bxne	lr
 8000be6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bea:	d104      	bne.n	8000bf6 <__addsf3+0x126>
 8000bec:	0040      	lsls	r0, r0, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	4770      	bx	lr
 8000bf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfa:	bf3c      	itt	cc
 8000bfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c00:	4770      	bxcc	lr
 8000c02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0e:	4770      	bx	lr
 8000c10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c14:	bf16      	itet	ne
 8000c16:	4608      	movne	r0, r1
 8000c18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c1c:	4601      	movne	r1, r0
 8000c1e:	0242      	lsls	r2, r0, #9
 8000c20:	bf06      	itte	eq
 8000c22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c26:	ea90 0f01 	teqeq	r0, r1
 8000c2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_ui2f>:
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e004      	b.n	8000c40 <__aeabi_i2f+0x8>
 8000c36:	bf00      	nop

08000c38 <__aeabi_i2f>:
 8000c38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c3c:	bf48      	it	mi
 8000c3e:	4240      	negmi	r0, r0
 8000c40:	ea5f 0c00 	movs.w	ip, r0
 8000c44:	bf08      	it	eq
 8000c46:	4770      	bxeq	lr
 8000c48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	f04f 0000 	mov.w	r0, #0
 8000c52:	e01c      	b.n	8000c8e <__aeabi_l2f+0x2a>

08000c54 <__aeabi_ul2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f04f 0300 	mov.w	r3, #0
 8000c60:	e00a      	b.n	8000c78 <__aeabi_l2f+0x14>
 8000c62:	bf00      	nop

08000c64 <__aeabi_l2f>:
 8000c64:	ea50 0201 	orrs.w	r2, r0, r1
 8000c68:	bf08      	it	eq
 8000c6a:	4770      	bxeq	lr
 8000c6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	d502      	bpl.n	8000c78 <__aeabi_l2f+0x14>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	ea5f 0c01 	movs.w	ip, r1
 8000c7c:	bf02      	ittt	eq
 8000c7e:	4684      	moveq	ip, r0
 8000c80:	4601      	moveq	r1, r0
 8000c82:	2000      	moveq	r0, #0
 8000c84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c88:	bf08      	it	eq
 8000c8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c92:	fabc f28c 	clz	r2, ip
 8000c96:	3a08      	subs	r2, #8
 8000c98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c9c:	db10      	blt.n	8000cc0 <__aeabi_l2f+0x5c>
 8000c9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca8:	f1c2 0220 	rsb	r2, r2, #32
 8000cac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb4:	eb43 0002 	adc.w	r0, r3, r2
 8000cb8:	bf08      	it	eq
 8000cba:	f020 0001 	biceq.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	f102 0220 	add.w	r2, r2, #32
 8000cc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc8:	f1c2 0220 	rsb	r2, r2, #32
 8000ccc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd4:	eb43 0002 	adc.w	r0, r3, r2
 8000cd8:	bf08      	it	eq
 8000cda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_fmul>:
 8000ce0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ce8:	bf1e      	ittt	ne
 8000cea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cee:	ea92 0f0c 	teqne	r2, ip
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d06f      	beq.n	8000dd8 <__aeabi_fmul+0xf8>
 8000cf8:	441a      	add	r2, r3
 8000cfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000cfe:	0240      	lsls	r0, r0, #9
 8000d00:	bf18      	it	ne
 8000d02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d06:	d01e      	beq.n	8000d46 <__aeabi_fmul+0x66>
 8000d08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d14:	fba0 3101 	umull	r3, r1, r0, r1
 8000d18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d20:	bf3e      	ittt	cc
 8000d22:	0049      	lslcc	r1, r1, #1
 8000d24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	ea40 0001 	orr.w	r0, r0, r1
 8000d2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d32:	2afd      	cmp	r2, #253	; 0xfd
 8000d34:	d81d      	bhi.n	8000d72 <__aeabi_fmul+0x92>
 8000d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4e:	bf08      	it	eq
 8000d50:	0249      	lsleq	r1, r1, #9
 8000d52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5a:	3a7f      	subs	r2, #127	; 0x7f
 8000d5c:	bfc2      	ittt	gt
 8000d5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d66:	4770      	bxgt	lr
 8000d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	3a01      	subs	r2, #1
 8000d72:	dc5d      	bgt.n	8000e30 <__aeabi_fmul+0x150>
 8000d74:	f112 0f19 	cmn.w	r2, #25
 8000d78:	bfdc      	itt	le
 8000d7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d7e:	4770      	bxle	lr
 8000d80:	f1c2 0200 	rsb	r2, r2, #0
 8000d84:	0041      	lsls	r1, r0, #1
 8000d86:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8a:	f1c2 0220 	rsb	r2, r2, #32
 8000d8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d96:	f140 0000 	adc.w	r0, r0, #0
 8000d9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d9e:	bf08      	it	eq
 8000da0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da4:	4770      	bx	lr
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fmul+0xce>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fmul+0xe6>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e78f      	b.n	8000cf8 <__aeabi_fmul+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	bf18      	it	ne
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d00a      	beq.n	8000dfe <__aeabi_fmul+0x11e>
 8000de8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dec:	bf18      	it	ne
 8000dee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df2:	d1d8      	bne.n	8000da6 <__aeabi_fmul+0xc6>
 8000df4:	ea80 0001 	eor.w	r0, r0, r1
 8000df8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	bf17      	itett	ne
 8000e04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e08:	4608      	moveq	r0, r1
 8000e0a:	f091 0f00 	teqne	r1, #0
 8000e0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e12:	d014      	beq.n	8000e3e <__aeabi_fmul+0x15e>
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	d101      	bne.n	8000e1e <__aeabi_fmul+0x13e>
 8000e1a:	0242      	lsls	r2, r0, #9
 8000e1c:	d10f      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e1e:	ea93 0f0c 	teq	r3, ip
 8000e22:	d103      	bne.n	8000e2c <__aeabi_fmul+0x14c>
 8000e24:	024b      	lsls	r3, r1, #9
 8000e26:	bf18      	it	ne
 8000e28:	4608      	movne	r0, r1
 8000e2a:	d108      	bne.n	8000e3e <__aeabi_fmul+0x15e>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e3c:	4770      	bx	lr
 8000e3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e46:	4770      	bx	lr

08000e48 <__aeabi_fdiv>:
 8000e48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e50:	bf1e      	ittt	ne
 8000e52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e56:	ea92 0f0c 	teqne	r2, ip
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d069      	beq.n	8000f34 <__aeabi_fdiv+0xec>
 8000e60:	eba2 0203 	sub.w	r2, r2, r3
 8000e64:	ea80 0c01 	eor.w	ip, r0, r1
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e6e:	d037      	beq.n	8000ee0 <__aeabi_fdiv+0x98>
 8000e70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e80:	428b      	cmp	r3, r1
 8000e82:	bf38      	it	cc
 8000e84:	005b      	lslcc	r3, r3, #1
 8000e86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	bf24      	itt	cs
 8000e92:	1a5b      	subcs	r3, r3, r1
 8000e94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e9c:	bf24      	itt	cs
 8000e9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ea6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eaa:	bf24      	itt	cs
 8000eac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eb8:	bf24      	itt	cs
 8000eba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ebe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	bf18      	it	ne
 8000ec6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eca:	d1e0      	bne.n	8000e8e <__aeabi_fdiv+0x46>
 8000ecc:	2afd      	cmp	r2, #253	; 0xfd
 8000ece:	f63f af50 	bhi.w	8000d72 <__aeabi_fmul+0x92>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee8:	327f      	adds	r2, #127	; 0x7f
 8000eea:	bfc2      	ittt	gt
 8000eec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef4:	4770      	bxgt	lr
 8000ef6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efa:	f04f 0300 	mov.w	r3, #0
 8000efe:	3a01      	subs	r2, #1
 8000f00:	e737      	b.n	8000d72 <__aeabi_fmul+0x92>
 8000f02:	f092 0f00 	teq	r2, #0
 8000f06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0a:	bf02      	ittt	eq
 8000f0c:	0040      	lsleq	r0, r0, #1
 8000f0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f12:	3a01      	subeq	r2, #1
 8000f14:	d0f9      	beq.n	8000f0a <__aeabi_fdiv+0xc2>
 8000f16:	ea40 000c 	orr.w	r0, r0, ip
 8000f1a:	f093 0f00 	teq	r3, #0
 8000f1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0049      	lsleq	r1, r1, #1
 8000f26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2a:	3b01      	subeq	r3, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fdiv+0xda>
 8000f2e:	ea41 010c 	orr.w	r1, r1, ip
 8000f32:	e795      	b.n	8000e60 <__aeabi_fdiv+0x18>
 8000f34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d108      	bne.n	8000f50 <__aeabi_fdiv+0x108>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	f47f af7d 	bne.w	8000e3e <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	f47f af70 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e776      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f50:	ea93 0f0c 	teq	r3, ip
 8000f54:	d104      	bne.n	8000f60 <__aeabi_fdiv+0x118>
 8000f56:	024b      	lsls	r3, r1, #9
 8000f58:	f43f af4c 	beq.w	8000df4 <__aeabi_fmul+0x114>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e76e      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f64:	bf18      	it	ne
 8000f66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6a:	d1ca      	bne.n	8000f02 <__aeabi_fdiv+0xba>
 8000f6c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f70:	f47f af5c 	bne.w	8000e2c <__aeabi_fmul+0x14c>
 8000f74:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f78:	f47f af3c 	bne.w	8000df4 <__aeabi_fmul+0x114>
 8000f7c:	e75f      	b.n	8000e3e <__aeabi_fmul+0x15e>
 8000f7e:	bf00      	nop

08000f80 <__gesf2>:
 8000f80:	f04f 3cff 	mov.w	ip, #4294967295
 8000f84:	e006      	b.n	8000f94 <__cmpsf2+0x4>
 8000f86:	bf00      	nop

08000f88 <__lesf2>:
 8000f88:	f04f 0c01 	mov.w	ip, #1
 8000f8c:	e002      	b.n	8000f94 <__cmpsf2+0x4>
 8000f8e:	bf00      	nop

08000f90 <__cmpsf2>:
 8000f90:	f04f 0c01 	mov.w	ip, #1
 8000f94:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f98:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa4:	bf18      	it	ne
 8000fa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000faa:	d011      	beq.n	8000fd0 <__cmpsf2+0x40>
 8000fac:	b001      	add	sp, #4
 8000fae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb2:	bf18      	it	ne
 8000fb4:	ea90 0f01 	teqne	r0, r1
 8000fb8:	bf58      	it	pl
 8000fba:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fbe:	bf88      	it	hi
 8000fc0:	17c8      	asrhi	r0, r1, #31
 8000fc2:	bf38      	it	cc
 8000fc4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fc8:	bf18      	it	ne
 8000fca:	f040 0001 	orrne.w	r0, r0, #1
 8000fce:	4770      	bx	lr
 8000fd0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd4:	d102      	bne.n	8000fdc <__cmpsf2+0x4c>
 8000fd6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fda:	d105      	bne.n	8000fe8 <__cmpsf2+0x58>
 8000fdc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe0:	d1e4      	bne.n	8000fac <__cmpsf2+0x1c>
 8000fe2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fe6:	d0e1      	beq.n	8000fac <__cmpsf2+0x1c>
 8000fe8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__aeabi_cfrcmple>:
 8000ff0:	4684      	mov	ip, r0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	4661      	mov	r1, ip
 8000ff6:	e7ff      	b.n	8000ff8 <__aeabi_cfcmpeq>

08000ff8 <__aeabi_cfcmpeq>:
 8000ff8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffa:	f7ff ffc9 	bl	8000f90 <__cmpsf2>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	bf48      	it	mi
 8001002:	f110 0f00 	cmnmi.w	r0, #0
 8001006:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001008 <__aeabi_fcmpeq>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff fff4 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001010:	bf0c      	ite	eq
 8001012:	2001      	moveq	r0, #1
 8001014:	2000      	movne	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmplt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffea 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmple>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffe0 	bl	8000ff8 <__aeabi_cfcmpeq>
 8001038:	bf94      	ite	ls
 800103a:	2001      	movls	r0, #1
 800103c:	2000      	movhi	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmpge>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffd2 	bl	8000ff0 <__aeabi_cfrcmple>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpgt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffc8 	bl	8000ff0 <__aeabi_cfrcmple>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_f2uiz>:
 800106c:	0042      	lsls	r2, r0, #1
 800106e:	d20e      	bcs.n	800108e <__aeabi_f2uiz+0x22>
 8001070:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001074:	d30b      	bcc.n	800108e <__aeabi_f2uiz+0x22>
 8001076:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107e:	d409      	bmi.n	8001094 <__aeabi_f2uiz+0x28>
 8001080:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001088:	fa23 f002 	lsr.w	r0, r3, r2
 800108c:	4770      	bx	lr
 800108e:	f04f 0000 	mov.w	r0, #0
 8001092:	4770      	bx	lr
 8001094:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001098:	d101      	bne.n	800109e <__aeabi_f2uiz+0x32>
 800109a:	0242      	lsls	r2, r0, #9
 800109c:	d102      	bne.n	80010a4 <__aeabi_f2uiz+0x38>
 800109e:	f04f 30ff 	mov.w	r0, #4294967295
 80010a2:	4770      	bx	lr
 80010a4:	f04f 0000 	mov.w	r0, #0
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <selfrel_offset31>:
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	005a      	lsls	r2, r3, #1
 80010b0:	bf4c      	ite	mi
 80010b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80010b6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80010ba:	4418      	add	r0, r3
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <search_EIT_table>:
 80010c0:	b361      	cbz	r1, 800111c <search_EIT_table+0x5c>
 80010c2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010c6:	f101 3aff 	add.w	sl, r1, #4294967295
 80010ca:	4690      	mov	r8, r2
 80010cc:	4606      	mov	r6, r0
 80010ce:	46d1      	mov	r9, sl
 80010d0:	2700      	movs	r7, #0
 80010d2:	eb07 0409 	add.w	r4, r7, r9
 80010d6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80010da:	1064      	asrs	r4, r4, #1
 80010dc:	00e5      	lsls	r5, r4, #3
 80010de:	1971      	adds	r1, r6, r5
 80010e0:	4608      	mov	r0, r1
 80010e2:	f7ff ffe3 	bl	80010ac <selfrel_offset31>
 80010e6:	45a2      	cmp	sl, r4
 80010e8:	4683      	mov	fp, r0
 80010ea:	f105 0008 	add.w	r0, r5, #8
 80010ee:	4430      	add	r0, r6
 80010f0:	d009      	beq.n	8001106 <search_EIT_table+0x46>
 80010f2:	f7ff ffdb 	bl	80010ac <selfrel_offset31>
 80010f6:	45c3      	cmp	fp, r8
 80010f8:	f100 30ff 	add.w	r0, r0, #4294967295
 80010fc:	d805      	bhi.n	800110a <search_EIT_table+0x4a>
 80010fe:	4540      	cmp	r0, r8
 8001100:	d209      	bcs.n	8001116 <search_EIT_table+0x56>
 8001102:	1c67      	adds	r7, r4, #1
 8001104:	e7e5      	b.n	80010d2 <search_EIT_table+0x12>
 8001106:	45c3      	cmp	fp, r8
 8001108:	d905      	bls.n	8001116 <search_EIT_table+0x56>
 800110a:	42a7      	cmp	r7, r4
 800110c:	d002      	beq.n	8001114 <search_EIT_table+0x54>
 800110e:	f104 39ff 	add.w	r9, r4, #4294967295
 8001112:	e7de      	b.n	80010d2 <search_EIT_table+0x12>
 8001114:	2100      	movs	r1, #0
 8001116:	4608      	mov	r0, r1
 8001118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800111c:	4608      	mov	r0, r1
 800111e:	4770      	bx	lr

08001120 <__gnu_unwind_get_pr_addr>:
 8001120:	2801      	cmp	r0, #1
 8001122:	d007      	beq.n	8001134 <__gnu_unwind_get_pr_addr+0x14>
 8001124:	2802      	cmp	r0, #2
 8001126:	d007      	beq.n	8001138 <__gnu_unwind_get_pr_addr+0x18>
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__gnu_unwind_get_pr_addr+0x1c>)
 800112a:	2800      	cmp	r0, #0
 800112c:	bf0c      	ite	eq
 800112e:	4618      	moveq	r0, r3
 8001130:	2000      	movne	r0, #0
 8001132:	4770      	bx	lr
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <__gnu_unwind_get_pr_addr+0x20>)
 8001136:	4770      	bx	lr
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <__gnu_unwind_get_pr_addr+0x24>)
 800113a:	4770      	bx	lr
 800113c:	08001831 	.word	0x08001831
 8001140:	08001835 	.word	0x08001835
 8001144:	08001839 	.word	0x08001839

08001148 <get_eit_entry>:
 8001148:	b530      	push	{r4, r5, lr}
 800114a:	4b25      	ldr	r3, [pc, #148]	; (80011e0 <get_eit_entry+0x98>)
 800114c:	b083      	sub	sp, #12
 800114e:	4604      	mov	r4, r0
 8001150:	1e8d      	subs	r5, r1, #2
 8001152:	b373      	cbz	r3, 80011b2 <get_eit_entry+0x6a>
 8001154:	a901      	add	r1, sp, #4
 8001156:	4628      	mov	r0, r5
 8001158:	f3af 8000 	nop.w
 800115c:	b318      	cbz	r0, 80011a6 <get_eit_entry+0x5e>
 800115e:	9901      	ldr	r1, [sp, #4]
 8001160:	462a      	mov	r2, r5
 8001162:	f7ff ffad 	bl	80010c0 <search_EIT_table>
 8001166:	4601      	mov	r1, r0
 8001168:	b1e8      	cbz	r0, 80011a6 <get_eit_entry+0x5e>
 800116a:	f7ff ff9f 	bl	80010ac <selfrel_offset31>
 800116e:	684b      	ldr	r3, [r1, #4]
 8001170:	64a0      	str	r0, [r4, #72]	; 0x48
 8001172:	2b01      	cmp	r3, #1
 8001174:	d011      	beq.n	800119a <get_eit_entry+0x52>
 8001176:	2b00      	cmp	r3, #0
 8001178:	db22      	blt.n	80011c0 <get_eit_entry+0x78>
 800117a:	1d08      	adds	r0, r1, #4
 800117c:	f7ff ff96 	bl	80010ac <selfrel_offset31>
 8001180:	2300      	movs	r3, #0
 8001182:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001184:	6523      	str	r3, [r4, #80]	; 0x50
 8001186:	6803      	ldr	r3, [r0, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db1e      	blt.n	80011ca <get_eit_entry+0x82>
 800118c:	f7ff ff8e 	bl	80010ac <selfrel_offset31>
 8001190:	2300      	movs	r3, #0
 8001192:	6120      	str	r0, [r4, #16]
 8001194:	4618      	mov	r0, r3
 8001196:	b003      	add	sp, #12
 8001198:	bd30      	pop	{r4, r5, pc}
 800119a:	2305      	movs	r3, #5
 800119c:	2200      	movs	r2, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	6122      	str	r2, [r4, #16]
 80011a2:	b003      	add	sp, #12
 80011a4:	bd30      	pop	{r4, r5, pc}
 80011a6:	2309      	movs	r3, #9
 80011a8:	2200      	movs	r2, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	6122      	str	r2, [r4, #16]
 80011ae:	b003      	add	sp, #12
 80011b0:	bd30      	pop	{r4, r5, pc}
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <get_eit_entry+0x9c>)
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <get_eit_entry+0xa0>)
 80011b6:	4618      	mov	r0, r3
 80011b8:	1ac9      	subs	r1, r1, r3
 80011ba:	10c9      	asrs	r1, r1, #3
 80011bc:	9101      	str	r1, [sp, #4]
 80011be:	e7cf      	b.n	8001160 <get_eit_entry+0x18>
 80011c0:	2301      	movs	r3, #1
 80011c2:	1d08      	adds	r0, r1, #4
 80011c4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80011c6:	6523      	str	r3, [r4, #80]	; 0x50
 80011c8:	e7dd      	b.n	8001186 <get_eit_entry+0x3e>
 80011ca:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80011ce:	f7ff ffa7 	bl	8001120 <__gnu_unwind_get_pr_addr>
 80011d2:	2800      	cmp	r0, #0
 80011d4:	6120      	str	r0, [r4, #16]
 80011d6:	bf14      	ite	ne
 80011d8:	2300      	movne	r3, #0
 80011da:	2309      	moveq	r3, #9
 80011dc:	e7da      	b.n	8001194 <get_eit_entry+0x4c>
 80011de:	bf00      	nop
 80011e0:	00000000 	.word	0x00000000
 80011e4:	08006f5c 	.word	0x08006f5c
 80011e8:	080070e4 	.word	0x080070e4

080011ec <restore_non_core_regs>:
 80011ec:	6803      	ldr	r3, [r0, #0]
 80011ee:	b510      	push	{r4, lr}
 80011f0:	07da      	lsls	r2, r3, #31
 80011f2:	4604      	mov	r4, r0
 80011f4:	d406      	bmi.n	8001204 <restore_non_core_regs+0x18>
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80011fc:	d509      	bpl.n	8001212 <restore_non_core_regs+0x26>
 80011fe:	f000 fc57 	bl	8001ab0 <__gnu_Unwind_Restore_VFP_D>
 8001202:	6823      	ldr	r3, [r4, #0]
 8001204:	0759      	lsls	r1, r3, #29
 8001206:	d509      	bpl.n	800121c <restore_non_core_regs+0x30>
 8001208:	071a      	lsls	r2, r3, #28
 800120a:	d50e      	bpl.n	800122a <restore_non_core_regs+0x3e>
 800120c:	06db      	lsls	r3, r3, #27
 800120e:	d513      	bpl.n	8001238 <restore_non_core_regs+0x4c>
 8001210:	bd10      	pop	{r4, pc}
 8001212:	f000 fc45 	bl	8001aa0 <__gnu_Unwind_Restore_VFP>
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	0759      	lsls	r1, r3, #29
 800121a:	d4f5      	bmi.n	8001208 <restore_non_core_regs+0x1c>
 800121c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001220:	f000 fc4e 	bl	8001ac0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	071a      	lsls	r2, r3, #28
 8001228:	d4f0      	bmi.n	800120c <restore_non_core_regs+0x20>
 800122a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800122e:	f000 fc4f 	bl	8001ad0 <__gnu_Unwind_Restore_WMMXD>
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	06db      	lsls	r3, r3, #27
 8001236:	d4eb      	bmi.n	8001210 <restore_non_core_regs+0x24>
 8001238:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800123c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001240:	f000 bc8a 	b.w	8001b58 <__gnu_Unwind_Restore_WMMXC>

08001244 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8001244:	6803      	ldr	r3, [r0, #0]
 8001246:	b103      	cbz	r3, 800124a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8001248:	4403      	add	r3, r0
 800124a:	4618      	mov	r0, r3
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop

08001250 <__gnu_unwind_24bit.isra.1>:
 8001250:	2009      	movs	r0, #9
 8001252:	4770      	bx	lr

08001254 <_Unwind_DebugHook>:
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <unwind_phase2>:
 8001258:	b570      	push	{r4, r5, r6, lr}
 800125a:	4604      	mov	r4, r0
 800125c:	460d      	mov	r5, r1
 800125e:	e008      	b.n	8001272 <unwind_phase2+0x1a>
 8001260:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001262:	6923      	ldr	r3, [r4, #16]
 8001264:	6162      	str	r2, [r4, #20]
 8001266:	4621      	mov	r1, r4
 8001268:	462a      	mov	r2, r5
 800126a:	2001      	movs	r0, #1
 800126c:	4798      	blx	r3
 800126e:	2808      	cmp	r0, #8
 8001270:	d108      	bne.n	8001284 <unwind_phase2+0x2c>
 8001272:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001274:	4620      	mov	r0, r4
 8001276:	f7ff ff67 	bl	8001148 <get_eit_entry>
 800127a:	4606      	mov	r6, r0
 800127c:	2800      	cmp	r0, #0
 800127e:	d0ef      	beq.n	8001260 <unwind_phase2+0x8>
 8001280:	f005 fb3f 	bl	8006902 <abort>
 8001284:	2807      	cmp	r0, #7
 8001286:	d1fb      	bne.n	8001280 <unwind_phase2+0x28>
 8001288:	4630      	mov	r0, r6
 800128a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800128c:	f7ff ffe2 	bl	8001254 <_Unwind_DebugHook>
 8001290:	1d28      	adds	r0, r5, #4
 8001292:	f000 fbf9 	bl	8001a88 <__restore_core_regs>
 8001296:	bf00      	nop

08001298 <unwind_phase2_forced>:
 8001298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800129c:	4605      	mov	r5, r0
 800129e:	2700      	movs	r7, #0
 80012a0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80012a4:	ac03      	add	r4, sp, #12
 80012a6:	1d0e      	adds	r6, r1, #4
 80012a8:	4692      	mov	sl, r2
 80012aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012ba:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80012be:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80012c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012c6:	ac02      	add	r4, sp, #8
 80012c8:	4628      	mov	r0, r5
 80012ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80012cc:	6027      	str	r7, [r4, #0]
 80012ce:	f7ff ff3b 	bl	8001148 <get_eit_entry>
 80012d2:	f1ba 0f00 	cmp.w	sl, #0
 80012d6:	4607      	mov	r7, r0
 80012d8:	bf14      	ite	ne
 80012da:	260a      	movne	r6, #10
 80012dc:	2609      	moveq	r6, #9
 80012de:	b17f      	cbz	r7, 8001300 <unwind_phase2_forced+0x68>
 80012e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012e2:	f046 0110 	orr.w	r1, r6, #16
 80012e6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80012ea:	462a      	mov	r2, r5
 80012ec:	6463      	str	r3, [r4, #68]	; 0x44
 80012ee:	2001      	movs	r0, #1
 80012f0:	462b      	mov	r3, r5
 80012f2:	47c0      	blx	r8
 80012f4:	bb78      	cbnz	r0, 8001356 <unwind_phase2_forced+0xbe>
 80012f6:	4638      	mov	r0, r7
 80012f8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80012fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001302:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001306:	616b      	str	r3, [r5, #20]
 8001308:	4621      	mov	r1, r4
 800130a:	a87a      	add	r0, sp, #488	; 0x1e8
 800130c:	f005 fc5e 	bl	8006bcc <memcpy>
 8001310:	692b      	ldr	r3, [r5, #16]
 8001312:	aa7a      	add	r2, sp, #488	; 0x1e8
 8001314:	4629      	mov	r1, r5
 8001316:	4630      	mov	r0, r6
 8001318:	4798      	blx	r3
 800131a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800131c:	4682      	mov	sl, r0
 800131e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8001322:	4631      	mov	r1, r6
 8001324:	6463      	str	r3, [r4, #68]	; 0x44
 8001326:	462a      	mov	r2, r5
 8001328:	462b      	mov	r3, r5
 800132a:	2001      	movs	r0, #1
 800132c:	47c0      	blx	r8
 800132e:	b990      	cbnz	r0, 8001356 <unwind_phase2_forced+0xbe>
 8001330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001334:	a97a      	add	r1, sp, #488	; 0x1e8
 8001336:	4620      	mov	r0, r4
 8001338:	f005 fc48 	bl	8006bcc <memcpy>
 800133c:	f1ba 0f08 	cmp.w	sl, #8
 8001340:	d106      	bne.n	8001350 <unwind_phase2_forced+0xb8>
 8001342:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001344:	4628      	mov	r0, r5
 8001346:	f7ff feff 	bl	8001148 <get_eit_entry>
 800134a:	2609      	movs	r6, #9
 800134c:	4607      	mov	r7, r0
 800134e:	e7c6      	b.n	80012de <unwind_phase2_forced+0x46>
 8001350:	f1ba 0f07 	cmp.w	sl, #7
 8001354:	d005      	beq.n	8001362 <unwind_phase2_forced+0xca>
 8001356:	2709      	movs	r7, #9
 8001358:	4638      	mov	r0, r7
 800135a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800135e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001362:	4638      	mov	r0, r7
 8001364:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001366:	f7ff ff75 	bl	8001254 <_Unwind_DebugHook>
 800136a:	a803      	add	r0, sp, #12
 800136c:	f000 fb8c 	bl	8001a88 <__restore_core_regs>

08001370 <_Unwind_GetCFA>:
 8001370:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001372:	4770      	bx	lr

08001374 <__gnu_Unwind_RaiseException>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	f04f 3eff 	mov.w	lr, #4294967295
 800137a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800137c:	b0f9      	sub	sp, #484	; 0x1e4
 800137e:	640b      	str	r3, [r1, #64]	; 0x40
 8001380:	1d0e      	adds	r6, r1, #4
 8001382:	ad01      	add	r5, sp, #4
 8001384:	460f      	mov	r7, r1
 8001386:	4604      	mov	r4, r0
 8001388:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800138e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001390:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001394:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001398:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800139c:	f8cd e000 	str.w	lr, [sp]
 80013a0:	e006      	b.n	80013b0 <__gnu_Unwind_RaiseException+0x3c>
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	466a      	mov	r2, sp
 80013a6:	4621      	mov	r1, r4
 80013a8:	4798      	blx	r3
 80013aa:	2808      	cmp	r0, #8
 80013ac:	4605      	mov	r5, r0
 80013ae:	d108      	bne.n	80013c2 <__gnu_Unwind_RaiseException+0x4e>
 80013b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80013b2:	4620      	mov	r0, r4
 80013b4:	f7ff fec8 	bl	8001148 <get_eit_entry>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d0f2      	beq.n	80013a2 <__gnu_Unwind_RaiseException+0x2e>
 80013bc:	2009      	movs	r0, #9
 80013be:	b079      	add	sp, #484	; 0x1e4
 80013c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c2:	4668      	mov	r0, sp
 80013c4:	f7ff ff12 	bl	80011ec <restore_non_core_regs>
 80013c8:	2d06      	cmp	r5, #6
 80013ca:	d1f7      	bne.n	80013bc <__gnu_Unwind_RaiseException+0x48>
 80013cc:	4639      	mov	r1, r7
 80013ce:	4620      	mov	r0, r4
 80013d0:	f7ff ff42 	bl	8001258 <unwind_phase2>

080013d4 <__gnu_Unwind_ForcedUnwind>:
 80013d4:	b430      	push	{r4, r5}
 80013d6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80013d8:	60c1      	str	r1, [r0, #12]
 80013da:	6182      	str	r2, [r0, #24]
 80013dc:	4619      	mov	r1, r3
 80013de:	641d      	str	r5, [r3, #64]	; 0x40
 80013e0:	2200      	movs	r2, #0
 80013e2:	bc30      	pop	{r4, r5}
 80013e4:	e758      	b.n	8001298 <unwind_phase2_forced>
 80013e6:	bf00      	nop

080013e8 <__gnu_Unwind_Resume>:
 80013e8:	b570      	push	{r4, r5, r6, lr}
 80013ea:	6943      	ldr	r3, [r0, #20]
 80013ec:	68c6      	ldr	r6, [r0, #12]
 80013ee:	640b      	str	r3, [r1, #64]	; 0x40
 80013f0:	b126      	cbz	r6, 80013fc <__gnu_Unwind_Resume+0x14>
 80013f2:	2201      	movs	r2, #1
 80013f4:	f7ff ff50 	bl	8001298 <unwind_phase2_forced>
 80013f8:	f005 fa83 	bl	8006902 <abort>
 80013fc:	6903      	ldr	r3, [r0, #16]
 80013fe:	460a      	mov	r2, r1
 8001400:	4604      	mov	r4, r0
 8001402:	460d      	mov	r5, r1
 8001404:	4601      	mov	r1, r0
 8001406:	2002      	movs	r0, #2
 8001408:	4798      	blx	r3
 800140a:	2807      	cmp	r0, #7
 800140c:	d007      	beq.n	800141e <__gnu_Unwind_Resume+0x36>
 800140e:	2808      	cmp	r0, #8
 8001410:	d103      	bne.n	800141a <__gnu_Unwind_Resume+0x32>
 8001412:	4629      	mov	r1, r5
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ff1f 	bl	8001258 <unwind_phase2>
 800141a:	f005 fa72 	bl	8006902 <abort>
 800141e:	4630      	mov	r0, r6
 8001420:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8001422:	f7ff ff17 	bl	8001254 <_Unwind_DebugHook>
 8001426:	1d28      	adds	r0, r5, #4
 8001428:	f000 fb2e 	bl	8001a88 <__restore_core_regs>

0800142c <__gnu_Unwind_Resume_or_Rethrow>:
 800142c:	68c2      	ldr	r2, [r0, #12]
 800142e:	b12a      	cbz	r2, 800143c <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8001430:	b410      	push	{r4}
 8001432:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001434:	2200      	movs	r2, #0
 8001436:	640c      	str	r4, [r1, #64]	; 0x40
 8001438:	bc10      	pop	{r4}
 800143a:	e72d      	b.n	8001298 <unwind_phase2_forced>
 800143c:	e79a      	b.n	8001374 <__gnu_Unwind_RaiseException>
 800143e:	bf00      	nop

08001440 <_Unwind_Complete>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <_Unwind_DeleteException>:
 8001444:	6883      	ldr	r3, [r0, #8]
 8001446:	b113      	cbz	r3, 800144e <_Unwind_DeleteException+0xa>
 8001448:	4601      	mov	r1, r0
 800144a:	2001      	movs	r0, #1
 800144c:	4718      	bx	r3
 800144e:	4770      	bx	lr

08001450 <_Unwind_VRS_Get>:
 8001450:	b500      	push	{lr}
 8001452:	2904      	cmp	r1, #4
 8001454:	d807      	bhi.n	8001466 <_Unwind_VRS_Get+0x16>
 8001456:	e8df f001 	tbb	[pc, r1]
 800145a:	0903      	.short	0x0903
 800145c:	0906      	.short	0x0906
 800145e:	09          	.byte	0x09
 800145f:	00          	.byte	0x00
 8001460:	b90b      	cbnz	r3, 8001466 <_Unwind_VRS_Get+0x16>
 8001462:	2a0f      	cmp	r2, #15
 8001464:	d905      	bls.n	8001472 <_Unwind_VRS_Get+0x22>
 8001466:	2002      	movs	r0, #2
 8001468:	f85d fb04 	ldr.w	pc, [sp], #4
 800146c:	2001      	movs	r0, #1
 800146e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001472:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001476:	6852      	ldr	r2, [r2, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	9b01      	ldr	r3, [sp, #4]
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001482:	bf00      	nop

08001484 <_Unwind_GetGR>:
 8001484:	2300      	movs	r3, #0
 8001486:	b510      	push	{r4, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	ac03      	add	r4, sp, #12
 800148c:	460a      	mov	r2, r1
 800148e:	9400      	str	r4, [sp, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff ffdd 	bl	8001450 <_Unwind_VRS_Get>
 8001496:	9803      	ldr	r0, [sp, #12]
 8001498:	b004      	add	sp, #16
 800149a:	bd10      	pop	{r4, pc}

0800149c <_Unwind_VRS_Set>:
 800149c:	b500      	push	{lr}
 800149e:	2904      	cmp	r1, #4
 80014a0:	d807      	bhi.n	80014b2 <_Unwind_VRS_Set+0x16>
 80014a2:	e8df f001 	tbb	[pc, r1]
 80014a6:	0903      	.short	0x0903
 80014a8:	0906      	.short	0x0906
 80014aa:	09          	.byte	0x09
 80014ab:	00          	.byte	0x00
 80014ac:	b90b      	cbnz	r3, 80014b2 <_Unwind_VRS_Set+0x16>
 80014ae:	2a0f      	cmp	r2, #15
 80014b0:	d905      	bls.n	80014be <_Unwind_VRS_Set+0x22>
 80014b2:	2002      	movs	r0, #2
 80014b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014b8:	2001      	movs	r0, #1
 80014ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80014be:	9901      	ldr	r1, [sp, #4]
 80014c0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80014c4:	6809      	ldr	r1, [r1, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	6051      	str	r1, [r2, #4]
 80014ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80014ce:	bf00      	nop

080014d0 <_Unwind_SetGR>:
 80014d0:	2300      	movs	r3, #0
 80014d2:	b510      	push	{r4, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	ac04      	add	r4, sp, #16
 80014d8:	f844 2d04 	str.w	r2, [r4, #-4]!
 80014dc:	9400      	str	r4, [sp, #0]
 80014de:	460a      	mov	r2, r1
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff ffdb 	bl	800149c <_Unwind_VRS_Set>
 80014e6:	b004      	add	sp, #16
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop

080014ec <__gnu_Unwind_Backtrace>:
 80014ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ee:	f04f 3eff 	mov.w	lr, #4294967295
 80014f2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80014f4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	1d15      	adds	r5, r2, #4
 80014fc:	ac17      	add	r4, sp, #92	; 0x5c
 80014fe:	4607      	mov	r7, r0
 8001500:	460e      	mov	r6, r1
 8001502:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001506:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001508:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800150c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800150e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001512:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001516:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800151a:	e012      	b.n	8001542 <__gnu_Unwind_Backtrace+0x56>
 800151c:	210c      	movs	r1, #12
 800151e:	a816      	add	r0, sp, #88	; 0x58
 8001520:	466a      	mov	r2, sp
 8001522:	f7ff ffd5 	bl	80014d0 <_Unwind_SetGR>
 8001526:	4631      	mov	r1, r6
 8001528:	a816      	add	r0, sp, #88	; 0x58
 800152a:	47b8      	blx	r7
 800152c:	b978      	cbnz	r0, 800154e <__gnu_Unwind_Backtrace+0x62>
 800152e:	9b04      	ldr	r3, [sp, #16]
 8001530:	aa16      	add	r2, sp, #88	; 0x58
 8001532:	4669      	mov	r1, sp
 8001534:	2008      	movs	r0, #8
 8001536:	4798      	blx	r3
 8001538:	2805      	cmp	r0, #5
 800153a:	4604      	mov	r4, r0
 800153c:	d008      	beq.n	8001550 <__gnu_Unwind_Backtrace+0x64>
 800153e:	2809      	cmp	r0, #9
 8001540:	d005      	beq.n	800154e <__gnu_Unwind_Backtrace+0x62>
 8001542:	9926      	ldr	r1, [sp, #152]	; 0x98
 8001544:	4668      	mov	r0, sp
 8001546:	f7ff fdff 	bl	8001148 <get_eit_entry>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0e6      	beq.n	800151c <__gnu_Unwind_Backtrace+0x30>
 800154e:	2409      	movs	r4, #9
 8001550:	a816      	add	r0, sp, #88	; 0x58
 8001552:	f7ff fe4b 	bl	80011ec <restore_non_core_regs>
 8001556:	4620      	mov	r0, r4
 8001558:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 800155c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800155e:	bf00      	nop

08001560 <__gnu_unwind_pr_common>:
 8001560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001564:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8001566:	4691      	mov	r9, r2
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	3404      	adds	r4, #4
 800156e:	460d      	mov	r5, r1
 8001570:	9207      	str	r2, [sp, #28]
 8001572:	9408      	str	r4, [sp, #32]
 8001574:	f000 0b03 	and.w	fp, r0, #3
 8001578:	461e      	mov	r6, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d160      	bne.n	8001640 <__gnu_unwind_pr_common+0xe0>
 800157e:	2303      	movs	r3, #3
 8001580:	0212      	lsls	r2, r2, #8
 8001582:	9207      	str	r2, [sp, #28]
 8001584:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001588:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800158c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800158e:	f1bb 0f02 	cmp.w	fp, #2
 8001592:	bf08      	it	eq
 8001594:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8001596:	f013 0301 	ands.w	r3, r3, #1
 800159a:	d140      	bne.n	800161e <__gnu_unwind_pr_common+0xbe>
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	f000 0308 	and.w	r3, r0, #8
 80015a2:	9303      	str	r3, [sp, #12]
 80015a4:	f8d4 8000 	ldr.w	r8, [r4]
 80015a8:	f1b8 0f00 	cmp.w	r8, #0
 80015ac:	d039      	beq.n	8001622 <__gnu_unwind_pr_common+0xc2>
 80015ae:	2e02      	cmp	r6, #2
 80015b0:	d043      	beq.n	800163a <__gnu_unwind_pr_common+0xda>
 80015b2:	f8b4 8000 	ldrh.w	r8, [r4]
 80015b6:	8867      	ldrh	r7, [r4, #2]
 80015b8:	3404      	adds	r4, #4
 80015ba:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80015bc:	f027 0a01 	bic.w	sl, r7, #1
 80015c0:	210f      	movs	r1, #15
 80015c2:	4648      	mov	r0, r9
 80015c4:	449a      	add	sl, r3
 80015c6:	f7ff ff5d 	bl	8001484 <_Unwind_GetGR>
 80015ca:	4582      	cmp	sl, r0
 80015cc:	d833      	bhi.n	8001636 <__gnu_unwind_pr_common+0xd6>
 80015ce:	f028 0301 	bic.w	r3, r8, #1
 80015d2:	449a      	add	sl, r3
 80015d4:	4550      	cmp	r0, sl
 80015d6:	bf2c      	ite	cs
 80015d8:	2000      	movcs	r0, #0
 80015da:	2001      	movcc	r0, #1
 80015dc:	007f      	lsls	r7, r7, #1
 80015de:	f007 0702 	and.w	r7, r7, #2
 80015e2:	f008 0801 	and.w	r8, r8, #1
 80015e6:	ea47 0708 	orr.w	r7, r7, r8
 80015ea:	2f01      	cmp	r7, #1
 80015ec:	d03e      	beq.n	800166c <__gnu_unwind_pr_common+0x10c>
 80015ee:	d335      	bcc.n	800165c <__gnu_unwind_pr_common+0xfc>
 80015f0:	2f02      	cmp	r7, #2
 80015f2:	d11c      	bne.n	800162e <__gnu_unwind_pr_common+0xce>
 80015f4:	6823      	ldr	r3, [r4, #0]
 80015f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015fa:	9202      	str	r2, [sp, #8]
 80015fc:	f1bb 0f00 	cmp.w	fp, #0
 8001600:	d176      	bne.n	80016f0 <__gnu_unwind_pr_common+0x190>
 8001602:	b128      	cbz	r0, 8001610 <__gnu_unwind_pr_common+0xb0>
 8001604:	9903      	ldr	r1, [sp, #12]
 8001606:	2900      	cmp	r1, #0
 8001608:	d07e      	beq.n	8001708 <__gnu_unwind_pr_common+0x1a8>
 800160a:	2a00      	cmp	r2, #0
 800160c:	f000 80a6 	beq.w	800175c <__gnu_unwind_pr_common+0x1fc>
 8001610:	2b00      	cmp	r3, #0
 8001612:	db77      	blt.n	8001704 <__gnu_unwind_pr_common+0x1a4>
 8001614:	9b02      	ldr	r3, [sp, #8]
 8001616:	3301      	adds	r3, #1
 8001618:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800161c:	e7c2      	b.n	80015a4 <__gnu_unwind_pr_common+0x44>
 800161e:	2300      	movs	r3, #0
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	2e02      	cmp	r6, #2
 8001624:	dd3e      	ble.n	80016a4 <__gnu_unwind_pr_common+0x144>
 8001626:	f7ff fe13 	bl	8001250 <__gnu_unwind_24bit.isra.1>
 800162a:	2800      	cmp	r0, #0
 800162c:	d040      	beq.n	80016b0 <__gnu_unwind_pr_common+0x150>
 800162e:	2009      	movs	r0, #9
 8001630:	b00b      	add	sp, #44	; 0x2c
 8001632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001636:	2000      	movs	r0, #0
 8001638:	e7d0      	b.n	80015dc <__gnu_unwind_pr_common+0x7c>
 800163a:	6867      	ldr	r7, [r4, #4]
 800163c:	3408      	adds	r4, #8
 800163e:	e7bc      	b.n	80015ba <__gnu_unwind_pr_common+0x5a>
 8001640:	2b02      	cmp	r3, #2
 8001642:	dca3      	bgt.n	800158c <__gnu_unwind_pr_common+0x2c>
 8001644:	2102      	movs	r1, #2
 8001646:	0c13      	lsrs	r3, r2, #16
 8001648:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 800164c:	0412      	lsls	r2, r2, #16
 800164e:	b2db      	uxtb	r3, r3
 8001650:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8001654:	9207      	str	r2, [sp, #28]
 8001656:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 800165a:	e797      	b.n	800158c <__gnu_unwind_pr_common+0x2c>
 800165c:	f1bb 0f00 	cmp.w	fp, #0
 8001660:	d002      	beq.n	8001668 <__gnu_unwind_pr_common+0x108>
 8001662:	2800      	cmp	r0, #0
 8001664:	f040 80bd 	bne.w	80017e2 <__gnu_unwind_pr_common+0x282>
 8001668:	3404      	adds	r4, #4
 800166a:	e79b      	b.n	80015a4 <__gnu_unwind_pr_common+0x44>
 800166c:	f1bb 0f00 	cmp.w	fp, #0
 8001670:	d125      	bne.n	80016be <__gnu_unwind_pr_common+0x15e>
 8001672:	b1a8      	cbz	r0, 80016a0 <__gnu_unwind_pr_common+0x140>
 8001674:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001678:	1c99      	adds	r1, r3, #2
 800167a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 800167e:	d0d6      	beq.n	800162e <__gnu_unwind_pr_common+0xce>
 8001680:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8001684:	3301      	adds	r3, #1
 8001686:	9106      	str	r1, [sp, #24]
 8001688:	f000 80a3 	beq.w	80017d2 <__gnu_unwind_pr_common+0x272>
 800168c:	1d20      	adds	r0, r4, #4
 800168e:	f7ff fdd9 	bl	8001244 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001692:	ab06      	add	r3, sp, #24
 8001694:	4601      	mov	r1, r0
 8001696:	4628      	mov	r0, r5
 8001698:	f003 ff9e 	bl	80055d8 <__cxa_type_match>
 800169c:	2800      	cmp	r0, #0
 800169e:	d177      	bne.n	8001790 <__gnu_unwind_pr_common+0x230>
 80016a0:	3408      	adds	r4, #8
 80016a2:	e77f      	b.n	80015a4 <__gnu_unwind_pr_common+0x44>
 80016a4:	a907      	add	r1, sp, #28
 80016a6:	4648      	mov	r0, r9
 80016a8:	f000 faf0 	bl	8001c8c <__gnu_unwind_execute>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d1be      	bne.n	800162e <__gnu_unwind_pr_common+0xce>
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d15c      	bne.n	8001770 <__gnu_unwind_pr_common+0x210>
 80016b6:	2008      	movs	r0, #8
 80016b8:	b00b      	add	sp, #44	; 0x2c
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	210d      	movs	r1, #13
 80016c0:	4648      	mov	r0, r9
 80016c2:	6a2f      	ldr	r7, [r5, #32]
 80016c4:	f7ff fede 	bl	8001484 <_Unwind_GetGR>
 80016c8:	4287      	cmp	r7, r0
 80016ca:	d1e9      	bne.n	80016a0 <__gnu_unwind_pr_common+0x140>
 80016cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80016ce:	429c      	cmp	r4, r3
 80016d0:	d1e6      	bne.n	80016a0 <__gnu_unwind_pr_common+0x140>
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff fcea 	bl	80010ac <selfrel_offset31>
 80016d8:	210f      	movs	r1, #15
 80016da:	4602      	mov	r2, r0
 80016dc:	4648      	mov	r0, r9
 80016de:	f7ff fef7 	bl	80014d0 <_Unwind_SetGR>
 80016e2:	4648      	mov	r0, r9
 80016e4:	462a      	mov	r2, r5
 80016e6:	2100      	movs	r1, #0
 80016e8:	f7ff fef2 	bl	80014d0 <_Unwind_SetGR>
 80016ec:	2007      	movs	r0, #7
 80016ee:	e79f      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 80016f0:	210d      	movs	r1, #13
 80016f2:	4648      	mov	r0, r9
 80016f4:	6a2f      	ldr	r7, [r5, #32]
 80016f6:	f7ff fec5 	bl	8001484 <_Unwind_GetGR>
 80016fa:	4287      	cmp	r7, r0
 80016fc:	d058      	beq.n	80017b0 <__gnu_unwind_pr_common+0x250>
 80016fe:	6823      	ldr	r3, [r4, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	da87      	bge.n	8001614 <__gnu_unwind_pr_common+0xb4>
 8001704:	3404      	adds	r4, #4
 8001706:	e785      	b.n	8001614 <__gnu_unwind_pr_common+0xb4>
 8001708:	9b02      	ldr	r3, [sp, #8]
 800170a:	b33b      	cbz	r3, 800175c <__gnu_unwind_pr_common+0x1fc>
 800170c:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8001710:	1d27      	adds	r7, r4, #4
 8001712:	f8cd b010 	str.w	fp, [sp, #16]
 8001716:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800171a:	46a3      	mov	fp, r4
 800171c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001720:	461c      	mov	r4, r3
 8001722:	9605      	str	r6, [sp, #20]
 8001724:	e002      	b.n	800172c <__gnu_unwind_pr_common+0x1cc>
 8001726:	45b2      	cmp	sl, r6
 8001728:	46b0      	mov	r8, r6
 800172a:	d016      	beq.n	800175a <__gnu_unwind_pr_common+0x1fa>
 800172c:	4638      	mov	r0, r7
 800172e:	9406      	str	r4, [sp, #24]
 8001730:	f7ff fd88 	bl	8001244 <_Unwind_decode_typeinfo_ptr.isra.0>
 8001734:	ab06      	add	r3, sp, #24
 8001736:	4601      	mov	r1, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4628      	mov	r0, r5
 800173c:	f003 ff4c 	bl	80055d8 <__cxa_type_match>
 8001740:	f108 0601 	add.w	r6, r8, #1
 8001744:	3704      	adds	r7, #4
 8001746:	2800      	cmp	r0, #0
 8001748:	d0ed      	beq.n	8001726 <__gnu_unwind_pr_common+0x1c6>
 800174a:	9b02      	ldr	r3, [sp, #8]
 800174c:	465c      	mov	r4, fp
 800174e:	4543      	cmp	r3, r8
 8001750:	f8dd b010 	ldr.w	fp, [sp, #16]
 8001754:	9e05      	ldr	r6, [sp, #20]
 8001756:	d1d2      	bne.n	80016fe <__gnu_unwind_pr_common+0x19e>
 8001758:	e000      	b.n	800175c <__gnu_unwind_pr_common+0x1fc>
 800175a:	465c      	mov	r4, fp
 800175c:	4648      	mov	r0, r9
 800175e:	210d      	movs	r1, #13
 8001760:	f7ff fe90 	bl	8001484 <_Unwind_GetGR>
 8001764:	9b06      	ldr	r3, [sp, #24]
 8001766:	6228      	str	r0, [r5, #32]
 8001768:	62ac      	str	r4, [r5, #40]	; 0x28
 800176a:	626b      	str	r3, [r5, #36]	; 0x24
 800176c:	2006      	movs	r0, #6
 800176e:	e75f      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 8001770:	210f      	movs	r1, #15
 8001772:	4648      	mov	r0, r9
 8001774:	f7ff fe86 	bl	8001484 <_Unwind_GetGR>
 8001778:	210e      	movs	r1, #14
 800177a:	4602      	mov	r2, r0
 800177c:	4648      	mov	r0, r9
 800177e:	f7ff fea7 	bl	80014d0 <_Unwind_SetGR>
 8001782:	4648      	mov	r0, r9
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <__gnu_unwind_pr_common+0x2cc>)
 8001786:	210f      	movs	r1, #15
 8001788:	f7ff fea2 	bl	80014d0 <_Unwind_SetGR>
 800178c:	2007      	movs	r0, #7
 800178e:	e74f      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 8001790:	4607      	mov	r7, r0
 8001792:	210d      	movs	r1, #13
 8001794:	4648      	mov	r0, r9
 8001796:	f7ff fe75 	bl	8001484 <_Unwind_GetGR>
 800179a:	2f02      	cmp	r7, #2
 800179c:	6228      	str	r0, [r5, #32]
 800179e:	d11d      	bne.n	80017dc <__gnu_unwind_pr_common+0x27c>
 80017a0:	462b      	mov	r3, r5
 80017a2:	9a06      	ldr	r2, [sp, #24]
 80017a4:	f843 2f2c 	str.w	r2, [r3, #44]!
 80017a8:	626b      	str	r3, [r5, #36]	; 0x24
 80017aa:	62ac      	str	r4, [r5, #40]	; 0x28
 80017ac:	2006      	movs	r0, #6
 80017ae:	e73f      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 80017b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80017b2:	429c      	cmp	r4, r3
 80017b4:	d1a3      	bne.n	80016fe <__gnu_unwind_pr_common+0x19e>
 80017b6:	2204      	movs	r2, #4
 80017b8:	2700      	movs	r7, #0
 80017ba:	9902      	ldr	r1, [sp, #8]
 80017bc:	18a3      	adds	r3, r4, r2
 80017be:	62a9      	str	r1, [r5, #40]	; 0x28
 80017c0:	62ef      	str	r7, [r5, #44]	; 0x2c
 80017c2:	632a      	str	r2, [r5, #48]	; 0x30
 80017c4:	636b      	str	r3, [r5, #52]	; 0x34
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	42bb      	cmp	r3, r7
 80017ca:	db1d      	blt.n	8001808 <__gnu_unwind_pr_common+0x2a8>
 80017cc:	2301      	movs	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	e720      	b.n	8001614 <__gnu_unwind_pr_common+0xb4>
 80017d2:	4648      	mov	r0, r9
 80017d4:	210d      	movs	r1, #13
 80017d6:	f7ff fe55 	bl	8001484 <_Unwind_GetGR>
 80017da:	6228      	str	r0, [r5, #32]
 80017dc:	9b06      	ldr	r3, [sp, #24]
 80017de:	626b      	str	r3, [r5, #36]	; 0x24
 80017e0:	e7e3      	b.n	80017aa <__gnu_unwind_pr_common+0x24a>
 80017e2:	4620      	mov	r0, r4
 80017e4:	f7ff fc62 	bl	80010ac <selfrel_offset31>
 80017e8:	3404      	adds	r4, #4
 80017ea:	4606      	mov	r6, r0
 80017ec:	63ac      	str	r4, [r5, #56]	; 0x38
 80017ee:	4628      	mov	r0, r5
 80017f0:	f003 ff50 	bl	8005694 <__cxa_begin_cleanup>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	f43f af1a 	beq.w	800162e <__gnu_unwind_pr_common+0xce>
 80017fa:	4648      	mov	r0, r9
 80017fc:	4632      	mov	r2, r6
 80017fe:	210f      	movs	r1, #15
 8001800:	f7ff fe66 	bl	80014d0 <_Unwind_SetGR>
 8001804:	2007      	movs	r0, #7
 8001806:	e713      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 8001808:	4608      	mov	r0, r1
 800180a:	3001      	adds	r0, #1
 800180c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8001810:	f7ff fc4c 	bl	80010ac <selfrel_offset31>
 8001814:	210f      	movs	r1, #15
 8001816:	4602      	mov	r2, r0
 8001818:	4648      	mov	r0, r9
 800181a:	f7ff fe59 	bl	80014d0 <_Unwind_SetGR>
 800181e:	4648      	mov	r0, r9
 8001820:	462a      	mov	r2, r5
 8001822:	4639      	mov	r1, r7
 8001824:	f7ff fe54 	bl	80014d0 <_Unwind_SetGR>
 8001828:	2007      	movs	r0, #7
 800182a:	e701      	b.n	8001630 <__gnu_unwind_pr_common+0xd0>
 800182c:	08005823 	.word	0x08005823

08001830 <__aeabi_unwind_cpp_pr0>:
 8001830:	2300      	movs	r3, #0
 8001832:	e695      	b.n	8001560 <__gnu_unwind_pr_common>

08001834 <__aeabi_unwind_cpp_pr1>:
 8001834:	2301      	movs	r3, #1
 8001836:	e693      	b.n	8001560 <__gnu_unwind_pr_common>

08001838 <__aeabi_unwind_cpp_pr2>:
 8001838:	2302      	movs	r3, #2
 800183a:	e691      	b.n	8001560 <__gnu_unwind_pr_common>

0800183c <_Unwind_VRS_Pop>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	4604      	mov	r4, r0
 8001840:	b0c5      	sub	sp, #276	; 0x114
 8001842:	2904      	cmp	r1, #4
 8001844:	d80d      	bhi.n	8001862 <_Unwind_VRS_Pop+0x26>
 8001846:	e8df f001 	tbb	[pc, r1]
 800184a:	0355      	.short	0x0355
 800184c:	310c      	.short	0x310c
 800184e:	0f          	.byte	0x0f
 800184f:	00          	.byte	0x00
 8001850:	2b01      	cmp	r3, #1
 8001852:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8001856:	b295      	uxth	r5, r2
 8001858:	d164      	bne.n	8001924 <_Unwind_VRS_Pop+0xe8>
 800185a:	1972      	adds	r2, r6, r5
 800185c:	2a10      	cmp	r2, #16
 800185e:	f240 809d 	bls.w	800199c <_Unwind_VRS_Pop+0x160>
 8001862:	2002      	movs	r0, #2
 8001864:	b045      	add	sp, #276	; 0x114
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1fa      	bne.n	8001862 <_Unwind_VRS_Pop+0x26>
 800186c:	2a10      	cmp	r2, #16
 800186e:	d8f8      	bhi.n	8001862 <_Unwind_VRS_Pop+0x26>
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	06d8      	lsls	r0, r3, #27
 8001874:	f100 80c8 	bmi.w	8001a08 <_Unwind_VRS_Pop+0x1cc>
 8001878:	ae22      	add	r6, sp, #136	; 0x88
 800187a:	4630      	mov	r0, r6
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	2501      	movs	r5, #1
 8001880:	f000 f974 	bl	8001b6c <__gnu_Unwind_Save_WMMXC>
 8001884:	2300      	movs	r3, #0
 8001886:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001888:	9a01      	ldr	r2, [sp, #4]
 800188a:	fa05 f103 	lsl.w	r1, r5, r3
 800188e:	4211      	tst	r1, r2
 8001890:	d003      	beq.n	800189a <_Unwind_VRS_Pop+0x5e>
 8001892:	6801      	ldr	r1, [r0, #0]
 8001894:	3004      	adds	r0, #4
 8001896:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 800189a:	3301      	adds	r3, #1
 800189c:	2b04      	cmp	r3, #4
 800189e:	d1f4      	bne.n	800188a <_Unwind_VRS_Pop+0x4e>
 80018a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80018a2:	4630      	mov	r0, r6
 80018a4:	f000 f958 	bl	8001b58 <__gnu_Unwind_Restore_WMMXC>
 80018a8:	2000      	movs	r0, #0
 80018aa:	e7db      	b.n	8001864 <_Unwind_VRS_Pop+0x28>
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d1d8      	bne.n	8001862 <_Unwind_VRS_Pop+0x26>
 80018b0:	0c15      	lsrs	r5, r2, #16
 80018b2:	b297      	uxth	r7, r2
 80018b4:	19eb      	adds	r3, r5, r7
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d8d3      	bhi.n	8001862 <_Unwind_VRS_Pop+0x26>
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	071e      	lsls	r6, r3, #28
 80018be:	f100 80b7 	bmi.w	8001a30 <_Unwind_VRS_Pop+0x1f4>
 80018c2:	ae22      	add	r6, sp, #136	; 0x88
 80018c4:	4630      	mov	r0, r6
 80018c6:	f000 f925 	bl	8001b14 <__gnu_Unwind_Save_WMMXD>
 80018ca:	00ed      	lsls	r5, r5, #3
 80018cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018ce:	b15f      	cbz	r7, 80018e8 <_Unwind_VRS_Pop+0xac>
 80018d0:	3d04      	subs	r5, #4
 80018d2:	4603      	mov	r3, r0
 80018d4:	1971      	adds	r1, r6, r5
 80018d6:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
 80018da:	f853 2b04 	ldr.w	r2, [r3], #4
 80018de:	4283      	cmp	r3, r0
 80018e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80018e4:	d1f9      	bne.n	80018da <_Unwind_VRS_Pop+0x9e>
 80018e6:	4618      	mov	r0, r3
 80018e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80018ea:	4630      	mov	r0, r6
 80018ec:	f000 f8f0 	bl	8001ad0 <__gnu_Unwind_Restore_WMMXD>
 80018f0:	2000      	movs	r0, #0
 80018f2:	e7b7      	b.n	8001864 <_Unwind_VRS_Pop+0x28>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1b4      	bne.n	8001862 <_Unwind_VRS_Pop+0x26>
 80018f8:	2701      	movs	r7, #1
 80018fa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80018fc:	b296      	uxth	r6, r2
 80018fe:	1d20      	adds	r0, r4, #4
 8001900:	fa07 f103 	lsl.w	r1, r7, r3
 8001904:	4231      	tst	r1, r6
 8001906:	f103 0301 	add.w	r3, r3, #1
 800190a:	d002      	beq.n	8001912 <_Unwind_VRS_Pop+0xd6>
 800190c:	6829      	ldr	r1, [r5, #0]
 800190e:	3504      	adds	r5, #4
 8001910:	6001      	str	r1, [r0, #0]
 8001912:	2b10      	cmp	r3, #16
 8001914:	f100 0004 	add.w	r0, r0, #4
 8001918:	d1f2      	bne.n	8001900 <_Unwind_VRS_Pop+0xc4>
 800191a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 800191e:	d13b      	bne.n	8001998 <_Unwind_VRS_Pop+0x15c>
 8001920:	63a5      	str	r5, [r4, #56]	; 0x38
 8001922:	e79f      	b.n	8001864 <_Unwind_VRS_Pop+0x28>
 8001924:	2b05      	cmp	r3, #5
 8001926:	d19c      	bne.n	8001862 <_Unwind_VRS_Pop+0x26>
 8001928:	1977      	adds	r7, r6, r5
 800192a:	2f20      	cmp	r7, #32
 800192c:	d899      	bhi.n	8001862 <_Unwind_VRS_Pop+0x26>
 800192e:	2e0f      	cmp	r6, #15
 8001930:	d966      	bls.n	8001a00 <_Unwind_VRS_Pop+0x1c4>
 8001932:	462f      	mov	r7, r5
 8001934:	2d00      	cmp	r5, #0
 8001936:	d13a      	bne.n	80019ae <_Unwind_VRS_Pop+0x172>
 8001938:	462a      	mov	r2, r5
 800193a:	2700      	movs	r7, #0
 800193c:	2a00      	cmp	r2, #0
 800193e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001940:	dd72      	ble.n	8001a28 <_Unwind_VRS_Pop+0x1ec>
 8001942:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001946:	4601      	mov	r1, r0
 8001948:	a844      	add	r0, sp, #272	; 0x110
 800194a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 800194e:	388c      	subs	r0, #140	; 0x8c
 8001950:	f851 5b04 	ldr.w	r5, [r1], #4
 8001954:	4291      	cmp	r1, r2
 8001956:	f840 5f04 	str.w	r5, [r0, #4]!
 800195a:	d1f9      	bne.n	8001950 <_Unwind_VRS_Pop+0x114>
 800195c:	4608      	mov	r0, r1
 800195e:	b197      	cbz	r7, 8001986 <_Unwind_VRS_Pop+0x14a>
 8001960:	2e10      	cmp	r6, #16
 8001962:	4632      	mov	r2, r6
 8001964:	bf38      	it	cc
 8001966:	2210      	movcc	r2, #16
 8001968:	a944      	add	r1, sp, #272	; 0x110
 800196a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800196e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001972:	0079      	lsls	r1, r7, #1
 8001974:	3a04      	subs	r2, #4
 8001976:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800197a:	f850 5b04 	ldr.w	r5, [r0], #4
 800197e:	4288      	cmp	r0, r1
 8001980:	f842 5f04 	str.w	r5, [r2, #4]!
 8001984:	d1f9      	bne.n	800197a <_Unwind_VRS_Pop+0x13e>
 8001986:	2b01      	cmp	r3, #1
 8001988:	d048      	beq.n	8001a1c <_Unwind_VRS_Pop+0x1e0>
 800198a:	2e0f      	cmp	r6, #15
 800198c:	63a1      	str	r1, [r4, #56]	; 0x38
 800198e:	d933      	bls.n	80019f8 <_Unwind_VRS_Pop+0x1bc>
 8001990:	b117      	cbz	r7, 8001998 <_Unwind_VRS_Pop+0x15c>
 8001992:	a802      	add	r0, sp, #8
 8001994:	f000 f894 	bl	8001ac0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8001998:	2000      	movs	r0, #0
 800199a:	e763      	b.n	8001864 <_Unwind_VRS_Pop+0x28>
 800199c:	2e0f      	cmp	r6, #15
 800199e:	f63f af60 	bhi.w	8001862 <_Unwind_VRS_Pop+0x26>
 80019a2:	2700      	movs	r7, #0
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	07d1      	lsls	r1, r2, #31
 80019a8:	d417      	bmi.n	80019da <_Unwind_VRS_Pop+0x19e>
 80019aa:	2f00      	cmp	r7, #0
 80019ac:	d060      	beq.n	8001a70 <_Unwind_VRS_Pop+0x234>
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	0751      	lsls	r1, r2, #29
 80019b2:	d445      	bmi.n	8001a40 <_Unwind_VRS_Pop+0x204>
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d04d      	beq.n	8001a54 <_Unwind_VRS_Pop+0x218>
 80019b8:	2e0f      	cmp	r6, #15
 80019ba:	d806      	bhi.n	80019ca <_Unwind_VRS_Pop+0x18e>
 80019bc:	a822      	add	r0, sp, #136	; 0x88
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	f000 f87a 	bl	8001ab8 <__gnu_Unwind_Save_VFP_D>
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	2f00      	cmp	r7, #0
 80019c8:	d0b6      	beq.n	8001938 <_Unwind_VRS_Pop+0xfc>
 80019ca:	a802      	add	r0, sp, #8
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	f000 f87b 	bl	8001ac8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	f1c6 0210 	rsb	r2, r6, #16
 80019d8:	e7b0      	b.n	800193c <_Unwind_VRS_Pop+0x100>
 80019da:	f022 0101 	bic.w	r1, r2, #1
 80019de:	2b05      	cmp	r3, #5
 80019e0:	6021      	str	r1, [r4, #0]
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	4620      	mov	r0, r4
 80019e6:	d03b      	beq.n	8001a60 <_Unwind_VRS_Pop+0x224>
 80019e8:	f022 0203 	bic.w	r2, r2, #3
 80019ec:	f840 2b48 	str.w	r2, [r0], #72
 80019f0:	f000 f85a 	bl	8001aa8 <__gnu_Unwind_Save_VFP>
 80019f4:	9b01      	ldr	r3, [sp, #4]
 80019f6:	e7d8      	b.n	80019aa <_Unwind_VRS_Pop+0x16e>
 80019f8:	a822      	add	r0, sp, #136	; 0x88
 80019fa:	f000 f859 	bl	8001ab0 <__gnu_Unwind_Restore_VFP_D>
 80019fe:	e7c7      	b.n	8001990 <_Unwind_VRS_Pop+0x154>
 8001a00:	2f10      	cmp	r7, #16
 8001a02:	d9ce      	bls.n	80019a2 <_Unwind_VRS_Pop+0x166>
 8001a04:	3f10      	subs	r7, #16
 8001a06:	e7cd      	b.n	80019a4 <_Unwind_VRS_Pop+0x168>
 8001a08:	f023 0310 	bic.w	r3, r3, #16
 8001a0c:	6023      	str	r3, [r4, #0]
 8001a0e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	f000 f8aa 	bl	8001b6c <__gnu_Unwind_Save_WMMXC>
 8001a18:	9a01      	ldr	r2, [sp, #4]
 8001a1a:	e72d      	b.n	8001878 <_Unwind_VRS_Pop+0x3c>
 8001a1c:	3104      	adds	r1, #4
 8001a1e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a20:	a822      	add	r0, sp, #136	; 0x88
 8001a22:	f000 f83d 	bl	8001aa0 <__gnu_Unwind_Restore_VFP>
 8001a26:	e7b7      	b.n	8001998 <_Unwind_VRS_Pop+0x15c>
 8001a28:	2f00      	cmp	r7, #0
 8001a2a:	d199      	bne.n	8001960 <_Unwind_VRS_Pop+0x124>
 8001a2c:	4601      	mov	r1, r0
 8001a2e:	e7aa      	b.n	8001986 <_Unwind_VRS_Pop+0x14a>
 8001a30:	f023 0308 	bic.w	r3, r3, #8
 8001a34:	6023      	str	r3, [r4, #0]
 8001a36:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8001a3a:	f000 f86b 	bl	8001b14 <__gnu_Unwind_Save_WMMXD>
 8001a3e:	e740      	b.n	80018c2 <_Unwind_VRS_Pop+0x86>
 8001a40:	4620      	mov	r0, r4
 8001a42:	f022 0204 	bic.w	r2, r2, #4
 8001a46:	f840 2bd0 	str.w	r2, [r0], #208
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	f000 f83c 	bl	8001ac8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001a50:	9b01      	ldr	r3, [sp, #4]
 8001a52:	e7af      	b.n	80019b4 <_Unwind_VRS_Pop+0x178>
 8001a54:	a822      	add	r0, sp, #136	; 0x88
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	f000 f826 	bl	8001aa8 <__gnu_Unwind_Save_VFP>
 8001a5c:	9b01      	ldr	r3, [sp, #4]
 8001a5e:	e7b9      	b.n	80019d4 <_Unwind_VRS_Pop+0x198>
 8001a60:	f041 0102 	orr.w	r1, r1, #2
 8001a64:	f840 1b48 	str.w	r1, [r0], #72
 8001a68:	f000 f826 	bl	8001ab8 <__gnu_Unwind_Save_VFP_D>
 8001a6c:	9b01      	ldr	r3, [sp, #4]
 8001a6e:	e79c      	b.n	80019aa <_Unwind_VRS_Pop+0x16e>
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d003      	beq.n	8001a7c <_Unwind_VRS_Pop+0x240>
 8001a74:	2e0f      	cmp	r6, #15
 8001a76:	f63f af5f 	bhi.w	8001938 <_Unwind_VRS_Pop+0xfc>
 8001a7a:	e79f      	b.n	80019bc <_Unwind_VRS_Pop+0x180>
 8001a7c:	a822      	add	r0, sp, #136	; 0x88
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	f000 f812 	bl	8001aa8 <__gnu_Unwind_Save_VFP>
 8001a84:	9b01      	ldr	r3, [sp, #4]
 8001a86:	e757      	b.n	8001938 <_Unwind_VRS_Pop+0xfc>

08001a88 <__restore_core_regs>:
 8001a88:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001a8c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001a90:	469c      	mov	ip, r3
 8001a92:	46a6      	mov	lr, r4
 8001a94:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001a98:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001a9c:	46e5      	mov	sp, ip
 8001a9e:	bd00      	pop	{pc}

08001aa0 <__gnu_Unwind_Restore_VFP>:
 8001aa0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop

08001aa8 <__gnu_Unwind_Save_VFP>:
 8001aa8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <__gnu_Unwind_Restore_VFP_D>:
 8001ab0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <__gnu_Unwind_Save_VFP_D>:
 8001ab8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop

08001ac0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001ac0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop

08001ac8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8001ac8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop

08001ad0 <__gnu_Unwind_Restore_WMMXD>:
 8001ad0:	ecf0 0102 	ldfe	f0, [r0], #8
 8001ad4:	ecf0 1102 	ldfe	f1, [r0], #8
 8001ad8:	ecf0 2102 	ldfe	f2, [r0], #8
 8001adc:	ecf0 3102 	ldfe	f3, [r0], #8
 8001ae0:	ecf0 4102 	ldfe	f4, [r0], #8
 8001ae4:	ecf0 5102 	ldfe	f5, [r0], #8
 8001ae8:	ecf0 6102 	ldfe	f6, [r0], #8
 8001aec:	ecf0 7102 	ldfe	f7, [r0], #8
 8001af0:	ecf0 8102 	ldfp	f0, [r0], #8
 8001af4:	ecf0 9102 	ldfp	f1, [r0], #8
 8001af8:	ecf0 a102 	ldfp	f2, [r0], #8
 8001afc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001b00:	ecf0 c102 	ldfp	f4, [r0], #8
 8001b04:	ecf0 d102 	ldfp	f5, [r0], #8
 8001b08:	ecf0 e102 	ldfp	f6, [r0], #8
 8001b0c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <__gnu_Unwind_Save_WMMXD>:
 8001b14:	ece0 0102 	stfe	f0, [r0], #8
 8001b18:	ece0 1102 	stfe	f1, [r0], #8
 8001b1c:	ece0 2102 	stfe	f2, [r0], #8
 8001b20:	ece0 3102 	stfe	f3, [r0], #8
 8001b24:	ece0 4102 	stfe	f4, [r0], #8
 8001b28:	ece0 5102 	stfe	f5, [r0], #8
 8001b2c:	ece0 6102 	stfe	f6, [r0], #8
 8001b30:	ece0 7102 	stfe	f7, [r0], #8
 8001b34:	ece0 8102 	stfp	f0, [r0], #8
 8001b38:	ece0 9102 	stfp	f1, [r0], #8
 8001b3c:	ece0 a102 	stfp	f2, [r0], #8
 8001b40:	ece0 b102 	stfp	f3, [r0], #8
 8001b44:	ece0 c102 	stfp	f4, [r0], #8
 8001b48:	ece0 d102 	stfp	f5, [r0], #8
 8001b4c:	ece0 e102 	stfp	f6, [r0], #8
 8001b50:	ece0 f102 	stfp	f7, [r0], #8
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <__gnu_Unwind_Restore_WMMXC>:
 8001b58:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001b5c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001b60:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001b64:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <__gnu_Unwind_Save_WMMXC>:
 8001b6c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001b70:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001b74:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001b78:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop

08001b80 <_Unwind_RaiseException>:
 8001b80:	46ec      	mov	ip, sp
 8001b82:	b500      	push	{lr}
 8001b84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001b88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001b94:	a901      	add	r1, sp, #4
 8001b96:	f7ff fbed 	bl	8001374 <__gnu_Unwind_RaiseException>
 8001b9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001b9e:	b012      	add	sp, #72	; 0x48
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <_Unwind_Resume>:
 8001ba4:	46ec      	mov	ip, sp
 8001ba6:	b500      	push	{lr}
 8001ba8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001bac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001bb8:	a901      	add	r1, sp, #4
 8001bba:	f7ff fc15 	bl	80013e8 <__gnu_Unwind_Resume>
 8001bbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001bc2:	b012      	add	sp, #72	; 0x48
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop

08001bc8 <_Unwind_Resume_or_Rethrow>:
 8001bc8:	46ec      	mov	ip, sp
 8001bca:	b500      	push	{lr}
 8001bcc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001bd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001bdc:	a901      	add	r1, sp, #4
 8001bde:	f7ff fc25 	bl	800142c <__gnu_Unwind_Resume_or_Rethrow>
 8001be2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001be6:	b012      	add	sp, #72	; 0x48
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <_Unwind_ForcedUnwind>:
 8001bec:	46ec      	mov	ip, sp
 8001bee:	b500      	push	{lr}
 8001bf0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001bf4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c00:	ab01      	add	r3, sp, #4
 8001c02:	f7ff fbe7 	bl	80013d4 <__gnu_Unwind_ForcedUnwind>
 8001c06:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c0a:	b012      	add	sp, #72	; 0x48
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <_Unwind_Backtrace>:
 8001c10:	46ec      	mov	ip, sp
 8001c12:	b500      	push	{lr}
 8001c14:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001c18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001c24:	aa01      	add	r2, sp, #4
 8001c26:	f7ff fc61 	bl	80014ec <__gnu_Unwind_Backtrace>
 8001c2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001c2e:	b012      	add	sp, #72	; 0x48
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop

08001c34 <next_unwind_byte>:
 8001c34:	7a02      	ldrb	r2, [r0, #8]
 8001c36:	b91a      	cbnz	r2, 8001c40 <next_unwind_byte+0xc>
 8001c38:	7a43      	ldrb	r3, [r0, #9]
 8001c3a:	b943      	cbnz	r3, 8001c4e <next_unwind_byte+0x1a>
 8001c3c:	20b0      	movs	r0, #176	; 0xb0
 8001c3e:	4770      	bx	lr
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	3a01      	subs	r2, #1
 8001c44:	7202      	strb	r2, [r0, #8]
 8001c46:	021a      	lsls	r2, r3, #8
 8001c48:	6002      	str	r2, [r0, #0]
 8001c4a:	0e18      	lsrs	r0, r3, #24
 8001c4c:	4770      	bx	lr
 8001c4e:	2103      	movs	r1, #3
 8001c50:	6842      	ldr	r2, [r0, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b410      	push	{r4}
 8001c56:	7243      	strb	r3, [r0, #9]
 8001c58:	6813      	ldr	r3, [r2, #0]
 8001c5a:	1d14      	adds	r4, r2, #4
 8001c5c:	7201      	strb	r1, [r0, #8]
 8001c5e:	021a      	lsls	r2, r3, #8
 8001c60:	6044      	str	r4, [r0, #4]
 8001c62:	6002      	str	r2, [r0, #0]
 8001c64:	bc10      	pop	{r4}
 8001c66:	0e18      	lsrs	r0, r3, #24
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop

08001c6c <_Unwind_GetGR.constprop.0>:
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	b500      	push	{lr}
 8001c70:	b085      	sub	sp, #20
 8001c72:	aa03      	add	r2, sp, #12
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	4619      	mov	r1, r3
 8001c78:	220c      	movs	r2, #12
 8001c7a:	f7ff fbe9 	bl	8001450 <_Unwind_VRS_Get>
 8001c7e:	9803      	ldr	r0, [sp, #12]
 8001c80:	b005      	add	sp, #20
 8001c82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c86:	bf00      	nop

08001c88 <unwind_UCB_from_context>:
 8001c88:	e7f0      	b.n	8001c6c <_Unwind_GetGR.constprop.0>
 8001c8a:	bf00      	nop

08001c8c <__gnu_unwind_execute>:
 8001c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c90:	4606      	mov	r6, r0
 8001c92:	460f      	mov	r7, r1
 8001c94:	f04f 0800 	mov.w	r8, #0
 8001c98:	b085      	sub	sp, #20
 8001c9a:	4638      	mov	r0, r7
 8001c9c:	f7ff ffca 	bl	8001c34 <next_unwind_byte>
 8001ca0:	28b0      	cmp	r0, #176	; 0xb0
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	d023      	beq.n	8001cee <__gnu_unwind_execute+0x62>
 8001ca6:	0605      	lsls	r5, r0, #24
 8001ca8:	d427      	bmi.n	8001cfa <__gnu_unwind_execute+0x6e>
 8001caa:	2300      	movs	r3, #0
 8001cac:	f10d 090c 	add.w	r9, sp, #12
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	0085      	lsls	r5, r0, #2
 8001cb4:	220d      	movs	r2, #13
 8001cb6:	f8cd 9000 	str.w	r9, [sp]
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff fbc8 	bl	8001450 <_Unwind_VRS_Get>
 8001cc0:	b2ed      	uxtb	r5, r5
 8001cc2:	9b03      	ldr	r3, [sp, #12]
 8001cc4:	0660      	lsls	r0, r4, #25
 8001cc6:	f105 0504 	add.w	r5, r5, #4
 8001cca:	bf4c      	ite	mi
 8001ccc:	1b5d      	submi	r5, r3, r5
 8001cce:	18ed      	addpl	r5, r5, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	220d      	movs	r2, #13
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f8cd 9000 	str.w	r9, [sp]
 8001cda:	4630      	mov	r0, r6
 8001cdc:	9503      	str	r5, [sp, #12]
 8001cde:	f7ff fbdd 	bl	800149c <_Unwind_VRS_Set>
 8001ce2:	4638      	mov	r0, r7
 8001ce4:	f7ff ffa6 	bl	8001c34 <next_unwind_byte>
 8001ce8:	28b0      	cmp	r0, #176	; 0xb0
 8001cea:	4604      	mov	r4, r0
 8001cec:	d1db      	bne.n	8001ca6 <__gnu_unwind_execute+0x1a>
 8001cee:	f1b8 0f00 	cmp.w	r8, #0
 8001cf2:	f000 8094 	beq.w	8001e1e <__gnu_unwind_execute+0x192>
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	e01c      	b.n	8001d34 <__gnu_unwind_execute+0xa8>
 8001cfa:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d05c      	beq.n	8001dbc <__gnu_unwind_execute+0x130>
 8001d02:	2b90      	cmp	r3, #144	; 0x90
 8001d04:	d019      	beq.n	8001d3a <__gnu_unwind_execute+0xae>
 8001d06:	2ba0      	cmp	r3, #160	; 0xa0
 8001d08:	d02c      	beq.n	8001d64 <__gnu_unwind_execute+0xd8>
 8001d0a:	2bb0      	cmp	r3, #176	; 0xb0
 8001d0c:	d03e      	beq.n	8001d8c <__gnu_unwind_execute+0x100>
 8001d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8001d10:	d06b      	beq.n	8001dea <__gnu_unwind_execute+0x15e>
 8001d12:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001d16:	2bd0      	cmp	r3, #208	; 0xd0
 8001d18:	d10b      	bne.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001d1a:	f000 0207 	and.w	r2, r0, #7
 8001d1e:	3201      	adds	r2, #1
 8001d20:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001d24:	2305      	movs	r3, #5
 8001d26:	2101      	movs	r1, #1
 8001d28:	4630      	mov	r0, r6
 8001d2a:	f7ff fd87 	bl	800183c <_Unwind_VRS_Pop>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0b3      	beq.n	8001c9a <__gnu_unwind_execute+0xe>
 8001d32:	2009      	movs	r0, #9
 8001d34:	b005      	add	sp, #20
 8001d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d3a:	f000 030d 	and.w	r3, r0, #13
 8001d3e:	2b0d      	cmp	r3, #13
 8001d40:	d0f7      	beq.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001d42:	2300      	movs	r3, #0
 8001d44:	ad03      	add	r5, sp, #12
 8001d46:	f000 020f 	and.w	r2, r0, #15
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	9500      	str	r5, [sp, #0]
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f7ff fb7e 	bl	8001450 <_Unwind_VRS_Get>
 8001d54:	2300      	movs	r3, #0
 8001d56:	9500      	str	r5, [sp, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	220d      	movs	r2, #13
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f7ff fb9d 	bl	800149c <_Unwind_VRS_Set>
 8001d62:	e79a      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001d64:	43c3      	mvns	r3, r0
 8001d66:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	411a      	asrs	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	0701      	lsls	r1, r0, #28
 8001d74:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001d78:	bf48      	it	mi
 8001d7a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4630      	mov	r0, r6
 8001d82:	f7ff fd5b 	bl	800183c <_Unwind_VRS_Pop>
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d1d3      	bne.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001d8a:	e786      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001d8c:	28b1      	cmp	r0, #177	; 0xb1
 8001d8e:	d057      	beq.n	8001e40 <__gnu_unwind_execute+0x1b4>
 8001d90:	28b2      	cmp	r0, #178	; 0xb2
 8001d92:	d068      	beq.n	8001e66 <__gnu_unwind_execute+0x1da>
 8001d94:	28b3      	cmp	r0, #179	; 0xb3
 8001d96:	f000 8095 	beq.w	8001ec4 <__gnu_unwind_execute+0x238>
 8001d9a:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001d9e:	2bb4      	cmp	r3, #180	; 0xb4
 8001da0:	d0c7      	beq.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001da2:	2301      	movs	r3, #1
 8001da4:	f000 0207 	and.w	r2, r0, #7
 8001da8:	441a      	add	r2, r3
 8001daa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dae:	4619      	mov	r1, r3
 8001db0:	4630      	mov	r0, r6
 8001db2:	f7ff fd43 	bl	800183c <_Unwind_VRS_Pop>
 8001db6:	2800      	cmp	r0, #0
 8001db8:	d1bb      	bne.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001dba:	e76e      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001dbc:	4638      	mov	r0, r7
 8001dbe:	f7ff ff39 	bl	8001c34 <next_unwind_byte>
 8001dc2:	0224      	lsls	r4, r4, #8
 8001dc4:	4304      	orrs	r4, r0
 8001dc6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001dca:	d0b2      	beq.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	0124      	lsls	r4, r4, #4
 8001dd0:	b2a2      	uxth	r2, r4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f7ff fd31 	bl	800183c <_Unwind_VRS_Pop>
 8001dda:	2800      	cmp	r0, #0
 8001ddc:	d1a9      	bne.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001dde:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001de2:	bf18      	it	ne
 8001de4:	f04f 0801 	movne.w	r8, #1
 8001de8:	e757      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001dea:	28c6      	cmp	r0, #198	; 0xc6
 8001dec:	d07d      	beq.n	8001eea <__gnu_unwind_execute+0x25e>
 8001dee:	28c7      	cmp	r0, #199	; 0xc7
 8001df0:	f000 8086 	beq.w	8001f00 <__gnu_unwind_execute+0x274>
 8001df4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001df8:	2bc0      	cmp	r3, #192	; 0xc0
 8001dfa:	f000 8094 	beq.w	8001f26 <__gnu_unwind_execute+0x29a>
 8001dfe:	28c8      	cmp	r0, #200	; 0xc8
 8001e00:	f000 809f 	beq.w	8001f42 <__gnu_unwind_execute+0x2b6>
 8001e04:	28c9      	cmp	r0, #201	; 0xc9
 8001e06:	d194      	bne.n	8001d32 <__gnu_unwind_execute+0xa6>
 8001e08:	4638      	mov	r0, r7
 8001e0a:	f7ff ff13 	bl	8001c34 <next_unwind_byte>
 8001e0e:	0302      	lsls	r2, r0, #12
 8001e10:	f000 000f 	and.w	r0, r0, #15
 8001e14:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001e18:	3001      	adds	r0, #1
 8001e1a:	4302      	orrs	r2, r0
 8001e1c:	e782      	b.n	8001d24 <__gnu_unwind_execute+0x98>
 8001e1e:	ac03      	add	r4, sp, #12
 8001e20:	4643      	mov	r3, r8
 8001e22:	220e      	movs	r2, #14
 8001e24:	4641      	mov	r1, r8
 8001e26:	9400      	str	r4, [sp, #0]
 8001e28:	4630      	mov	r0, r6
 8001e2a:	f7ff fb11 	bl	8001450 <_Unwind_VRS_Get>
 8001e2e:	9400      	str	r4, [sp, #0]
 8001e30:	4630      	mov	r0, r6
 8001e32:	4643      	mov	r3, r8
 8001e34:	220f      	movs	r2, #15
 8001e36:	4641      	mov	r1, r8
 8001e38:	f7ff fb30 	bl	800149c <_Unwind_VRS_Set>
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	e779      	b.n	8001d34 <__gnu_unwind_execute+0xa8>
 8001e40:	4638      	mov	r0, r7
 8001e42:	f7ff fef7 	bl	8001c34 <next_unwind_byte>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	f43f af73 	beq.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001e4c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001e50:	f47f af6f 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f7ff fcef 	bl	800183c <_Unwind_VRS_Pop>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	f47f af67 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001e64:	e719      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001e66:	2300      	movs	r3, #0
 8001e68:	f10d 090c 	add.w	r9, sp, #12
 8001e6c:	220d      	movs	r2, #13
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f8cd 9000 	str.w	r9, [sp]
 8001e74:	4630      	mov	r0, r6
 8001e76:	f7ff faeb 	bl	8001450 <_Unwind_VRS_Get>
 8001e7a:	4638      	mov	r0, r7
 8001e7c:	f7ff feda 	bl	8001c34 <next_unwind_byte>
 8001e80:	0602      	lsls	r2, r0, #24
 8001e82:	f04f 0402 	mov.w	r4, #2
 8001e86:	d50c      	bpl.n	8001ea2 <__gnu_unwind_execute+0x216>
 8001e88:	9b03      	ldr	r3, [sp, #12]
 8001e8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001e8e:	40a0      	lsls	r0, r4
 8001e90:	4403      	add	r3, r0
 8001e92:	4638      	mov	r0, r7
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	f7ff fecd 	bl	8001c34 <next_unwind_byte>
 8001e9a:	0603      	lsls	r3, r0, #24
 8001e9c:	f104 0407 	add.w	r4, r4, #7
 8001ea0:	d4f2      	bmi.n	8001e88 <__gnu_unwind_execute+0x1fc>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9903      	ldr	r1, [sp, #12]
 8001ea6:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001eaa:	40a2      	lsls	r2, r4
 8001eac:	f501 7101 	add.w	r1, r1, #516	; 0x204
 8001eb0:	188c      	adds	r4, r1, r2
 8001eb2:	f8cd 9000 	str.w	r9, [sp]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	220d      	movs	r2, #13
 8001eba:	4630      	mov	r0, r6
 8001ebc:	9403      	str	r4, [sp, #12]
 8001ebe:	f7ff faed 	bl	800149c <_Unwind_VRS_Set>
 8001ec2:	e6ea      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001ec4:	4638      	mov	r0, r7
 8001ec6:	f7ff feb5 	bl	8001c34 <next_unwind_byte>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	0301      	lsls	r1, r0, #12
 8001ece:	f000 000f 	and.w	r0, r0, #15
 8001ed2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001ed6:	18c2      	adds	r2, r0, r3
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	4630      	mov	r0, r6
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7ff fcad 	bl	800183c <_Unwind_VRS_Pop>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	f47f af25 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001ee8:	e6d7      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001eea:	4638      	mov	r0, r7
 8001eec:	f7ff fea2 	bl	8001c34 <next_unwind_byte>
 8001ef0:	0301      	lsls	r1, r0, #12
 8001ef2:	f000 000f 	and.w	r0, r0, #15
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001efc:	1c42      	adds	r2, r0, #1
 8001efe:	e7eb      	b.n	8001ed8 <__gnu_unwind_execute+0x24c>
 8001f00:	4638      	mov	r0, r7
 8001f02:	f7ff fe97 	bl	8001c34 <next_unwind_byte>
 8001f06:	2800      	cmp	r0, #0
 8001f08:	f43f af13 	beq.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001f0c:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001f10:	f47f af0f 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001f14:	4602      	mov	r2, r0
 8001f16:	2104      	movs	r1, #4
 8001f18:	4630      	mov	r0, r6
 8001f1a:	f7ff fc8f 	bl	800183c <_Unwind_VRS_Pop>
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	f47f af07 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001f24:	e6b9      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001f26:	2303      	movs	r3, #3
 8001f28:	f000 020f 	and.w	r2, r0, #15
 8001f2c:	3201      	adds	r2, #1
 8001f2e:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001f32:	4619      	mov	r1, r3
 8001f34:	4630      	mov	r0, r6
 8001f36:	f7ff fc81 	bl	800183c <_Unwind_VRS_Pop>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	f47f aef9 	bne.w	8001d32 <__gnu_unwind_execute+0xa6>
 8001f40:	e6ab      	b.n	8001c9a <__gnu_unwind_execute+0xe>
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff fe76 	bl	8001c34 <next_unwind_byte>
 8001f48:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001f4c:	f000 030f 	and.w	r3, r0, #15
 8001f50:	3210      	adds	r2, #16
 8001f52:	3301      	adds	r3, #1
 8001f54:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001f58:	e6e4      	b.n	8001d24 <__gnu_unwind_execute+0x98>
 8001f5a:	bf00      	nop

08001f5c <__gnu_unwind_frame>:
 8001f5c:	b530      	push	{r4, r5, lr}
 8001f5e:	2403      	movs	r4, #3
 8001f60:	460d      	mov	r5, r1
 8001f62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001f64:	b085      	sub	sp, #20
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	f88d 400c 	strb.w	r4, [sp, #12]
 8001f6c:	79dc      	ldrb	r4, [r3, #7]
 8001f6e:	0212      	lsls	r2, r2, #8
 8001f70:	3308      	adds	r3, #8
 8001f72:	a901      	add	r1, sp, #4
 8001f74:	4628      	mov	r0, r5
 8001f76:	9201      	str	r2, [sp, #4]
 8001f78:	f88d 400d 	strb.w	r4, [sp, #13]
 8001f7c:	9302      	str	r3, [sp, #8]
 8001f7e:	f7ff fe85 	bl	8001c8c <__gnu_unwind_execute>
 8001f82:	b005      	add	sp, #20
 8001f84:	bd30      	pop	{r4, r5, pc}
 8001f86:	bf00      	nop

08001f88 <_Unwind_GetRegionStart>:
 8001f88:	b508      	push	{r3, lr}
 8001f8a:	f7ff fe7d 	bl	8001c88 <unwind_UCB_from_context>
 8001f8e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001f90:	bd08      	pop	{r3, pc}
 8001f92:	bf00      	nop

08001f94 <_Unwind_GetLanguageSpecificData>:
 8001f94:	b508      	push	{r3, lr}
 8001f96:	f7ff fe77 	bl	8001c88 <unwind_UCB_from_context>
 8001f9a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001f9c:	79c3      	ldrb	r3, [r0, #7]
 8001f9e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001fa2:	3008      	adds	r0, #8
 8001fa4:	bd08      	pop	{r3, pc}
 8001fa6:	bf00      	nop

08001fa8 <_Unwind_GetTextRelBase>:
 8001fa8:	b508      	push	{r3, lr}
 8001faa:	f004 fcaa 	bl	8006902 <abort>
 8001fae:	bf00      	nop

08001fb0 <_Unwind_GetDataRelBase>:
 8001fb0:	b508      	push	{r3, lr}
 8001fb2:	f7ff fff9 	bl	8001fa8 <_Unwind_GetTextRelBase>
 8001fb6:	bf00      	nop

08001fb8 <_ZN8AllTasksC1Ev>:
#include <AllTasks.h>


AllTasks allTasks;

AllTasks::AllTasks() {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <_ZN8AllTasksC1Ev+0x1c>)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08006c08 	.word	0x08006c08

08001fd8 <_ZN8AllTasks7processEv>:
	mode_manager.init();
	motor_manager.init();

}

void AllTasks::process(void){
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	//futaba.Process();
	mode_manager.proccess();
 8001fe0:	4804      	ldr	r0, [pc, #16]	; (8001ff4 <_ZN8AllTasks7processEv+0x1c>)
 8001fe2:	f000 ff83 	bl	8002eec <_ZN11ModeManager8proccessEv>
	motor_manager.process();
 8001fe6:	4804      	ldr	r0, [pc, #16]	; (8001ff8 <_ZN8AllTasks7processEv+0x20>)
 8001fe8:	f001 f8ce 	bl	8003188 <_ZN12MotorManager7processEv>

}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000015c 	.word	0x2000015c
 8001ff8:	20000170 	.word	0x20000170

08001ffc <_ZN8AllTasksD1Ev>:

AllTasks::~AllTasks() {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <_ZN8AllTasksD1Ev+0x1c>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	08006c08 	.word	0x08006c08

0800201c <_ZN8AllTasksD0Ev>:
AllTasks::~AllTasks() {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
}
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe9 	bl	8001ffc <_ZN8AllTasksD1Ev>
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f003 fa8d 	bl	800554a <_ZdlPv>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <_Z41__static_initialization_and_destruction_0ii>:
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10c      	bne.n	8002066 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002052:	4293      	cmp	r3, r2
 8002054:	d107      	bne.n	8002066 <_Z41__static_initialization_and_destruction_0ii+0x2a>
AllTasks allTasks;
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002058:	f7ff ffae 	bl	8001fb8 <_ZN8AllTasksC1Ev>
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800205e:	4906      	ldr	r1, [pc, #24]	; (8002078 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002062:	f003 fa74 	bl	800554e <__aeabi_atexit>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200000a0 	.word	0x200000a0
 8002074:	20000000 	.word	0x20000000
 8002078:	08001ffd 	.word	0x08001ffd

0800207c <_GLOBAL__sub_I_allTasks>:
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
 8002080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff ffd9 	bl	800203c <_Z41__static_initialization_and_destruction_0ii>
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEEPh>:

#include "CanSendManager.h"

CanSendManager canSendManager;

void CanSendManager::sendMsg(SEND_MODE mode, uint8_t * msgData){
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	460b      	mov	r3, r1
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	72fb      	strb	r3, [r7, #11]
	}
	else if (mode == STATUS ){
		//hal_can_send( STATUS_FRAME_ID,  STATUS_FRAME_LENGTH ,msgData);
	}

}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr

080020a4 <_ZN14CanSendManager7getSignEf>:

uint8_t CanSendManager::getSign(float value){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	if (value >=0) return POSITIVE_SIGN;
 80020ae:	f04f 0100 	mov.w	r1, #0
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f7fe ffc6 	bl	8001044 <__aeabi_fcmpge>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <_ZN14CanSendManager7getSignEf+0x1e>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <_ZN14CanSendManager7getSignEf+0x20>
	else return NEGATIVE_SIGN;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_ZN14CanSendManager21convertFloatToUint16tEf>:

uint16_t CanSendManager::convertFloatToUint16t(float value){
 80020cc:	b5b0      	push	{r4, r5, r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	float range = 128;
 80020d6:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 80020da:	60fb      	str	r3, [r7, #12]
	if( value > range){
 80020dc:	68f9      	ldr	r1, [r7, #12]
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7fe ffba 	bl	8001058 <__aeabi_fcmpgt>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <_ZN14CanSendManager21convertFloatToUint16tEf+0x2a>
		return range;
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe ffbe 	bl	800106c <__aeabi_f2uiz>
 80020f0:	4603      	mov	r3, r0
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	e023      	b.n	800213e <_ZN14CanSendManager21convertFloatToUint16tEf+0x72>
	}
	return(uint16_t)(value * pow(2, 16) /range);
 80020f6:	6838      	ldr	r0, [r7, #0]
 80020f8:	f7fe f998 	bl	800042c <__aeabi_f2d>
 80020fc:	4604      	mov	r4, r0
 80020fe:	460d      	mov	r5, r1
 8002100:	2110      	movs	r1, #16
 8002102:	2002      	movs	r0, #2
 8002104:	f000 f92b 	bl	800235e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4620      	mov	r0, r4
 800210e:	4629      	mov	r1, r5
 8002110:	f7fe f9e0 	bl	80004d4 <__aeabi_dmul>
 8002114:	4603      	mov	r3, r0
 8002116:	460c      	mov	r4, r1
 8002118:	4625      	mov	r5, r4
 800211a:	461c      	mov	r4, r3
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7fe f985 	bl	800042c <__aeabi_f2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4620      	mov	r0, r4
 8002128:	4629      	mov	r1, r5
 800212a:	f7fe fafd 	bl	8000728 <__aeabi_ddiv>
 800212e:	4603      	mov	r3, r0
 8002130:	460c      	mov	r4, r1
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	f7fe fca5 	bl	8000a84 <__aeabi_d2uiz>
 800213a:	4603      	mov	r3, r0
 800213c:	b29b      	uxth	r3, r3
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bdb0      	pop	{r4, r5, r7, pc}

08002146 <_ZN14CanSendManager14convertToFrameEht>:
uint8_t * CanSendManager::convertToFrame(uint8_t sign, uint16_t value){
 8002146:	b580      	push	{r7, lr}
 8002148:	b084      	sub	sp, #16
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
 800214e:	460b      	mov	r3, r1
 8002150:	70fb      	strb	r3, [r7, #3]
 8002152:	4613      	mov	r3, r2
 8002154:	803b      	strh	r3, [r7, #0]
	uint8_t data_to_encode[]={
			(uint8_t)(sign >> 8),
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	121b      	asrs	r3, r3, #8
			(uint8_t) sign,
			(uint8_t)(value >> 8 ),
			(uint8_t) value,
	};
 800215a:	b2db      	uxtb	r3, r3
 800215c:	733b      	strb	r3, [r7, #12]
 800215e:	78fb      	ldrb	r3, [r7, #3]
 8002160:	737b      	strb	r3, [r7, #13]
			(uint8_t)(value >> 8 ),
 8002162:	883b      	ldrh	r3, [r7, #0]
 8002164:	121b      	asrs	r3, r3, #8
	};
 8002166:	b2db      	uxtb	r3, r3
 8002168:	73bb      	strb	r3, [r7, #14]
 800216a:	883b      	ldrh	r3, [r7, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	73fb      	strb	r3, [r7, #15]

	return encode_frame_big_endian(data_to_encode,STEERING_FRAME_LENGTH);
 8002170:	f107 030c 	add.w	r3, r7, #12
 8002174:	2204      	movs	r2, #4
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f805 	bl	8002188 <_ZN14CanSendManager23encode_frame_big_endianEPhh>
 800217e:	4603      	mov	r3, r0


}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_ZN14CanSendManager23encode_frame_big_endianEPhh>:

uint8_t* CanSendManager::encode_frame_big_endian(uint8_t* data , uint8_t data_length){
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	4613      	mov	r3, r2
 8002194:	71fb      	strb	r3, [r7, #7]
	 uint8_t* encoded_data = (uint8_t*)calloc(data_length, sizeof(uint8_t));
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	2101      	movs	r1, #1
 800219a:	4618      	mov	r0, r3
 800219c:	f004 fbb8 	bl	8006910 <calloc>
 80021a0:	4603      	mov	r3, r0
 80021a2:	613b      	str	r3, [r7, #16]
	 if (encoded_data != NULL){
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d015      	beq.n	80021d6 <_ZN14CanSendManager23encode_frame_big_endianEPhh+0x4e>
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 80021aa:	2301      	movs	r3, #1
 80021ac:	75fb      	strb	r3, [r7, #23]
 80021ae:	7dfa      	ldrb	r2, [r7, #23]
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dc0f      	bgt.n	80021d6 <_ZN14CanSendManager23encode_frame_big_endianEPhh+0x4e>
			encoded_data[i-1] = data[data_length-i];
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	79f9      	ldrb	r1, [r7, #7]
 80021c0:	7dfa      	ldrb	r2, [r7, #23]
 80021c2:	1a8a      	subs	r2, r1, r2
 80021c4:	4611      	mov	r1, r2
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	440a      	add	r2, r1
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	701a      	strb	r2, [r3, #0]
		for( uint8_t i = 1 ; i <= data_length  ;i++){
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	3301      	adds	r3, #1
 80021d2:	75fb      	strb	r3, [r7, #23]
 80021d4:	e7eb      	b.n	80021ae <_ZN14CanSendManager23encode_frame_big_endianEPhh+0x26>
		}
	 }
	return encoded_data;
 80021d6:	693b      	ldr	r3, [r7, #16]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>:


void CanSendManager::process(float maxvalue, float value,SEND_MODE mode){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	70fb      	strb	r3, [r7, #3]
	uint8_t sign = getSign(value) ;
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f7ff ff57 	bl	80020a4 <_ZN14CanSendManager7getSignEf>
 80021f6:	4603      	mov	r3, r0
 80021f8:	75fb      	strb	r3, [r7, #23]
	if (sign == NEGATIVE_SIGN){ value *= -1; } //Change sign to positive after check
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d103      	bne.n	8002208 <_ZN14CanSendManager7processEffNS_9SEND_MODEE+0x28>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002206:	607b      	str	r3, [r7, #4]
	uint16_t convertedData = convertFloatToUint16t(value);
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f7ff ff5e 	bl	80020cc <_ZN14CanSendManager21convertFloatToUint16tEf>
 8002210:	4603      	mov	r3, r0
 8002212:	82bb      	strh	r3, [r7, #20]
	uint8_t * frameData = convertToFrame(sign, convertedData);
 8002214:	8aba      	ldrh	r2, [r7, #20]
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	4619      	mov	r1, r3
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f7ff ff93 	bl	8002146 <_ZN14CanSendManager14convertToFrameEht>
 8002220:	4603      	mov	r3, r0
 8002222:	613b      	str	r3, [r7, #16]
	sendMsg(mode, frameData );
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7ff ff2e 	bl	800208c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEEPh>
	free(frameData);
 8002230:	6938      	ldr	r0, [r7, #16]
 8002232:	f004 fbad 	bl	8006990 <free>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <_ZN14CanSendManager11setVelocityEff>:

void CanSendManager::setVelocity(float maxVel,float vel){
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
	process(maxVel, vel, VELOCITY);
 800224a:	2301      	movs	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ffc5 	bl	80021e0 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_ZN14CanSendManager7setTurnEff>:

void CanSendManager::setTurn(float maxAngle, float angle){
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
	process(maxAngle, angle, TURN);
 800226a:	2300      	movs	r3, #0
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff ffb5 	bl	80021e0 <_ZN14CanSendManager7processEffNS_9SEND_MODEE>
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>:
void CanSendManager::setStatus(ModeManager::RC_MODE RCmode, ModeManager::DRIVE_MODE drive_mode){
 800227e:	b580      	push	{r7, lr}
 8002280:	b086      	sub	sp, #24
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	70fb      	strb	r3, [r7, #3]
 800228a:	4613      	mov	r3, r2
 800228c:	70bb      	strb	r3, [r7, #2]
	uint8_t RCstatus, driveStatus;
	if 		(RCmode == ModeManager::DISARMED)  		 RCstatus =  JOYSTICK_MODE_MSG;
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d102      	bne.n	800229a <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x1c>
 8002294:	2300      	movs	r3, #0
 8002296:	75fb      	strb	r3, [r7, #23]
 8002298:	e010      	b.n	80022bc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_ACRO) 		 RCstatus =  ACRO_MODE_MSG;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d102      	bne.n	80022a6 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x28>
 80022a0:	2301      	movs	r3, #1
 80022a2:	75fb      	strb	r3, [r7, #23]
 80022a4:	e00a      	b.n	80022bc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_SEMI) 		 RCstatus =  SEMI_MODE_MSG;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d102      	bne.n	80022b2 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x34>
 80022ac:	2302      	movs	r3, #2
 80022ae:	75fb      	strb	r3, [r7, #23]
 80022b0:	e004      	b.n	80022bc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
	else if (RCmode == ModeManager::MODE_AUTONOMOUS) RCstatus =  AUTONOMOUS_MODE_MSG;
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x3e>
 80022b8:	2303      	movs	r3, #3
 80022ba:	75fb      	strb	r3, [r7, #23]

	if 		(drive_mode == ModeManager::ENABLE)  	 driveStatus =  ENABLE_DRIVE_MSG;
 80022bc:	78bb      	ldrb	r3, [r7, #2]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x4a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	e004      	b.n	80022d2 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
	else if (drive_mode == ModeManager::DISABLE)     driveStatus =  DISABLE_DRIVE_MSG;
 80022c8:	78bb      	ldrb	r3, [r7, #2]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE+0x54>
 80022ce:	2300      	movs	r3, #0
 80022d0:	75bb      	strb	r3, [r7, #22]

	uint8_t data_to_encode[]={
			(uint8_t) NULL,
			(uint8_t) RCstatus,
			(uint8_t) NULL,
			(uint8_t) driveStatus };
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
 80022d8:	737b      	strb	r3, [r7, #13]
 80022da:	7dbb      	ldrb	r3, [r7, #22]
 80022dc:	73fb      	strb	r3, [r7, #15]
	uint8_t * msgData = encode_frame_big_endian(data_to_encode,STEERING_FRAME_LENGTH);
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	2204      	movs	r2, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ff4e 	bl	8002188 <_ZN14CanSendManager23encode_frame_big_endianEPhh>
 80022ec:	6138      	str	r0, [r7, #16]
	sendMsg(STATUS, msgData);
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	2102      	movs	r1, #2
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff feca 	bl	800208c <_ZN14CanSendManager7sendMsgENS_9SEND_MODEEPh>

}
 80022f8:	bf00      	nop
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <_ZN14CanSendManagerC1Ev>:

CanSendManager::CanSendManager() {
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <_ZN14CanSendManagerC1Ev+0x1c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	08006c2c 	.word	0x08006c2c

08002320 <_ZN14CanSendManagerD1Ev>:

CanSendManager::~CanSendManager() {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	4a04      	ldr	r2, [pc, #16]	; (800233c <_ZN14CanSendManagerD1Ev+0x1c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	08006c2c 	.word	0x08006c2c

08002340 <_ZN14CanSendManagerD0Ev>:
CanSendManager::~CanSendManager() {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
}
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ffe9 	bl	8002320 <_ZN14CanSendManagerD1Ev>
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f003 f8fb 	bl	800554a <_ZdlPv>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800235e:	b5b0      	push	{r4, r5, r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7fe f84d 	bl	8000408 <__aeabi_i2d>
 800236e:	4604      	mov	r4, r0
 8002370:	460d      	mov	r5, r1
 8002372:	6838      	ldr	r0, [r7, #0]
 8002374:	f7fe f848 	bl	8000408 <__aeabi_i2d>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f003 faae 	bl	80058e0 <pow>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
    }
 8002388:	4618      	mov	r0, r3
 800238a:	4621      	mov	r1, r4
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002394 <_Z41__static_initialization_and_destruction_0ii>:
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d107      	bne.n	80023be <_Z41__static_initialization_and_destruction_0ii+0x2a>
CanSendManager canSendManager;
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80023b0:	f7ff ffa6 	bl	8002300 <_ZN14CanSendManagerC1Ev>
 80023b4:	4a05      	ldr	r2, [pc, #20]	; (80023cc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80023b6:	4906      	ldr	r1, [pc, #24]	; (80023d0 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80023ba:	f003 f8c8 	bl	800554e <__aeabi_atexit>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200000a4 	.word	0x200000a4
 80023cc:	20000000 	.word	0x20000000
 80023d0:	08002321 	.word	0x08002321

080023d4 <_GLOBAL__sub_I_canSendManager>:
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023dc:	2001      	movs	r0, #1
 80023de:	f7ff ffd9 	bl	8002394 <_Z41__static_initialization_and_destruction_0ii>
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_ZN6Futaba15sbusDataReceiveEh>:

#define SBUS_DIGITAL_CHANNEL_MIN 173
#define SBUS_DIGITAL_CHANNEL_MAX 1812

Futaba futaba;
void Futaba::sbusDataReceive(uint8_t c){
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]

	const uint32_t nowUs = tools.GetMicros();
 80023f0:	4826      	ldr	r0, [pc, #152]	; (800248c <_ZN6Futaba15sbusDataReceiveEh+0xa8>)
 80023f2:	f001 f833 	bl	800345c <_ZN5Tools9GetMicrosEv>
 80023f6:	4603      	mov	r3, r0
 80023f8:	60fb      	str	r3, [r7, #12]
	const int32_t sbusFrameTime = abs(nowUs - startAtUs);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fd3b 	bl	8002e7e <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	4618      	mov	r0, r3
 800240e:	4621      	mov	r1, r4
 8002410:	f7fe fb10 	bl	8000a34 <__aeabi_d2iz>
 8002414:	4603      	mov	r3, r0
 8002416:	60bb      	str	r3, [r7, #8]

	if (sbusFrameTime > (long) (SBUS_TIME_NEEDED_PER_FRAME + 500)) {
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800241e:	4293      	cmp	r3, r2
 8002420:	dd03      	ble.n	800242a <_ZN6Futaba15sbusDataReceiveEh+0x46>
		position = 0;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	}

	if (position == 0) {
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002430:	2b00      	cmp	r3, #0
 8002432:	d105      	bne.n	8002440 <_ZN6Futaba15sbusDataReceiveEh+0x5c>
		if (c != SBUS_FRAME_BEGIN_BYTE) {
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	d123      	bne.n	8002482 <_ZN6Futaba15sbusDataReceiveEh+0x9e>
			return;
		}
		startAtUs = nowUs;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (position < SBUS_FRAME_SIZE) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002446:	2b18      	cmp	r3, #24
 8002448:	d81c      	bhi.n	8002484 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		frame.bytes[position++] = (uint8_t) c;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	b2d1      	uxtb	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 800245a:	461a      	mov	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4413      	add	r3, r2
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	731a      	strb	r2, [r3, #12]
		if (position < SBUS_FRAME_SIZE) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800246a:	2b18      	cmp	r3, #24
 800246c:	d804      	bhi.n	8002478 <_ZN6Futaba15sbusDataReceiveEh+0x94>
			done = 0;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002476:	e005      	b.n	8002484 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
		} else {
			done = 1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002480:	e000      	b.n	8002484 <_ZN6Futaba15sbusDataReceiveEh+0xa0>
			return;
 8002482:	bf00      	nop
		}
	}
}
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bd90      	pop	{r4, r7, pc}
 800248a:	bf00      	nop
 800248c:	2000017c 	.word	0x2000017c

08002490 <_ZN6Futaba15sbusFrameStatusEv>:
uint8_t Futaba::sbusFrameStatus(void){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

	    if (!done) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <_ZN6Futaba15sbusFrameStatusEv+0x16>
	        return RX_FRAME_PENDING;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e023      	b.n	80024ee <_ZN6Futaba15sbusFrameStatusEv+0x5e>
	    }
	    done = 0;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	    if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <_ZN6Futaba15sbusFrameStatusEv+0x3a>
	        stateFlags |= SBUS_STATE_SIGNALLOSS;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }
	    if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <_ZN6Futaba15sbusFrameStatusEv+0x56>
	        stateFlags |= SBUS_STATE_FAILSAFE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	859a      	strh	r2, [r3, #44]	; 0x2c
	    }

	    return sbusChannelsDecode();
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f805 	bl	80024f6 <_ZN6Futaba18sbusChannelsDecodeEv>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <_ZN6Futaba18sbusChannelsDecodeEv>:
uint8_t Futaba::sbusChannelsDecode(void) {
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
	sbusChannelData[0] = frame.frame.channels.chan0;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f3c3 230a 	ubfx	r3, r3, #8, #11
 8002506:	b29b      	uxth	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	sbusChannelData[1] = frame.frame.channels.chan1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	89db      	ldrh	r3, [r3, #14]
 8002514:	f3c3 03ca 	ubfx	r3, r3, #3, #11
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	sbusChannelData[2] = frame.frame.channels.chan2;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7bda      	ldrb	r2, [r3, #15]
 8002526:	0992      	lsrs	r2, r2, #6
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	8a1b      	ldrh	r3, [r3, #16]
 800252c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4313      	orrs	r3, r2
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sbusChannelData[3] = frame.frame.channels.chan3;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f3c3 234a 	ubfx	r3, r3, #9, #11
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	sbusChannelData[4] = frame.frame.channels.chan4;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8a5b      	ldrh	r3, [r3, #18]
 8002554:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8002558:	b29b      	uxth	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	sbusChannelData[5] = frame.frame.channels.chan5;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7cda      	ldrb	r2, [r3, #19]
 8002566:	09d2      	lsrs	r2, r2, #7
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	8a9b      	ldrh	r3, [r3, #20]
 800256c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4313      	orrs	r3, r2
 8002574:	b29b      	uxth	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	sbusChannelData[6] = frame.frame.channels.chan6;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f3c3 238a 	ubfx	r3, r3, #10, #11
 8002586:	b29b      	uxth	r3, r3
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	sbusChannelData[7] = frame.frame.channels.chan7;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8adb      	ldrh	r3, [r3, #22]
 8002594:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8002598:	b29b      	uxth	r3, r3
 800259a:	461a      	mov	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	sbusChannelData[8] = frame.frame.channels.chan8;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8b1b      	ldrh	r3, [r3, #24]
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	sbusChannelData[9] = frame.frame.channels.chan9;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f3c3 23ca 	ubfx	r3, r3, #11, #11
 80025bc:	b29b      	uxth	r3, r3
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	sbusChannelData[10] = frame.frame.channels.chan10;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	8b5a      	ldrh	r2, [r3, #26]
 80025ca:	0992      	lsrs	r2, r2, #6
 80025cc:	b292      	uxth	r2, r2
 80025ce:	7f1b      	ldrb	r3, [r3, #28]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	029b      	lsls	r3, r3, #10
 80025d6:	4313      	orrs	r3, r2
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	sbusChannelData[11] = frame.frame.channels.chan11;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8b9b      	ldrh	r3, [r3, #28]
 80025e6:	f3c3 034a 	ubfx	r3, r3, #1, #11
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	sbusChannelData[12] = frame.frame.channels.chan12;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69db      	ldr	r3, [r3, #28]
 80025f8:	f3c3 330a 	ubfx	r3, r3, #12, #11
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	sbusChannelData[13] = frame.frame.channels.chan13;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	8bda      	ldrh	r2, [r3, #30]
 800260a:	09d2      	lsrs	r2, r2, #7
 800260c:	b292      	uxth	r2, r2
 800260e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	4313      	orrs	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	sbusChannelData[14] = frame.frame.channels.chan14;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8c1b      	ldrh	r3, [r3, #32]
 8002628:	f3c3 038a 	ubfx	r3, r3, #2, #11
 800262c:	b29b      	uxth	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	sbusChannelData[15] = frame.frame.channels.chan15;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f3c3 334a 	ubfx	r3, r3, #13, #11
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_17) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <_ZN6Futaba18sbusChannelsDecodeEv+0x16c>
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MAX;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f240 7214 	movw	r2, #1812	; 0x714
 800265c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8002660:	e003      	b.n	800266a <_ZN6Futaba18sbusChannelsDecodeEv+0x174>
	} else {
		sbusChannelData[16] = SBUS_DIGITAL_CHANNEL_MIN;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	22ad      	movs	r2, #173	; 0xad
 8002666:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	}

	if (frame.frame.channels.flags & SBUS_FLAG_CHANNEL_18) {
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <_ZN6Futaba18sbusChannelsDecodeEv+0x18e>
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MAX;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f240 7214 	movw	r2, #1812	; 0x714
 800267e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8002682:	e003      	b.n	800268c <_ZN6Futaba18sbusChannelsDecodeEv+0x196>
	} else {
		sbusChannelData[17] = SBUS_DIGITAL_CHANNEL_MIN;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	22ad      	movs	r2, #173	; 0xad
 8002688:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	}

	if (frame.frame.channels.flags & SBUS_FLAG_FAILSAFE_ACTIVE) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <_ZN6Futaba18sbusChannelsDecodeEv+0x1a8>
		// internal failsafe enabled and rx failsafe flag set
		// RX *should* still be sending valid channel data (repeated), so use it.
		return RX_FRAME_COMPLETE | RX_FRAME_FAILSAFE;
 800269a:	2303      	movs	r3, #3
 800269c:	e009      	b.n	80026b2 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	if (frame.frame.channels.flags & SBUS_FLAG_SIGNAL_LOSS) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <_ZN6Futaba18sbusChannelsDecodeEv+0x1ba>
		// The received data is a repeat of the last valid data so can be considered complete.
		return RX_FRAME_COMPLETE | RX_FRAME_DROPPED;
 80026ac:	2309      	movs	r3, #9
 80026ae:	e000      	b.n	80026b2 <_ZN6Futaba18sbusChannelsDecodeEv+0x1bc>
	}

	return RX_FRAME_COMPLETE;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_ZN6Futaba16sbusChannelsInitEv>:
    // http://www.wolframalpha.com/input/?i=linear+fit+%7B173%2C+988%7D%2C+%7B1812%2C+2012%7D%2C+%7B993%2C+1500%7D
    return (5 * sbusChannelData[chan] / 8) + 880;
}

void Futaba::sbusChannelsInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b11      	cmp	r3, #17
 80026cc:	dc1d      	bgt.n	800270a <_ZN6Futaba16sbusChannelsInitEv+0x4e>
    	sbusChannelData[b] = (16 * midrc) / 10 - 1408;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4a23      	ldr	r2, [pc, #140]	; (8002764 <_ZN6Futaba16sbusChannelsInitEv+0xa8>)
 80026d6:	fb82 1203 	smull	r1, r2, r2, r3
 80026da:	1092      	asrs	r2, r2, #2
 80026dc:	17db      	asrs	r3, r3, #31
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f5a3 63b0 	sub.w	r3, r3, #1408	; 0x580
 80026e6:	b299      	uxth	r1, r3
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3324      	adds	r3, #36	; 0x24
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	460a      	mov	r2, r1
 80026f4:	809a      	strh	r2, [r3, #4]
    	Stick_Command[b] = 0;
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	3396      	adds	r3, #150	; 0x96
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < SBUS_MAX_CHANNEL; b++) {
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3301      	adds	r3, #1
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	e7de      	b.n	80026c8 <_ZN6Futaba16sbusChannelsInitEv+0xc>
    }
	StickDeflection[ROLL] = 0.f;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = 0.f;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = 0.f;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = 0.f;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	67da      	str	r2, [r3, #124]	; 0x7c

	SwitchA = SWITCH_UP;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	SwitchB = SWITCH_UP;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	SwitchC = SWITCH_UP;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92

	SwitchD = SWITCH_UP;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	SwitchE = SWITCH_UP;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	SwitchF = SWITCH_UP;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	66666667 	.word	0x66666667

08002768 <_ZN6Futaba4InitEv>:
void Futaba::Init(void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	MX_USART2_UART_Init();
 8002770:	f001 f9fc 	bl	8003b6c <MX_USART2_UART_Init>
	tools.Init();
 8002774:	4808      	ldr	r0, [pc, #32]	; (8002798 <_ZN6Futaba4InitEv+0x30>)
 8002776:	f000 fe7d 	bl	8003474 <_ZN5Tools4InitEv>
	sbusChannelsInit();
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff9e 	bl	80026bc <_ZN6Futaba16sbusChannelsInitEv>
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2201      	movs	r2, #1
 8002786:	4619      	mov	r1, r3
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <_ZN6Futaba4InitEv+0x34>)
 800278a:	f002 fd29 	bl	80051e0 <HAL_UART_Receive_IT>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000017c 	.word	0x2000017c
 800279c:	2000027c 	.word	0x2000027c

080027a0 <_ZN6Futaba11Get_RCStateEv>:
uint16_t Futaba::Get_RCState(void) {
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	return RCState;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027ae:	b29b      	uxth	r3, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
	...

080027bc <_ZN6Futaba7ProcessEv>:
void Futaba::Process(void) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	static uint8_t even_once = 1;
//	osEvent evt = osSignalWait(RxSignal, 1000);
//	if (evt.status == osEventSignal) { //ODPALANE CO OKRESLONY CZAS
//		even_once = 0;
	sbusDataReceive(RxBuffer[0]);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	791b      	ldrb	r3, [r3, #4]
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe0a 	bl	80023e4 <_ZN6Futaba15sbusDataReceiveEh>
	frameStatus = sbusFrameStatus();
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe5d 	bl	8002490 <_ZN6Futaba15sbusFrameStatusEv>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (frameStatus & RX_FRAME_COMPLETE) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d025      	beq.n	800283a <_ZN6Futaba7ProcessEv+0x7e>
		if (frameStatus & RX_FRAME_FAILSAFE) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <_ZN6Futaba7ProcessEv+0x50>
			RCState = 1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			sbusChannelsInit();
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff59 	bl	80026bc <_ZN6Futaba16sbusChannelsInitEv>
 800280a:	e016      	b.n	800283a <_ZN6Futaba7ProcessEv+0x7e>
		} else if (frameStatus & RX_FRAME_DROPPED) {
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <_ZN6Futaba7ProcessEv+0x6a>
			frames_dropped++;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	645a      	str	r2, [r3, #68]	; 0x44
 8002824:	e009      	b.n	800283a <_ZN6Futaba7ProcessEv+0x7e>
//				RCState = 2;
//				sbusChannelsInit();
		} else {
			Conversions();
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f846 	bl	80028b8 <_ZN6Futaba11ConversionsEv>
			RCCommands();
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f93b 	bl	8002aa8 <_ZN6Futaba10RCCommandsEv>
			RCState = 0;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		}
	}
	HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	2201      	movs	r2, #1
 8002840:	4619      	mov	r1, r3
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <_ZN6Futaba7ProcessEv+0xbc>)
 8002844:	f002 fccc 	bl	80051e0 <HAL_UART_Receive_IT>
//	}
//	else if(even_once){
	if(even_once){
 8002848:	4b0c      	ldr	r3, [pc, #48]	; (800287c <_ZN6Futaba7ProcessEv+0xc0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00f      	beq.n	8002870 <_ZN6Futaba7ProcessEv+0xb4>
		// FAILSAFE!
		even_once = 0;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <_ZN6Futaba7ProcessEv+0xc0>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
		RCState = 3;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		sbusChannelsInit();
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff2c 	bl	80026bc <_ZN6Futaba16sbusChannelsInitEv>
		HAL_UART_DeInit(&huart2);
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <_ZN6Futaba7ProcessEv+0xbc>)
 8002866:	f002 fca3 	bl	80051b0 <HAL_UART_DeInit>
		Init();
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff7c 	bl	8002768 <_ZN6Futaba4InitEv>

	}
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	2000027c 	.word	0x2000027c
 800287c:	20000004 	.word	0x20000004

08002880 <_ZN6Futaba16ProcessSmoothingEv>:
void Futaba::ConfigureSmoothing(float cutoff, float _dt) {
	for (uint8_t i = 0; i < 4; i++){
		lpf[i] = new BiquadFilter(FILTER_LPF, _dt, cutoff);
	}
}
void Futaba::ProcessSmoothing(void) {
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b03      	cmp	r3, #3
 8002890:	dc0d      	bgt.n	80028ae <_ZN6Futaba16ProcessSmoothingEv+0x2e>
//		SmoothDeflection[i] = lpf[i]->apply(StickDeflection[i]);//WYRZUCA HARDFAULT
		SmoothDeflection[i] = StickDeflection[i];
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	321c      	adds	r2, #28
 8002898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	3220      	adds	r2, #32
 80028a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < 4; i++){
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3301      	adds	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e7ee      	b.n	800288c <_ZN6Futaba16ProcessSmoothingEv+0xc>
	}
}
 80028ae:	bf00      	nop
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <_ZN6Futaba11ConversionsEv>:
void Futaba::Conversions(void) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	StickDeflection[ROLL] = (sbusChannelData[0] - RX_OFFSET_AER) / 800.f;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80028c6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe f9b4 	bl	8000c38 <__aeabi_i2f>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4973      	ldr	r1, [pc, #460]	; (8002aa0 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fe fab7 	bl	8000e48 <__aeabi_fdiv>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	675a      	str	r2, [r3, #116]	; 0x74
	StickDeflection[PITCH] = (sbusChannelData[1] - RX_OFFSET_AER) / 800.f;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80028e8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe f9a3 	bl	8000c38 <__aeabi_i2f>
 80028f2:	4603      	mov	r3, r0
 80028f4:	496a      	ldr	r1, [pc, #424]	; (8002aa0 <_ZN6Futaba11ConversionsEv+0x1e8>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fe faa6 	bl	8000e48 <__aeabi_fdiv>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	679a      	str	r2, [r3, #120]	; 0x78
	StickDeflection[THROTTLE] = (sbusChannelData[2] - RX_OFFSET_T) / 1600.f;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290a:	3bc0      	subs	r3, #192	; 0xc0
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f993 	bl	8000c38 <__aeabi_i2f>
 8002912:	4603      	mov	r3, r0
 8002914:	4963      	ldr	r1, [pc, #396]	; (8002aa4 <_ZN6Futaba11ConversionsEv+0x1ec>)
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fa96 	bl	8000e48 <__aeabi_fdiv>
 800291c:	4603      	mov	r3, r0
 800291e:	461a      	mov	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	671a      	str	r2, [r3, #112]	; 0x70
	StickDeflection[YAW] = (sbusChannelData[3] - RX_OFFSET_AER) / 800.f;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800292a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe f982 	bl	8000c38 <__aeabi_i2f>
 8002934:	4603      	mov	r3, r0
 8002936:	495a      	ldr	r1, [pc, #360]	; (8002aa0 <_ZN6Futaba11ConversionsEv+0x1e8>)
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fa85 	bl	8000e48 <__aeabi_fdiv>
 800293e:	4603      	mov	r3, r0
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c

	if (sbusChannelData[AUX4] < 500) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800294c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002950:	da04      	bge.n	800295c <_ZN6Futaba11ConversionsEv+0xa4>
		SwitchA = SWITCH_UP;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800295a:	e010      	b.n	800297e <_ZN6Futaba11ConversionsEv+0xc6>
	} else if (sbusChannelData[AUX4] > 1500) {
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002962:	461a      	mov	r2, r3
 8002964:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002968:	429a      	cmp	r2, r3
 800296a:	dd04      	ble.n	8002976 <_ZN6Futaba11ConversionsEv+0xbe>
		SwitchA = SWITCH_DOWN;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002974:	e003      	b.n	800297e <_ZN6Futaba11ConversionsEv+0xc6>
	} else {
		SwitchA = SWITCH_MIDDLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	}
	if (sbusChannelData[AUX2] < 500) {
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002984:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002988:	da04      	bge.n	8002994 <_ZN6Futaba11ConversionsEv+0xdc>
		SwitchB = SWITCH_UP;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8002992:	e010      	b.n	80029b6 <_ZN6Futaba11ConversionsEv+0xfe>
	} else if (sbusChannelData[AUX2] > 1500) {
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800299a:	461a      	mov	r2, r3
 800299c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80029a0:	429a      	cmp	r2, r3
 80029a2:	dd04      	ble.n	80029ae <_ZN6Futaba11ConversionsEv+0xf6>
		SwitchB = SWITCH_MIDDLE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 80029ac:	e003      	b.n	80029b6 <_ZN6Futaba11ConversionsEv+0xfe>
	} else {
		SwitchB = SWITCH_DOWN;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2202      	movs	r2, #2
 80029b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	}

	if (sbusChannelData[AUX3] < 500) {
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029c0:	da04      	bge.n	80029cc <_ZN6Futaba11ConversionsEv+0x114>
		SwitchC = SWITCH_UP;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80029ca:	e010      	b.n	80029ee <_ZN6Futaba11ConversionsEv+0x136>
	} else if (sbusChannelData[AUX3] > 1500) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029d2:	461a      	mov	r2, r3
 80029d4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80029d8:	429a      	cmp	r2, r3
 80029da:	dd04      	ble.n	80029e6 <_ZN6Futaba11ConversionsEv+0x12e>
		SwitchC = SWITCH_DOWN;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80029e4:	e003      	b.n	80029ee <_ZN6Futaba11ConversionsEv+0x136>
	} else {
		SwitchC = SWITCH_MIDDLE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}

	if (sbusChannelData[AUX5] < 500) {
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80029f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f8:	da04      	bge.n	8002a04 <_ZN6Futaba11ConversionsEv+0x14c>
		SwitchD = SWITCH_UP;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8002a02:	e010      	b.n	8002a26 <_ZN6Futaba11ConversionsEv+0x16e>
	} else if (sbusChannelData[AUX5] > 1500) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dd04      	ble.n	8002a1e <_ZN6Futaba11ConversionsEv+0x166>
		SwitchD = SWITCH_DOWN;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8002a1c:	e003      	b.n	8002a26 <_ZN6Futaba11ConversionsEv+0x16e>
	} else {
		SwitchD = SWITCH_MIDDLE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	}

	if (sbusChannelData[AUX1] < 500) {
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a30:	da04      	bge.n	8002a3c <_ZN6Futaba11ConversionsEv+0x184>
		SwitchE = SWITCH_UP;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8002a3a:	e010      	b.n	8002a5e <_ZN6Futaba11ConversionsEv+0x1a6>
	} else if (sbusChannelData[AUX1] > 1500) {
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002a42:	461a      	mov	r2, r3
 8002a44:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dd04      	ble.n	8002a56 <_ZN6Futaba11ConversionsEv+0x19e>
		SwitchE = SWITCH_DOWN;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8002a54:	e003      	b.n	8002a5e <_ZN6Futaba11ConversionsEv+0x1a6>
	} else {
		SwitchE = SWITCH_MIDDLE;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	}

	if (sbusChannelData[AUX6] < 500) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a68:	da04      	bge.n	8002a74 <_ZN6Futaba11ConversionsEv+0x1bc>
		SwitchF = SWITCH_UP;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	} else if (sbusChannelData[AUX6] > 1500) {
		SwitchF = SWITCH_MIDDLE;
	} else {
		SwitchF = SWITCH_DOWN;
	}
}
 8002a72:	e010      	b.n	8002a96 <_ZN6Futaba11ConversionsEv+0x1de>
	} else if (sbusChannelData[AUX6] > 1500) {
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dd04      	ble.n	8002a8e <_ZN6Futaba11ConversionsEv+0x1d6>
		SwitchF = SWITCH_MIDDLE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8002a8c:	e003      	b.n	8002a96 <_ZN6Futaba11ConversionsEv+0x1de>
		SwitchF = SWITCH_DOWN;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2202      	movs	r2, #2
 8002a92:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	44480000 	.word	0x44480000
 8002aa4:	44c80000 	.word	0x44c80000

08002aa8 <_ZN6Futaba10RCCommandsEv>:
void Futaba::RCCommands(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	if (RCState == 0) {
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 815f 	bne.w	8002d7a <_ZN6Futaba10RCCommandsEv+0x2d2>
		/* STICK COMMAND 0 (   .)    (   .) */
		static uint16_t counter0 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac0:	4983      	ldr	r1, [pc, #524]	; (8002cd0 <_ZN6Futaba10RCCommandsEv+0x228>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe faaa 	bl	800101c <__aeabi_fcmplt>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d036      	beq.n	8002b3c <_ZN6Futaba10RCCommandsEv+0x94>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad2:	4980      	ldr	r1, [pc, #512]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe fabf 	bl	8001058 <__aeabi_fcmpgt>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02d      	beq.n	8002b3c <_ZN6Futaba10RCCommandsEv+0x94>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae4:	497c      	ldr	r1, [pc, #496]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fa98 	bl	800101c <__aeabi_fcmplt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d024      	beq.n	8002b3c <_ZN6Futaba10RCCommandsEv+0x94>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	4977      	ldr	r1, [pc, #476]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7fe faad 	bl	8001058 <__aeabi_fcmpgt>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <_ZN6Futaba10RCCommandsEv+0x94>
			if (++counter0 == 111) {
 8002b04:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <_ZN6Futaba10RCCommandsEv+0x234>)
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <_ZN6Futaba10RCCommandsEv+0x234>)
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <_ZN6Futaba10RCCommandsEv+0x234>)
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	2b6f      	cmp	r3, #111	; 0x6f
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00f      	beq.n	8002b42 <_ZN6Futaba10RCCommandsEv+0x9a>
				Stick_Command[0] = Stick_Command[0] ? 0 : 1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if (++counter0 == 111) {
 8002b3a:	e002      	b.n	8002b42 <_ZN6Futaba10RCCommandsEv+0x9a>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter0 = 0;
 8002b3c:	4b67      	ldr	r3, [pc, #412]	; (8002cdc <_ZN6Futaba10RCCommandsEv+0x234>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 1 (.   )    (.   ) */
		static uint16_t counter1 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] < -0.95f) {
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <_ZN6Futaba10RCCommandsEv+0x228>)
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fa67 	bl	800101c <__aeabi_fcmplt>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d036      	beq.n	8002bc2 <_ZN6Futaba10RCCommandsEv+0x11a>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b58:	495f      	ldr	r1, [pc, #380]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fa5e 	bl	800101c <__aeabi_fcmplt>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d02d      	beq.n	8002bc2 <_ZN6Futaba10RCCommandsEv+0x11a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6a:	495b      	ldr	r1, [pc, #364]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fe fa55 	bl	800101c <__aeabi_fcmplt>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d024      	beq.n	8002bc2 <_ZN6Futaba10RCCommandsEv+0x11a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b7c:	4956      	ldr	r1, [pc, #344]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fa4c 	bl	800101c <__aeabi_fcmplt>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01b      	beq.n	8002bc2 <_ZN6Futaba10RCCommandsEv+0x11a>
			if (++counter1 == 111) {
 8002b8a:	4b55      	ldr	r3, [pc, #340]	; (8002ce0 <_ZN6Futaba10RCCommandsEv+0x238>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	4b53      	ldr	r3, [pc, #332]	; (8002ce0 <_ZN6Futaba10RCCommandsEv+0x238>)
 8002b94:	801a      	strh	r2, [r3, #0]
 8002b96:	4b52      	ldr	r3, [pc, #328]	; (8002ce0 <_ZN6Futaba10RCCommandsEv+0x238>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2b6f      	cmp	r3, #111	; 0x6f
 8002b9c:	bf0c      	ite	eq
 8002b9e:	2301      	moveq	r3, #1
 8002ba0:	2300      	movne	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00f      	beq.n	8002bc8 <_ZN6Futaba10RCCommandsEv+0x120>
				Stick_Command[1] = Stick_Command[1] ? 0 : 1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			if (++counter1 == 111) {
 8002bc0:	e002      	b.n	8002bc8 <_ZN6Futaba10RCCommandsEv+0x120>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter1 = 0;
 8002bc2:	4b47      	ldr	r3, [pc, #284]	; (8002ce0 <_ZN6Futaba10RCCommandsEv+0x238>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 2 ('   )    ('   ) */
		static uint16_t counter2 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] < -0.95f) {
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	4941      	ldr	r1, [pc, #260]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fa42 	bl	8001058 <__aeabi_fcmpgt>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d036      	beq.n	8002c48 <_ZN6Futaba10RCCommandsEv+0x1a0>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bde:	493e      	ldr	r1, [pc, #248]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fa1b 	bl	800101c <__aeabi_fcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d02d      	beq.n	8002c48 <_ZN6Futaba10RCCommandsEv+0x1a0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf0:	4938      	ldr	r1, [pc, #224]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fa30 	bl	8001058 <__aeabi_fcmpgt>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <_ZN6Futaba10RCCommandsEv+0x1a0>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c02:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <_ZN6Futaba10RCCommandsEv+0x230>)
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fa09 	bl	800101c <__aeabi_fcmplt>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d01b      	beq.n	8002c48 <_ZN6Futaba10RCCommandsEv+0x1a0>
			if (++counter2 == 111) {
 8002c10:	4b34      	ldr	r3, [pc, #208]	; (8002ce4 <_ZN6Futaba10RCCommandsEv+0x23c>)
 8002c12:	881b      	ldrh	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <_ZN6Futaba10RCCommandsEv+0x23c>)
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <_ZN6Futaba10RCCommandsEv+0x23c>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	2b6f      	cmp	r3, #111	; 0x6f
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <_ZN6Futaba10RCCommandsEv+0x1a6>
				Stick_Command[2] = Stick_Command[2] ?  0 : 1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			if (++counter2 == 111) {
 8002c46:	e002      	b.n	8002c4e <_ZN6Futaba10RCCommandsEv+0x1a6>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter2 = 0;
 8002c48:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <_ZN6Futaba10RCCommandsEv+0x23c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 3 (   ')    (   ') */
		static uint16_t counter3 = 0;
		if (StickDeflection[THROTTLE] > 0.95f && StickDeflection[YAW] > 0.95f && StickDeflection[PITCH] > 0.95f && StickDeflection[ROLL] > 0.95f) {
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4920      	ldr	r1, [pc, #128]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f9ff 	bl	8001058 <__aeabi_fcmpgt>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d045      	beq.n	8002cec <_ZN6Futaba10RCCommandsEv+0x244>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c64:	491b      	ldr	r1, [pc, #108]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe f9f6 	bl	8001058 <__aeabi_fcmpgt>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03c      	beq.n	8002cec <_ZN6Futaba10RCCommandsEv+0x244>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c76:	4917      	ldr	r1, [pc, #92]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe f9ed 	bl	8001058 <__aeabi_fcmpgt>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d033      	beq.n	8002cec <_ZN6Futaba10RCCommandsEv+0x244>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c88:	4912      	ldr	r1, [pc, #72]	; (8002cd4 <_ZN6Futaba10RCCommandsEv+0x22c>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f9e4 	bl	8001058 <__aeabi_fcmpgt>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d02a      	beq.n	8002cec <_ZN6Futaba10RCCommandsEv+0x244>
			if (++counter3 == 111) {
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <_ZN6Futaba10RCCommandsEv+0x240>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <_ZN6Futaba10RCCommandsEv+0x240>)
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <_ZN6Futaba10RCCommandsEv+0x240>)
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	2b6f      	cmp	r3, #111	; 0x6f
 8002ca8:	bf0c      	ite	eq
 8002caa:	2301      	moveq	r3, #1
 8002cac:	2300      	movne	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01e      	beq.n	8002cf2 <_ZN6Futaba10RCCommandsEv+0x24a>
				Stick_Command[3] = Stick_Command[3] ?  0 : 1;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
			if (++counter3 == 111) {
 8002ccc:	e011      	b.n	8002cf2 <_ZN6Futaba10RCCommandsEv+0x24a>
 8002cce:	bf00      	nop
 8002cd0:	3d4ccccd 	.word	0x3d4ccccd
 8002cd4:	3f733333 	.word	0x3f733333
 8002cd8:	bf733333 	.word	0xbf733333
 8002cdc:	20000150 	.word	0x20000150
 8002ce0:	20000152 	.word	0x20000152
 8002ce4:	20000154 	.word	0x20000154
 8002ce8:	20000156 	.word	0x20000156
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter3 = 0;
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <_ZN6Futaba10RCCommandsEv+0x2dc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	801a      	strh	r2, [r3, #0]

		/* STICK COMMAND 4 (.   )    (   .) */
		static uint16_t counter4 = 0;
		if (StickDeflection[THROTTLE] < 0.05f && StickDeflection[YAW] < -0.95f && StickDeflection[PITCH] < -0.95f && StickDeflection[ROLL] > 0.95f) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	4924      	ldr	r1, [pc, #144]	; (8002d88 <_ZN6Futaba10RCCommandsEv+0x2e0>)
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe f98f 	bl	800101c <__aeabi_fcmplt>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d036      	beq.n	8002d72 <_ZN6Futaba10RCCommandsEv+0x2ca>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d08:	4920      	ldr	r1, [pc, #128]	; (8002d8c <_ZN6Futaba10RCCommandsEv+0x2e4>)
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe f986 	bl	800101c <__aeabi_fcmplt>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02d      	beq.n	8002d72 <_ZN6Futaba10RCCommandsEv+0x2ca>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d1a:	491c      	ldr	r1, [pc, #112]	; (8002d8c <_ZN6Futaba10RCCommandsEv+0x2e4>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe f97d 	bl	800101c <__aeabi_fcmplt>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d024      	beq.n	8002d72 <_ZN6Futaba10RCCommandsEv+0x2ca>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	4918      	ldr	r1, [pc, #96]	; (8002d90 <_ZN6Futaba10RCCommandsEv+0x2e8>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe f992 	bl	8001058 <__aeabi_fcmpgt>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01b      	beq.n	8002d72 <_ZN6Futaba10RCCommandsEv+0x2ca>
			if (++counter4 == 111) {
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	2b6f      	cmp	r3, #111	; 0x6f
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2301      	moveq	r3, #1
 8002d50:	2300      	movne	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <_ZN6Futaba10RCCommandsEv+0x2d2>
				Stick_Command[4] = Stick_Command[4] ?  0 : 1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
			if (++counter4 == 111) {
 8002d70:	e003      	b.n	8002d7a <_ZN6Futaba10RCCommandsEv+0x2d2>
//				buzzer.EnableMode(Buzzer::ONE_BEEP);
			}
		} else
			counter4 = 0;
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <_ZN6Futaba10RCCommandsEv+0x2ec>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]
	}
}
 8002d78:	e7ff      	b.n	8002d7a <_ZN6Futaba10RCCommandsEv+0x2d2>
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000156 	.word	0x20000156
 8002d88:	3d4ccccd 	.word	0x3d4ccccd
 8002d8c:	bf733333 	.word	0xbf733333
 8002d90:	3f733333 	.word	0x3f733333
 8002d94:	20000158 	.word	0x20000158

08002d98 <_ZN6Futaba10RxCallbackEv>:
void Futaba::RxCallback(void) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
//	osSignalSet(FutabaTaskHandle, RxSignal);
	Process();
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff fd0b 	bl	80027bc <_ZN6Futaba7ProcessEv>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <_ZN6FutabaC1Ev>:

Futaba::Futaba() {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <_ZN6FutabaC1Ev+0x8c>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	859a      	strh	r2, [r3, #44]	; 0x2c
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002df0:	861a      	strh	r2, [r3, #48]	; 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	645a      	str	r2, [r3, #68]	; 0x44
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	649a      	str	r2, [r3, #72]	; 0x48
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	// TODO Auto-generated constructor stub

}
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	08006c58 	.word	0x08006c58

08002e40 <_ZN6FutabaD1Ev>:

Futaba::~Futaba() {
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <_ZN6FutabaD1Ev+0x1c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	08006c58 	.word	0x08006c58

08002e60 <_ZN6FutabaD0Ev>:
Futaba::~Futaba() {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
}
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffe9 	bl	8002e40 <_ZN6FutabaD1Ev>
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f002 fb6b 	bl	800554a <_ZdlPv>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_ZSt3absImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    abs(_Tp __x)
 8002e7e:	b590      	push	{r4, r7, lr}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    { return __builtin_fabs(__x); }
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd faae 	bl	80003e8 <__aeabi_ui2d>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	4618      	mov	r0, r3
 8002e92:	4621      	mov	r1, r4
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd90      	pop	{r4, r7, pc}
	...

08002e9c <_Z41__static_initialization_and_destruction_0ii>:
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10c      	bne.n	8002ec6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d107      	bne.n	8002ec6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Futaba futaba;
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002eb8:	f7ff ff7a 	bl	8002db0 <_ZN6FutabaC1Ev>
 8002ebc:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002ebe:	4906      	ldr	r1, [pc, #24]	; (8002ed8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002ec0:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002ec2:	f002 fb44 	bl	800554e <__aeabi_atexit>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200000a8 	.word	0x200000a8
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	08002e41 	.word	0x08002e41

08002edc <_GLOBAL__sub_I_futaba>:
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff ffd9 	bl	8002e9c <_Z41__static_initialization_and_destruction_0ii>
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_ZN11ModeManager8proccessEv>:
	isUnlockDriveTimerRunning = 0;

//	osDelay(init_task_dt);
}

void ModeManager::proccess(){
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	futaba.ProcessSmoothing(); //check
 8002ef4:	480c      	ldr	r0, [pc, #48]	; (8002f28 <_ZN11ModeManager8proccessEv+0x3c>)
 8002ef6:	f7ff fcc3 	bl	8002880 <_ZN6Futaba16ProcessSmoothingEv>

	if(futaba.SwitchC == SWITCH_DOWN) ride_mode = COMPETITION;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <_ZN11ModeManager8proccessEv+0x3c>)
 8002efc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d103      	bne.n	8002f0c <_ZN11ModeManager8proccessEv+0x20>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	719a      	strb	r2, [r3, #6]
 8002f0a:	e002      	b.n	8002f12 <_ZN11ModeManager8proccessEv+0x26>
	else 							  ride_mode = FREERUN;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	719a      	strb	r2, [r3, #6]

	setModes();
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f80a 	bl	8002f2c <_ZN11ModeManager8setModesEv>

	checkRideMode();
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f84d 	bl	8002fb8 <_ZN11ModeManager13checkRideModeEv>
//	rc_mode = MODE_ACRO;
//	drive_mode = ENABLE;

}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200000a8 	.word	0x200000a8

08002f2c <_ZN11ModeManager8setModesEv>:

void ModeManager::setModes(){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	if (futaba.Get_RCState() || futaba.SwitchA < SWITCH_DOWN) {
 8002f34:	481f      	ldr	r0, [pc, #124]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f36:	f7ff fc33 	bl	80027a0 <_ZN6Futaba11Get_RCStateEv>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d104      	bne.n	8002f4a <_ZN11ModeManager8setModesEv+0x1e>
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f42:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	dc01      	bgt.n	8002f4e <_ZN11ModeManager8setModesEv+0x22>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <_ZN11ModeManager8setModesEv+0x24>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d006      	beq.n	8002f62 <_ZN11ModeManager8setModesEv+0x36>
		rc_mode = DISARMED;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	711a      	strb	r2, [r3, #4]
		drive_mode = DISABLE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	715a      	strb	r2, [r3, #5]
			rc_mode = MODE_AUTONOMOUS;
			drive_mode = ENABLE;

		}
	}
}
 8002f60:	e024      	b.n	8002fac <_ZN11ModeManager8setModesEv+0x80>
	} else if (futaba.SwitchA == SWITCH_DOWN) {
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f64:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d11f      	bne.n	8002fac <_ZN11ModeManager8setModesEv+0x80>
		if (futaba.SwitchB == SWITCH_UP) {
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f6e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <_ZN11ModeManager8setModesEv+0x52>
			rc_mode = MODE_ACRO;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	711a      	strb	r2, [r3, #4]
}
 8002f7c:	e016      	b.n	8002fac <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_MIDDLE) {
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f80:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <_ZN11ModeManager8setModesEv+0x6a>
			rc_mode = MODE_SEMI;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	715a      	strb	r2, [r3, #5]
}
 8002f94:	e00a      	b.n	8002fac <_ZN11ModeManager8setModesEv+0x80>
		} else if (futaba.SwitchB == SWITCH_DOWN) {
 8002f96:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <_ZN11ModeManager8setModesEv+0x88>)
 8002f98:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d105      	bne.n	8002fac <_ZN11ModeManager8setModesEv+0x80>
			rc_mode = MODE_AUTONOMOUS;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	711a      	strb	r2, [r3, #4]
			drive_mode = ENABLE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	715a      	strb	r2, [r3, #5]
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	200000a8 	.word	0x200000a8

08002fb8 <_ZN11ModeManager13checkRideModeEv>:

void ModeManager::checkRideMode(){
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	switch(ride_mode){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	799b      	ldrb	r3, [r3, #6]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <_ZN11ModeManager13checkRideModeEv+0x26>
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d000      	beq.n	8002fce <_ZN11ModeManager13checkRideModeEv+0x16>
		break;
	case COMPETITION:
		checkUnlockDriveTimer();
		break;
	}
}
 8002fcc:	e00c      	b.n	8002fe8 <_ZN11ModeManager13checkRideModeEv+0x30>
		if (rc_mode != DISARMED) drive_mode = ENABLE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	791b      	ldrb	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <_ZN11ModeManager13checkRideModeEv+0x2e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	715a      	strb	r2, [r3, #5]
		break;
 8002fdc:	e003      	b.n	8002fe6 <_ZN11ModeManager13checkRideModeEv+0x2e>
		checkUnlockDriveTimer();
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f806 	bl	8002ff0 <_ZN11ModeManager21checkUnlockDriveTimerEv>
		break;
 8002fe4:	e000      	b.n	8002fe8 <_ZN11ModeManager13checkRideModeEv+0x30>
		break;
 8002fe6:	bf00      	nop
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZN11ModeManager21checkUnlockDriveTimerEv>:

void ModeManager::checkUnlockDriveTimer(){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	switch(rc_mode){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	791b      	ldrb	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db1a      	blt.n	8003036 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
 8003000:	2b02      	cmp	r3, #2
 8003002:	dd0d      	ble.n	8003020 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x30>
 8003004:	2b03      	cmp	r3, #3
 8003006:	d000      	beq.n	800300a <_ZN11ModeManager21checkUnlockDriveTimerEv+0x1a>
		if(isUnlockDriveTimerRunning){
			breakUnlockDriveTimer();
		}
		break;
	}
}
 8003008:	e015      	b.n	8003036 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		if(!isUnlockDriveTimerRunning){
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	79db      	ldrb	r3, [r3, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10e      	bne.n	8003030 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
			drive_mode = DISABLE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	715a      	strb	r2, [r3, #5]
			startUnlockDriveTimer();
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f810 	bl	800303e <_ZN11ModeManager21startUnlockDriveTimerEv>
		break;
 800301e:	e007      	b.n	8003030 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x40>
		if(isUnlockDriveTimerRunning){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	79db      	ldrb	r3, [r3, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
			breakUnlockDriveTimer();
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f814 	bl	8003056 <_ZN11ModeManager21breakUnlockDriveTimerEv>
		break;
 800302e:	e001      	b.n	8003034 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x44>
		break;
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <_ZN11ModeManager21checkUnlockDriveTimerEv+0x46>
		break;
 8003034:	bf00      	nop
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <_ZN11ModeManager21startUnlockDriveTimerEv>:
	} else {
		drive_mode = ENABLE;
	}
}

void ModeManager::startUnlockDriveTimer(){
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Start_IT(&UNLOCK_DRIVE_TIM);
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <_ZN11ModeManager21breakUnlockDriveTimerEv>:

void ModeManager::breakUnlockDriveTimer(){
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
	isUnlockDriveTimerRunning = 1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	71da      	strb	r2, [r3, #7]
//	HAL_TIM_Base_Stop_IT(&UNLOCK_DRIVE_TIM);
//	__HAL_TIM_SET_COUNTER(&UNLOCK_DRIVE_TIM, 0);
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <_ZN11ModeManager9getRCmodeEv>:

ModeManager::RC_MODE ModeManager::getRCmode(){
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
	return rc_mode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	791b      	ldrb	r3, [r3, #4]
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <_ZN11ModeManager12getDriveModeEv>:

ModeManager::DRIVE_MODE ModeManager::getDriveMode(){
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
	return drive_mode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	795b      	ldrb	r3, [r3, #5]
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <_ZN11ModeManager11getRideModeEv>:

ModeManager::RIDE_MODE ModeManager::getRideMode(){
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	return ride_mode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	799b      	ldrb	r3, [r3, #6]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <_ZN11ModeManagerC1Ev>:

//UNUSED(rc_mode); //should be checked

ModeManager::ModeManager() {
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <_ZN11ModeManagerC1Ev+0x44>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	711a      	strb	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	715a      	strb	r2, [r3, #5]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	719a      	strb	r2, [r3, #6]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	71da      	strb	r2, [r3, #7]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	721a      	strb	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2264      	movs	r2, #100	; 0x64
 80030e6:	611a      	str	r2, [r3, #16]
	// TODO Auto-generated constructor stub

}
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	08006c78 	.word	0x08006c78

080030f8 <_ZN11ModeManagerD1Ev>:

ModeManager::~ModeManager() {
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <_ZN11ModeManagerD1Ev+0x1c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	08006c78 	.word	0x08006c78

08003118 <_ZN11ModeManagerD0Ev>:
ModeManager::~ModeManager() {
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
}
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ffe9 	bl	80030f8 <_ZN11ModeManagerD1Ev>
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f002 fa0f 	bl	800554a <_ZdlPv>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <_Z41__static_initialization_and_destruction_0ii>:
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d10c      	bne.n	8003162 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314e:	4293      	cmp	r3, r2
 8003150:	d107      	bne.n	8003162 <_Z41__static_initialization_and_destruction_0ii+0x2a>
ModeManager mode_manager;
 8003152:	4806      	ldr	r0, [pc, #24]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003154:	f7ff ffac 	bl	80030b0 <_ZN11ModeManagerC1Ev>
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800315c:	4803      	ldr	r0, [pc, #12]	; (800316c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800315e:	f002 f9f6 	bl	800554e <__aeabi_atexit>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000015c 	.word	0x2000015c
 8003170:	20000000 	.word	0x20000000
 8003174:	080030f9 	.word	0x080030f9

08003178 <_GLOBAL__sub_I_mode_manager>:
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
 800317c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff ffd9 	bl	8003138 <_Z41__static_initialization_and_destruction_0ii>
 8003186:	bd80      	pop	{r7, pc}

08003188 <_ZN12MotorManager7processEv>:
//	motor.SetPassthroughState(false);
	//motor.setMaxVelocity(3500.f);
	maxVelocity = ACRO_MAX_VELOCITY;
}

void MotorManager::process(){
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	setMaxVelocity();
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8c1 	bl	8003318 <_ZN12MotorManager14setMaxVelocityEv>
	DriveModeCheck();
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f808 	bl	80031ac <_ZN12MotorManager14DriveModeCheckEv>
	RCModeCheck();
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f817 	bl	80031d0 <_ZN12MotorManager11RCModeCheckEv>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <_ZN12MotorManager14DriveModeCheckEv>:

void MotorManager::DriveModeCheck(){
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
		driveMode = mode_manager.getDriveMode();
 80031b4:	4805      	ldr	r0, [pc, #20]	; (80031cc <_ZN12MotorManager14DriveModeCheckEv+0x20>)
 80031b6:	f7ff ff65 	bl	8003084 <_ZN11ModeManager12getDriveModeEv>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	711a      	strb	r2, [r3, #4]
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	2000015c 	.word	0x2000015c

080031d0 <_ZN12MotorManager11RCModeCheckEv>:
void MotorManager::RCModeCheck(){
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	switch(mode_manager.getRCmode()){
 80031d8:	484a      	ldr	r0, [pc, #296]	; (8003304 <_ZN12MotorManager11RCModeCheckEv+0x134>)
 80031da:	f7ff ff48 	bl	800306e <_ZN11ModeManager9getRCmodeEv>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	f200 808b 	bhi.w	80032fc <_ZN12MotorManager11RCModeCheckEv+0x12c>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <_ZN12MotorManager11RCModeCheckEv+0x1c>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	080032d5 	.word	0x080032d5
 80031f4:	08003283 	.word	0x08003283
 80031f8:	08003217 	.word	0x08003217
		case ModeManager::DISARMED:
			// TO TEST
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80031fc:	2201      	movs	r2, #1
 80031fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003202:	4841      	ldr	r0, [pc, #260]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003204:	f001 fa7e 	bl	8004704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003208:	2201      	movs	r2, #1
 800320a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800320e:	483e      	ldr	r0, [pc, #248]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003210:	f001 fa78 	bl	8004704 <HAL_GPIO_WritePin>
//			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
//			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[YAW] * MAX_TURN_ANGLE) ;
			break;
 8003214:	e072      	b.n	80032fc <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_ACRO:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003216:	2200      	movs	r2, #0
 8003218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800321c:	483a      	ldr	r0, [pc, #232]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 800321e:	f001 fa71 	bl	8004704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003222:	2201      	movs	r2, #1
 8003224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003228:	4837      	ldr	r0, [pc, #220]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 800322a:	f001 fa6b 	bl	8004704 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_ACRO, driveMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	791b      	ldrb	r3, [r3, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	2103      	movs	r1, #3
 8003236:	4835      	ldr	r0, [pc, #212]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003238:	f7ff f821 	bl	800227e <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8a7 	bl	8003390 <_ZN12MotorManager14getMaxVelocityEv>
 8003242:	4604      	mov	r4, r0
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8a3 	bl	8003390 <_ZN12MotorManager14getMaxVelocityEv>
 800324a:	4602      	mov	r2, r0
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7fd fd43 	bl	8000ce0 <__aeabi_fmul>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	4621      	mov	r1, r4
 8003260:	482a      	ldr	r0, [pc, #168]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 8003262:	f7fe ffec 	bl	800223e <_ZN14CanSendManager11setVelocityEff>
			canSendManager.setTurn(MAX_TURN_ANGLE , futaba.SmoothDeflection[YAW] * MAX_TURN_ANGLE) ;
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	4929      	ldr	r1, [pc, #164]	; (8003314 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fd36 	bl	8000ce0 <__aeabi_fmul>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	4926      	ldr	r1, [pc, #152]	; (8003314 <_ZN12MotorManager11RCModeCheckEv+0x144>)
 800327a:	4824      	ldr	r0, [pc, #144]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 800327c:	f7fe ffef 	bl	800225e <_ZN14CanSendManager7setTurnEff>
			break;
 8003280:	e03c      	b.n	80032fc <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_SEMI:
//			control_brakes(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
//			setVelocity(getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003282:	2201      	movs	r2, #1
 8003284:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003288:	481f      	ldr	r0, [pc, #124]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 800328a:	f001 fa3b 	bl	8004704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800328e:	2200      	movs	r2, #0
 8003290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003294:	481c      	ldr	r0, [pc, #112]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 8003296:	f001 fa35 	bl	8004704 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_SEMI, driveMode);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	791b      	ldrb	r3, [r3, #4]
 800329e:	461a      	mov	r2, r3
 80032a0:	2102      	movs	r1, #2
 80032a2:	481a      	ldr	r0, [pc, #104]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 80032a4:	f7fe ffeb 	bl	800227e <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			canSendManager.setVelocity(getMaxVelocity(), getMaxVelocity() * futaba.SmoothDeflection[PITCH]);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f871 	bl	8003390 <_ZN12MotorManager14getMaxVelocityEv>
 80032ae:	4604      	mov	r4, r0
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f86d 	bl	8003390 <_ZN12MotorManager14getMaxVelocityEv>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b15      	ldr	r3, [pc, #84]	; (8003310 <_ZN12MotorManager11RCModeCheckEv+0x140>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	4619      	mov	r1, r3
 80032c0:	4610      	mov	r0, r2
 80032c2:	f7fd fd0d 	bl	8000ce0 <__aeabi_fmul>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4621      	mov	r1, r4
 80032cc:	480f      	ldr	r0, [pc, #60]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 80032ce:	f7fe ffb6 	bl	800223e <_ZN14CanSendManager11setVelocityEff>

			break;
 80032d2:	e013      	b.n	80032fc <_ZN12MotorManager11RCModeCheckEv+0x12c>
		case ModeManager::MODE_AUTONOMOUS:
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80032d4:	2200      	movs	r2, #0
 80032d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032da:	480b      	ldr	r0, [pc, #44]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 80032dc:	f001 fa12 	bl	8004704 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e6:	4808      	ldr	r0, [pc, #32]	; (8003308 <_ZN12MotorManager11RCModeCheckEv+0x138>)
 80032e8:	f001 fa0c 	bl	8004704 <HAL_GPIO_WritePin>
			canSendManager.setStatus(ModeManager::MODE_AUTONOMOUS, driveMode);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	791b      	ldrb	r3, [r3, #4]
 80032f0:	461a      	mov	r2, r3
 80032f2:	2101      	movs	r1, #1
 80032f4:	4805      	ldr	r0, [pc, #20]	; (800330c <_ZN12MotorManager11RCModeCheckEv+0x13c>)
 80032f6:	f7fe ffc2 	bl	800227e <_ZN14CanSendManager9setStatusEN11ModeManager7RC_MODEENS0_10DRIVE_MODEE>
			break;
 80032fa:	bf00      	nop
		}
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}
 8003304:	2000015c 	.word	0x2000015c
 8003308:	40011000 	.word	0x40011000
 800330c:	200000a4 	.word	0x200000a4
 8003310:	200000a8 	.word	0x200000a8
 8003314:	42340000 	.word	0x42340000

08003318 <_ZN12MotorManager14setMaxVelocityEv>:
void MotorManager::setMaxVelocity(){
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	if(mode_manager.getRideMode() == ModeManager::COMPETITION){
 8003320:	4818      	ldr	r0, [pc, #96]	; (8003384 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003322:	f7ff feba 	bl	800309a <_ZN11ModeManager11getRideModeEv>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01d      	beq.n	8003372 <_ZN12MotorManager14setMaxVelocityEv+0x5a>
		switch(mode_manager.getRCmode()){
 8003336:	4813      	ldr	r0, [pc, #76]	; (8003384 <_ZN12MotorManager14setMaxVelocityEv+0x6c>)
 8003338:	f7ff fe99 	bl	800306e <_ZN11ModeManager9getRCmodeEv>
 800333c:	4603      	mov	r3, r0
 800333e:	2b03      	cmp	r3, #3
 8003340:	d81c      	bhi.n	800337c <_ZN12MotorManager14setMaxVelocityEv+0x64>
 8003342:	a201      	add	r2, pc, #4	; (adr r2, 8003348 <_ZN12MotorManager14setMaxVelocityEv+0x30>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	0800337b 	.word	0x0800337b
 800334c:	08003369 	.word	0x08003369
 8003350:	08003361 	.word	0x08003361
 8003354:	08003359 	.word	0x08003359
		case ModeManager::DISARMED:
			break;
		case ModeManager::MODE_ACRO:
			maxVelocity = ACRO_MAX_VELOCITY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 800335c:	609a      	str	r2, [r3, #8]
			break;
 800335e:	e00d      	b.n	800337c <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_SEMI:
			maxVelocity = SEMI_MAX_VELOCITY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 8003364:	609a      	str	r2, [r3, #8]
			break;
 8003366:	e009      	b.n	800337c <_ZN12MotorManager14setMaxVelocityEv+0x64>
		case ModeManager::MODE_AUTONOMOUS:
			maxVelocity = AUTONOMOUS_MAX_VELOCITY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a08      	ldr	r2, [pc, #32]	; (800338c <_ZN12MotorManager14setMaxVelocityEv+0x74>)
 800336c:	609a      	str	r2, [r3, #8]
			break;
 800336e:	bf00      	nop
 8003370:	e004      	b.n	800337c <_ZN12MotorManager14setMaxVelocityEv+0x64>
		}
	}else{
		maxVelocity = SERVICE_MAX_VELOCITY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <_ZN12MotorManager14setMaxVelocityEv+0x70>)
 8003376:	609a      	str	r2, [r3, #8]
	}
}
 8003378:	e000      	b.n	800337c <_ZN12MotorManager14setMaxVelocityEv+0x64>
			break;
 800337a:	bf00      	nop
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	2000015c 	.word	0x2000015c
 8003388:	42be0000 	.word	0x42be0000
 800338c:	42a00000 	.word	0x42a00000

08003390 <_ZN12MotorManager14getMaxVelocityEv>:

float MotorManager::getMaxVelocity(){
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	return maxVelocity;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr
	...

080033a8 <_ZN12MotorManagerC1Ev>:
MotorManager::MotorManager() {
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	4a05      	ldr	r2, [pc, #20]	; (80033c8 <_ZN12MotorManagerC1Ev+0x20>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr
 80033c8:	08006ca0 	.word	0x08006ca0

080033cc <_ZN12MotorManagerD1Ev>:

MotorManager::~MotorManager() {
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <_ZN12MotorManagerD1Ev+0x1c>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	08006ca0 	.word	0x08006ca0

080033ec <_ZN12MotorManagerD0Ev>:
MotorManager::~MotorManager() {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
}
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffe9 	bl	80033cc <_ZN12MotorManagerD1Ev>
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f002 f8a5 	bl	800554a <_ZdlPv>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <_Z41__static_initialization_and_destruction_0ii>:
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d10c      	bne.n	8003436 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003422:	4293      	cmp	r3, r2
 8003424:	d107      	bne.n	8003436 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MotorManager motor_manager;
 8003426:	4806      	ldr	r0, [pc, #24]	; (8003440 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003428:	f7ff ffbe 	bl	80033a8 <_ZN12MotorManagerC1Ev>
 800342c:	4a05      	ldr	r2, [pc, #20]	; (8003444 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800342e:	4906      	ldr	r1, [pc, #24]	; (8003448 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003430:	4803      	ldr	r0, [pc, #12]	; (8003440 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003432:	f002 f88c 	bl	800554e <__aeabi_atexit>
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000170 	.word	0x20000170
 8003444:	20000000 	.word	0x20000000
 8003448:	080033cd 	.word	0x080033cd

0800344c <_GLOBAL__sub_I_motor_manager>:
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
 8003450:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ffd9 	bl	800340c <_Z41__static_initialization_and_destruction_0ii>
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ZN5Tools9GetMicrosEv>:
Tools tools;

uint8_t Tools::GetMicrosState(void){
	return MicrosInitDone;
}
uint32_t Tools::GetMicros(void){
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	return TIM2->CNT;
 8003464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800346a:	4618      	mov	r0, r3
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <_ZN5Tools4InitEv>:
int32_t Tools::CompareMicros(uint32_t a, uint32_t b) {
	return (int32_t)(a - b);
}
uint8_t Tools::Init(void) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	if (MicrosInitDone) {
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	791b      	ldrb	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <_ZN5Tools4InitEv+0x14>
		return 0;
 8003484:	2300      	movs	r3, #0
 8003486:	e008      	b.n	800349a <_ZN5Tools4InitEv+0x26>
	} else {
		MX_TIM2_Init();
 8003488:	f000 fad8 	bl	8003a3c <MX_TIM2_Init>
		HAL_TIM_Base_Start(&htim2);
 800348c:	4805      	ldr	r0, [pc, #20]	; (80034a4 <_ZN5Tools4InitEv+0x30>)
 800348e:	f001 fbed 	bl	8004c6c <HAL_TIM_Base_Start>
		MicrosInitDone = 1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	711a      	strb	r2, [r3, #4]

	}
	return 1;
 8003498:	2301      	movs	r3, #1
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000234 	.word	0x20000234

080034a8 <_ZN5ToolsC1Ev>:


Tools::Tools() {
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <_ZN5ToolsC1Ev+0x20>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	711a      	strb	r2, [r3, #4]
	// TODO Auto-generated constructor stub

}
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr
 80034c8:	08006cc8 	.word	0x08006cc8

080034cc <_ZN5ToolsD1Ev>:

Tools::~Tools() {
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <_ZN5ToolsD1Ev+0x1c>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	08006cc8 	.word	0x08006cc8

080034ec <_ZN5ToolsD0Ev>:
Tools::~Tools() {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
}
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ffe9 	bl	80034cc <_ZN5ToolsD1Ev>
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f002 f825 	bl	800554a <_ZdlPv>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <_Z41__static_initialization_and_destruction_0ii>:
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d10c      	bne.n	8003536 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003522:	4293      	cmp	r3, r2
 8003524:	d107      	bne.n	8003536 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Tools tools;
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003528:	f7ff ffbe 	bl	80034a8 <_ZN5ToolsC1Ev>
 800352c:	4a05      	ldr	r2, [pc, #20]	; (8003544 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800352e:	4906      	ldr	r1, [pc, #24]	; (8003548 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003532:	f002 f80c 	bl	800554e <__aeabi_atexit>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000017c 	.word	0x2000017c
 8003544:	20000000 	.word	0x20000000
 8003548:	080034cd 	.word	0x080034cd

0800354c <_GLOBAL__sub_I_tools>:
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
 8003550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003554:	2001      	movs	r0, #1
 8003556:	f7ff ffd9 	bl	800350c <_Z41__static_initialization_and_destruction_0ii>
 800355a:	bd80      	pop	{r7, pc}

0800355c <MX_CAN_Init>:

  hcan.Instance = CAN1;
  hcan.Init.Prescaler = 5;
  hcan.Init.Mode = CAN_MODE_NORMAL;
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800355c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  hcan.Instance = CAN1;
 8003560:	480e      	ldr	r0, [pc, #56]	; (800359c <MX_CAN_Init+0x40>)
{
 8003562:	b508      	push	{r3, lr}
  hcan.Init.Prescaler = 5;
 8003564:	f04f 0e05 	mov.w	lr, #5
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8003568:	6102      	str	r2, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800356a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan.Init.Prescaler = 5;
 800356e:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <MX_CAN_Init+0x44>)
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003570:	6142      	str	r2, [r0, #20]
  hcan.Init.Prescaler = 5;
 8003572:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan.Init.TimeTriggeredMode = DISABLE;
  hcan.Init.AutoBusOff = DISABLE;
  hcan.Init.AutoWakeUp = DISABLE;
  hcan.Init.AutoRetransmission = ENABLE;
 8003576:	2201      	movs	r2, #1
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8003578:	2300      	movs	r3, #0
  hcan.Init.AutoRetransmission = ENABLE;
 800357a:	76c2      	strb	r2, [r0, #27]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800357c:	6083      	str	r3, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800357e:	60c3      	str	r3, [r0, #12]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003580:	7603      	strb	r3, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8003582:	7643      	strb	r3, [r0, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8003584:	7683      	strb	r3, [r0, #26]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8003586:	7703      	strb	r3, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8003588:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800358a:	f000 fbb3 	bl	8003cf4 <HAL_CAN_Init>
 800358e:	b118      	cbz	r0, 8003598 <MX_CAN_Init+0x3c>
  {
    Error_Handler();
  }

}
 8003590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003594:	f000 b9d9 	b.w	800394a <Error_Handler>
 8003598:	bd08      	pop	{r3, pc}
 800359a:	bf00      	nop
 800359c:	2000019c 	.word	0x2000019c
 80035a0:	40006400 	.word	0x40006400

080035a4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80035a4:	b510      	push	{r4, lr}
 80035a6:	4604      	mov	r4, r0
 80035a8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035aa:	2210      	movs	r2, #16
 80035ac:	2100      	movs	r1, #0
 80035ae:	a802      	add	r0, sp, #8
 80035b0:	f003 f9f6 	bl	80069a0 <memset>
  if(canHandle->Instance==CAN1)
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	4b21      	ldr	r3, [pc, #132]	; (800363c <HAL_CAN_MspInit+0x98>)
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d13d      	bne.n	8003638 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035bc:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80035c0:	69da      	ldr	r2, [r3, #28]
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80035c2:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035c4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80035c8:	61da      	str	r2, [r3, #28]
 80035ca:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80035cc:	481c      	ldr	r0, [pc, #112]	; (8003640 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035ce:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80035d2:	9200      	str	r2, [sp, #0]
 80035d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	f042 0204 	orr.w	r2, r2, #4
 80035dc:	619a      	str	r2, [r3, #24]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = CAN_RX_Pin;
 80035e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ec:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(CAN_RX_GPIO_Port, &GPIO_InitStruct);
 80035ee:	f000 ff39 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CAN_TX_Pin;
 80035f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	2302      	movs	r3, #2
 80035fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 80035fe:	a902      	add	r1, sp, #8
 8003600:	480f      	ldr	r0, [pc, #60]	; (8003640 <HAL_CAN_MspInit+0x9c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003602:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(CAN_TX_GPIO_Port, &GPIO_InitStruct);
 8003604:	f000 ff2e 	bl	8004464 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2013      	movs	r0, #19
 800360c:	4611      	mov	r1, r2
 800360e:	f000 fe75 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003612:	2013      	movs	r0, #19
 8003614:	f000 fea6 	bl	8004364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2014      	movs	r0, #20
 800361c:	4611      	mov	r1, r2
 800361e:	f000 fe6d 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003622:	2014      	movs	r0, #20
 8003624:	f000 fe9e 	bl	8004364 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2015      	movs	r0, #21
 800362c:	4611      	mov	r1, r2
 800362e:	f000 fe65 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003632:	2015      	movs	r0, #21
 8003634:	f000 fe96 	bl	8004364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8003638:	b006      	add	sp, #24
 800363a:	bd10      	pop	{r4, pc}
 800363c:	40006400 	.word	0x40006400
 8003640:	40010800 	.word	0x40010800

08003644 <hal_can_filter_init>:
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterIdHigh = 0x24D;
//	hcan_filter.FilterIdLow = 0x0;
//	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
//	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.FilterBank = 0;
 8003644:	2300      	movs	r3, #0
 8003646:	4908      	ldr	r1, [pc, #32]	; (8003668 <hal_can_filter_init+0x24>)
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003648:	2201      	movs	r2, #1
	hcan_filter.FilterBank = 0;
 800364a:	614b      	str	r3, [r1, #20]
	hcan_filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800364c:	618b      	str	r3, [r1, #24]
	hcan_filter.FilterIdHigh = 0x0000;
 800364e:	600b      	str	r3, [r1, #0]
	hcan_filter.FilterIdLow = 0x0000;
 8003650:	604b      	str	r3, [r1, #4]
	hcan_filter.FilterMaskIdHigh = 0x0000;
 8003652:	608b      	str	r3, [r1, #8]
	hcan_filter.FilterMaskIdLow = 0x0000;
 8003654:	60cb      	str	r3, [r1, #12]
	hcan_filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003656:	610b      	str	r3, [r1, #16]
	hcan_filter.FilterActivation = ENABLE;
	hcan_filter.SlaveStartFilterBank = 14;
 8003658:	230e      	movs	r3, #14

	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 800365a:	4804      	ldr	r0, [pc, #16]	; (800366c <hal_can_filter_init+0x28>)
	hcan_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800365c:	61ca      	str	r2, [r1, #28]
	hcan_filter.FilterActivation = ENABLE;
 800365e:	620a      	str	r2, [r1, #32]
	hcan_filter.SlaveStartFilterBank = 14;
 8003660:	624b      	str	r3, [r1, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan,&hcan_filter);
 8003662:	f000 bbc2 	b.w	8003dea <HAL_CAN_ConfigFilter>
 8003666:	bf00      	nop
 8003668:	200001c4 	.word	0x200001c4
 800366c:	2000019c 	.word	0x2000019c

08003670 <hal_can_send>:

void hal_can_send(uint8_t data){
	hal_can_messageTx  hal_message;
	hal_message.data[0] = data;
	hal_message.header.DLC = 1;
	hal_message.header.RTR = CAN_RTR_DATA;
 8003670:	2300      	movs	r3, #0
	hal_message.header.DLC = 1;
 8003672:	2201      	movs	r2, #1
	hal_message.header.IDE  = CAN_ID_STD;
	hal_message.header.StdId = 0x21E;
 8003674:	f240 211e 	movw	r1, #542	; 0x21e
void hal_can_send(uint8_t data){
 8003678:	b500      	push	{lr}
 800367a:	b08b      	sub	sp, #44	; 0x2c
	hal_message.data[0] = data;
 800367c:	f88d 0020 	strb.w	r0, [sp, #32]
	hal_message.header.DLC = 1;
 8003680:	9205      	str	r2, [sp, #20]
	hal_message.header.RTR = CAN_RTR_DATA;
 8003682:	9304      	str	r3, [sp, #16]
	hal_message.header.IDE  = CAN_ID_STD;
 8003684:	9303      	str	r3, [sp, #12]
	hal_message.header.StdId = 0x21E;
 8003686:	9101      	str	r1, [sp, #4]
	hal_message.header.ExtId = 0x01;
 8003688:	9202      	str	r2, [sp, #8]
	hal_message.header.TransmitGlobalTime = DISABLE;
 800368a:	f88d 3018 	strb.w	r3, [sp, #24]

	HAL_CAN_AddTxMessage(&hcan, &(hal_message.header),hal_message.data,&(hal_message.mailbox));
 800368e:	aa08      	add	r2, sp, #32
 8003690:	ab07      	add	r3, sp, #28
 8003692:	a901      	add	r1, sp, #4
 8003694:	4805      	ldr	r0, [pc, #20]	; (80036ac <hal_can_send+0x3c>)
 8003696:	f000 fc3f 	bl	8003f18 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800369a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800369e:	4804      	ldr	r0, [pc, #16]	; (80036b0 <hal_can_send+0x40>)
 80036a0:	f001 f835 	bl	800470e <HAL_GPIO_TogglePin>
}
 80036a4:	b00b      	add	sp, #44	; 0x2c
 80036a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80036aa:	bf00      	nop
 80036ac:	2000019c 	.word	0x2000019c
 80036b0:	40011000 	.word	0x40011000

080036b4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan ){
 80036b4:	b500      	push	{lr}
 80036b6:	b08b      	sub	sp, #44	; 0x2c
	hal_can_messageRx  hal_message;
	HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,
 80036b8:	ab08      	add	r3, sp, #32
 80036ba:	466a      	mov	r2, sp
 80036bc:	2100      	movs	r1, #0
 80036be:	f000 fc79 	bl	8003fb4 <HAL_CAN_GetRxMessage>
			&hal_message.header,
			hal_message.data );


	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80036c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036c6:	4803      	ldr	r0, [pc, #12]	; (80036d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80036c8:	f001 f821 	bl	800470e <HAL_GPIO_TogglePin>
//	else if ( frame_id == TURN_FRAME_ID )			setTurn( data, RC  );
//	else if ( frame_id == I3_TURN_FRAME_ID )	 	setTurn( data, I3  );



}
 80036cc:	b00b      	add	sp, #44	; 0x2c
 80036ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80036d2:	bf00      	nop
 80036d4:	40011000 	.word	0x40011000

080036d8 <MX_GPIO_Init>:
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	2210      	movs	r2, #16
{
 80036da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036de:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	eb0d 0002 	add.w	r0, sp, r2
 80036e4:	2100      	movs	r1, #0
 80036e6:	f003 f95b 	bl	80069a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ea:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80036ec:	4f3c      	ldr	r7, [pc, #240]	; (80037e0 <MX_GPIO_Init+0x108>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ee:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80036f0:	4638      	mov	r0, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036f2:	f042 0210 	orr.w	r2, r2, #16
 80036f6:	619a      	str	r2, [r3, #24]
 80036f8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 80036fa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fe:	f002 0210 	and.w	r2, r2, #16
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003706:	699a      	ldr	r2, [r3, #24]
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8 
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003708:	2403      	movs	r4, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	619a      	str	r2, [r3, #24]
 8003710:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003712:	2507      	movs	r5, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003714:	f002 0220 	and.w	r2, r2, #32
 8003718:	9201      	str	r2, [sp, #4]
 800371a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800371c:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003720:	f042 0204 	orr.w	r2, r2, #4
 8003724:	619a      	str	r2, [r3, #24]
 8003726:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = B1_Pin;
 8003728:	f04f 0802 	mov.w	r8, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800372c:	f002 0204 	and.w	r2, r2, #4
 8003730:	9202      	str	r2, [sp, #8]
 8003732:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003734:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003736:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80037f4 <MX_GPIO_Init+0x11c>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800373a:	f042 0208 	orr.w	r2, r2, #8
 800373e:	619a      	str	r2, [r3, #24]
 8003740:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003742:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	9303      	str	r3, [sp, #12]
 800374a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LED2_Pin, GPIO_PIN_RESET);
 800374c:	f000 ffda 	bl	8004704 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003750:	f24f 33ff 	movw	r3, #62463	; 0xf3ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003754:	a904      	add	r1, sp, #16
 8003756:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8003758:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800375c:	f000 fe82 	bl	8004464 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003760:	a904      	add	r1, sp, #16
 8003762:	4820      	ldr	r0, [pc, #128]	; (80037e4 <MX_GPIO_Init+0x10c>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003764:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003766:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003768:	f000 fe7c 	bl	8004464 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800376c:	f248 73f1 	movw	r3, #34801	; 0x87f1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	a904      	add	r1, sp, #16
 8003772:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003774:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003776:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003778:	f000 fe74 	bl	8004464 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800377c:	4b1a      	ldr	r3, [pc, #104]	; (80037e8 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800377e:	a904      	add	r1, sp, #16
 8003780:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003782:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = B1_Pin;
 8003784:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800378a:	f000 fe6b 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 
                           PB11 PB12 PB13 PB14 
                           PB15 PB3 PB4 PB5 
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 800378e:	f64f 73ff 	movw	r3, #65535	; 0xffff
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003792:	a904      	add	r1, sp, #16
 8003794:	4815      	ldr	r0, [pc, #84]	; (80037ec <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10 
 8003796:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003798:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379a:	f000 fe63 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LED2_Pin;
 800379e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a6:	a904      	add	r1, sp, #16
 80037a8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ae:	f8cd 801c 	str.w	r8, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b2:	f000 fe57 	bl	8004464 <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <MX_GPIO_Init+0x118>)

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80037b8:	4631      	mov	r1, r6
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80037ba:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80037bc:	4628      	mov	r0, r5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80037be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c6:	6053      	str	r3, [r2, #4]
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80037c8:	4632      	mov	r2, r6
 80037ca:	f000 fd97 	bl	80042fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80037ce:	4628      	mov	r0, r5
 80037d0:	f000 fdc8 	bl	8004364 <HAL_NVIC_EnableIRQ>

}
 80037d4:	b009      	add	sp, #36	; 0x24
 80037d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40011000 	.word	0x40011000
 80037e4:	40011400 	.word	0x40011400
 80037e8:	10110000 	.word	0x10110000
 80037ec:	40010c00 	.word	0x40010c00
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40010800 	.word	0x40010800

080037f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d102      	bne.n	8003810 <HAL_TIM_PeriodElapsedCallback+0x18>
    allTasks.process();
 800380a:	4804      	ldr	r0, [pc, #16]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800380c:	f7fe fbe4 	bl	8001fd8 <_ZN8AllTasks7processEv>
  }
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40000400 	.word	0x40000400
 800381c:	200000a0 	.word	0x200000a0

08003820 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) //aparatura
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a04      	ldr	r2, [pc, #16]	; (8003840 <HAL_UART_RxCpltCallback+0x20>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d102      	bne.n	8003838 <HAL_UART_RxCpltCallback+0x18>
	{
		futaba.RxCallback();
 8003832:	4804      	ldr	r0, [pc, #16]	; (8003844 <HAL_UART_RxCpltCallback+0x24>)
 8003834:	f7ff fab0 	bl	8002d98 <_ZN6Futaba10RxCallbackEv>
	}
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40004400 	.word	0x40004400
 8003844:	200000a8 	.word	0x200000a8

08003848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800384e:	f000 fa2d 	bl	8003cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003852:	f000 f835 	bl	80038c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003856:	f7ff ff3f 	bl	80036d8 <MX_GPIO_Init>
  MX_CAN_Init();
 800385a:	f7ff fe7f 	bl	800355c <MX_CAN_Init>
  MX_TIM3_Init();
 800385e:	f000 f921 	bl	8003aa4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  hal_can_filter_init();
 8003862:	f7ff feef 	bl	8003644 <hal_can_filter_init>

  HAL_CAN_Start(&hcan);
 8003866:	4813      	ldr	r0, [pc, #76]	; (80038b4 <main+0x6c>)
 8003868:	f000 fb2b 	bl	8003ec2 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING) == HAL_OK){
 800386c:	2102      	movs	r1, #2
 800386e:	4811      	ldr	r0, [pc, #68]	; (80038b4 <main+0x6c>)
 8003870:	f000 fc16 	bl	80040a0 <HAL_CAN_ActivateNotification>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
  }

  HAL_TIM_Base_Start_IT(&htim3);
 8003878:	480f      	ldr	r0, [pc, #60]	; (80038b8 <main+0x70>)
 800387a:	f001 fa1d 	bl	8004cb8 <HAL_TIM_Base_Start_IT>

  uint8_t data = 1;
 800387e:	2301      	movs	r3, #1
 8003880:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 for(uint32_t i = 0; i <150000; i ++){
 8003882:	2300      	movs	r3, #0
 8003884:	603b      	str	r3, [r7, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <main+0x74>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d8f9      	bhi.n	8003882 <main+0x3a>
		 if (i ==0){
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <main+0x64>
			 if(data>10) data =1;
 8003894:	79fb      	ldrb	r3, [r7, #7]
 8003896:	2b0a      	cmp	r3, #10
 8003898:	dd01      	ble.n	800389e <main+0x56>
 800389a:	2301      	movs	r3, #1
 800389c:	71fb      	strb	r3, [r7, #7]
			 hal_can_send(data);
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fee5 	bl	8003670 <hal_can_send>
			 data++;
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	3301      	adds	r3, #1
 80038aa:	71fb      	strb	r3, [r7, #7]
	 for(uint32_t i = 0; i <150000; i ++){
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3301      	adds	r3, #1
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	e7e8      	b.n	8003886 <main+0x3e>
 80038b4:	2000019c 	.word	0x2000019c
 80038b8:	200001ec 	.word	0x200001ec
 80038bc:	000249ef 	.word	0x000249ef

080038c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b090      	sub	sp, #64	; 0x40
 80038c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038c6:	f107 0318 	add.w	r3, r7, #24
 80038ca:	2228      	movs	r2, #40	; 0x28
 80038cc:	2100      	movs	r1, #0
 80038ce:	4618      	mov	r0, r3
 80038d0:	f003 f866 	bl	80069a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038e2:	2302      	movs	r3, #2
 80038e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038e6:	2301      	movs	r3, #1
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ea:	2310      	movs	r3, #16
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038f2:	f107 0318 	add.w	r3, r7, #24
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 ff20 	bl	800473c <HAL_RCC_OscConfig>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <_Z18SystemClock_Configv+0x50>
  {
    Error_Handler();
 800390c:	f000 f81d 	bl	800394a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003910:	230f      	movs	r3, #15
 8003912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f8e1 	bl	8004af0 <HAL_RCC_ClockConfig>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 800393e:	f000 f804 	bl	800394a <Error_Handler>
  }
}
 8003942:	bf00      	nop
 8003944:	3740      	adds	r7, #64	; 0x40
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800394e:	bf00      	nop
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_MspInit+0x3c>)
{
 800395a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	699a      	ldr	r2, [r3, #24]
 8003966:	f002 0201 	and.w	r2, r2, #1
 800396a:	9200      	str	r2, [sp, #0]
 800396c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003974:	61da      	str	r2, [r3, #28]
 8003976:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003978:	4a07      	ldr	r2, [pc, #28]	; (8003998 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	9301      	str	r3, [sp, #4]
 8003980:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003982:	6853      	ldr	r3, [r2, #4]
 8003984:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800398c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398e:	b002      	add	sp, #8
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000
 8003998:	40010000 	.word	0x40010000

0800399c <NMI_Handler>:
 800399c:	4770      	bx	lr

0800399e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800399e:	e7fe      	b.n	800399e <HardFault_Handler>

080039a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039a0:	e7fe      	b.n	80039a0 <MemManage_Handler>

080039a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039a2:	e7fe      	b.n	80039a2 <BusFault_Handler>

080039a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039a4:	e7fe      	b.n	80039a4 <UsageFault_Handler>

080039a6 <SVC_Handler>:
 80039a6:	4770      	bx	lr

080039a8 <DebugMon_Handler>:
 80039a8:	4770      	bx	lr

080039aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ac:	f000 b990 	b.w	8003cd0 <HAL_IncTick>

080039b0 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80039b0:	2002      	movs	r0, #2
 80039b2:	f000 beb7 	b.w	8004724 <HAL_GPIO_EXTI_IRQHandler>
	...

080039b8 <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80039b8:	4801      	ldr	r0, [pc, #4]	; (80039c0 <CAN1_RX1_IRQHandler+0x8>)
 80039ba:	f000 bb8e 	b.w	80040da <HAL_CAN_IRQHandler>
 80039be:	bf00      	nop
 80039c0:	2000019c 	.word	0x2000019c

080039c4 <USB_LP_CAN1_RX0_IRQHandler>:
 80039c4:	f7ff bff8 	b.w	80039b8 <CAN1_RX1_IRQHandler>

080039c8 <USB_HP_CAN1_TX_IRQHandler>:
 80039c8:	f7ff bff6 	b.w	80039b8 <CAN1_RX1_IRQHandler>

080039cc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <TIM3_IRQHandler+0x8>)
 80039ce:	f001 b9a1 	b.w	8004d14 <HAL_TIM_IRQHandler>
 80039d2:	bf00      	nop
 80039d4:	200001ec 	.word	0x200001ec

080039d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <USART2_IRQHandler+0x8>)
 80039da:	f001 bc65 	b.w	80052a8 <HAL_UART_IRQHandler>
 80039de:	bf00      	nop
 80039e0:	2000027c 	.word	0x2000027c

080039e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80039e4:	2001      	movs	r0, #1
 80039e6:	4770      	bx	lr

080039e8 <_kill>:

int _kill(int pid, int sig)
{
 80039e8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039ea:	f002 ffa7 	bl	800693c <__errno>
 80039ee:	2316      	movs	r3, #22
 80039f0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80039f2:	f04f 30ff 	mov.w	r0, #4294967295
 80039f6:	bd08      	pop	{r3, pc}

080039f8 <_exit>:

void _exit (int status)
{
 80039f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039fa:	f002 ff9f 	bl	800693c <__errno>
 80039fe:	2316      	movs	r3, #22
 8003a00:	6003      	str	r3, [r0, #0]
 8003a02:	e7fe      	b.n	8003a02 <_exit+0xa>

08003a04 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8003a04:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <_sbrk+0x2c>)
{
 8003a08:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	b909      	cbnz	r1, 8003a12 <_sbrk+0xe>
		heap_end = &end;
 8003a0e:	4909      	ldr	r1, [pc, #36]	; (8003a34 <_sbrk+0x30>)
 8003a10:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003a12:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8003a14:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a16:	4402      	add	r2, r0
 8003a18:	428a      	cmp	r2, r1
 8003a1a:	d906      	bls.n	8003a2a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a1c:	f002 ff8e 	bl	800693c <__errno>
 8003a20:	230c      	movs	r3, #12
 8003a22:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8003a2a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8003a2c:	bd08      	pop	{r3, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000184 	.word	0x20000184
 8003a34:	200002c4 	.word	0x200002c4

08003a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a38:	4770      	bx	lr
	...

08003a3c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003a3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a3e:	2210      	movs	r2, #16
 8003a40:	2100      	movs	r1, #0
 8003a42:	a802      	add	r0, sp, #8
 8003a44:	f002 ffac 	bl	80069a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8;
 8003a48:	2208      	movs	r2, #8
 8003a4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8003a4e:	4814      	ldr	r0, [pc, #80]	; (8003aa0 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a50:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 8;
 8003a52:	e880 0006 	stmia.w	r0, {r1, r2}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0xffff;
 8003a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	9301      	str	r3, [sp, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0xffff;
 8003a60:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a62:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a66:	f001 fa2f 	bl	8004ec8 <HAL_TIM_Base_Init>
 8003a6a:	b108      	cbz	r0, 8003a70 <MX_TIM2_Init+0x34>
  {
    Error_Handler();
 8003a6c:	f7ff ff6d 	bl	800394a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a74:	a902      	add	r1, sp, #8
 8003a76:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <MX_TIM2_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a78:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a7a:	f001 fa5b 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8003a7e:	b108      	cbz	r0, 8003a84 <MX_TIM2_Init+0x48>
  {
    Error_Handler();
 8003a80:	f7ff ff63 	bl	800394a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a84:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a86:	4669      	mov	r1, sp
 8003a88:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a8a:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a8e:	f001 fae5 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8003a92:	b108      	cbz	r0, 8003a98 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003a94:	f7ff ff59 	bl	800394a <Error_Handler>
  }

}
 8003a98:	b007      	add	sp, #28
 8003a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a9e:	bf00      	nop
 8003aa0:	20000234 	.word	0x20000234

08003aa4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003aa4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	a802      	add	r0, sp, #8
 8003aac:	f002 ff78 	bl	80069a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab0:	2300      	movs	r3, #0

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 800-1;
 8003ab2:	f240 321f 	movw	r2, #799	; 0x31f
  htim3.Instance = TIM3;
 8003ab6:	4814      	ldr	r0, [pc, #80]	; (8003b08 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 800-1;
 8003ab8:	4914      	ldr	r1, [pc, #80]	; (8003b0c <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 800-1;
 8003abe:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac2:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 1000;
 8003ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac8:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aca:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Period = 1000;
 8003acc:	60c2      	str	r2, [r0, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ace:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ad0:	f001 f9fa 	bl	8004ec8 <HAL_TIM_Base_Init>
 8003ad4:	b108      	cbz	r0, 8003ada <MX_TIM3_Init+0x36>
  {
    Error_Handler();
 8003ad6:	f7ff ff38 	bl	800394a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ade:	a902      	add	r1, sp, #8
 8003ae0:	4809      	ldr	r0, [pc, #36]	; (8003b08 <MX_TIM3_Init+0x64>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ae2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ae4:	f001 fa26 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8003ae8:	b108      	cbz	r0, 8003aee <MX_TIM3_Init+0x4a>
  {
    Error_Handler();
 8003aea:	f7ff ff2e 	bl	800394a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aee:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003af0:	4669      	mov	r1, sp
 8003af2:	4805      	ldr	r0, [pc, #20]	; (8003b08 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af4:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af6:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003af8:	f001 fab0 	bl	800505c <HAL_TIMEx_MasterConfigSynchronization>
 8003afc:	b108      	cbz	r0, 8003b02 <MX_TIM3_Init+0x5e>
  {
    Error_Handler();
 8003afe:	f7ff ff24 	bl	800394a <Error_Handler>
  }

}
 8003b02:	b007      	add	sp, #28
 8003b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b08:	200001ec 	.word	0x200001ec
 8003b0c:	40000400 	.word	0x40000400

08003b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8003b10:	6803      	ldr	r3, [r0, #0]
{
 8003b12:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d10d      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b1a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	f042 0201 	orr.w	r2, r2, #1
 8003b24:	61da      	str	r2, [r3, #28]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b30:	b003      	add	sp, #12
 8003b32:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM3)
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <HAL_TIM_Base_MspInit+0x54>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d1f9      	bne.n	8003b30 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b3c:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <HAL_TIM_Base_MspInit+0x58>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b3e:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	f042 0202 	orr.w	r2, r2, #2
 8003b46:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b48:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b4a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b4c:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b56:	f000 fbd1 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b5a:	201d      	movs	r0, #29
 8003b5c:	f000 fc02 	bl	8004364 <HAL_NVIC_EnableIRQ>
}
 8003b60:	e7e6      	b.n	8003b30 <HAL_TIM_Base_MspInit+0x20>
 8003b62:	bf00      	nop
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40021000 	.word	0x40021000

08003b6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b6c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 100000;
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
  huart2.Init.StopBits = UART_STOPBITS_2;
 8003b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b72:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
  huart2.Instance = USART2;
 8003b76:	480a      	ldr	r0, [pc, #40]	; (8003ba0 <MX_USART2_UART_Init+0x34>)
  huart2.Init.StopBits = UART_STOPBITS_2;
 8003b78:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <MX_USART2_UART_Init+0x38>)
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <MX_USART2_UART_Init+0x3c>)
 8003b7c:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b84:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b86:	230c      	movs	r3, #12
 8003b88:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b8e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b90:	f001 fae0 	bl	8005154 <HAL_UART_Init>
 8003b94:	b118      	cbz	r0, 8003b9e <MX_USART2_UART_Init+0x32>
  {
    Error_Handler();
  }

}
 8003b96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003b9a:	f7ff bed6 	b.w	800394a <Error_Handler>
 8003b9e:	bd08      	pop	{r3, pc}
 8003ba0:	2000027c 	.word	0x2000027c
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	000186a0 	.word	0x000186a0

08003bac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bac:	b510      	push	{r4, lr}
 8003bae:	4604      	mov	r4, r0
 8003bb0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	a802      	add	r0, sp, #8
 8003bb8:	f002 fef2 	bl	80069a0 <memset>
  if(uartHandle->Instance==USART2)
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	4b1a      	ldr	r3, [pc, #104]	; (8003c28 <HAL_UART_MspInit+0x7c>)
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d12f      	bne.n	8003c24 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bc4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003bc8:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bca:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003bd0:	61da      	str	r2, [r3, #28]
 8003bd2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd4:	4815      	ldr	r0, [pc, #84]	; (8003c2c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bd6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003bda:	9200      	str	r2, [sp, #0]
 8003bdc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bde:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be0:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	f042 0204 	orr.w	r2, r2, #4
 8003be6:	619a      	str	r2, [r3, #24]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bfe:	f000 fc31 	bl	8004464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c02:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c04:	4809      	ldr	r0, [pc, #36]	; (8003c2c <HAL_UART_MspInit+0x80>)
 8003c06:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003c0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c0c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c10:	f000 fc28 	bl	8004464 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c14:	2026      	movs	r0, #38	; 0x26
 8003c16:	4622      	mov	r2, r4
 8003c18:	4621      	mov	r1, r4
 8003c1a:	f000 fb6f 	bl	80042fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c1e:	2026      	movs	r0, #38	; 0x26
 8003c20:	f000 fba0 	bl	8004364 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c24:	b006      	add	sp, #24
 8003c26:	bd10      	pop	{r4, pc}
 8003c28:	40004400 	.word	0x40004400
 8003c2c:	40010800 	.word	0x40010800

08003c30 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003c30:	b508      	push	{r3, lr}

  if(uartHandle->Instance==USART2)
 8003c32:	6802      	ldr	r2, [r0, #0]
 8003c34:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_UART_MspDeInit+0x28>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d10d      	bne.n	8003c56 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_UART_MspDeInit+0x2c>)
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003c3c:	4808      	ldr	r0, [pc, #32]	; (8003c60 <HAL_UART_MspDeInit+0x30>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8003c3e:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003c40:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8003c42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c46:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003c48:	f000 fcee 	bl	8004628 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
} 
 8003c4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003c50:	2026      	movs	r0, #38	; 0x26
 8003c52:	f000 bb95 	b.w	8004380 <HAL_NVIC_DisableIRQ>
 8003c56:	bd08      	pop	{r3, pc}
 8003c58:	40004400 	.word	0x40004400
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40010800 	.word	0x40010800

08003c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c64:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c66:	4b0e      	ldr	r3, [pc, #56]	; (8003ca0 <HAL_InitTick+0x3c>)
{
 8003c68:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c6a:	7818      	ldrb	r0, [r3, #0]
 8003c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c70:	fbb3 f3f0 	udiv	r3, r3, r0
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_InitTick+0x40>)
 8003c76:	6810      	ldr	r0, [r2, #0]
 8003c78:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c7c:	f000 fb94 	bl	80043a8 <HAL_SYSTICK_Config>
 8003c80:	4604      	mov	r4, r0
 8003c82:	b958      	cbnz	r0, 8003c9c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c84:	2d0f      	cmp	r5, #15
 8003c86:	d809      	bhi.n	8003c9c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	f000 fb34 	bl	80042fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_InitTick+0x44>)
 8003c96:	4620      	mov	r0, r4
 8003c98:	601d      	str	r5, [r3, #0]
 8003c9a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c9c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003c9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ca0:	2000000c 	.word	0x2000000c
 8003ca4:	20000008 	.word	0x20000008
 8003ca8:	20000010 	.word	0x20000010

08003cac <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cac:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <HAL_Init+0x20>)
{
 8003cae:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cb4:	f043 0310 	orr.w	r3, r3, #16
 8003cb8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cba:	f000 fb0d 	bl	80042d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7ff ffd0 	bl	8003c64 <HAL_InitTick>
  HAL_MspInit();
 8003cc4:	f7ff fe48 	bl	8003958 <HAL_MspInit>
}
 8003cc8:	2000      	movs	r0, #0
 8003cca:	bd08      	pop	{r3, pc}
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003cd0:	4a03      	ldr	r2, [pc, #12]	; (8003ce0 <HAL_IncTick+0x10>)
 8003cd2:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_IncTick+0x14>)
 8003cd4:	6811      	ldr	r1, [r2, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	440b      	add	r3, r1
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200002bc 	.word	0x200002bc
 8003ce4:	2000000c 	.word	0x2000000c

08003ce8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ce8:	4b01      	ldr	r3, [pc, #4]	; (8003cf0 <HAL_GetTick+0x8>)
 8003cea:	6818      	ldr	r0, [r3, #0]
}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	200002bc 	.word	0x200002bc

08003cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003cf4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d06e      	beq.n	8003dda <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003cfc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003d00:	b90b      	cbnz	r3, 8003d06 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d02:	f7ff fc4f 	bl	80035a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003d06:	6822      	ldr	r2, [r4, #0]
 8003d08:	6813      	ldr	r3, [r2, #0]
 8003d0a:	f023 0302 	bic.w	r3, r3, #2
 8003d0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d10:	f7ff ffea 	bl	8003ce8 <HAL_GetTick>
 8003d14:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	0791      	lsls	r1, r2, #30
 8003d1c:	d451      	bmi.n	8003dc2 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d26:	f7ff ffdf 	bl	8003ce8 <HAL_GetTick>
 8003d2a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	07d2      	lsls	r2, r2, #31
 8003d32:	d554      	bpl.n	8003dde <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d34:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d36:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003d38:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	bf0c      	ite	eq
 8003d3e:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003d42:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8003d46:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8003d48:	7e62      	ldrb	r2, [r4, #25]
 8003d4a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	bf0c      	ite	eq
 8003d50:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003d54:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8003d58:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d5a:	7ea2      	ldrb	r2, [r4, #26]
 8003d5c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	bf0c      	ite	eq
 8003d62:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d66:	f022 0220 	bicne.w	r2, r2, #32
 8003d6a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d6c:	7ee2      	ldrb	r2, [r4, #27]
 8003d6e:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	bf0c      	ite	eq
 8003d74:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d78:	f042 0210 	orrne.w	r2, r2, #16
 8003d7c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d7e:	7f22      	ldrb	r2, [r4, #28]
 8003d80:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	bf0c      	ite	eq
 8003d86:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d8a:	f022 0208 	bicne.w	r2, r2, #8
 8003d8e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d90:	7f62      	ldrb	r2, [r4, #29]
 8003d92:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	bf0c      	ite	eq
 8003d98:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d9c:	f022 0204 	bicne.w	r2, r2, #4
 8003da0:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003da2:	68e1      	ldr	r1, [r4, #12]
 8003da4:	68a2      	ldr	r2, [r4, #8]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	6921      	ldr	r1, [r4, #16]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	6961      	ldr	r1, [r4, #20]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	6861      	ldr	r1, [r4, #4]
 8003db2:	3901      	subs	r1, #1
 8003db4:	430a      	orrs	r2, r1
 8003db6:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003db8:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dba:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8003dbc:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dc2:	f7ff ff91 	bl	8003ce8 <HAL_GetTick>
 8003dc6:	1b40      	subs	r0, r0, r5
 8003dc8:	280a      	cmp	r0, #10
 8003dca:	d9a4      	bls.n	8003d16 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd2:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8003dda:	2001      	movs	r0, #1
}
 8003ddc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dde:	f7ff ff83 	bl	8003ce8 <HAL_GetTick>
 8003de2:	1b40      	subs	r0, r0, r5
 8003de4:	280a      	cmp	r0, #10
 8003de6:	d9a1      	bls.n	8003d2c <HAL_CAN_Init+0x38>
 8003de8:	e7f0      	b.n	8003dcc <HAL_CAN_Init+0xd8>

08003dea <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dea:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003dee:	b570      	push	{r4, r5, r6, lr}

  if ((state == HAL_CAN_STATE_READY) ||
 8003df0:	3b01      	subs	r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d85f      	bhi.n	8003eb6 <HAL_CAN_ConfigFilter+0xcc>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003df6:	2401      	movs	r4, #1
  CAN_TypeDef *can_ip = hcan->Instance;
 8003df8:	6803      	ldr	r3, [r0, #0]
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003dfa:	6948      	ldr	r0, [r1, #20]
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003dfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e08:	f000 021f 	and.w	r2, r0, #31
 8003e0c:	fa04 f202 	lsl.w	r2, r4, r2

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e10:	43d4      	mvns	r4, r2
 8003e12:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
 8003e16:	4025      	ands	r5, r4
 8003e18:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e1c:	69cd      	ldr	r5, [r1, #28]
 8003e1e:	bb85      	cbnz	r5, 8003e82 <HAL_CAN_ConfigFilter+0x98>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e20:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e24:	68ce      	ldr	r6, [r1, #12]
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e26:	4025      	ands	r5, r4
 8003e28:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e2c:	888d      	ldrh	r5, [r1, #4]
 8003e2e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e32:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e36:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e3a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e3c:	880d      	ldrh	r5, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e3e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e42:	f8c0 5244 	str.w	r5, [r0, #580]	; 0x244
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e46:	6988      	ldr	r0, [r1, #24]
 8003e48:	bb68      	cbnz	r0, 8003ea6 <HAL_CAN_ConfigFilter+0xbc>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e4a:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003e4e:	4020      	ands	r0, r4
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e50:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e54:	6908      	ldr	r0, [r1, #16]
 8003e56:	bb50      	cbnz	r0, 8003eae <HAL_CAN_ConfigFilter+0xc4>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e58:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003e5c:	4020      	ands	r0, r4
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e5e:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e62:	6a09      	ldr	r1, [r1, #32]

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);

    /* Return function status */
    return HAL_OK;
 8003e64:	2000      	movs	r0, #0
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e66:	2901      	cmp	r1, #1
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e68:	bf02      	ittt	eq
 8003e6a:	f8d3 121c 	ldreq.w	r1, [r3, #540]	; 0x21c
 8003e6e:	430a      	orreq	r2, r1
 8003e70:	f8c3 221c 	streq.w	r2, [r3, #540]	; 0x21c
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e74:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003e82:	2d01      	cmp	r5, #1
 8003e84:	d1df      	bne.n	8003e46 <HAL_CAN_ConfigFilter+0x5c>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e86:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e8a:	680e      	ldr	r6, [r1, #0]
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003e8c:	4315      	orrs	r5, r2
 8003e8e:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e92:	888d      	ldrh	r5, [r1, #4]
 8003e94:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003e98:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e9c:	f8c0 5240 	str.w	r5, [r0, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea0:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003ea2:	898d      	ldrh	r5, [r1, #12]
 8003ea4:	e7cb      	b.n	8003e3e <HAL_CAN_ConfigFilter+0x54>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ea6:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8003eaa:	4310      	orrs	r0, r2
 8003eac:	e7d0      	b.n	8003e50 <HAL_CAN_ConfigFilter+0x66>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003eae:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 8003eb2:	4310      	orrs	r0, r2
 8003eb4:	e7d3      	b.n	8003e5e <HAL_CAN_ConfigFilter+0x74>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003eb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ebc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003ebe:	2001      	movs	r0, #1
  }
}
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}

08003ec2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003ec2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003ec4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 8003ec8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d11f      	bne.n	8003f0e <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ece:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ed0:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ed2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ed6:	6813      	ldr	r3, [r2, #0]
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7ff ff03 	bl	8003ce8 <HAL_GetTick>
 8003ee2:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	6858      	ldr	r0, [r3, #4]
 8003ee8:	f010 0001 	ands.w	r0, r0, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eee:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ef0:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ef2:	f7ff fef9 	bl	8003ce8 <HAL_GetTick>
 8003ef6:	1b40      	subs	r0, r0, r5
 8003ef8:	280a      	cmp	r0, #10
 8003efa:	d9f3      	bls.n	8003ee4 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f02:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8003f04:	2305      	movs	r3, #5
 8003f06:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8003f0a:	2001      	movs	r0, #1
  }
}
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f14:	6243      	str	r3, [r0, #36]	; 0x24
 8003f16:	e7f8      	b.n	8003f0a <HAL_CAN_Start+0x48>

08003f18 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f1a:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f1e:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f20:	3d01      	subs	r5, #1
 8003f22:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f24:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8003f26:	d841      	bhi.n	8003fac <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f28:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8003f2c:	d03a      	beq.n	8003fa4 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f2e:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f32:	2c03      	cmp	r4, #3
 8003f34:	f04f 0501 	mov.w	r5, #1
 8003f38:	d105      	bne.n	8003f46 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f3a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f40:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003f42:	2001      	movs	r0, #1
  }
}
 8003f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f46:	40a5      	lsls	r5, r4
 8003f48:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8003f4a:	6888      	ldr	r0, [r1, #8]
 8003f4c:	68cf      	ldr	r7, [r1, #12]
 8003f4e:	f104 0318 	add.w	r3, r4, #24
 8003f52:	bb10      	cbnz	r0, 8003f9a <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f54:	6808      	ldr	r0, [r1, #0]
 8003f56:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f5e:	6908      	ldr	r0, [r1, #16]
 8003f60:	0124      	lsls	r4, r4, #4
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f62:	7d09      	ldrb	r1, [r1, #20]
 8003f64:	1933      	adds	r3, r6, r4
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f66:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f6a:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f6c:	bf08      	it	eq
 8003f6e:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f72:	4434      	add	r4, r6
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003f74:	bf04      	itt	eq
 8003f76:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8003f7a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f7e:	6851      	ldr	r1, [r2, #4]
      return HAL_OK;
 8003f80:	2000      	movs	r0, #0
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003f82:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f8c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      return HAL_OK;
 8003f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f9a:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8003f9c:	4338      	orrs	r0, r7
 8003f9e:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8003fa2:	e7da      	b.n	8003f5a <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003faa:	e7c9      	b.n	8003f40 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb2:	e7c5      	b.n	8003f40 <HAL_CAN_AddTxMessage+0x28>

08003fb4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb6:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fba:	3c01      	subs	r4, #1
 8003fbc:	2c01      	cmp	r4, #1
 8003fbe:	d86b      	bhi.n	8004098 <HAL_CAN_GetRxMessage+0xe4>
 8003fc0:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fc2:	b941      	cbnz	r1, 8003fd6 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fc4:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fc6:	07a4      	lsls	r4, r4, #30
 8003fc8:	d107      	bne.n	8003fda <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fd0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8003fd2:	2001      	movs	r0, #1
  }
}
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fd6:	6934      	ldr	r4, [r6, #16]
 8003fd8:	e7f5      	b.n	8003fc6 <HAL_CAN_GetRxMessage+0x12>
 8003fda:	010c      	lsls	r4, r1, #4
 8003fdc:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003fde:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003fe2:	f007 0704 	and.w	r7, r7, #4
 8003fe6:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	d14b      	bne.n	8004084 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003fec:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8003ff0:	0d7f      	lsrs	r7, r7, #21
 8003ff2:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ff4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ff8:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003ffa:	f007 0702 	and.w	r7, r7, #2
 8003ffe:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004000:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8004004:	f007 070f 	and.w	r7, r7, #15
 8004008:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800400a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800400e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004012:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004016:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004018:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800401a:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800401c:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004020:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004022:	6802      	ldr	r2, [r0, #0]
 8004024:	4422      	add	r2, r4
 8004026:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800402a:	0a12      	lsrs	r2, r2, #8
 800402c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800402e:	6802      	ldr	r2, [r0, #0]
 8004030:	4422      	add	r2, r4
 8004032:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004036:	0c12      	lsrs	r2, r2, #16
 8004038:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	4422      	add	r2, r4
 800403e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004042:	0e12      	lsrs	r2, r2, #24
 8004044:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004046:	6802      	ldr	r2, [r0, #0]
 8004048:	4422      	add	r2, r4
 800404a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800404e:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004050:	6802      	ldr	r2, [r0, #0]
 8004052:	4422      	add	r2, r4
 8004054:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004058:	0a12      	lsrs	r2, r2, #8
 800405a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800405c:	6802      	ldr	r2, [r0, #0]
 800405e:	4422      	add	r2, r4
 8004060:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004064:	0c12      	lsrs	r2, r2, #16
 8004066:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004068:	6802      	ldr	r2, [r0, #0]
 800406a:	4414      	add	r4, r2
 800406c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8004070:	0e12      	lsrs	r2, r2, #24
 8004072:	71da      	strb	r2, [r3, #7]
 8004074:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004076:	b951      	cbnz	r1, 800408e <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	f042 0220 	orr.w	r2, r2, #32
 800407e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 8004080:	2000      	movs	r0, #0
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004084:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004088:	08ff      	lsrs	r7, r7, #3
 800408a:	6057      	str	r7, [r2, #4]
 800408c:	e7b2      	b.n	8003ff4 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	f042 0220 	orr.w	r2, r2, #32
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e7f3      	b.n	8004080 <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004098:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800409a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409e:	e797      	b.n	8003fd0 <HAL_CAN_GetRxMessage+0x1c>

080040a0 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80040a0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80040a4:	3b01      	subs	r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d805      	bhi.n	80040b6 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040aa:	6802      	ldr	r2, [r0, #0]

    /* Return function status */
    return HAL_OK;
 80040ac:	2000      	movs	r0, #0
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80040ae:	6953      	ldr	r3, [r2, #20]
 80040b0:	4319      	orrs	r1, r3
 80040b2:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 80040b4:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80040be:	2001      	movs	r0, #1
  }
}
 80040c0:	4770      	bx	lr

080040c2 <HAL_CAN_TxMailbox0CompleteCallback>:
 80040c2:	4770      	bx	lr

080040c4 <HAL_CAN_TxMailbox1CompleteCallback>:
 80040c4:	4770      	bx	lr

080040c6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80040c6:	4770      	bx	lr

080040c8 <HAL_CAN_TxMailbox0AbortCallback>:
 80040c8:	4770      	bx	lr

080040ca <HAL_CAN_TxMailbox1AbortCallback>:
 80040ca:	4770      	bx	lr

080040cc <HAL_CAN_TxMailbox2AbortCallback>:
 80040cc:	4770      	bx	lr

080040ce <HAL_CAN_RxFifo0FullCallback>:
 80040ce:	4770      	bx	lr

080040d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
 80040d0:	4770      	bx	lr

080040d2 <HAL_CAN_RxFifo1FullCallback>:
 80040d2:	4770      	bx	lr

080040d4 <HAL_CAN_SleepCallback>:
 80040d4:	4770      	bx	lr

080040d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
 80040d6:	4770      	bx	lr

080040d8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80040d8:	4770      	bx	lr

080040da <HAL_CAN_IRQHandler>:
{
 80040da:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040de:	6803      	ldr	r3, [r0, #0]
{
 80040e0:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80040e2:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80040e4:	f8d3 9004 	ldr.w	r9, [r3, #4]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040e8:	f016 0401 	ands.w	r4, r6, #1
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80040ec:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040ee:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040f2:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040f6:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040fa:	d022      	beq.n	8004142 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040fc:	f017 0401 	ands.w	r4, r7, #1
 8004100:	d007      	beq.n	8004112 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004102:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004104:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004106:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004108:	f140 80a3 	bpl.w	8004252 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800410c:	f7ff ffd9 	bl	80040c2 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004110:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004112:	05fb      	lsls	r3, r7, #23
 8004114:	d509      	bpl.n	800412a <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800411a:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800411c:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800411e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004120:	f140 80a5 	bpl.w	800426e <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004124:	4628      	mov	r0, r5
 8004126:	f7ff ffcd 	bl	80040c4 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800412a:	03fb      	lsls	r3, r7, #15
 800412c:	d509      	bpl.n	8004142 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800412e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004132:	682b      	ldr	r3, [r5, #0]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004134:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004136:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004138:	f140 80a7 	bpl.w	800428a <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800413c:	4628      	mov	r0, r5
 800413e:	f7ff ffc2 	bl	80040c6 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004142:	0733      	lsls	r3, r6, #28
 8004144:	d507      	bpl.n	8004156 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004146:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800414a:	bf1f      	itttt	ne
 800414c:	2210      	movne	r2, #16
 800414e:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004150:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004154:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004156:	0777      	lsls	r7, r6, #29
 8004158:	d508      	bpl.n	800416c <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800415a:	f01b 0f08 	tst.w	fp, #8
 800415e:	d005      	beq.n	800416c <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004160:	2208      	movs	r2, #8
 8004162:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004164:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004166:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004168:	f7ff ffb1 	bl	80040ce <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800416c:	07b0      	lsls	r0, r6, #30
 800416e:	d506      	bpl.n	800417e <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0799      	lsls	r1, r3, #30
 8004176:	d002      	beq.n	800417e <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004178:	4628      	mov	r0, r5
 800417a:	f7ff fa9b 	bl	80036b4 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800417e:	0672      	lsls	r2, r6, #25
 8004180:	d507      	bpl.n	8004192 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004182:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004186:	bf1f      	itttt	ne
 8004188:	2210      	movne	r2, #16
 800418a:	682b      	ldrne	r3, [r5, #0]
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800418c:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004190:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004192:	06b3      	lsls	r3, r6, #26
 8004194:	d508      	bpl.n	80041a8 <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004196:	f01a 0f08 	tst.w	sl, #8
 800419a:	d005      	beq.n	80041a8 <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800419c:	2208      	movs	r2, #8
 800419e:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80041a0:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80041a2:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 80041a4:	f7ff ff95 	bl	80040d2 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80041a8:	06f7      	lsls	r7, r6, #27
 80041aa:	d506      	bpl.n	80041ba <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80041ac:	682b      	ldr	r3, [r5, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	0798      	lsls	r0, r3, #30
 80041b2:	d002      	beq.n	80041ba <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80041b4:	4628      	mov	r0, r5
 80041b6:	f7ff ff8b 	bl	80040d0 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80041ba:	03b1      	lsls	r1, r6, #14
 80041bc:	d508      	bpl.n	80041d0 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80041be:	f019 0f10 	tst.w	r9, #16
 80041c2:	d005      	beq.n	80041d0 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041c4:	2210      	movs	r2, #16
 80041c6:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_SleepCallback(hcan);
 80041c8:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041ca:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 80041cc:	f7ff ff82 	bl	80040d4 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80041d0:	03f2      	lsls	r2, r6, #15
 80041d2:	d508      	bpl.n	80041e6 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041d4:	f019 0f08 	tst.w	r9, #8
 80041d8:	d005      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041da:	2208      	movs	r2, #8
 80041dc:	682b      	ldr	r3, [r5, #0]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041de:	4628      	mov	r0, r5
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041e0:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80041e2:	f7ff ff78 	bl	80040d6 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80041e6:	0433      	lsls	r3, r6, #16
 80041e8:	d52a      	bpl.n	8004240 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041ea:	f019 0f04 	tst.w	r9, #4
 80041ee:	682a      	ldr	r2, [r5, #0]
 80041f0:	d024      	beq.n	800423c <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041f2:	05f7      	lsls	r7, r6, #23
 80041f4:	d504      	bpl.n	8004200 <HAL_CAN_IRQHandler+0x126>
 80041f6:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80041fa:	bf18      	it	ne
 80041fc:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004200:	05b0      	lsls	r0, r6, #22
 8004202:	d504      	bpl.n	800420e <HAL_CAN_IRQHandler+0x134>
 8004204:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8004208:	bf18      	it	ne
 800420a:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800420e:	0571      	lsls	r1, r6, #21
 8004210:	d504      	bpl.n	800421c <HAL_CAN_IRQHandler+0x142>
 8004212:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8004216:	bf18      	it	ne
 8004218:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800421c:	0533      	lsls	r3, r6, #20
 800421e:	d50d      	bpl.n	800423c <HAL_CAN_IRQHandler+0x162>
 8004220:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8004224:	d00a      	beq.n	800423c <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	d04c      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x1ea>
 800422a:	d83c      	bhi.n	80042a6 <HAL_CAN_IRQHandler+0x1cc>
 800422c:	2b10      	cmp	r3, #16
 800422e:	d043      	beq.n	80042b8 <HAL_CAN_IRQHandler+0x1de>
 8004230:	2b20      	cmp	r3, #32
 8004232:	d044      	beq.n	80042be <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004234:	6993      	ldr	r3, [r2, #24]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800423c:	2304      	movs	r3, #4
 800423e:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004240:	b12c      	cbz	r4, 800424e <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8004242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8004244:	4628      	mov	r0, r5
    hcan->ErrorCode |= errorcode;
 8004246:	431c      	orrs	r4, r3
 8004248:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 800424a:	f7ff ff45 	bl	80040d8 <HAL_CAN_ErrorCallback>
 800424e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004252:	077a      	lsls	r2, r7, #29
 8004254:	d405      	bmi.n	8004262 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004256:	f017 0408 	ands.w	r4, r7, #8
 800425a:	d105      	bne.n	8004268 <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800425c:	f7ff ff34 	bl	80040c8 <HAL_CAN_TxMailbox0AbortCallback>
 8004260:	e757      	b.n	8004112 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004262:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8004266:	e754      	b.n	8004112 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004268:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800426c:	e751      	b.n	8004112 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800426e:	0579      	lsls	r1, r7, #21
 8004270:	d502      	bpl.n	8004278 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004272:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8004276:	e758      	b.n	800412a <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004278:	053a      	lsls	r2, r7, #20
 800427a:	d502      	bpl.n	8004282 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800427c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004280:	e753      	b.n	800412a <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004282:	4628      	mov	r0, r5
 8004284:	f7ff ff21 	bl	80040ca <HAL_CAN_TxMailbox1AbortCallback>
 8004288:	e74f      	b.n	800412a <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800428a:	0379      	lsls	r1, r7, #13
 800428c:	d502      	bpl.n	8004294 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800428e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8004292:	e756      	b.n	8004142 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004294:	033a      	lsls	r2, r7, #12
 8004296:	d502      	bpl.n	800429e <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004298:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800429c:	e751      	b.n	8004142 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800429e:	4628      	mov	r0, r5
 80042a0:	f7ff ff14 	bl	80040cc <HAL_CAN_TxMailbox2AbortCallback>
 80042a4:	e74d      	b.n	8004142 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 80042a6:	2b50      	cmp	r3, #80	; 0x50
 80042a8:	d00f      	beq.n	80042ca <HAL_CAN_IRQHandler+0x1f0>
 80042aa:	2b60      	cmp	r3, #96	; 0x60
 80042ac:	d010      	beq.n	80042d0 <HAL_CAN_IRQHandler+0x1f6>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d1c0      	bne.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 80042b2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 80042b6:	e7bd      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 80042b8:	f044 0408 	orr.w	r4, r4, #8
            break;
 80042bc:	e7ba      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80042be:	f044 0410 	orr.w	r4, r4, #16
            break;
 80042c2:	e7b7      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80042c4:	f044 0420 	orr.w	r4, r4, #32
            break;
 80042c8:	e7b4      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 80042ca:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 80042ce:	e7b1      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80042d0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 80042d4:	e7ae      	b.n	8004234 <HAL_CAN_IRQHandler+0x15a>
	...

080042d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4a07      	ldr	r2, [pc, #28]	; (80042f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042da:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042dc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80042de:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	0c1b      	lsrs	r3, r3, #16
 80042ea:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80042f2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042fe:	b530      	push	{r4, r5, lr}
 8004300:	68dc      	ldr	r4, [r3, #12]
 8004302:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004306:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800430c:	2b04      	cmp	r3, #4
 800430e:	bf28      	it	cs
 8004310:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004312:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004318:	bf98      	it	ls
 800431a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	fa05 f303 	lsl.w	r3, r5, r3
 8004320:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004324:	bf88      	it	hi
 8004326:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	4019      	ands	r1, r3
 800432a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800432c:	fa05 f404 	lsl.w	r4, r5, r4
 8004330:	3c01      	subs	r4, #1
 8004332:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004334:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004336:	ea42 0201 	orr.w	r2, r2, r1
 800433a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	bfa9      	itett	ge
 8004340:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004344:	4b06      	ldrlt	r3, [pc, #24]	; (8004360 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004346:	b2d2      	uxtbge	r2, r2
 8004348:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434c:	bfbb      	ittet	lt
 800434e:	f000 000f 	andlt.w	r0, r0, #15
 8004352:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004354:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004358:	541a      	strblt	r2, [r3, r0]
 800435a:	bd30      	pop	{r4, r5, pc}
 800435c:	e000ed00 	.word	0xe000ed00
 8004360:	e000ed14 	.word	0xe000ed14

08004364 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004364:	2800      	cmp	r0, #0
 8004366:	db08      	blt.n	800437a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004368:	2301      	movs	r3, #1
 800436a:	0942      	lsrs	r2, r0, #5
 800436c:	f000 001f 	and.w	r0, r0, #31
 8004370:	fa03 f000 	lsl.w	r0, r3, r0
 8004374:	4b01      	ldr	r3, [pc, #4]	; (800437c <HAL_NVIC_EnableIRQ+0x18>)
 8004376:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800437a:	4770      	bx	lr
 800437c:	e000e100 	.word	0xe000e100

08004380 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004380:	2800      	cmp	r0, #0
 8004382:	db0d      	blt.n	80043a0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004384:	2201      	movs	r2, #1
 8004386:	0943      	lsrs	r3, r0, #5
 8004388:	f000 001f 	and.w	r0, r0, #31
 800438c:	fa02 f000 	lsl.w	r0, r2, r0
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_NVIC_DisableIRQ+0x24>)
 8004392:	3320      	adds	r3, #32
 8004394:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	e000e100 	.word	0xe000e100

080043a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a8:	3801      	subs	r0, #1
 80043aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80043ae:	d20a      	bcs.n	80043c6 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	4a06      	ldr	r2, [pc, #24]	; (80043d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043bc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80043c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043d4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80043d8:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d003      	beq.n	80043e6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043de:	2304      	movs	r3, #4
 80043e0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80043e2:	2001      	movs	r0, #1
 80043e4:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	f022 020e 	bic.w	r2, r2, #14
 80043ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80043f8:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_DMA_Abort_IT+0x88>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_DMA_Abort_IT+0x6a>
 80043fe:	3214      	adds	r2, #20
 8004400:	4293      	cmp	r3, r2
 8004402:	d01e      	beq.n	8004442 <HAL_DMA_Abort_IT+0x6e>
 8004404:	3214      	adds	r2, #20
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_Abort_IT+0x72>
 800440a:	3214      	adds	r2, #20
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_Abort_IT+0x78>
 8004410:	3214      	adds	r2, #20
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_DMA_Abort_IT+0x7e>
 8004416:	3214      	adds	r2, #20
 8004418:	4293      	cmp	r3, r2
 800441a:	bf0c      	ite	eq
 800441c:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8004420:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8004424:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004426:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004428:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800442a:	2301      	movs	r3, #1
 800442c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004430:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8004432:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8004436:	b17b      	cbz	r3, 8004458 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8004438:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	4620      	mov	r0, r4
 800443c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800443e:	2301      	movs	r3, #1
 8004440:	e7f0      	b.n	8004424 <HAL_DMA_Abort_IT+0x50>
 8004442:	2310      	movs	r3, #16
 8004444:	e7ee      	b.n	8004424 <HAL_DMA_Abort_IT+0x50>
 8004446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800444a:	e7eb      	b.n	8004424 <HAL_DMA_Abort_IT+0x50>
 800444c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004450:	e7e8      	b.n	8004424 <HAL_DMA_Abort_IT+0x50>
 8004452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004456:	e7e5      	b.n	8004424 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8004458:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800445a:	bd10      	pop	{r4, pc}
 800445c:	40020008 	.word	0x40020008
 8004460:	40020000 	.word	0x40020000

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004468:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 800446a:	4626      	mov	r6, r4
 800446c:	4b66      	ldr	r3, [pc, #408]	; (8004608 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800446e:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8004618 <HAL_GPIO_Init+0x1b4>
 8004472:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 800461c <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004476:	680a      	ldr	r2, [r1, #0]
 8004478:	fa32 f506 	lsrs.w	r5, r2, r6
 800447c:	d102      	bne.n	8004484 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800447e:	b003      	add	sp, #12
 8004480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8004484:	f04f 0801 	mov.w	r8, #1
 8004488:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448c:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8004490:	4590      	cmp	r8, r2
 8004492:	d17f      	bne.n	8004594 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8004494:	684d      	ldr	r5, [r1, #4]
 8004496:	2d12      	cmp	r5, #18
 8004498:	f000 80aa 	beq.w	80045f0 <HAL_GPIO_Init+0x18c>
 800449c:	f200 8083 	bhi.w	80045a6 <HAL_GPIO_Init+0x142>
 80044a0:	2d02      	cmp	r5, #2
 80044a2:	f000 80a2 	beq.w	80045ea <HAL_GPIO_Init+0x186>
 80044a6:	d877      	bhi.n	8004598 <HAL_GPIO_Init+0x134>
 80044a8:	2d00      	cmp	r5, #0
 80044aa:	f000 8089 	beq.w	80045c0 <HAL_GPIO_Init+0x15c>
 80044ae:	2d01      	cmp	r5, #1
 80044b0:	f000 8099 	beq.w	80045e6 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044b4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044b8:	2aff      	cmp	r2, #255	; 0xff
 80044ba:	bf93      	iteet	ls
 80044bc:	4682      	movls	sl, r0
 80044be:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80044c2:	3d08      	subhi	r5, #8
 80044c4:	f8d0 b000 	ldrls.w	fp, [r0]
 80044c8:	bf92      	itee	ls
 80044ca:	00b5      	lslls	r5, r6, #2
 80044cc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80044d0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044d2:	fa09 f805 	lsl.w	r8, r9, r5
 80044d6:	ea2b 0808 	bic.w	r8, fp, r8
 80044da:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044de:	bf88      	it	hi
 80044e0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044e4:	ea48 0505 	orr.w	r5, r8, r5
 80044e8:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044ec:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80044f0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80044f4:	d04e      	beq.n	8004594 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80044f6:	4d45      	ldr	r5, [pc, #276]	; (800460c <HAL_GPIO_Init+0x1a8>)
 80044f8:	4f44      	ldr	r7, [pc, #272]	; (800460c <HAL_GPIO_Init+0x1a8>)
 80044fa:	69ad      	ldr	r5, [r5, #24]
 80044fc:	f026 0803 	bic.w	r8, r6, #3
 8004500:	f045 0501 	orr.w	r5, r5, #1
 8004504:	61bd      	str	r5, [r7, #24]
 8004506:	69bd      	ldr	r5, [r7, #24]
 8004508:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800450c:	f005 0501 	and.w	r5, r5, #1
 8004510:	9501      	str	r5, [sp, #4]
 8004512:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004516:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800451a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800451c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004520:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004524:	fa09 f90b 	lsl.w	r9, r9, fp
 8004528:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800452c:	4d38      	ldr	r5, [pc, #224]	; (8004610 <HAL_GPIO_Init+0x1ac>)
 800452e:	42a8      	cmp	r0, r5
 8004530:	d063      	beq.n	80045fa <HAL_GPIO_Init+0x196>
 8004532:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004536:	42a8      	cmp	r0, r5
 8004538:	d061      	beq.n	80045fe <HAL_GPIO_Init+0x19a>
 800453a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800453e:	42a8      	cmp	r0, r5
 8004540:	d05f      	beq.n	8004602 <HAL_GPIO_Init+0x19e>
 8004542:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004546:	42a8      	cmp	r0, r5
 8004548:	bf0c      	ite	eq
 800454a:	2503      	moveq	r5, #3
 800454c:	2504      	movne	r5, #4
 800454e:	fa05 f50b 	lsl.w	r5, r5, fp
 8004552:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004556:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800455a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800455c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8004560:	bf14      	ite	ne
 8004562:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004564:	4395      	biceq	r5, r2
 8004566:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8004568:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800456a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800456e:	bf14      	ite	ne
 8004570:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004572:	4395      	biceq	r5, r2
 8004574:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8004576:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004578:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800457c:	bf14      	ite	ne
 800457e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004580:	4395      	biceq	r5, r2
 8004582:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8004584:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004586:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800458a:	bf14      	ite	ne
 800458c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800458e:	ea25 0202 	biceq.w	r2, r5, r2
 8004592:	60da      	str	r2, [r3, #12]
	position++;
 8004594:	3601      	adds	r6, #1
 8004596:	e76e      	b.n	8004476 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8004598:	2d03      	cmp	r5, #3
 800459a:	d022      	beq.n	80045e2 <HAL_GPIO_Init+0x17e>
 800459c:	2d11      	cmp	r5, #17
 800459e:	d189      	bne.n	80044b4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045a0:	68cc      	ldr	r4, [r1, #12]
 80045a2:	3404      	adds	r4, #4
          break;
 80045a4:	e786      	b.n	80044b4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80045a6:	4f1b      	ldr	r7, [pc, #108]	; (8004614 <HAL_GPIO_Init+0x1b0>)
 80045a8:	42bd      	cmp	r5, r7
 80045aa:	d009      	beq.n	80045c0 <HAL_GPIO_Init+0x15c>
 80045ac:	d812      	bhi.n	80045d4 <HAL_GPIO_Init+0x170>
 80045ae:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004620 <HAL_GPIO_Init+0x1bc>
 80045b2:	454d      	cmp	r5, r9
 80045b4:	d004      	beq.n	80045c0 <HAL_GPIO_Init+0x15c>
 80045b6:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80045ba:	454d      	cmp	r5, r9
 80045bc:	f47f af7a 	bne.w	80044b4 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045c0:	688c      	ldr	r4, [r1, #8]
 80045c2:	b1c4      	cbz	r4, 80045f6 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045c4:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80045c6:	bf0c      	ite	eq
 80045c8:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80045cc:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045d0:	2408      	movs	r4, #8
 80045d2:	e76f      	b.n	80044b4 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80045d4:	4575      	cmp	r5, lr
 80045d6:	d0f3      	beq.n	80045c0 <HAL_GPIO_Init+0x15c>
 80045d8:	4565      	cmp	r5, ip
 80045da:	d0f1      	beq.n	80045c0 <HAL_GPIO_Init+0x15c>
 80045dc:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8004624 <HAL_GPIO_Init+0x1c0>
 80045e0:	e7eb      	b.n	80045ba <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80045e2:	2400      	movs	r4, #0
 80045e4:	e766      	b.n	80044b4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045e6:	68cc      	ldr	r4, [r1, #12]
          break;
 80045e8:	e764      	b.n	80044b4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045ea:	68cc      	ldr	r4, [r1, #12]
 80045ec:	3408      	adds	r4, #8
          break;
 80045ee:	e761      	b.n	80044b4 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045f0:	68cc      	ldr	r4, [r1, #12]
 80045f2:	340c      	adds	r4, #12
          break;
 80045f4:	e75e      	b.n	80044b4 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045f6:	2404      	movs	r4, #4
 80045f8:	e75c      	b.n	80044b4 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80045fa:	2500      	movs	r5, #0
 80045fc:	e7a7      	b.n	800454e <HAL_GPIO_Init+0xea>
 80045fe:	2501      	movs	r5, #1
 8004600:	e7a5      	b.n	800454e <HAL_GPIO_Init+0xea>
 8004602:	2502      	movs	r5, #2
 8004604:	e7a3      	b.n	800454e <HAL_GPIO_Init+0xea>
 8004606:	bf00      	nop
 8004608:	40010400 	.word	0x40010400
 800460c:	40021000 	.word	0x40021000
 8004610:	40010800 	.word	0x40010800
 8004614:	10210000 	.word	0x10210000
 8004618:	10310000 	.word	0x10310000
 800461c:	10320000 	.word	0x10320000
 8004620:	10110000 	.word	0x10110000
 8004624:	10220000 	.word	0x10220000

08004628 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800462c:	f04f 0a04 	mov.w	sl, #4
  uint32_t position = 0x00u;
 8004630:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004632:	f04f 0901 	mov.w	r9, #1
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004636:	f04f 0c0f 	mov.w	ip, #15
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800463a:	4a30      	ldr	r2, [pc, #192]	; (80046fc <HAL_GPIO_DeInit+0xd4>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800463c:	eb00 0b0a 	add.w	fp, r0, sl
  while ((GPIO_Pin >> position) != 0u)
 8004640:	fa31 f403 	lsrs.w	r4, r1, r3
 8004644:	d101      	bne.n	800464a <HAL_GPIO_DeInit+0x22>
      CLEAR_BIT(GPIOx->ODR, iocurrent);
    }

    position++;
  }
}
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800464a:	fa09 f603 	lsl.w	r6, r9, r3
    if (iocurrent)
 800464e:	400e      	ands	r6, r1
 8004650:	d04c      	beq.n	80046ec <HAL_GPIO_DeInit+0xc4>
 8004652:	f023 0403 	bic.w	r4, r3, #3
 8004656:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800465a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800465e:	f003 0703 	and.w	r7, r3, #3
      tmp = AFIO->EXTICR[position >> 2u];
 8004662:	68a5      	ldr	r5, [r4, #8]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8004664:	00bf      	lsls	r7, r7, #2
 8004666:	fa0c f807 	lsl.w	r8, ip, r7
 800466a:	ea05 0e08 	and.w	lr, r5, r8
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800466e:	4d24      	ldr	r5, [pc, #144]	; (8004700 <HAL_GPIO_DeInit+0xd8>)
 8004670:	42a8      	cmp	r0, r5
 8004672:	d03d      	beq.n	80046f0 <HAL_GPIO_DeInit+0xc8>
 8004674:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004678:	42a8      	cmp	r0, r5
 800467a:	d03b      	beq.n	80046f4 <HAL_GPIO_DeInit+0xcc>
 800467c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004680:	42a8      	cmp	r0, r5
 8004682:	d039      	beq.n	80046f8 <HAL_GPIO_DeInit+0xd0>
 8004684:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004688:	42a8      	cmp	r0, r5
 800468a:	bf0c      	ite	eq
 800468c:	2503      	moveq	r5, #3
 800468e:	2504      	movne	r5, #4
 8004690:	40bd      	lsls	r5, r7
 8004692:	45ae      	cmp	lr, r5
 8004694:	ea6f 0506 	mvn.w	r5, r6
 8004698:	d10f      	bne.n	80046ba <HAL_GPIO_DeInit+0x92>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800469a:	68a7      	ldr	r7, [r4, #8]
 800469c:	ea27 0708 	bic.w	r7, r7, r8
 80046a0:	60a7      	str	r7, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80046a2:	6814      	ldr	r4, [r2, #0]
 80046a4:	402c      	ands	r4, r5
 80046a6:	6014      	str	r4, [r2, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80046a8:	6854      	ldr	r4, [r2, #4]
 80046aa:	402c      	ands	r4, r5
 80046ac:	6054      	str	r4, [r2, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80046ae:	6894      	ldr	r4, [r2, #8]
 80046b0:	402c      	ands	r4, r5
 80046b2:	6094      	str	r4, [r2, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80046b4:	68d4      	ldr	r4, [r2, #12]
 80046b6:	402c      	ands	r4, r5
 80046b8:	60d4      	str	r4, [r2, #12]
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80046ba:	2eff      	cmp	r6, #255	; 0xff
 80046bc:	bf91      	iteee	ls
 80046be:	4607      	movls	r7, r0
 80046c0:	465f      	movhi	r7, fp
 80046c2:	f103 4480 	addhi.w	r4, r3, #1073741824	; 0x40000000
 80046c6:	3c08      	subhi	r4, #8
 80046c8:	bf95      	itete	ls
 80046ca:	f8d0 e000 	ldrls.w	lr, [r0]
 80046ce:	f8d0 e004 	ldrhi.w	lr, [r0, #4]
 80046d2:	009c      	lslls	r4, r3, #2
 80046d4:	00a4      	lslhi	r4, r4, #2
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80046d6:	fa0c f604 	lsl.w	r6, ip, r4
 80046da:	ea2e 0606 	bic.w	r6, lr, r6
 80046de:	fa0a f404 	lsl.w	r4, sl, r4
 80046e2:	4326      	orrs	r6, r4
 80046e4:	603e      	str	r6, [r7, #0]
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80046e6:	68c4      	ldr	r4, [r0, #12]
 80046e8:	4025      	ands	r5, r4
 80046ea:	60c5      	str	r5, [r0, #12]
    position++;
 80046ec:	3301      	adds	r3, #1
 80046ee:	e7a7      	b.n	8004640 <HAL_GPIO_DeInit+0x18>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80046f0:	2500      	movs	r5, #0
 80046f2:	e7cd      	b.n	8004690 <HAL_GPIO_DeInit+0x68>
 80046f4:	2501      	movs	r5, #1
 80046f6:	e7cb      	b.n	8004690 <HAL_GPIO_DeInit+0x68>
 80046f8:	2502      	movs	r5, #2
 80046fa:	e7c9      	b.n	8004690 <HAL_GPIO_DeInit+0x68>
 80046fc:	40010400 	.word	0x40010400
 8004700:	40010800 	.word	0x40010800

08004704 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004704:	b10a      	cbz	r2, 800470a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004706:	6101      	str	r1, [r0, #16]
 8004708:	4770      	bx	lr
 800470a:	0409      	lsls	r1, r1, #16
 800470c:	e7fb      	b.n	8004706 <HAL_GPIO_WritePin+0x2>

0800470e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800470e:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004710:	ea03 0201 	and.w	r2, r3, r1
 8004714:	ea21 0103 	bic.w	r1, r1, r3
 8004718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800471c:	6101      	str	r1, [r0, #16]
 800471e:	4770      	bx	lr

08004720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004720:	4770      	bx	lr
	...

08004724 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004724:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004728:	6959      	ldr	r1, [r3, #20]
 800472a:	4201      	tst	r1, r0
 800472c:	d002      	beq.n	8004734 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800472e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004730:	f7ff fff6 	bl	8004720 <HAL_GPIO_EXTI_Callback>
 8004734:	bd08      	pop	{r3, pc}
 8004736:	bf00      	nop
 8004738:	40010400 	.word	0x40010400

0800473c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004740:	4605      	mov	r5, r0
 8004742:	b908      	cbnz	r0, 8004748 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004744:	2001      	movs	r0, #1
 8004746:	e03c      	b.n	80047c2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004748:	6803      	ldr	r3, [r0, #0]
 800474a:	07db      	lsls	r3, r3, #31
 800474c:	d410      	bmi.n	8004770 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800474e:	682b      	ldr	r3, [r5, #0]
 8004750:	079f      	lsls	r7, r3, #30
 8004752:	d45d      	bmi.n	8004810 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	0719      	lsls	r1, r3, #28
 8004758:	f100 8094 	bmi.w	8004884 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	075a      	lsls	r2, r3, #29
 8004760:	f100 80be 	bmi.w	80048e0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004764:	69e8      	ldr	r0, [r5, #28]
 8004766:	2800      	cmp	r0, #0
 8004768:	f040 812c 	bne.w	80049c4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800476c:	2000      	movs	r0, #0
 800476e:	e028      	b.n	80047c2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004770:	4c8f      	ldr	r4, [pc, #572]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004772:	6863      	ldr	r3, [r4, #4]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b04      	cmp	r3, #4
 800477a:	d007      	beq.n	800478c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800477c:	6863      	ldr	r3, [r4, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d109      	bne.n	800479a <HAL_RCC_OscConfig+0x5e>
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	03de      	lsls	r6, r3, #15
 800478a:	d506      	bpl.n	800479a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	039c      	lsls	r4, r3, #14
 8004790:	d5dd      	bpl.n	800474e <HAL_RCC_OscConfig+0x12>
 8004792:	686b      	ldr	r3, [r5, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1da      	bne.n	800474e <HAL_RCC_OscConfig+0x12>
 8004798:	e7d4      	b.n	8004744 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479a:	686b      	ldr	r3, [r5, #4]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d112      	bne.n	80047c8 <HAL_RCC_OscConfig+0x8c>
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80047aa:	f7ff fa9d 	bl	8003ce8 <HAL_GetTick>
 80047ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	0398      	lsls	r0, r3, #14
 80047b4:	d4cb      	bmi.n	800474e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b6:	f7ff fa97 	bl	8003ce8 <HAL_GetTick>
 80047ba:	1b80      	subs	r0, r0, r6
 80047bc:	2864      	cmp	r0, #100	; 0x64
 80047be:	d9f7      	bls.n	80047b0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80047c0:	2003      	movs	r0, #3
}
 80047c2:	b002      	add	sp, #8
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c8:	b99b      	cbnz	r3, 80047f2 <HAL_RCC_OscConfig+0xb6>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80047da:	f7ff fa85 	bl	8003ce8 <HAL_GetTick>
 80047de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	0399      	lsls	r1, r3, #14
 80047e4:	d5b3      	bpl.n	800474e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e6:	f7ff fa7f 	bl	8003ce8 <HAL_GetTick>
 80047ea:	1b80      	subs	r0, r0, r6
 80047ec:	2864      	cmp	r0, #100	; 0x64
 80047ee:	d9f7      	bls.n	80047e0 <HAL_RCC_OscConfig+0xa4>
 80047f0:	e7e6      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	d103      	bne.n	8004802 <HAL_RCC_OscConfig+0xc6>
 80047fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	e7cf      	b.n	80047a2 <HAL_RCC_OscConfig+0x66>
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	6023      	str	r3, [r4, #0]
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800480e:	e7cb      	b.n	80047a8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004810:	4c67      	ldr	r4, [pc, #412]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	f013 0f0c 	tst.w	r3, #12
 8004818:	d007      	beq.n	800482a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800481a:	6863      	ldr	r3, [r4, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b08      	cmp	r3, #8
 8004822:	d110      	bne.n	8004846 <HAL_RCC_OscConfig+0x10a>
 8004824:	6863      	ldr	r3, [r4, #4]
 8004826:	03da      	lsls	r2, r3, #15
 8004828:	d40d      	bmi.n	8004846 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	079b      	lsls	r3, r3, #30
 800482e:	d502      	bpl.n	8004836 <HAL_RCC_OscConfig+0xfa>
 8004830:	692b      	ldr	r3, [r5, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d186      	bne.n	8004744 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	696a      	ldr	r2, [r5, #20]
 800483a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800483e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	e786      	b.n	8004754 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004846:	692a      	ldr	r2, [r5, #16]
 8004848:	4b5a      	ldr	r3, [pc, #360]	; (80049b4 <HAL_RCC_OscConfig+0x278>)
 800484a:	b16a      	cbz	r2, 8004868 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800484c:	2201      	movs	r2, #1
 800484e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004850:	f7ff fa4a 	bl	8003ce8 <HAL_GetTick>
 8004854:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	079f      	lsls	r7, r3, #30
 800485a:	d4ec      	bmi.n	8004836 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7ff fa44 	bl	8003ce8 <HAL_GetTick>
 8004860:	1b80      	subs	r0, r0, r6
 8004862:	2802      	cmp	r0, #2
 8004864:	d9f7      	bls.n	8004856 <HAL_RCC_OscConfig+0x11a>
 8004866:	e7ab      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8004868:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800486a:	f7ff fa3d 	bl	8003ce8 <HAL_GetTick>
 800486e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	0798      	lsls	r0, r3, #30
 8004874:	f57f af6e 	bpl.w	8004754 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004878:	f7ff fa36 	bl	8003ce8 <HAL_GetTick>
 800487c:	1b80      	subs	r0, r0, r6
 800487e:	2802      	cmp	r0, #2
 8004880:	d9f6      	bls.n	8004870 <HAL_RCC_OscConfig+0x134>
 8004882:	e79d      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004884:	69aa      	ldr	r2, [r5, #24]
 8004886:	4c4a      	ldr	r4, [pc, #296]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 8004888:	4b4b      	ldr	r3, [pc, #300]	; (80049b8 <HAL_RCC_OscConfig+0x27c>)
 800488a:	b1da      	cbz	r2, 80048c4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004890:	f7ff fa2a 	bl	8003ce8 <HAL_GetTick>
 8004894:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004898:	079b      	lsls	r3, r3, #30
 800489a:	d50d      	bpl.n	80048b8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800489c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80048a0:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80048aa:	bf00      	nop
  }
  while (Delay --);
 80048ac:	9b01      	ldr	r3, [sp, #4]
 80048ae:	1e5a      	subs	r2, r3, #1
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1f9      	bne.n	80048aa <HAL_RCC_OscConfig+0x16e>
 80048b6:	e751      	b.n	800475c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b8:	f7ff fa16 	bl	8003ce8 <HAL_GetTick>
 80048bc:	1b80      	subs	r0, r0, r6
 80048be:	2802      	cmp	r0, #2
 80048c0:	d9e9      	bls.n	8004896 <HAL_RCC_OscConfig+0x15a>
 80048c2:	e77d      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80048c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80048c6:	f7ff fa0f 	bl	8003ce8 <HAL_GetTick>
 80048ca:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ce:	079f      	lsls	r7, r3, #30
 80048d0:	f57f af44 	bpl.w	800475c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d4:	f7ff fa08 	bl	8003ce8 <HAL_GetTick>
 80048d8:	1b80      	subs	r0, r0, r6
 80048da:	2802      	cmp	r0, #2
 80048dc:	d9f6      	bls.n	80048cc <HAL_RCC_OscConfig+0x190>
 80048de:	e76f      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e0:	4c33      	ldr	r4, [pc, #204]	; (80049b0 <HAL_RCC_OscConfig+0x274>)
 80048e2:	69e3      	ldr	r3, [r4, #28]
 80048e4:	00d8      	lsls	r0, r3, #3
 80048e6:	d424      	bmi.n	8004932 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80048e8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	69e3      	ldr	r3, [r4, #28]
 80048ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f0:	61e3      	str	r3, [r4, #28]
 80048f2:	69e3      	ldr	r3, [r4, #28]
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4e30      	ldr	r6, [pc, #192]	; (80049c0 <HAL_RCC_OscConfig+0x284>)
 80048fe:	6833      	ldr	r3, [r6, #0]
 8004900:	05d9      	lsls	r1, r3, #23
 8004902:	d518      	bpl.n	8004936 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004904:	68eb      	ldr	r3, [r5, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d126      	bne.n	8004958 <HAL_RCC_OscConfig+0x21c>
 800490a:	6a23      	ldr	r3, [r4, #32]
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004912:	f7ff f9e9 	bl	8003ce8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800491a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	6a23      	ldr	r3, [r4, #32]
 800491e:	079b      	lsls	r3, r3, #30
 8004920:	d53f      	bpl.n	80049a2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8004922:	2f00      	cmp	r7, #0
 8004924:	f43f af1e 	beq.w	8004764 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004928:	69e3      	ldr	r3, [r4, #28]
 800492a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492e:	61e3      	str	r3, [r4, #28]
 8004930:	e718      	b.n	8004764 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2700      	movs	r7, #0
 8004934:	e7e2      	b.n	80048fc <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004936:	6833      	ldr	r3, [r6, #0]
 8004938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800493e:	f7ff f9d3 	bl	8003ce8 <HAL_GetTick>
 8004942:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	05da      	lsls	r2, r3, #23
 8004948:	d4dc      	bmi.n	8004904 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494a:	f7ff f9cd 	bl	8003ce8 <HAL_GetTick>
 800494e:	eba0 0008 	sub.w	r0, r0, r8
 8004952:	2864      	cmp	r0, #100	; 0x64
 8004954:	d9f6      	bls.n	8004944 <HAL_RCC_OscConfig+0x208>
 8004956:	e733      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004958:	b9ab      	cbnz	r3, 8004986 <HAL_RCC_OscConfig+0x24a>
 800495a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6223      	str	r3, [r4, #32]
 8004966:	6a23      	ldr	r3, [r4, #32]
 8004968:	f023 0304 	bic.w	r3, r3, #4
 800496c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800496e:	f7ff f9bb 	bl	8003ce8 <HAL_GetTick>
 8004972:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004974:	6a23      	ldr	r3, [r4, #32]
 8004976:	0798      	lsls	r0, r3, #30
 8004978:	d5d3      	bpl.n	8004922 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7ff f9b5 	bl	8003ce8 <HAL_GetTick>
 800497e:	1b80      	subs	r0, r0, r6
 8004980:	4540      	cmp	r0, r8
 8004982:	d9f7      	bls.n	8004974 <HAL_RCC_OscConfig+0x238>
 8004984:	e71c      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004986:	2b05      	cmp	r3, #5
 8004988:	6a23      	ldr	r3, [r4, #32]
 800498a:	d103      	bne.n	8004994 <HAL_RCC_OscConfig+0x258>
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6223      	str	r3, [r4, #32]
 8004992:	e7ba      	b.n	800490a <HAL_RCC_OscConfig+0x1ce>
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6223      	str	r3, [r4, #32]
 800499a:	6a23      	ldr	r3, [r4, #32]
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	e7b6      	b.n	8004910 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7ff f9a1 	bl	8003ce8 <HAL_GetTick>
 80049a6:	eba0 0008 	sub.w	r0, r0, r8
 80049aa:	42b0      	cmp	r0, r6
 80049ac:	d9b6      	bls.n	800491c <HAL_RCC_OscConfig+0x1e0>
 80049ae:	e707      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
 80049b0:	40021000 	.word	0x40021000
 80049b4:	42420000 	.word	0x42420000
 80049b8:	42420480 	.word	0x42420480
 80049bc:	20000008 	.word	0x20000008
 80049c0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCC_OscConfig+0x334>)
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	461c      	mov	r4, r3
 80049ca:	f002 020c 	and.w	r2, r2, #12
 80049ce:	2a08      	cmp	r2, #8
 80049d0:	d03d      	beq.n	8004a4e <HAL_RCC_OscConfig+0x312>
 80049d2:	2300      	movs	r3, #0
 80049d4:	4e27      	ldr	r6, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80049d8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049da:	d12b      	bne.n	8004a34 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80049dc:	f7ff f984 	bl	8003ce8 <HAL_GetTick>
 80049e0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	0199      	lsls	r1, r3, #6
 80049e6:	d41f      	bmi.n	8004a28 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049e8:	6a2b      	ldr	r3, [r5, #32]
 80049ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ee:	d105      	bne.n	80049fc <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049f0:	6862      	ldr	r2, [r4, #4]
 80049f2:	68a9      	ldr	r1, [r5, #8]
 80049f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80049f8:	430a      	orrs	r2, r1
 80049fa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80049fe:	6862      	ldr	r2, [r4, #4]
 8004a00:	430b      	orrs	r3, r1
 8004a02:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004a06:	4313      	orrs	r3, r2
 8004a08:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004a0e:	f7ff f96b 	bl	8003ce8 <HAL_GetTick>
 8004a12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	019a      	lsls	r2, r3, #6
 8004a18:	f53f aea8 	bmi.w	800476c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7ff f964 	bl	8003ce8 <HAL_GetTick>
 8004a20:	1b40      	subs	r0, r0, r5
 8004a22:	2802      	cmp	r0, #2
 8004a24:	d9f6      	bls.n	8004a14 <HAL_RCC_OscConfig+0x2d8>
 8004a26:	e6cb      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a28:	f7ff f95e 	bl	8003ce8 <HAL_GetTick>
 8004a2c:	1bc0      	subs	r0, r0, r7
 8004a2e:	2802      	cmp	r0, #2
 8004a30:	d9d7      	bls.n	80049e2 <HAL_RCC_OscConfig+0x2a6>
 8004a32:	e6c5      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8004a34:	f7ff f958 	bl	8003ce8 <HAL_GetTick>
 8004a38:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	019b      	lsls	r3, r3, #6
 8004a3e:	f57f ae95 	bpl.w	800476c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7ff f951 	bl	8003ce8 <HAL_GetTick>
 8004a46:	1b40      	subs	r0, r0, r5
 8004a48:	2802      	cmp	r0, #2
 8004a4a:	d9f6      	bls.n	8004a3a <HAL_RCC_OscConfig+0x2fe>
 8004a4c:	e6b8      	b.n	80047c0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a4e:	2801      	cmp	r0, #1
 8004a50:	f43f aeb7 	beq.w	80047c2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8004a54:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	6a2b      	ldr	r3, [r5, #32]
 8004a58:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	f47f ae71 	bne.w	8004744 <HAL_RCC_OscConfig+0x8>
 8004a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a64:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8004a68:	1ac0      	subs	r0, r0, r3
 8004a6a:	bf18      	it	ne
 8004a6c:	2001      	movne	r0, #1
 8004a6e:	e6a8      	b.n	80047c2 <HAL_RCC_OscConfig+0x86>
 8004a70:	40021000 	.word	0x40021000
 8004a74:	42420060 	.word	0x42420060

08004a78 <HAL_RCC_GetSysClockFreq>:
{
 8004a78:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8004a7c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a7e:	ac02      	add	r4, sp, #8
 8004a80:	f103 0510 	add.w	r5, r3, #16
 8004a84:	4622      	mov	r2, r4
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	6859      	ldr	r1, [r3, #4]
 8004a8a:	3308      	adds	r3, #8
 8004a8c:	c203      	stmia	r2!, {r0, r1}
 8004a8e:	42ab      	cmp	r3, r5
 8004a90:	4614      	mov	r4, r2
 8004a92:	d1f7      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a94:	2301      	movs	r3, #1
 8004a96:	f88d 3004 	strb.w	r3, [sp, #4]
 8004a9a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8004a9c:	4911      	ldr	r1, [pc, #68]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a9e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8004aa2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004aa4:	f003 020c 	and.w	r2, r3, #12
 8004aa8:	2a08      	cmp	r2, #8
 8004aaa:	d117      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004aac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004ab0:	a806      	add	r0, sp, #24
 8004ab2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ab4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ab6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aba:	d50c      	bpl.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004abc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004abe:	480a      	ldr	r0, [pc, #40]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ac4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ac6:	aa06      	add	r2, sp, #24
 8004ac8:	4413      	add	r3, r2
 8004aca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ace:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004ad2:	b007      	add	sp, #28
 8004ad4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ad6:	4805      	ldr	r0, [pc, #20]	; (8004aec <HAL_RCC_GetSysClockFreq+0x74>)
 8004ad8:	4350      	muls	r0, r2
 8004ada:	e7fa      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8004ade:	e7f8      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x5a>
 8004ae0:	08006cdf 	.word	0x08006cdf
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	007a1200 	.word	0x007a1200
 8004aec:	003d0900 	.word	0x003d0900

08004af0 <HAL_RCC_ClockConfig>:
{
 8004af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004af6:	4604      	mov	r4, r0
 8004af8:	b910      	cbnz	r0, 8004b00 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004afa:	2001      	movs	r0, #1
 8004afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4a45      	ldr	r2, [pc, #276]	; (8004c18 <HAL_RCC_ClockConfig+0x128>)
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	d329      	bcc.n	8004b60 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	6821      	ldr	r1, [r4, #0]
 8004b0e:	078e      	lsls	r6, r1, #30
 8004b10:	d431      	bmi.n	8004b76 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	07ca      	lsls	r2, r1, #31
 8004b14:	d444      	bmi.n	8004ba0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b16:	4a40      	ldr	r2, [pc, #256]	; (8004c18 <HAL_RCC_ClockConfig+0x128>)
 8004b18:	6813      	ldr	r3, [r2, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	429d      	cmp	r5, r3
 8004b20:	d367      	bcc.n	8004bf2 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	4d3d      	ldr	r5, [pc, #244]	; (8004c1c <HAL_RCC_ClockConfig+0x12c>)
 8004b26:	f012 0f04 	tst.w	r2, #4
 8004b2a:	d16e      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2c:	0713      	lsls	r3, r2, #28
 8004b2e:	d506      	bpl.n	8004b3e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b30:	686b      	ldr	r3, [r5, #4]
 8004b32:	6922      	ldr	r2, [r4, #16]
 8004b34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004b38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004b3c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b3e:	f7ff ff9b 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004b42:	686b      	ldr	r3, [r5, #4]
 8004b44:	4a36      	ldr	r2, [pc, #216]	; (8004c20 <HAL_RCC_ClockConfig+0x130>)
 8004b46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	40d8      	lsrs	r0, r3
 8004b4e:	4b35      	ldr	r3, [pc, #212]	; (8004c24 <HAL_RCC_ClockConfig+0x134>)
 8004b50:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004b52:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <HAL_RCC_ClockConfig+0x138>)
 8004b54:	6818      	ldr	r0, [r3, #0]
 8004b56:	f7ff f885 	bl	8003c64 <HAL_InitTick>
  return HAL_OK;
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	6813      	ldr	r3, [r2, #0]
 8004b62:	f023 0307 	bic.w	r3, r3, #7
 8004b66:	430b      	orrs	r3, r1
 8004b68:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6a:	6813      	ldr	r3, [r2, #0]
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4299      	cmp	r1, r3
 8004b72:	d1c2      	bne.n	8004afa <HAL_RCC_ClockConfig+0xa>
 8004b74:	e7ca      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1c>
 8004b76:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b7c:	bf1e      	ittt	ne
 8004b7e:	685a      	ldrne	r2, [r3, #4]
 8004b80:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004b84:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b88:	bf42      	ittt	mi
 8004b8a:	685a      	ldrmi	r2, [r3, #4]
 8004b8c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004b90:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	68a0      	ldr	r0, [r4, #8]
 8004b96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b9a:	4302      	orrs	r2, r0
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	e7b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba0:	6862      	ldr	r2, [r4, #4]
 8004ba2:	4e1e      	ldr	r6, [pc, #120]	; (8004c1c <HAL_RCC_ClockConfig+0x12c>)
 8004ba4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba8:	d11b      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	d0a4      	beq.n	8004afa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004bbe:	f7ff f893 	bl	8003ce8 <HAL_GetTick>
 8004bc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc4:	6873      	ldr	r3, [r6, #4]
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bd0:	d0a1      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd2:	f7ff f889 	bl	8003ce8 <HAL_GetTick>
 8004bd6:	1bc0      	subs	r0, r0, r7
 8004bd8:	4540      	cmp	r0, r8
 8004bda:	d9f3      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8004bdc:	2003      	movs	r0, #3
}
 8004bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004be2:	2a02      	cmp	r2, #2
 8004be4:	d102      	bne.n	8004bec <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004be6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bea:	e7e0      	b.n	8004bae <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bec:	f013 0f02 	tst.w	r3, #2
 8004bf0:	e7dd      	b.n	8004bae <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bf2:	6813      	ldr	r3, [r2, #0]
 8004bf4:	f023 0307 	bic.w	r3, r3, #7
 8004bf8:	432b      	orrs	r3, r5
 8004bfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	429d      	cmp	r5, r3
 8004c04:	f47f af79 	bne.w	8004afa <HAL_RCC_ClockConfig+0xa>
 8004c08:	e78b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0a:	686b      	ldr	r3, [r5, #4]
 8004c0c:	68e1      	ldr	r1, [r4, #12]
 8004c0e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c12:	430b      	orrs	r3, r1
 8004c14:	606b      	str	r3, [r5, #4]
 8004c16:	e789      	b.n	8004b2c <HAL_RCC_ClockConfig+0x3c>
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08006cef 	.word	0x08006cef
 8004c24:	20000008 	.word	0x20000008
 8004c28:	20000010 	.word	0x20000010

08004c2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	4a03      	ldr	r2, [pc, #12]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c3a:	6810      	ldr	r0, [r2, #0]
}
 8004c3c:	40d8      	lsrs	r0, r3
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000
 8004c44:	08006cff 	.word	0x08006cff
 8004c48:	20000008 	.word	0x20000008

08004c4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c4c:	4b04      	ldr	r3, [pc, #16]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c4e:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	4a03      	ldr	r2, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c5a:	6810      	ldr	r0, [r2, #0]
}
 8004c5c:	40d8      	lsrs	r0, r3
 8004c5e:	4770      	bx	lr
 8004c60:	40021000 	.word	0x40021000
 8004c64:	08006cff 	.word	0x08006cff
 8004c68:	20000008 	.word	0x20000008

08004c6c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d11c      	bne.n	8004cae <HAL_TIM_Base_Start+0x42>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c76:	4a0f      	ldr	r2, [pc, #60]	; (8004cb4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c7c:	6803      	ldr	r3, [r0, #0]
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00a      	beq.n	8004c98 <HAL_TIM_Base_Start+0x2c>
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_Base_Start+0x2c>
 8004c88:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d003      	beq.n	8004c98 <HAL_TIM_Base_Start+0x2c>
 8004c90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d104      	bne.n	8004ca2 <HAL_TIM_Base_Start+0x36>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	2a06      	cmp	r2, #6
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004caa:	2000      	movs	r0, #0
}
 8004cac:	4770      	bx	lr
    return HAL_ERROR;
 8004cae:	2001      	movs	r0, #1
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00

08004cb8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cb8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d120      	bne.n	8004d02 <HAL_TIM_Base_Start_IT+0x4a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cc6:	6803      	ldr	r3, [r0, #0]
 8004cc8:	68da      	ldr	r2, [r3, #12]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd0:	4a0d      	ldr	r2, [pc, #52]	; (8004d08 <HAL_TIM_Base_Start_IT+0x50>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00a      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x34>
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x34>
 8004cdc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <HAL_TIM_Base_Start_IT+0x34>
 8004ce4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_Base_Start_IT+0x3e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf2:	2a06      	cmp	r2, #6
 8004cf4:	d003      	beq.n	8004cfe <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2000      	movs	r0, #0
}
 8004d00:	4770      	bx	lr
    return HAL_ERROR;
 8004d02:	2001      	movs	r0, #1
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00

08004d0c <HAL_TIM_OC_DelayElapsedCallback>:
 8004d0c:	4770      	bx	lr

08004d0e <HAL_TIM_IC_CaptureCallback>:
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_TriggerCallback>:
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d14:	6803      	ldr	r3, [r0, #0]
{
 8004d16:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d18:	691a      	ldr	r2, [r3, #16]
{
 8004d1a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d1c:	0791      	lsls	r1, r2, #30
 8004d1e:	d50e      	bpl.n	8004d3e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d20:	68da      	ldr	r2, [r3, #12]
 8004d22:	0792      	lsls	r2, r2, #30
 8004d24:	d50b      	bpl.n	8004d3e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d26:	f06f 0202 	mvn.w	r2, #2
 8004d2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d2c:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d2e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d30:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d32:	079b      	lsls	r3, r3, #30
 8004d34:	d077      	beq.n	8004e26 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	f7ff ffea 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	0750      	lsls	r0, r2, #29
 8004d44:	d510      	bpl.n	8004d68 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	0751      	lsls	r1, r2, #29
 8004d4a:	d50d      	bpl.n	8004d68 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d4c:	f06f 0204 	mvn.w	r2, #4
 8004d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d52:	2202      	movs	r2, #2
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d56:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d58:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d5e:	d068      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d60:	f7ff ffd5 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d64:	2300      	movs	r3, #0
 8004d66:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	0712      	lsls	r2, r2, #28
 8004d6e:	d50f      	bpl.n	8004d90 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	0710      	lsls	r0, r2, #28
 8004d74:	d50c      	bpl.n	8004d90 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d76:	f06f 0208 	mvn.w	r2, #8
 8004d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d7c:	2204      	movs	r2, #4
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d7e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d80:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d82:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d84:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d86:	d05a      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d88:	f7ff ffc1 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	06d2      	lsls	r2, r2, #27
 8004d96:	d510      	bpl.n	8004dba <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	06d0      	lsls	r0, r2, #27
 8004d9c:	d50d      	bpl.n	8004dba <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d9e:	f06f 0210 	mvn.w	r2, #16
 8004da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da4:	2208      	movs	r2, #8
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004daa:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db0:	d04b      	beq.n	8004e4a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	f7ff ffac 	bl	8004d0e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	2300      	movs	r3, #0
 8004db8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	07d1      	lsls	r1, r2, #31
 8004dc0:	d508      	bpl.n	8004dd4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	07d2      	lsls	r2, r2, #31
 8004dc6:	d505      	bpl.n	8004dd4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dc8:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dcc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dce:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd0:	f7fe fd12 	bl	80037f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	0610      	lsls	r0, r2, #24
 8004dda:	d508      	bpl.n	8004dee <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	0611      	lsls	r1, r2, #24
 8004de0:	d505      	bpl.n	8004dee <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de2:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004dea:	f000 f96a 	bl	80050c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	0652      	lsls	r2, r2, #25
 8004df4:	d508      	bpl.n	8004e08 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	0650      	lsls	r0, r2, #25
 8004dfa:	d505      	bpl.n	8004e08 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e02:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e04:	f7ff ff85 	bl	8004d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	0691      	lsls	r1, r2, #26
 8004e0e:	d522      	bpl.n	8004e56 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	0692      	lsls	r2, r2, #26
 8004e14:	d51f      	bpl.n	8004e56 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e16:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e1a:	4620      	mov	r0, r4
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004e22:	f000 b94d 	b.w	80050c0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	f7ff ff71 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2a:	4620      	mov	r0, r4
 8004e2c:	f7ff ff70 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e30:	e783      	b.n	8004d3a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	f7ff ff6b 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7ff ff6a 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e3c:	e792      	b.n	8004d64 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3e:	f7ff ff65 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff ff64 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e48:	e7a0      	b.n	8004d8c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4a:	f7ff ff5f 	bl	8004d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f7ff ff5e 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e54:	e7af      	b.n	8004db6 <HAL_TIM_IRQHandler+0xa2>
 8004e56:	bd10      	pop	{r4, pc}

08004e58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	4a1a      	ldr	r2, [pc, #104]	; (8004ec4 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8004e5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e5c:	4290      	cmp	r0, r2
 8004e5e:	d00a      	beq.n	8004e76 <TIM_Base_SetConfig+0x1e>
 8004e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e64:	d007      	beq.n	8004e76 <TIM_Base_SetConfig+0x1e>
 8004e66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e6a:	4290      	cmp	r0, r2
 8004e6c:	d003      	beq.n	8004e76 <TIM_Base_SetConfig+0x1e>
 8004e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e72:	4290      	cmp	r0, r2
 8004e74:	d115      	bne.n	8004ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004e76:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e7c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e7e:	4a11      	ldr	r2, [pc, #68]	; (8004ec4 <TIM_Base_SetConfig+0x6c>)
 8004e80:	4290      	cmp	r0, r2
 8004e82:	d00a      	beq.n	8004e9a <TIM_Base_SetConfig+0x42>
 8004e84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e88:	d007      	beq.n	8004e9a <TIM_Base_SetConfig+0x42>
 8004e8a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004e8e:	4290      	cmp	r0, r2
 8004e90:	d003      	beq.n	8004e9a <TIM_Base_SetConfig+0x42>
 8004e92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e96:	4290      	cmp	r0, r2
 8004e98:	d103      	bne.n	8004ea2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e9a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ea0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ea2:	694a      	ldr	r2, [r1, #20]
 8004ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004eaa:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	688b      	ldr	r3, [r1, #8]
 8004eae:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb0:	680b      	ldr	r3, [r1, #0]
 8004eb2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eb4:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <TIM_Base_SetConfig+0x6c>)
 8004eb6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb8:	bf04      	itt	eq
 8004eba:	690b      	ldreq	r3, [r1, #16]
 8004ebc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	6143      	str	r3, [r0, #20]
 8004ec2:	4770      	bx	lr
 8004ec4:	40012c00 	.word	0x40012c00

08004ec8 <HAL_TIM_Base_Init>:
{
 8004ec8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004eca:	4604      	mov	r4, r0
 8004ecc:	b330      	cbz	r0, 8004f1c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ece:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004ed2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ed6:	b91b      	cbnz	r3, 8004ee0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004ed8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004edc:	f7fe fe18 	bl	8003b10 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	1d21      	adds	r1, r4, #4
 8004eea:	f7ff ffb5 	bl	8004e58 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eee:	2301      	movs	r3, #1
  return HAL_OK;
 8004ef0:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004efa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004efe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f02:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004f12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f1a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f1c:	2001      	movs	r0, #1
}
 8004f1e:	bd10      	pop	{r4, pc}

08004f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f20:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f22:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f24:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f26:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f2a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8004f2e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f30:	6083      	str	r3, [r0, #8]
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004f34:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8004f38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004f3a:	2b01      	cmp	r3, #1
{
 8004f3c:	4604      	mov	r4, r0
 8004f3e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004f42:	d019      	beq.n	8004f78 <HAL_TIM_ConfigClockSource+0x44>
 8004f44:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004f46:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004f4a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8004f4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004f50:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004f5a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004f5c:	680b      	ldr	r3, [r1, #0]
 8004f5e:	2b40      	cmp	r3, #64	; 0x40
 8004f60:	d065      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xfa>
 8004f62:	d815      	bhi.n	8004f90 <HAL_TIM_ConfigClockSource+0x5c>
 8004f64:	2b10      	cmp	r3, #16
 8004f66:	d00c      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x4e>
 8004f68:	d807      	bhi.n	8004f7a <HAL_TIM_ConfigClockSource+0x46>
 8004f6a:	b153      	cbz	r3, 8004f82 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8004f6e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004f74:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004f78:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d001      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x4e>
 8004f7e:	2b30      	cmp	r3, #48	; 0x30
 8004f80:	d1f4      	bne.n	8004f6c <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8004f82:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f84:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	e01a      	b.n	8004fc6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d034      	beq.n	8004ffe <HAL_TIM_ConfigClockSource+0xca>
 8004f94:	d819      	bhi.n	8004fca <HAL_TIM_ConfigClockSource+0x96>
 8004f96:	2b50      	cmp	r3, #80	; 0x50
 8004f98:	d1e8      	bne.n	8004f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9a:	684a      	ldr	r2, [r1, #4]
 8004f9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f9e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa0:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa2:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fa6:	f025 0501 	bic.w	r5, r5, #1
 8004faa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fac:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8004fae:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004fb8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004fba:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004fbc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004fc6:	6083      	str	r3, [r0, #8]
 8004fc8:	e7d0      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8004fca:	2b70      	cmp	r3, #112	; 0x70
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_TIM_ConfigClockSource+0xb4>
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	d1cb      	bne.n	8004f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	68cb      	ldr	r3, [r1, #12]
 8004fd6:	684a      	ldr	r2, [r1, #4]
 8004fd8:	6889      	ldr	r1, [r1, #8]
 8004fda:	f7ff ffa1 	bl	8004f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	6893      	ldr	r3, [r2, #8]
 8004fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe6:	e008      	b.n	8004ffa <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8004fe8:	68cb      	ldr	r3, [r1, #12]
 8004fea:	684a      	ldr	r2, [r1, #4]
 8004fec:	6889      	ldr	r1, [r1, #8]
 8004fee:	f7ff ff97 	bl	8004f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ffa:	6093      	str	r3, [r2, #8]
      break;
 8004ffc:	e7b6      	b.n	8004f6c <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ffe:	684d      	ldr	r5, [r1, #4]
 8005000:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005002:	6a01      	ldr	r1, [r0, #32]
 8005004:	f021 0110 	bic.w	r1, r1, #16
 8005008:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800500c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005016:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800501a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800501e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005020:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005022:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005028:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800502c:	e7cb      	b.n	8004fc6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	684a      	ldr	r2, [r1, #4]
 8005030:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005032:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005034:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005036:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	f025 0501 	bic.w	r5, r5, #1
 800503e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005040:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005042:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005048:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800504c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800504e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005050:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005056:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800505a:	e7b4      	b.n	8004fc6 <HAL_TIM_ConfigClockSource+0x92>

0800505c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005060:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8005062:	2b01      	cmp	r3, #1
 8005064:	f04f 0302 	mov.w	r3, #2
 8005068:	d025      	beq.n	80050b6 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
 800506a:	2201      	movs	r2, #1

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005072:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8005074:	685c      	ldr	r4, [r3, #4]
  __HAL_LOCK(htim);
 8005076:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 &= ~TIM_CR2_MMS;
 800507a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005080:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005082:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005084:	4c0d      	ldr	r4, [pc, #52]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8005086:	42a3      	cmp	r3, r4
 8005088:	d00a      	beq.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800508a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508e:	d007      	beq.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005090:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005094:	42a3      	cmp	r3, r4
 8005096:	d003      	beq.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8005098:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800509c:	42a3      	cmp	r3, r4
 800509e:	d104      	bne.n	80050aa <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a6:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	2300      	movs	r3, #0
 80050b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80050b6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80050b8:	bd30      	pop	{r4, r5, pc}
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00

080050c0 <HAL_TIMEx_CommutCallback>:
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	4770      	bx	lr

080050c4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c4:	6803      	ldr	r3, [r0, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050cc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	2320      	movs	r3, #32
 80050d8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80050dc:	4770      	bx	lr
	...

080050e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e4:	6803      	ldr	r3, [r0, #0]
 80050e6:	68c1      	ldr	r1, [r0, #12]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80050ee:	430a      	orrs	r2, r1
 80050f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050f2:	6882      	ldr	r2, [r0, #8]
 80050f4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80050f6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050f8:	4302      	orrs	r2, r0
 80050fa:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80050fc:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8005100:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005104:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8005106:	430a      	orrs	r2, r1
 8005108:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	69a1      	ldr	r1, [r4, #24]
 800510e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005112:	430a      	orrs	r2, r1
 8005114:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005116:	4a0e      	ldr	r2, [pc, #56]	; (8005150 <UART_SetConfig+0x70>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d115      	bne.n	8005148 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800511c:	f7ff fd96 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005120:	2319      	movs	r3, #25
 8005122:	4358      	muls	r0, r3
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	2264      	movs	r2, #100	; 0x64
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	fbb0 f0f3 	udiv	r0, r0, r3
 800512e:	fbb0 f1f2 	udiv	r1, r0, r2
 8005132:	fb02 0311 	mls	r3, r2, r1, r0
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	3332      	adds	r3, #50	; 0x32
 800513a:	fbb3 f3f2 	udiv	r3, r3, r2
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8005144:	60ab      	str	r3, [r5, #8]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7ff fd70 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 800514c:	e7e8      	b.n	8005120 <UART_SetConfig+0x40>
 800514e:	bf00      	nop
 8005150:	40013800 	.word	0x40013800

08005154 <HAL_UART_Init>:
{
 8005154:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005156:	4604      	mov	r4, r0
 8005158:	b340      	cbz	r0, 80051ac <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800515a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800515e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005162:	b91b      	cbnz	r3, 800516c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005164:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005168:	f7fe fd20 	bl	8003bac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800516c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800516e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005174:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8005176:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8005178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800517c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800517e:	f7ff ffaf 	bl	80050e0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005182:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005194:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800519e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80051a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80051a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80051aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
}
 80051ae:	bd10      	pop	{r4, pc}

080051b0 <HAL_UART_DeInit>:
{
 80051b0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80051b2:	4604      	mov	r4, r0
 80051b4:	b190      	cbz	r0, 80051dc <HAL_UART_DeInit+0x2c>
  huart->gState = HAL_UART_STATE_BUSY;
 80051b6:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80051b8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80051be:	68d3      	ldr	r3, [r2, #12]
 80051c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051c4:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 80051c6:	f7fe fd33 	bl	8003c30 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ca:	2000      	movs	r0, #0
 80051cc:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(huart);
 80051ce:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  huart->gState = HAL_UART_STATE_RESET;
 80051d2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 80051d6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
  return HAL_OK;
 80051da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80051dc:	2001      	movs	r0, #1
}
 80051de:	bd10      	pop	{r4, pc}

080051e0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80051e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d120      	bne.n	800522a <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80051e8:	b1e9      	cbz	r1, 8005226 <HAL_UART_Receive_IT+0x46>
 80051ea:	b1e2      	cbz	r2, 8005226 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80051ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d01a      	beq.n	800522a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80051f4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80051f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fa:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051fe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005202:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8005204:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005206:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8005208:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800520c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005210:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005212:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8005214:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005216:	f041 0101 	orr.w	r1, r1, #1
 800521a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800521c:	68d1      	ldr	r1, [r2, #12]
 800521e:	f041 0120 	orr.w	r1, r1, #32
 8005222:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8005224:	4770      	bx	lr
      return HAL_ERROR;
 8005226:	2001      	movs	r0, #1
 8005228:	4770      	bx	lr
    return HAL_BUSY;
 800522a:	2002      	movs	r0, #2
}
 800522c:	4770      	bx	lr

0800522e <HAL_UART_TxCpltCallback>:
 800522e:	4770      	bx	lr

08005230 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005230:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8005234:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005236:	2b22      	cmp	r3, #34	; 0x22
 8005238:	d132      	bne.n	80052a0 <UART_Receive_IT+0x70>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800523a:	6881      	ldr	r1, [r0, #8]
 800523c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800523e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005242:	6802      	ldr	r2, [r0, #0]
 8005244:	d120      	bne.n	8005288 <UART_Receive_IT+0x58>
 8005246:	6901      	ldr	r1, [r0, #16]
 8005248:	bb09      	cbnz	r1, 800528e <UART_Receive_IT+0x5e>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005250:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8005254:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8005256:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8005258:	3c01      	subs	r4, #1
 800525a:	b2a4      	uxth	r4, r4
 800525c:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800525e:	b98c      	cbnz	r4, 8005284 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005260:	6803      	ldr	r3, [r0, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	f022 0220 	bic.w	r2, r2, #32
 8005268:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800526a:	68da      	ldr	r2, [r3, #12]
 800526c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005270:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	f022 0201 	bic.w	r2, r2, #1
 8005278:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800527a:	2320      	movs	r3, #32
 800527c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005280:	f7fe face 	bl	8003820 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8005284:	2000      	movs	r0, #0
}
 8005286:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005288:	b931      	cbnz	r1, 8005298 <UART_Receive_IT+0x68>
 800528a:	6901      	ldr	r1, [r0, #16]
 800528c:	b921      	cbnz	r1, 8005298 <UART_Receive_IT+0x68>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800528e:	6852      	ldr	r2, [r2, #4]
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005290:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8005292:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005294:	3301      	adds	r3, #1
 8005296:	e7dd      	b.n	8005254 <UART_Receive_IT+0x24>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005298:	6852      	ldr	r2, [r2, #4]
 800529a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800529e:	e7f7      	b.n	8005290 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80052a0:	2002      	movs	r0, #2
 80052a2:	bd10      	pop	{r4, pc}

080052a4 <HAL_UART_ErrorCallback>:
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a8:	6803      	ldr	r3, [r0, #0]
{
 80052aa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052ac:	681a      	ldr	r2, [r3, #0]
{
 80052ae:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80052b0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052b2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80052b6:	d107      	bne.n	80052c8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b8:	0696      	lsls	r6, r2, #26
 80052ba:	d55c      	bpl.n	8005376 <HAL_UART_IRQHandler+0xce>
 80052bc:	068d      	lsls	r5, r1, #26
 80052be:	d55a      	bpl.n	8005376 <HAL_UART_IRQHandler+0xce>
}
 80052c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80052c4:	f7ff bfb4 	b.w	8005230 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052c8:	f015 0501 	ands.w	r5, r5, #1
 80052cc:	d102      	bne.n	80052d4 <HAL_UART_IRQHandler+0x2c>
 80052ce:	f411 7f90 	tst.w	r1, #288	; 0x120
 80052d2:	d050      	beq.n	8005376 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	d505      	bpl.n	80052e4 <HAL_UART_IRQHandler+0x3c>
 80052d8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052da:	bf42      	ittt	mi
 80052dc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80052de:	f043 0301 	orrmi.w	r3, r3, #1
 80052e2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e4:	0756      	lsls	r6, r2, #29
 80052e6:	d504      	bpl.n	80052f2 <HAL_UART_IRQHandler+0x4a>
 80052e8:	b11d      	cbz	r5, 80052f2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052ec:	f043 0302 	orr.w	r3, r3, #2
 80052f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052f2:	0790      	lsls	r0, r2, #30
 80052f4:	d504      	bpl.n	8005300 <HAL_UART_IRQHandler+0x58>
 80052f6:	b11d      	cbz	r5, 8005300 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052fa:	f043 0304 	orr.w	r3, r3, #4
 80052fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005300:	0713      	lsls	r3, r2, #28
 8005302:	d506      	bpl.n	8005312 <HAL_UART_IRQHandler+0x6a>
 8005304:	068e      	lsls	r6, r1, #26
 8005306:	d400      	bmi.n	800530a <HAL_UART_IRQHandler+0x62>
 8005308:	b11d      	cbz	r5, 8005312 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800530a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800530c:	f043 0308 	orr.w	r3, r3, #8
 8005310:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005312:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d064      	beq.n	80053e2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005318:	0695      	lsls	r5, r2, #26
 800531a:	d504      	bpl.n	8005326 <HAL_UART_IRQHandler+0x7e>
 800531c:	0688      	lsls	r0, r1, #26
 800531e:	d502      	bpl.n	8005326 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8005320:	4620      	mov	r0, r4
 8005322:	f7ff ff85 	bl	8005230 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005326:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8005328:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800532a:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800532c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800532e:	0711      	lsls	r1, r2, #28
 8005330:	d402      	bmi.n	8005338 <HAL_UART_IRQHandler+0x90>
 8005332:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005336:	d01a      	beq.n	800536e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8005338:	f7ff fec4 	bl	80050c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	695a      	ldr	r2, [r3, #20]
 8005340:	0652      	lsls	r2, r2, #25
 8005342:	d510      	bpl.n	8005366 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005344:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005346:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800534c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800534e:	b150      	cbz	r0, 8005366 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005350:	4b24      	ldr	r3, [pc, #144]	; (80053e4 <HAL_UART_IRQHandler+0x13c>)
 8005352:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005354:	f7ff f83e 	bl	80043d4 <HAL_DMA_Abort_IT>
 8005358:	2800      	cmp	r0, #0
 800535a:	d042      	beq.n	80053e2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800535c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800535e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005362:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005364:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8005366:	4620      	mov	r0, r4
 8005368:	f7ff ff9c 	bl	80052a4 <HAL_UART_ErrorCallback>
 800536c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800536e:	f7ff ff99 	bl	80052a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005374:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005376:	0616      	lsls	r6, r2, #24
 8005378:	d525      	bpl.n	80053c6 <HAL_UART_IRQHandler+0x11e>
 800537a:	060d      	lsls	r5, r1, #24
 800537c:	d523      	bpl.n	80053c6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800537e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005382:	2a21      	cmp	r2, #33	; 0x21
 8005384:	d12d      	bne.n	80053e2 <HAL_UART_IRQHandler+0x13a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005386:	68a2      	ldr	r2, [r4, #8]
 8005388:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800538c:	6a22      	ldr	r2, [r4, #32]
 800538e:	d115      	bne.n	80053bc <HAL_UART_IRQHandler+0x114>
 8005390:	6921      	ldr	r1, [r4, #16]
 8005392:	b999      	cbnz	r1, 80053bc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005394:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005398:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800539c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800539e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80053a0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80053a2:	3a01      	subs	r2, #1
 80053a4:	b292      	uxth	r2, r2
 80053a6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80053a8:	b9da      	cbnz	r2, 80053e2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053b0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053bc:	1c51      	adds	r1, r2, #1
 80053be:	6221      	str	r1, [r4, #32]
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	605a      	str	r2, [r3, #4]
 80053c4:	e7ec      	b.n	80053a0 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053c6:	0650      	lsls	r0, r2, #25
 80053c8:	d50b      	bpl.n	80053e2 <HAL_UART_IRQHandler+0x13a>
 80053ca:	064a      	lsls	r2, r1, #25
 80053cc:	d509      	bpl.n	80053e2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ce:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80053d0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	2320      	movs	r3, #32
 80053da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80053de:	f7ff ff26 	bl	800522e <HAL_UART_TxCpltCallback>
 80053e2:	bd70      	pop	{r4, r5, r6, pc}
 80053e4:	080053e9 	.word	0x080053e9

080053e8 <UART_DMAAbortOnError>:
{
 80053e8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80053ea:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80053ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80053f2:	f7ff ff57 	bl	80052a4 <HAL_UART_ErrorCallback>
 80053f6:	bd08      	pop	{r3, pc}

080053f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80053f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80053fa:	e003      	b.n	8005404 <LoopCopyDataInit>

080053fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80053fc:	4b0b      	ldr	r3, [pc, #44]	; (800542c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80053fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005400:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005402:	3104      	adds	r1, #4

08005404 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005404:	480a      	ldr	r0, [pc, #40]	; (8005430 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005406:	4b0b      	ldr	r3, [pc, #44]	; (8005434 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005408:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800540a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800540c:	d3f6      	bcc.n	80053fc <CopyDataInit>
  ldr r2, =_sbss
 800540e:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005410:	e002      	b.n	8005418 <LoopFillZerobss>

08005412 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005412:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005414:	f842 3b04 	str.w	r3, [r2], #4

08005418 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800541a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800541c:	d3f9      	bcc.n	8005412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800541e:	f7fe fb0b 	bl	8003a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005422:	f001 fa91 	bl	8006948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005426:	f7fe fa0f 	bl	8003848 <main>
  bx lr
 800542a:	4770      	bx	lr
  ldr r3, =_sidata
 800542c:	08007104 	.word	0x08007104
  ldr r0, =_sdata
 8005430:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005434:	20000084 	.word	0x20000084
  ldr r2, =_sbss
 8005438:	20000084 	.word	0x20000084
  ldr r3, = _ebss
 800543c:	200002c4 	.word	0x200002c4

08005440 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005440:	e7fe      	b.n	8005440 <ADC1_2_IRQHandler>
	...

08005444 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800544a:	6003      	str	r3, [r0, #0]
 800544c:	f000 f962 	bl	8005714 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005450:	4620      	mov	r0, r4
 8005452:	bd10      	pop	{r4, pc}
 8005454:	08006d44 	.word	0x08006d44

08005458 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005458:	b510      	push	{r4, lr}
 800545a:	4604      	mov	r4, r0
 800545c:	f7ff fff2 	bl	8005444 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005460:	4620      	mov	r0, r4
 8005462:	210c      	movs	r1, #12
 8005464:	f000 f933 	bl	80056ce <_ZdlPvj>
 8005468:	4620      	mov	r0, r4
 800546a:	bd10      	pop	{r4, pc}

0800546c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800546c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005470:	9e06      	ldr	r6, [sp, #24]
 8005472:	4680      	mov	r8, r0
 8005474:	4296      	cmp	r6, r2
 8005476:	460f      	mov	r7, r1
 8005478:	4614      	mov	r4, r2
 800547a:	461d      	mov	r5, r3
 800547c:	d103      	bne.n	8005486 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 800547e:	4619      	mov	r1, r3
 8005480:	f000 f99c 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 8005484:	b958      	cbnz	r0, 800549e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8005486:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800548a:	4622      	mov	r2, r4
 800548c:	6803      	ldr	r3, [r0, #0]
 800548e:	9606      	str	r6, [sp, #24]
 8005490:	6a1e      	ldr	r6, [r3, #32]
 8005492:	4639      	mov	r1, r7
 8005494:	462b      	mov	r3, r5
 8005496:	46b4      	mov	ip, r6
 8005498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800549c:	4760      	bx	ip
 800549e:	2006      	movs	r0, #6
 80054a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80054a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	460e      	mov	r6, r1
 80054aa:	4619      	mov	r1, r3
 80054ac:	4683      	mov	fp, r0
 80054ae:	4617      	mov	r7, r2
 80054b0:	4699      	mov	r9, r3
 80054b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054b4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80054b8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80054bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80054be:	f000 f97d 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 80054c2:	b190      	cbz	r0, 80054ea <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 80054c4:	2e00      	cmp	r6, #0
 80054c6:	602c      	str	r4, [r5, #0]
 80054c8:	712f      	strb	r7, [r5, #4]
 80054ca:	db09      	blt.n	80054e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 80054cc:	4434      	add	r4, r6
 80054ce:	45a0      	cmp	r8, r4
 80054d0:	bf0c      	ite	eq
 80054d2:	2406      	moveq	r4, #6
 80054d4:	2401      	movne	r4, #1
 80054d6:	71ac      	strb	r4, [r5, #6]
 80054d8:	2000      	movs	r0, #0
 80054da:	b001      	add	sp, #4
 80054dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054e0:	3602      	adds	r6, #2
 80054e2:	d1f9      	bne.n	80054d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80054e4:	2301      	movs	r3, #1
 80054e6:	71ab      	strb	r3, [r5, #6]
 80054e8:	e7f6      	b.n	80054d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80054ea:	4544      	cmp	r4, r8
 80054ec:	d104      	bne.n	80054f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80054ee:	4651      	mov	r1, sl
 80054f0:	4658      	mov	r0, fp
 80054f2:	f000 f963 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 80054f6:	b988      	cbnz	r0, 800551c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 80054f8:	f8db 0008 	ldr.w	r0, [fp, #8]
 80054fc:	463a      	mov	r2, r7
 80054fe:	6803      	ldr	r3, [r0, #0]
 8005500:	950d      	str	r5, [sp, #52]	; 0x34
 8005502:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8005506:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800550a:	940a      	str	r4, [sp, #40]	; 0x28
 800550c:	69dc      	ldr	r4, [r3, #28]
 800550e:	4631      	mov	r1, r6
 8005510:	464b      	mov	r3, r9
 8005512:	46a4      	mov	ip, r4
 8005514:	b001      	add	sp, #4
 8005516:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	4760      	bx	ip
 800551c:	716f      	strb	r7, [r5, #5]
 800551e:	e7db      	b.n	80054d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08005520 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005524:	4604      	mov	r4, r0
 8005526:	460d      	mov	r5, r1
 8005528:	4616      	mov	r6, r2
 800552a:	461f      	mov	r7, r3
 800552c:	f000 f906 	bl	800573c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005530:	b948      	cbnz	r0, 8005546 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005532:	68a0      	ldr	r0, [r4, #8]
 8005534:	4632      	mov	r2, r6
 8005536:	6803      	ldr	r3, [r0, #0]
 8005538:	4629      	mov	r1, r5
 800553a:	699c      	ldr	r4, [r3, #24]
 800553c:	463b      	mov	r3, r7
 800553e:	46a4      	mov	ip, r4
 8005540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	4760      	bx	ip
 8005546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800554a <_ZdlPv>:
 800554a:	f001 ba21 	b.w	8006990 <free>

0800554e <__aeabi_atexit>:
 800554e:	460b      	mov	r3, r1
 8005550:	4601      	mov	r1, r0
 8005552:	4618      	mov	r0, r3
 8005554:	f001 b9e4 	b.w	8006920 <__cxa_atexit>

08005558 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005558:	b508      	push	{r3, lr}
 800555a:	4780      	blx	r0
 800555c:	f001 f9d1 	bl	8006902 <abort>

08005560 <_ZSt13get_terminatev>:
 8005560:	4b02      	ldr	r3, [pc, #8]	; (800556c <_ZSt13get_terminatev+0xc>)
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	f3bf 8f5b 	dmb	ish
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000014 	.word	0x20000014

08005570 <_ZSt9terminatev>:
 8005570:	b508      	push	{r3, lr}
 8005572:	f7ff fff5 	bl	8005560 <_ZSt13get_terminatev>
 8005576:	f7ff ffef 	bl	8005558 <_ZN10__cxxabiv111__terminateEPFvvE>

0800557a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800557a:	b508      	push	{r3, lr}
 800557c:	4780      	blx	r0
 800557e:	f7ff fff7 	bl	8005570 <_ZSt9terminatev>
	...

08005584 <_ZSt14get_unexpectedv>:
 8005584:	4b02      	ldr	r3, [pc, #8]	; (8005590 <_ZSt14get_unexpectedv+0xc>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	f3bf 8f5b 	dmb	ish
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20000018 	.word	0x20000018

08005594 <_ZSt10unexpectedv>:
 8005594:	b508      	push	{r3, lr}
 8005596:	f7ff fff5 	bl	8005584 <_ZSt14get_unexpectedv>
 800559a:	f7ff ffee 	bl	800557a <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800559e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800559e:	7803      	ldrb	r3, [r0, #0]
 80055a0:	2b47      	cmp	r3, #71	; 0x47
 80055a2:	d117      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055a4:	7843      	ldrb	r3, [r0, #1]
 80055a6:	2b4e      	cmp	r3, #78	; 0x4e
 80055a8:	d114      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055aa:	7883      	ldrb	r3, [r0, #2]
 80055ac:	2b55      	cmp	r3, #85	; 0x55
 80055ae:	d111      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055b0:	78c3      	ldrb	r3, [r0, #3]
 80055b2:	2b43      	cmp	r3, #67	; 0x43
 80055b4:	d10e      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055b6:	7903      	ldrb	r3, [r0, #4]
 80055b8:	2b43      	cmp	r3, #67	; 0x43
 80055ba:	d10b      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055bc:	7943      	ldrb	r3, [r0, #5]
 80055be:	2b2b      	cmp	r3, #43	; 0x2b
 80055c0:	d108      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055c2:	7983      	ldrb	r3, [r0, #6]
 80055c4:	2b2b      	cmp	r3, #43	; 0x2b
 80055c6:	d105      	bne.n	80055d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80055c8:	79c0      	ldrb	r0, [r0, #7]
 80055ca:	2801      	cmp	r0, #1
 80055cc:	bf8c      	ite	hi
 80055ce:	2000      	movhi	r0, #0
 80055d0:	2001      	movls	r0, #1
 80055d2:	4770      	bx	lr
 80055d4:	2000      	movs	r0, #0
 80055d6:	4770      	bx	lr

080055d8 <__cxa_type_match>:
 80055d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80055dc:	461e      	mov	r6, r3
 80055de:	7803      	ldrb	r3, [r0, #0]
 80055e0:	460d      	mov	r5, r1
 80055e2:	2b47      	cmp	r3, #71	; 0x47
 80055e4:	4602      	mov	r2, r0
 80055e6:	79c1      	ldrb	r1, [r0, #7]
 80055e8:	d147      	bne.n	800567a <__cxa_type_match+0xa2>
 80055ea:	7843      	ldrb	r3, [r0, #1]
 80055ec:	2b4e      	cmp	r3, #78	; 0x4e
 80055ee:	d144      	bne.n	800567a <__cxa_type_match+0xa2>
 80055f0:	7883      	ldrb	r3, [r0, #2]
 80055f2:	2b55      	cmp	r3, #85	; 0x55
 80055f4:	d141      	bne.n	800567a <__cxa_type_match+0xa2>
 80055f6:	78c3      	ldrb	r3, [r0, #3]
 80055f8:	2b43      	cmp	r3, #67	; 0x43
 80055fa:	d13e      	bne.n	800567a <__cxa_type_match+0xa2>
 80055fc:	7903      	ldrb	r3, [r0, #4]
 80055fe:	2b46      	cmp	r3, #70	; 0x46
 8005600:	d13b      	bne.n	800567a <__cxa_type_match+0xa2>
 8005602:	7943      	ldrb	r3, [r0, #5]
 8005604:	2b4f      	cmp	r3, #79	; 0x4f
 8005606:	d138      	bne.n	800567a <__cxa_type_match+0xa2>
 8005608:	7983      	ldrb	r3, [r0, #6]
 800560a:	2b52      	cmp	r3, #82	; 0x52
 800560c:	d135      	bne.n	800567a <__cxa_type_match+0xa2>
 800560e:	2900      	cmp	r1, #0
 8005610:	d133      	bne.n	800567a <__cxa_type_match+0xa2>
 8005612:	2301      	movs	r3, #1
 8005614:	4608      	mov	r0, r1
 8005616:	2400      	movs	r4, #0
 8005618:	9401      	str	r4, [sp, #4]
 800561a:	bb33      	cbnz	r3, 800566a <__cxa_type_match+0x92>
 800561c:	bb38      	cbnz	r0, 800566e <__cxa_type_match+0x96>
 800561e:	2901      	cmp	r1, #1
 8005620:	bf0a      	itet	eq
 8005622:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005626:	f1a2 0320 	subne.w	r3, r2, #32
 800562a:	3b78      	subeq	r3, #120	; 0x78
 800562c:	2901      	cmp	r1, #1
 800562e:	bf0c      	ite	eq
 8005630:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005634:	3258      	addne	r2, #88	; 0x58
 8005636:	681c      	ldr	r4, [r3, #0]
 8005638:	9201      	str	r2, [sp, #4]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	4620      	mov	r0, r4
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4798      	blx	r3
 8005642:	b1b0      	cbz	r0, 8005672 <__cxa_type_match+0x9a>
 8005644:	2702      	movs	r7, #2
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	9301      	str	r3, [sp, #4]
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	aa01      	add	r2, sp, #4
 8005650:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005654:	4621      	mov	r1, r4
 8005656:	2301      	movs	r3, #1
 8005658:	4628      	mov	r0, r5
 800565a:	47c0      	blx	r8
 800565c:	b158      	cbz	r0, 8005676 <__cxa_type_match+0x9e>
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	4638      	mov	r0, r7
 8005664:	b002      	add	sp, #8
 8005666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566a:	4c08      	ldr	r4, [pc, #32]	; (800568c <__cxa_type_match+0xb4>)
 800566c:	e7e5      	b.n	800563a <__cxa_type_match+0x62>
 800566e:	4c08      	ldr	r4, [pc, #32]	; (8005690 <__cxa_type_match+0xb8>)
 8005670:	e7e3      	b.n	800563a <__cxa_type_match+0x62>
 8005672:	2701      	movs	r7, #1
 8005674:	e7ea      	b.n	800564c <__cxa_type_match+0x74>
 8005676:	4607      	mov	r7, r0
 8005678:	e7f3      	b.n	8005662 <__cxa_type_match+0x8a>
 800567a:	4610      	mov	r0, r2
 800567c:	f7ff ff8f 	bl	800559e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8005680:	f080 0001 	eor.w	r0, r0, #1
 8005684:	b2c0      	uxtb	r0, r0
 8005686:	2300      	movs	r3, #0
 8005688:	e7c5      	b.n	8005616 <__cxa_type_match+0x3e>
 800568a:	bf00      	nop
 800568c:	08006ddc 	.word	0x08006ddc
 8005690:	08006de4 	.word	0x08006de4

08005694 <__cxa_begin_cleanup>:
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
 8005698:	f000 f91e 	bl	80058d8 <__cxa_get_globals>
 800569c:	4602      	mov	r2, r0
 800569e:	4620      	mov	r0, r4
 80056a0:	f1a4 0120 	sub.w	r1, r4, #32
 80056a4:	f7ff ff7b 	bl	800559e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80056a8:	b160      	cbz	r0, 80056c4 <__cxa_begin_cleanup+0x30>
 80056aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80056ae:	3301      	adds	r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	f844 3c04 	str.w	r3, [r4, #-4]
 80056b6:	d103      	bne.n	80056c0 <__cxa_begin_cleanup+0x2c>
 80056b8:	6893      	ldr	r3, [r2, #8]
 80056ba:	f844 3c08 	str.w	r3, [r4, #-8]
 80056be:	6091      	str	r1, [r2, #8]
 80056c0:	2001      	movs	r0, #1
 80056c2:	bd10      	pop	{r4, pc}
 80056c4:	6893      	ldr	r3, [r2, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f9      	beq.n	80056be <__cxa_begin_cleanup+0x2a>
 80056ca:	f7ff ff51 	bl	8005570 <_ZSt9terminatev>

080056ce <_ZdlPvj>:
 80056ce:	f7ff bf3c 	b.w	800554a <_ZdlPv>

080056d2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80056d2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80056d4:	2310      	movs	r3, #16
 80056d6:	2400      	movs	r4, #0
 80056d8:	9302      	str	r3, [sp, #8]
 80056da:	6803      	ldr	r3, [r0, #0]
 80056dc:	4615      	mov	r5, r2
 80056de:	699e      	ldr	r6, [r3, #24]
 80056e0:	9400      	str	r4, [sp, #0]
 80056e2:	466b      	mov	r3, sp
 80056e4:	f88d 4004 	strb.w	r4, [sp, #4]
 80056e8:	9403      	str	r4, [sp, #12]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	47b0      	blx	r6
 80056ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80056f2:	f003 0306 	and.w	r3, r3, #6
 80056f6:	2b06      	cmp	r3, #6
 80056f8:	bf09      	itett	eq
 80056fa:	2001      	moveq	r0, #1
 80056fc:	4620      	movne	r0, r4
 80056fe:	9b00      	ldreq	r3, [sp, #0]
 8005700:	602b      	streq	r3, [r5, #0]
 8005702:	b004      	add	sp, #16
 8005704:	bd70      	pop	{r4, r5, r6, pc}

08005706 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8005706:	9800      	ldr	r0, [sp, #0]
 8005708:	4290      	cmp	r0, r2
 800570a:	bf0c      	ite	eq
 800570c:	2006      	moveq	r0, #6
 800570e:	2001      	movne	r0, #1
 8005710:	4770      	bx	lr
	...

08005714 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800571a:	6003      	str	r3, [r0, #0]
 800571c:	f000 f84b 	bl	80057b6 <_ZNSt9type_infoD1Ev>
 8005720:	4620      	mov	r0, r4
 8005722:	bd10      	pop	{r4, pc}
 8005724:	08006da0 	.word	0x08006da0

08005728 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005728:	b510      	push	{r4, lr}
 800572a:	4604      	mov	r4, r0
 800572c:	f7ff fff2 	bl	8005714 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005730:	4620      	mov	r0, r4
 8005732:	2108      	movs	r1, #8
 8005734:	f7ff ffcb 	bl	80056ce <_ZdlPvj>
 8005738:	4620      	mov	r0, r4
 800573a:	bd10      	pop	{r4, pc}

0800573c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4615      	mov	r5, r2
 8005740:	461c      	mov	r4, r3
 8005742:	f000 f83b 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 8005746:	b120      	cbz	r0, 8005752 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005748:	2308      	movs	r3, #8
 800574a:	60e3      	str	r3, [r4, #12]
 800574c:	2306      	movs	r3, #6
 800574e:	6025      	str	r5, [r4, #0]
 8005750:	7123      	strb	r3, [r4, #4]
 8005752:	bd38      	pop	{r3, r4, r5, pc}

08005754 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	4605      	mov	r5, r0
 800575a:	460c      	mov	r4, r1
 800575c:	4616      	mov	r6, r2
 800575e:	461f      	mov	r7, r3
 8005760:	f000 f82c 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 8005764:	b948      	cbnz	r0, 800577a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005766:	2f03      	cmp	r7, #3
 8005768:	d807      	bhi.n	800577a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4632      	mov	r2, r6
 800576e:	4629      	mov	r1, r5
 8005770:	4620      	mov	r0, r4
 8005772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	4718      	bx	r3
 800577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800577e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800577e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005782:	9e06      	ldr	r6, [sp, #24]
 8005784:	4698      	mov	r8, r3
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	4607      	mov	r7, r0
 800578a:	429e      	cmp	r6, r3
 800578c:	4615      	mov	r5, r2
 800578e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005790:	d103      	bne.n	800579a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8005792:	9907      	ldr	r1, [sp, #28]
 8005794:	f000 f812 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 8005798:	b958      	cbnz	r0, 80057b2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 800579a:	4641      	mov	r1, r8
 800579c:	4638      	mov	r0, r7
 800579e:	f000 f80d 	bl	80057bc <_ZNKSt9type_infoeqERKS_>
 80057a2:	b118      	cbz	r0, 80057ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 80057a4:	2301      	movs	r3, #1
 80057a6:	6026      	str	r6, [r4, #0]
 80057a8:	7125      	strb	r5, [r4, #4]
 80057aa:	71a3      	strb	r3, [r4, #6]
 80057ac:	2000      	movs	r0, #0
 80057ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b2:	7165      	strb	r5, [r4, #5]
 80057b4:	e7fa      	b.n	80057ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

080057b6 <_ZNSt9type_infoD1Ev>:
 80057b6:	4770      	bx	lr

080057b8 <_ZNKSt9type_info14__is_pointer_pEv>:
 80057b8:	2000      	movs	r0, #0
 80057ba:	4770      	bx	lr

080057bc <_ZNKSt9type_infoeqERKS_>:
 80057bc:	4281      	cmp	r1, r0
 80057be:	b508      	push	{r3, lr}
 80057c0:	d00e      	beq.n	80057e0 <_ZNKSt9type_infoeqERKS_+0x24>
 80057c2:	6840      	ldr	r0, [r0, #4]
 80057c4:	7803      	ldrb	r3, [r0, #0]
 80057c6:	2b2a      	cmp	r3, #42	; 0x2a
 80057c8:	d00c      	beq.n	80057e4 <_ZNKSt9type_infoeqERKS_+0x28>
 80057ca:	6849      	ldr	r1, [r1, #4]
 80057cc:	780b      	ldrb	r3, [r1, #0]
 80057ce:	2b2a      	cmp	r3, #42	; 0x2a
 80057d0:	bf08      	it	eq
 80057d2:	3101      	addeq	r1, #1
 80057d4:	f7fa fcbc 	bl	8000150 <strcmp>
 80057d8:	fab0 f080 	clz	r0, r0
 80057dc:	0940      	lsrs	r0, r0, #5
 80057de:	bd08      	pop	{r3, pc}
 80057e0:	2001      	movs	r0, #1
 80057e2:	bd08      	pop	{r3, pc}
 80057e4:	2000      	movs	r0, #0
 80057e6:	bd08      	pop	{r3, pc}

080057e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80057e8:	7803      	ldrb	r3, [r0, #0]
 80057ea:	2b47      	cmp	r3, #71	; 0x47
 80057ec:	d117      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80057ee:	7843      	ldrb	r3, [r0, #1]
 80057f0:	2b4e      	cmp	r3, #78	; 0x4e
 80057f2:	d114      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80057f4:	7883      	ldrb	r3, [r0, #2]
 80057f6:	2b55      	cmp	r3, #85	; 0x55
 80057f8:	d111      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80057fa:	78c3      	ldrb	r3, [r0, #3]
 80057fc:	2b43      	cmp	r3, #67	; 0x43
 80057fe:	d10e      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005800:	7903      	ldrb	r3, [r0, #4]
 8005802:	2b43      	cmp	r3, #67	; 0x43
 8005804:	d10b      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005806:	7943      	ldrb	r3, [r0, #5]
 8005808:	2b2b      	cmp	r3, #43	; 0x2b
 800580a:	d108      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800580c:	7983      	ldrb	r3, [r0, #6]
 800580e:	2b2b      	cmp	r3, #43	; 0x2b
 8005810:	d105      	bne.n	800581e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005812:	79c0      	ldrb	r0, [r0, #7]
 8005814:	2801      	cmp	r0, #1
 8005816:	bf8c      	ite	hi
 8005818:	2000      	movhi	r0, #0
 800581a:	2001      	movls	r0, #1
 800581c:	4770      	bx	lr
 800581e:	2000      	movs	r0, #0
 8005820:	4770      	bx	lr

08005822 <__cxa_call_unexpected>:
 8005822:	b538      	push	{r3, r4, r5, lr}
 8005824:	4602      	mov	r2, r0
 8005826:	f7ff ffdf 	bl	80057e8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800582a:	b140      	cbz	r0, 800583e <__cxa_call_unexpected+0x1c>
 800582c:	2500      	movs	r5, #0
 800582e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8005832:	4610      	mov	r0, r2
 8005834:	f000 f826 	bl	8005884 <__cxa_begin_catch>
 8005838:	b125      	cbz	r5, 8005844 <__cxa_call_unexpected+0x22>
 800583a:	f7ff feab 	bl	8005594 <_ZSt10unexpectedv>
 800583e:	4604      	mov	r4, r0
 8005840:	2501      	movs	r5, #1
 8005842:	e7f6      	b.n	8005832 <__cxa_call_unexpected+0x10>
 8005844:	4620      	mov	r0, r4
 8005846:	f7ff fe98 	bl	800557a <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800584a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800584a:	7803      	ldrb	r3, [r0, #0]
 800584c:	2b47      	cmp	r3, #71	; 0x47
 800584e:	d117      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005850:	7843      	ldrb	r3, [r0, #1]
 8005852:	2b4e      	cmp	r3, #78	; 0x4e
 8005854:	d114      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005856:	7883      	ldrb	r3, [r0, #2]
 8005858:	2b55      	cmp	r3, #85	; 0x55
 800585a:	d111      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800585c:	78c3      	ldrb	r3, [r0, #3]
 800585e:	2b43      	cmp	r3, #67	; 0x43
 8005860:	d10e      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005862:	7903      	ldrb	r3, [r0, #4]
 8005864:	2b43      	cmp	r3, #67	; 0x43
 8005866:	d10b      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005868:	7943      	ldrb	r3, [r0, #5]
 800586a:	2b2b      	cmp	r3, #43	; 0x2b
 800586c:	d108      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800586e:	7983      	ldrb	r3, [r0, #6]
 8005870:	2b2b      	cmp	r3, #43	; 0x2b
 8005872:	d105      	bne.n	8005880 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8005874:	79c0      	ldrb	r0, [r0, #7]
 8005876:	2801      	cmp	r0, #1
 8005878:	bf8c      	ite	hi
 800587a:	2000      	movhi	r0, #0
 800587c:	2001      	movls	r0, #1
 800587e:	4770      	bx	lr
 8005880:	2000      	movs	r0, #0
 8005882:	4770      	bx	lr

08005884 <__cxa_begin_catch>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4605      	mov	r5, r0
 8005888:	f000 f826 	bl	80058d8 <__cxa_get_globals>
 800588c:	4601      	mov	r1, r0
 800588e:	6802      	ldr	r2, [r0, #0]
 8005890:	4628      	mov	r0, r5
 8005892:	f1a5 0420 	sub.w	r4, r5, #32
 8005896:	f7ff ffd8 	bl	800584a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800589a:	b930      	cbnz	r0, 80058aa <__cxa_begin_catch+0x26>
 800589c:	b10a      	cbz	r2, 80058a2 <__cxa_begin_catch+0x1e>
 800589e:	f7ff fe67 	bl	8005570 <_ZSt9terminatev>
 80058a2:	600c      	str	r4, [r1, #0]
 80058a4:	4614      	mov	r4, r2
 80058a6:	4620      	mov	r0, r4
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 80058ae:	4628      	mov	r0, r5
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bfb4      	ite	lt
 80058b4:	f1c3 0301 	rsblt	r3, r3, #1
 80058b8:	3301      	addge	r3, #1
 80058ba:	f845 3c0c 	str.w	r3, [r5, #-12]
 80058be:	684b      	ldr	r3, [r1, #4]
 80058c0:	42a2      	cmp	r2, r4
 80058c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80058c6:	604b      	str	r3, [r1, #4]
 80058c8:	bf1c      	itt	ne
 80058ca:	f845 2c10 	strne.w	r2, [r5, #-16]
 80058ce:	600c      	strne	r4, [r1, #0]
 80058d0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80058d2:	f7fb fdb5 	bl	8001440 <_Unwind_Complete>
 80058d6:	e7e6      	b.n	80058a6 <__cxa_begin_catch+0x22>

080058d8 <__cxa_get_globals>:
 80058d8:	4800      	ldr	r0, [pc, #0]	; (80058dc <__cxa_get_globals+0x4>)
 80058da:	4770      	bx	lr
 80058dc:	20000188 	.word	0x20000188

080058e0 <pow>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b08f      	sub	sp, #60	; 0x3c
 80058e6:	461d      	mov	r5, r3
 80058e8:	4680      	mov	r8, r0
 80058ea:	4689      	mov	r9, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	f000 f95b 	bl	8005ba8 <__ieee754_pow>
 80058f2:	4fa5      	ldr	r7, [pc, #660]	; (8005b88 <pow+0x2a8>)
 80058f4:	e9cd 0100 	strd	r0, r1, [sp]
 80058f8:	f997 3000 	ldrsb.w	r3, [r7]
 80058fc:	463e      	mov	r6, r7
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	d05f      	beq.n	80059c4 <pow+0xe4>
 8005904:	4622      	mov	r2, r4
 8005906:	462b      	mov	r3, r5
 8005908:	4620      	mov	r0, r4
 800590a:	4629      	mov	r1, r5
 800590c:	f7fb f87c 	bl	8000a08 <__aeabi_dcmpun>
 8005910:	4682      	mov	sl, r0
 8005912:	2800      	cmp	r0, #0
 8005914:	d156      	bne.n	80059c4 <pow+0xe4>
 8005916:	4642      	mov	r2, r8
 8005918:	464b      	mov	r3, r9
 800591a:	4640      	mov	r0, r8
 800591c:	4649      	mov	r1, r9
 800591e:	f7fb f873 	bl	8000a08 <__aeabi_dcmpun>
 8005922:	9003      	str	r0, [sp, #12]
 8005924:	b1e8      	cbz	r0, 8005962 <pow+0x82>
 8005926:	2200      	movs	r2, #0
 8005928:	2300      	movs	r3, #0
 800592a:	4620      	mov	r0, r4
 800592c:	4629      	mov	r1, r5
 800592e:	f7fb f839 	bl	80009a4 <__aeabi_dcmpeq>
 8005932:	2800      	cmp	r0, #0
 8005934:	d046      	beq.n	80059c4 <pow+0xe4>
 8005936:	2301      	movs	r3, #1
 8005938:	2200      	movs	r2, #0
 800593a:	9304      	str	r3, [sp, #16]
 800593c:	4b93      	ldr	r3, [pc, #588]	; (8005b8c <pow+0x2ac>)
 800593e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005942:	9305      	str	r3, [sp, #20]
 8005944:	4b92      	ldr	r3, [pc, #584]	; (8005b90 <pow+0x2b0>)
 8005946:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800594a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800594e:	9b02      	ldr	r3, [sp, #8]
 8005950:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d031      	beq.n	80059bc <pow+0xdc>
 8005958:	a804      	add	r0, sp, #16
 800595a:	f000 fecc 	bl	80066f6 <matherr>
 800595e:	bb38      	cbnz	r0, 80059b0 <pow+0xd0>
 8005960:	e058      	b.n	8005a14 <pow+0x134>
 8005962:	f04f 0a00 	mov.w	sl, #0
 8005966:	f04f 0b00 	mov.w	fp, #0
 800596a:	4652      	mov	r2, sl
 800596c:	465b      	mov	r3, fp
 800596e:	4640      	mov	r0, r8
 8005970:	4649      	mov	r1, r9
 8005972:	f7fb f817 	bl	80009a4 <__aeabi_dcmpeq>
 8005976:	2800      	cmp	r0, #0
 8005978:	d051      	beq.n	8005a1e <pow+0x13e>
 800597a:	4652      	mov	r2, sl
 800597c:	465b      	mov	r3, fp
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb f80f 	bl	80009a4 <__aeabi_dcmpeq>
 8005986:	4606      	mov	r6, r0
 8005988:	b308      	cbz	r0, 80059ce <pow+0xee>
 800598a:	2301      	movs	r3, #1
 800598c:	9304      	str	r3, [sp, #16]
 800598e:	4b7f      	ldr	r3, [pc, #508]	; (8005b8c <pow+0x2ac>)
 8005990:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005994:	9305      	str	r3, [sp, #20]
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800599c:	930c      	str	r3, [sp, #48]	; 0x30
 800599e:	9b02      	ldr	r3, [sp, #8]
 80059a0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0d7      	beq.n	8005958 <pow+0x78>
 80059a8:	2200      	movs	r2, #0
 80059aa:	4b79      	ldr	r3, [pc, #484]	; (8005b90 <pow+0x2b0>)
 80059ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059b2:	b11b      	cbz	r3, 80059bc <pow+0xdc>
 80059b4:	f000 ffc2 	bl	800693c <__errno>
 80059b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059ba:	6003      	str	r3, [r0, #0]
 80059bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80059c0:	e88d 0018 	stmia.w	sp, {r3, r4}
 80059c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059c8:	b00f      	add	sp, #60	; 0x3c
 80059ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ce:	4620      	mov	r0, r4
 80059d0:	4629      	mov	r1, r5
 80059d2:	f000 fe8a 	bl	80066ea <finite>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d0f4      	beq.n	80059c4 <pow+0xe4>
 80059da:	4652      	mov	r2, sl
 80059dc:	465b      	mov	r3, fp
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fa ffe9 	bl	80009b8 <__aeabi_dcmplt>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0ec      	beq.n	80059c4 <pow+0xe4>
 80059ea:	2301      	movs	r3, #1
 80059ec:	9304      	str	r3, [sp, #16]
 80059ee:	4b67      	ldr	r3, [pc, #412]	; (8005b8c <pow+0x2ac>)
 80059f0:	960c      	str	r6, [sp, #48]	; 0x30
 80059f2:	9305      	str	r3, [sp, #20]
 80059f4:	f997 3000 	ldrsb.w	r3, [r7]
 80059f8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80059fc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a00:	b913      	cbnz	r3, 8005a08 <pow+0x128>
 8005a02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8005a06:	e7a7      	b.n	8005958 <pow+0x78>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	4962      	ldr	r1, [pc, #392]	; (8005b94 <pow+0x2b4>)
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a12:	d1a1      	bne.n	8005958 <pow+0x78>
 8005a14:	f000 ff92 	bl	800693c <__errno>
 8005a18:	2321      	movs	r3, #33	; 0x21
 8005a1a:	6003      	str	r3, [r0, #0]
 8005a1c:	e7c8      	b.n	80059b0 <pow+0xd0>
 8005a1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a22:	f000 fe62 	bl	80066ea <finite>
 8005a26:	9002      	str	r0, [sp, #8]
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d17f      	bne.n	8005b2c <pow+0x24c>
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	f000 fe5b 	bl	80066ea <finite>
 8005a34:	2800      	cmp	r0, #0
 8005a36:	d079      	beq.n	8005b2c <pow+0x24c>
 8005a38:	4620      	mov	r0, r4
 8005a3a:	4629      	mov	r1, r5
 8005a3c:	f000 fe55 	bl	80066ea <finite>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d073      	beq.n	8005b2c <pow+0x24c>
 8005a44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a48:	4619      	mov	r1, r3
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	f7fa ffdc 	bl	8000a08 <__aeabi_dcmpun>
 8005a50:	f997 7000 	ldrsb.w	r7, [r7]
 8005a54:	4b4d      	ldr	r3, [pc, #308]	; (8005b8c <pow+0x2ac>)
 8005a56:	b1a0      	cbz	r0, 8005a82 <pow+0x1a2>
 8005a58:	2201      	movs	r2, #1
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	9b02      	ldr	r3, [sp, #8]
 8005a5e:	9204      	str	r2, [sp, #16]
 8005a60:	930c      	str	r3, [sp, #48]	; 0x30
 8005a62:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005a66:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a6a:	2f00      	cmp	r7, #0
 8005a6c:	d0c9      	beq.n	8005a02 <pow+0x122>
 8005a6e:	4652      	mov	r2, sl
 8005a70:	465b      	mov	r3, fp
 8005a72:	4650      	mov	r0, sl
 8005a74:	4659      	mov	r1, fp
 8005a76:	f7fa fe57 	bl	8000728 <__aeabi_ddiv>
 8005a7a:	2f02      	cmp	r7, #2
 8005a7c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a80:	e7c7      	b.n	8005a12 <pow+0x132>
 8005a82:	2203      	movs	r2, #3
 8005a84:	9305      	str	r3, [sp, #20]
 8005a86:	9204      	str	r2, [sp, #16]
 8005a88:	900c      	str	r0, [sp, #48]	; 0x30
 8005a8a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005a8e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005a92:	bb57      	cbnz	r7, 8005aea <pow+0x20a>
 8005a94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005a98:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <pow+0x2b8>)
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4652      	mov	r2, sl
 8005aa4:	465b      	mov	r3, fp
 8005aa6:	f7fa ff87 	bl	80009b8 <__aeabi_dcmplt>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	d064      	beq.n	8005b78 <pow+0x298>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	4b3a      	ldr	r3, [pc, #232]	; (8005b9c <pow+0x2bc>)
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fd0d 	bl	80004d4 <__aeabi_dmul>
 8005aba:	4604      	mov	r4, r0
 8005abc:	460d      	mov	r5, r1
 8005abe:	f000 fe23 	bl	8006708 <rint>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4629      	mov	r1, r5
 8005aca:	f7fa ff6b 	bl	80009a4 <__aeabi_dcmpeq>
 8005ace:	b920      	cbnz	r0, 8005ada <pow+0x1fa>
 8005ad0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <pow+0x2c0>)
 8005ad6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005ada:	f996 3000 	ldrsb.w	r3, [r6]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d14a      	bne.n	8005b78 <pow+0x298>
 8005ae2:	f000 ff2b 	bl	800693c <__errno>
 8005ae6:	2322      	movs	r3, #34	; 0x22
 8005ae8:	e797      	b.n	8005a1a <pow+0x13a>
 8005aea:	2200      	movs	r2, #0
 8005aec:	4b2d      	ldr	r3, [pc, #180]	; (8005ba4 <pow+0x2c4>)
 8005aee:	4640      	mov	r0, r8
 8005af0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005af4:	4649      	mov	r1, r9
 8005af6:	4652      	mov	r2, sl
 8005af8:	465b      	mov	r3, fp
 8005afa:	f7fa ff5d 	bl	80009b8 <__aeabi_dcmplt>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d0eb      	beq.n	8005ada <pow+0x1fa>
 8005b02:	2200      	movs	r2, #0
 8005b04:	4b25      	ldr	r3, [pc, #148]	; (8005b9c <pow+0x2bc>)
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fce3 	bl	80004d4 <__aeabi_dmul>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	460d      	mov	r5, r1
 8005b12:	f000 fdf9 	bl	8006708 <rint>
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	4629      	mov	r1, r5
 8005b1e:	f7fa ff41 	bl	80009a4 <__aeabi_dcmpeq>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d1d9      	bne.n	8005ada <pow+0x1fa>
 8005b26:	2200      	movs	r2, #0
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <pow+0x2b4>)
 8005b2a:	e7d4      	b.n	8005ad6 <pow+0x1f6>
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b32:	2300      	movs	r3, #0
 8005b34:	f7fa ff36 	bl	80009a4 <__aeabi_dcmpeq>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f43f af43 	beq.w	80059c4 <pow+0xe4>
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4649      	mov	r1, r9
 8005b42:	f000 fdd2 	bl	80066ea <finite>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f43f af3c 	beq.w	80059c4 <pow+0xe4>
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f000 fdcb 	bl	80066ea <finite>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f43f af35 	beq.w	80059c4 <pow+0xe4>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	9304      	str	r3, [sp, #16]
 8005b5e:	4b0b      	ldr	r3, [pc, #44]	; (8005b8c <pow+0x2ac>)
 8005b60:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	2300      	movs	r3, #0
 8005b68:	2400      	movs	r4, #0
 8005b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005b72:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005b76:	e7b0      	b.n	8005ada <pow+0x1fa>
 8005b78:	a804      	add	r0, sp, #16
 8005b7a:	f000 fdbc 	bl	80066f6 <matherr>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	f47f af16 	bne.w	80059b0 <pow+0xd0>
 8005b84:	e7ad      	b.n	8005ae2 <pow+0x202>
 8005b86:	bf00      	nop
 8005b88:	2000001c 	.word	0x2000001c
 8005b8c:	08006e30 	.word	0x08006e30
 8005b90:	3ff00000 	.word	0x3ff00000
 8005b94:	fff00000 	.word	0xfff00000
 8005b98:	47efffff 	.word	0x47efffff
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	c7efffff 	.word	0xc7efffff
 8005ba4:	7ff00000 	.word	0x7ff00000

08005ba8 <__ieee754_pow>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	b093      	sub	sp, #76	; 0x4c
 8005bae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bb2:	9e03      	ldr	r6, [sp, #12]
 8005bb4:	9a02      	ldr	r2, [sp, #8]
 8005bb6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8005bba:	ea55 0302 	orrs.w	r3, r5, r2
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	4688      	mov	r8, r1
 8005bc2:	4682      	mov	sl, r0
 8005bc4:	4689      	mov	r9, r1
 8005bc6:	f000 849e 	beq.w	8006506 <__ieee754_pow+0x95e>
 8005bca:	4b77      	ldr	r3, [pc, #476]	; (8005da8 <__ieee754_pow+0x200>)
 8005bcc:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	dc09      	bgt.n	8005be8 <__ieee754_pow+0x40>
 8005bd4:	d103      	bne.n	8005bde <__ieee754_pow+0x36>
 8005bd6:	b938      	cbnz	r0, 8005be8 <__ieee754_pow+0x40>
 8005bd8:	42a5      	cmp	r5, r4
 8005bda:	dc0d      	bgt.n	8005bf8 <__ieee754_pow+0x50>
 8005bdc:	e001      	b.n	8005be2 <__ieee754_pow+0x3a>
 8005bde:	429d      	cmp	r5, r3
 8005be0:	dc02      	bgt.n	8005be8 <__ieee754_pow+0x40>
 8005be2:	429d      	cmp	r5, r3
 8005be4:	d10e      	bne.n	8005c04 <__ieee754_pow+0x5c>
 8005be6:	b16a      	cbz	r2, 8005c04 <__ieee754_pow+0x5c>
 8005be8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005bec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005bf0:	ea54 030a 	orrs.w	r3, r4, sl
 8005bf4:	f000 8487 	beq.w	8006506 <__ieee754_pow+0x95e>
 8005bf8:	486c      	ldr	r0, [pc, #432]	; (8005dac <__ieee754_pow+0x204>)
 8005bfa:	b013      	add	sp, #76	; 0x4c
 8005bfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	f000 bd7c 	b.w	80066fc <nan>
 8005c04:	f1b9 0f00 	cmp.w	r9, #0
 8005c08:	da4f      	bge.n	8005caa <__ieee754_pow+0x102>
 8005c0a:	4b69      	ldr	r3, [pc, #420]	; (8005db0 <__ieee754_pow+0x208>)
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	dc4a      	bgt.n	8005ca6 <__ieee754_pow+0xfe>
 8005c10:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005c14:	429d      	cmp	r5, r3
 8005c16:	dd48      	ble.n	8005caa <__ieee754_pow+0x102>
 8005c18:	152b      	asrs	r3, r5, #20
 8005c1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c1e:	2b14      	cmp	r3, #20
 8005c20:	dd24      	ble.n	8005c6c <__ieee754_pow+0xc4>
 8005c22:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005c26:	fa22 f103 	lsr.w	r1, r2, r3
 8005c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d13b      	bne.n	8005caa <__ieee754_pow+0x102>
 8005c32:	f001 0101 	and.w	r1, r1, #1
 8005c36:	f1c1 0302 	rsb	r3, r1, #2
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	d156      	bne.n	8005cee <__ieee754_pow+0x146>
 8005c40:	4b59      	ldr	r3, [pc, #356]	; (8005da8 <__ieee754_pow+0x200>)
 8005c42:	429d      	cmp	r5, r3
 8005c44:	d122      	bne.n	8005c8c <__ieee754_pow+0xe4>
 8005c46:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005c4a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005c4e:	ea53 030a 	orrs.w	r3, r3, sl
 8005c52:	f000 8458 	beq.w	8006506 <__ieee754_pow+0x95e>
 8005c56:	4b57      	ldr	r3, [pc, #348]	; (8005db4 <__ieee754_pow+0x20c>)
 8005c58:	429c      	cmp	r4, r3
 8005c5a:	dd28      	ble.n	8005cae <__ieee754_pow+0x106>
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	f280 8456 	bge.w	800650e <__ieee754_pow+0x966>
 8005c62:	2000      	movs	r0, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	b013      	add	sp, #76	; 0x4c
 8005c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6c:	2a00      	cmp	r2, #0
 8005c6e:	d13c      	bne.n	8005cea <__ieee754_pow+0x142>
 8005c70:	f1c3 0314 	rsb	r3, r3, #20
 8005c74:	fa45 f103 	asr.w	r1, r5, r3
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	429d      	cmp	r5, r3
 8005c7e:	f040 844e 	bne.w	800651e <__ieee754_pow+0x976>
 8005c82:	f001 0101 	and.w	r1, r1, #1
 8005c86:	f1c1 0302 	rsb	r3, r1, #2
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	; (8005db8 <__ieee754_pow+0x210>)
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	d114      	bne.n	8005cbc <__ieee754_pow+0x114>
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	f280 843f 	bge.w	8006516 <__ieee754_pow+0x96e>
 8005c98:	463a      	mov	r2, r7
 8005c9a:	4643      	mov	r3, r8
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	4946      	ldr	r1, [pc, #280]	; (8005db8 <__ieee754_pow+0x210>)
 8005ca0:	f7fa fd42 	bl	8000728 <__aeabi_ddiv>
 8005ca4:	e7df      	b.n	8005c66 <__ieee754_pow+0xbe>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e7c7      	b.n	8005c3a <__ieee754_pow+0x92>
 8005caa:	2300      	movs	r3, #0
 8005cac:	e7c5      	b.n	8005c3a <__ieee754_pow+0x92>
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	dad7      	bge.n	8005c62 <__ieee754_pow+0xba>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	9802      	ldr	r0, [sp, #8]
 8005cb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005cba:	e7d4      	b.n	8005c66 <__ieee754_pow+0xbe>
 8005cbc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005cc0:	d106      	bne.n	8005cd0 <__ieee754_pow+0x128>
 8005cc2:	463a      	mov	r2, r7
 8005cc4:	4643      	mov	r3, r8
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	4641      	mov	r1, r8
 8005cca:	f7fa fc03 	bl	80004d4 <__aeabi_dmul>
 8005cce:	e7ca      	b.n	8005c66 <__ieee754_pow+0xbe>
 8005cd0:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <__ieee754_pow+0x214>)
 8005cd2:	429e      	cmp	r6, r3
 8005cd4:	d10b      	bne.n	8005cee <__ieee754_pow+0x146>
 8005cd6:	f1b9 0f00 	cmp.w	r9, #0
 8005cda:	db08      	blt.n	8005cee <__ieee754_pow+0x146>
 8005cdc:	4638      	mov	r0, r7
 8005cde:	4641      	mov	r1, r8
 8005ce0:	b013      	add	sp, #76	; 0x4c
 8005ce2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f000 bc51 	b.w	800658c <__ieee754_sqrt>
 8005cea:	2300      	movs	r3, #0
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	4638      	mov	r0, r7
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	f000 fcf7 	bl	80066e4 <fabs>
 8005cf6:	f1ba 0f00 	cmp.w	sl, #0
 8005cfa:	d125      	bne.n	8005d48 <__ieee754_pow+0x1a0>
 8005cfc:	b124      	cbz	r4, 8005d08 <__ieee754_pow+0x160>
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <__ieee754_pow+0x210>)
 8005d00:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d11f      	bne.n	8005d48 <__ieee754_pow+0x1a0>
 8005d08:	2e00      	cmp	r6, #0
 8005d0a:	da05      	bge.n	8005d18 <__ieee754_pow+0x170>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	2000      	movs	r0, #0
 8005d12:	4929      	ldr	r1, [pc, #164]	; (8005db8 <__ieee754_pow+0x210>)
 8005d14:	f7fa fd08 	bl	8000728 <__aeabi_ddiv>
 8005d18:	f1b9 0f00 	cmp.w	r9, #0
 8005d1c:	daa3      	bge.n	8005c66 <__ieee754_pow+0xbe>
 8005d1e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005d22:	9b00      	ldr	r3, [sp, #0]
 8005d24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005d28:	4323      	orrs	r3, r4
 8005d2a:	d106      	bne.n	8005d3a <__ieee754_pow+0x192>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	f7fa fa1c 	bl	800016c <__aeabi_dsub>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e7b2      	b.n	8005ca0 <__ieee754_pow+0xf8>
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d192      	bne.n	8005c66 <__ieee754_pow+0xbe>
 8005d40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d44:	4619      	mov	r1, r3
 8005d46:	e78e      	b.n	8005c66 <__ieee754_pow+0xbe>
 8005d48:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8005d4c:	f109 33ff 	add.w	r3, r9, #4294967295
 8005d50:	930c      	str	r3, [sp, #48]	; 0x30
 8005d52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d54:	9b00      	ldr	r3, [sp, #0]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	d104      	bne.n	8005d64 <__ieee754_pow+0x1bc>
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	4643      	mov	r3, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	4641      	mov	r1, r8
 8005d62:	e7e5      	b.n	8005d30 <__ieee754_pow+0x188>
 8005d64:	4b16      	ldr	r3, [pc, #88]	; (8005dc0 <__ieee754_pow+0x218>)
 8005d66:	429d      	cmp	r5, r3
 8005d68:	f340 80fc 	ble.w	8005f64 <__ieee754_pow+0x3bc>
 8005d6c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005d70:	429d      	cmp	r5, r3
 8005d72:	dd0b      	ble.n	8005d8c <__ieee754_pow+0x1e4>
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <__ieee754_pow+0x20c>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	dc0e      	bgt.n	8005d98 <__ieee754_pow+0x1f0>
 8005d7a:	2e00      	cmp	r6, #0
 8005d7c:	f6bf af71 	bge.w	8005c62 <__ieee754_pow+0xba>
 8005d80:	a307      	add	r3, pc, #28	; (adr r3, 8005da0 <__ieee754_pow+0x1f8>)
 8005d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	e79e      	b.n	8005cca <__ieee754_pow+0x122>
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <__ieee754_pow+0x21c>)
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	ddf3      	ble.n	8005d7a <__ieee754_pow+0x1d2>
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <__ieee754_pow+0x210>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	dd17      	ble.n	8005dc8 <__ieee754_pow+0x220>
 8005d98:	2e00      	cmp	r6, #0
 8005d9a:	dcf1      	bgt.n	8005d80 <__ieee754_pow+0x1d8>
 8005d9c:	e761      	b.n	8005c62 <__ieee754_pow+0xba>
 8005d9e:	bf00      	nop
 8005da0:	8800759c 	.word	0x8800759c
 8005da4:	7e37e43c 	.word	0x7e37e43c
 8005da8:	7ff00000 	.word	0x7ff00000
 8005dac:	08006e33 	.word	0x08006e33
 8005db0:	433fffff 	.word	0x433fffff
 8005db4:	3fefffff 	.word	0x3fefffff
 8005db8:	3ff00000 	.word	0x3ff00000
 8005dbc:	3fe00000 	.word	0x3fe00000
 8005dc0:	41e00000 	.word	0x41e00000
 8005dc4:	3feffffe 	.word	0x3feffffe
 8005dc8:	2200      	movs	r2, #0
 8005dca:	4b61      	ldr	r3, [pc, #388]	; (8005f50 <__ieee754_pow+0x3a8>)
 8005dcc:	f7fa f9ce 	bl	800016c <__aeabi_dsub>
 8005dd0:	a355      	add	r3, pc, #340	; (adr r3, 8005f28 <__ieee754_pow+0x380>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	460d      	mov	r5, r1
 8005dda:	f7fa fb7b 	bl	80004d4 <__aeabi_dmul>
 8005dde:	a354      	add	r3, pc, #336	; (adr r3, 8005f30 <__ieee754_pow+0x388>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	4606      	mov	r6, r0
 8005de6:	460f      	mov	r7, r1
 8005de8:	4620      	mov	r0, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	f7fa fb72 	bl	80004d4 <__aeabi_dmul>
 8005df0:	2200      	movs	r2, #0
 8005df2:	4682      	mov	sl, r0
 8005df4:	468b      	mov	fp, r1
 8005df6:	4b57      	ldr	r3, [pc, #348]	; (8005f54 <__ieee754_pow+0x3ac>)
 8005df8:	4620      	mov	r0, r4
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	f7fa fb6a 	bl	80004d4 <__aeabi_dmul>
 8005e00:	4602      	mov	r2, r0
 8005e02:	460b      	mov	r3, r1
 8005e04:	a14c      	add	r1, pc, #304	; (adr r1, 8005f38 <__ieee754_pow+0x390>)
 8005e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e0a:	f7fa f9af 	bl	800016c <__aeabi_dsub>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	f7fa fb5f 	bl	80004d4 <__aeabi_dmul>
 8005e16:	4602      	mov	r2, r0
 8005e18:	460b      	mov	r3, r1
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	494e      	ldr	r1, [pc, #312]	; (8005f58 <__ieee754_pow+0x3b0>)
 8005e1e:	f7fa f9a5 	bl	800016c <__aeabi_dsub>
 8005e22:	4622      	mov	r2, r4
 8005e24:	462b      	mov	r3, r5
 8005e26:	4680      	mov	r8, r0
 8005e28:	4689      	mov	r9, r1
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	f7fa fb51 	bl	80004d4 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4640      	mov	r0, r8
 8005e38:	4649      	mov	r1, r9
 8005e3a:	f7fa fb4b 	bl	80004d4 <__aeabi_dmul>
 8005e3e:	a340      	add	r3, pc, #256	; (adr r3, 8005f40 <__ieee754_pow+0x398>)
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f7fa fb46 	bl	80004d4 <__aeabi_dmul>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	4659      	mov	r1, fp
 8005e50:	f7fa f98c 	bl	800016c <__aeabi_dsub>
 8005e54:	4602      	mov	r2, r0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4604      	mov	r4, r0
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	f7fa f986 	bl	8000170 <__adddf3>
 8005e64:	2000      	movs	r0, #0
 8005e66:	468b      	mov	fp, r1
 8005e68:	4682      	mov	sl, r0
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	f7fa f97d 	bl	800016c <__aeabi_dsub>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa f977 	bl	800016c <__aeabi_dsub>
 8005e7e:	9b00      	ldr	r3, [sp, #0]
 8005e80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e82:	3b01      	subs	r3, #1
 8005e84:	4313      	orrs	r3, r2
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	4c33      	ldreq	r4, [pc, #204]	; (8005f5c <__ieee754_pow+0x3b4>)
 8005e8e:	4c30      	ldrne	r4, [pc, #192]	; (8005f50 <__ieee754_pow+0x3a8>)
 8005e90:	4606      	mov	r6, r0
 8005e92:	e88d 0018 	stmia.w	sp, {r3, r4}
 8005e96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e9a:	2400      	movs	r4, #0
 8005e9c:	460f      	mov	r7, r1
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	f7fa f961 	bl	800016c <__aeabi_dsub>
 8005eaa:	4652      	mov	r2, sl
 8005eac:	465b      	mov	r3, fp
 8005eae:	f7fa fb11 	bl	80004d4 <__aeabi_dmul>
 8005eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	4689      	mov	r9, r1
 8005eba:	4630      	mov	r0, r6
 8005ebc:	4639      	mov	r1, r7
 8005ebe:	f7fa fb09 	bl	80004d4 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4640      	mov	r0, r8
 8005ec8:	4649      	mov	r1, r9
 8005eca:	f7fa f951 	bl	8000170 <__adddf3>
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	4659      	mov	r1, fp
 8005eda:	f7fa fafb 	bl	80004d4 <__aeabi_dmul>
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4640      	mov	r0, r8
 8005eea:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005eee:	f7fa f93f 	bl	8000170 <__adddf3>
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <__ieee754_pow+0x3b8>)
 8005ef4:	4682      	mov	sl, r0
 8005ef6:	4299      	cmp	r1, r3
 8005ef8:	460f      	mov	r7, r1
 8005efa:	460e      	mov	r6, r1
 8005efc:	f340 82da 	ble.w	80064b4 <__ieee754_pow+0x90c>
 8005f00:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005f04:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005f08:	4303      	orrs	r3, r0
 8005f0a:	f000 81d5 	beq.w	80062b8 <__ieee754_pow+0x710>
 8005f0e:	a30e      	add	r3, pc, #56	; (adr r3, 8005f48 <__ieee754_pow+0x3a0>)
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f18:	f7fa fadc 	bl	80004d4 <__aeabi_dmul>
 8005f1c:	a30a      	add	r3, pc, #40	; (adr r3, 8005f48 <__ieee754_pow+0x3a0>)
 8005f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f22:	e6d2      	b.n	8005cca <__ieee754_pow+0x122>
 8005f24:	f3af 8000 	nop.w
 8005f28:	60000000 	.word	0x60000000
 8005f2c:	3ff71547 	.word	0x3ff71547
 8005f30:	f85ddf44 	.word	0xf85ddf44
 8005f34:	3e54ae0b 	.word	0x3e54ae0b
 8005f38:	55555555 	.word	0x55555555
 8005f3c:	3fd55555 	.word	0x3fd55555
 8005f40:	652b82fe 	.word	0x652b82fe
 8005f44:	3ff71547 	.word	0x3ff71547
 8005f48:	8800759c 	.word	0x8800759c
 8005f4c:	7e37e43c 	.word	0x7e37e43c
 8005f50:	3ff00000 	.word	0x3ff00000
 8005f54:	3fd00000 	.word	0x3fd00000
 8005f58:	3fe00000 	.word	0x3fe00000
 8005f5c:	bff00000 	.word	0xbff00000
 8005f60:	408fffff 	.word	0x408fffff
 8005f64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	da05      	bge.n	8005f7a <__ieee754_pow+0x3d2>
 8005f6e:	4bca      	ldr	r3, [pc, #808]	; (8006298 <__ieee754_pow+0x6f0>)
 8005f70:	f7fa fab0 	bl	80004d4 <__aeabi_dmul>
 8005f74:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005f78:	460c      	mov	r4, r1
 8005f7a:	1523      	asrs	r3, r4, #20
 8005f7c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005f80:	4413      	add	r3, r2
 8005f82:	9307      	str	r3, [sp, #28]
 8005f84:	4bc5      	ldr	r3, [pc, #788]	; (800629c <__ieee754_pow+0x6f4>)
 8005f86:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005f8a:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005f94:	dd08      	ble.n	8005fa8 <__ieee754_pow+0x400>
 8005f96:	4bc2      	ldr	r3, [pc, #776]	; (80062a0 <__ieee754_pow+0x6f8>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	f340 8154 	ble.w	8006246 <__ieee754_pow+0x69e>
 8005f9e:	9b07      	ldr	r3, [sp, #28]
 8005fa0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	9307      	str	r3, [sp, #28]
 8005fa8:	2600      	movs	r6, #0
 8005faa:	4629      	mov	r1, r5
 8005fac:	00f3      	lsls	r3, r6, #3
 8005fae:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb0:	4bbc      	ldr	r3, [pc, #752]	; (80062a4 <__ieee754_pow+0x6fc>)
 8005fb2:	00f2      	lsls	r2, r6, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	cb18      	ldmia	r3, {r3, r4}
 8005fb8:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fc4:	f7fa f8d2 	bl	800016c <__aeabi_dsub>
 8005fc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005fd0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fd4:	f7fa f8cc 	bl	8000170 <__adddf3>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	2000      	movs	r0, #0
 8005fde:	49b2      	ldr	r1, [pc, #712]	; (80062a8 <__ieee754_pow+0x700>)
 8005fe0:	f7fa fba2 	bl	8000728 <__aeabi_ddiv>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005ff0:	f7fa fa70 	bl	80004d4 <__aeabi_dmul>
 8005ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ff8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005ffc:	f04f 0a00 	mov.w	sl, #0
 8006000:	2200      	movs	r2, #0
 8006002:	106d      	asrs	r5, r5, #1
 8006004:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006008:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800600c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006010:	4659      	mov	r1, fp
 8006012:	4650      	mov	r0, sl
 8006014:	4614      	mov	r4, r2
 8006016:	461d      	mov	r5, r3
 8006018:	f7fa fa5c 	bl	80004d4 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006024:	f7fa f8a2 	bl	800016c <__aeabi_dsub>
 8006028:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800602c:	4606      	mov	r6, r0
 800602e:	460f      	mov	r7, r1
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	f7fa f89a 	bl	800016c <__aeabi_dsub>
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006040:	f7fa f894 	bl	800016c <__aeabi_dsub>
 8006044:	465b      	mov	r3, fp
 8006046:	4652      	mov	r2, sl
 8006048:	f7fa fa44 	bl	80004d4 <__aeabi_dmul>
 800604c:	4602      	mov	r2, r0
 800604e:	460b      	mov	r3, r1
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa f88a 	bl	800016c <__aeabi_dsub>
 8006058:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800605c:	f7fa fa3a 	bl	80004d4 <__aeabi_dmul>
 8006060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006064:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006068:	4610      	mov	r0, r2
 800606a:	4619      	mov	r1, r3
 800606c:	f7fa fa32 	bl	80004d4 <__aeabi_dmul>
 8006070:	a377      	add	r3, pc, #476	; (adr r3, 8006250 <__ieee754_pow+0x6a8>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	f7fa fa2b 	bl	80004d4 <__aeabi_dmul>
 800607e:	a376      	add	r3, pc, #472	; (adr r3, 8006258 <__ieee754_pow+0x6b0>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f7fa f874 	bl	8000170 <__adddf3>
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	f7fa fa22 	bl	80004d4 <__aeabi_dmul>
 8006090:	a373      	add	r3, pc, #460	; (adr r3, 8006260 <__ieee754_pow+0x6b8>)
 8006092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006096:	f7fa f86b 	bl	8000170 <__adddf3>
 800609a:	4622      	mov	r2, r4
 800609c:	462b      	mov	r3, r5
 800609e:	f7fa fa19 	bl	80004d4 <__aeabi_dmul>
 80060a2:	a371      	add	r3, pc, #452	; (adr r3, 8006268 <__ieee754_pow+0x6c0>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa f862 	bl	8000170 <__adddf3>
 80060ac:	4622      	mov	r2, r4
 80060ae:	462b      	mov	r3, r5
 80060b0:	f7fa fa10 	bl	80004d4 <__aeabi_dmul>
 80060b4:	a36e      	add	r3, pc, #440	; (adr r3, 8006270 <__ieee754_pow+0x6c8>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa f859 	bl	8000170 <__adddf3>
 80060be:	4622      	mov	r2, r4
 80060c0:	462b      	mov	r3, r5
 80060c2:	f7fa fa07 	bl	80004d4 <__aeabi_dmul>
 80060c6:	a36c      	add	r3, pc, #432	; (adr r3, 8006278 <__ieee754_pow+0x6d0>)
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f7fa f850 	bl	8000170 <__adddf3>
 80060d0:	4622      	mov	r2, r4
 80060d2:	4606      	mov	r6, r0
 80060d4:	460f      	mov	r7, r1
 80060d6:	462b      	mov	r3, r5
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa f9fa 	bl	80004d4 <__aeabi_dmul>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4630      	mov	r0, r6
 80060e6:	4639      	mov	r1, r7
 80060e8:	f7fa f9f4 	bl	80004d4 <__aeabi_dmul>
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060f4:	465b      	mov	r3, fp
 80060f6:	4652      	mov	r2, sl
 80060f8:	f7fa f83a 	bl	8000170 <__adddf3>
 80060fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006100:	f7fa f9e8 	bl	80004d4 <__aeabi_dmul>
 8006104:	4622      	mov	r2, r4
 8006106:	462b      	mov	r3, r5
 8006108:	f7fa f832 	bl	8000170 <__adddf3>
 800610c:	465b      	mov	r3, fp
 800610e:	4606      	mov	r6, r0
 8006110:	460f      	mov	r7, r1
 8006112:	4652      	mov	r2, sl
 8006114:	4659      	mov	r1, fp
 8006116:	4650      	mov	r0, sl
 8006118:	f7fa f9dc 	bl	80004d4 <__aeabi_dmul>
 800611c:	2200      	movs	r2, #0
 800611e:	4b63      	ldr	r3, [pc, #396]	; (80062ac <__ieee754_pow+0x704>)
 8006120:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006124:	f7fa f824 	bl	8000170 <__adddf3>
 8006128:	4632      	mov	r2, r6
 800612a:	463b      	mov	r3, r7
 800612c:	f7fa f820 	bl	8000170 <__adddf3>
 8006130:	4650      	mov	r0, sl
 8006132:	460d      	mov	r5, r1
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4650      	mov	r0, sl
 800613a:	4659      	mov	r1, fp
 800613c:	f7fa f9ca 	bl	80004d4 <__aeabi_dmul>
 8006140:	2200      	movs	r2, #0
 8006142:	4680      	mov	r8, r0
 8006144:	4689      	mov	r9, r1
 8006146:	4b59      	ldr	r3, [pc, #356]	; (80062ac <__ieee754_pow+0x704>)
 8006148:	4629      	mov	r1, r5
 800614a:	4650      	mov	r0, sl
 800614c:	f7fa f80e 	bl	800016c <__aeabi_dsub>
 8006150:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006154:	f7fa f80a 	bl	800016c <__aeabi_dsub>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4630      	mov	r0, r6
 800615e:	4639      	mov	r1, r7
 8006160:	f7fa f804 	bl	800016c <__aeabi_dsub>
 8006164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006168:	f7fa f9b4 	bl	80004d4 <__aeabi_dmul>
 800616c:	462b      	mov	r3, r5
 800616e:	4606      	mov	r6, r0
 8006170:	460f      	mov	r7, r1
 8006172:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006176:	4652      	mov	r2, sl
 8006178:	f7fa f9ac 	bl	80004d4 <__aeabi_dmul>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4630      	mov	r0, r6
 8006182:	4639      	mov	r1, r7
 8006184:	f7f9 fff4 	bl	8000170 <__adddf3>
 8006188:	4606      	mov	r6, r0
 800618a:	460f      	mov	r7, r1
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4640      	mov	r0, r8
 8006192:	4649      	mov	r1, r9
 8006194:	f7f9 ffec 	bl	8000170 <__adddf3>
 8006198:	a339      	add	r3, pc, #228	; (adr r3, 8006280 <__ieee754_pow+0x6d8>)
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	4650      	mov	r0, sl
 80061a0:	460d      	mov	r5, r1
 80061a2:	f7fa f997 	bl	80004d4 <__aeabi_dmul>
 80061a6:	4642      	mov	r2, r8
 80061a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061ac:	464b      	mov	r3, r9
 80061ae:	4629      	mov	r1, r5
 80061b0:	4650      	mov	r0, sl
 80061b2:	f7f9 ffdb 	bl	800016c <__aeabi_dsub>
 80061b6:	4602      	mov	r2, r0
 80061b8:	460b      	mov	r3, r1
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7f9 ffd5 	bl	800016c <__aeabi_dsub>
 80061c2:	a331      	add	r3, pc, #196	; (adr r3, 8006288 <__ieee754_pow+0x6e0>)
 80061c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c8:	f7fa f984 	bl	80004d4 <__aeabi_dmul>
 80061cc:	a330      	add	r3, pc, #192	; (adr r3, 8006290 <__ieee754_pow+0x6e8>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	4650      	mov	r0, sl
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa f97b 	bl	80004d4 <__aeabi_dmul>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4630      	mov	r0, r6
 80061e4:	4639      	mov	r1, r7
 80061e6:	f7f9 ffc3 	bl	8000170 <__adddf3>
 80061ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061ec:	4b30      	ldr	r3, [pc, #192]	; (80062b0 <__ieee754_pow+0x708>)
 80061ee:	4413      	add	r3, r2
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f7f9 ffbc 	bl	8000170 <__adddf3>
 80061f8:	4604      	mov	r4, r0
 80061fa:	9807      	ldr	r0, [sp, #28]
 80061fc:	460d      	mov	r5, r1
 80061fe:	f7fa f903 	bl	8000408 <__aeabi_i2d>
 8006202:	4606      	mov	r6, r0
 8006204:	460f      	mov	r7, r1
 8006206:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006208:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <__ieee754_pow+0x70c>)
 800620a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800620e:	4413      	add	r3, r2
 8006210:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006214:	4622      	mov	r2, r4
 8006216:	462b      	mov	r3, r5
 8006218:	f7f9 ffaa 	bl	8000170 <__adddf3>
 800621c:	4642      	mov	r2, r8
 800621e:	464b      	mov	r3, r9
 8006220:	f7f9 ffa6 	bl	8000170 <__adddf3>
 8006224:	4632      	mov	r2, r6
 8006226:	463b      	mov	r3, r7
 8006228:	f7f9 ffa2 	bl	8000170 <__adddf3>
 800622c:	4632      	mov	r2, r6
 800622e:	463b      	mov	r3, r7
 8006230:	4650      	mov	r0, sl
 8006232:	468b      	mov	fp, r1
 8006234:	f7f9 ff9a 	bl	800016c <__aeabi_dsub>
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	f7f9 ff96 	bl	800016c <__aeabi_dsub>
 8006240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006244:	e613      	b.n	8005e6e <__ieee754_pow+0x2c6>
 8006246:	2601      	movs	r6, #1
 8006248:	e6af      	b.n	8005faa <__ieee754_pow+0x402>
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w
 8006250:	4a454eef 	.word	0x4a454eef
 8006254:	3fca7e28 	.word	0x3fca7e28
 8006258:	93c9db65 	.word	0x93c9db65
 800625c:	3fcd864a 	.word	0x3fcd864a
 8006260:	a91d4101 	.word	0xa91d4101
 8006264:	3fd17460 	.word	0x3fd17460
 8006268:	518f264d 	.word	0x518f264d
 800626c:	3fd55555 	.word	0x3fd55555
 8006270:	db6fabff 	.word	0xdb6fabff
 8006274:	3fdb6db6 	.word	0x3fdb6db6
 8006278:	33333303 	.word	0x33333303
 800627c:	3fe33333 	.word	0x3fe33333
 8006280:	e0000000 	.word	0xe0000000
 8006284:	3feec709 	.word	0x3feec709
 8006288:	dc3a03fd 	.word	0xdc3a03fd
 800628c:	3feec709 	.word	0x3feec709
 8006290:	145b01f5 	.word	0x145b01f5
 8006294:	be3e2fe0 	.word	0xbe3e2fe0
 8006298:	43400000 	.word	0x43400000
 800629c:	0003988e 	.word	0x0003988e
 80062a0:	000bb679 	.word	0x000bb679
 80062a4:	08006e38 	.word	0x08006e38
 80062a8:	3ff00000 	.word	0x3ff00000
 80062ac:	40080000 	.word	0x40080000
 80062b0:	08006e58 	.word	0x08006e58
 80062b4:	08006e48 	.word	0x08006e48
 80062b8:	a39b      	add	r3, pc, #620	; (adr r3, 8006528 <__ieee754_pow+0x980>)
 80062ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7f9 ff55 	bl	8000170 <__adddf3>
 80062c6:	4622      	mov	r2, r4
 80062c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062cc:	462b      	mov	r3, r5
 80062ce:	4650      	mov	r0, sl
 80062d0:	4639      	mov	r1, r7
 80062d2:	f7f9 ff4b 	bl	800016c <__aeabi_dsub>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	f7fa fb89 	bl	80009f4 <__aeabi_dcmpgt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f47f ae13 	bne.w	8005f0e <__ieee754_pow+0x366>
 80062e8:	4aa3      	ldr	r2, [pc, #652]	; (8006578 <__ieee754_pow+0x9d0>)
 80062ea:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f340 8104 	ble.w	80064fc <__ieee754_pow+0x954>
 80062f4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80062f8:	2000      	movs	r0, #0
 80062fa:	151b      	asrs	r3, r3, #20
 80062fc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006300:	fa4a f303 	asr.w	r3, sl, r3
 8006304:	4433      	add	r3, r6
 8006306:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800630a:	4f9c      	ldr	r7, [pc, #624]	; (800657c <__ieee754_pow+0x9d4>)
 800630c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006310:	4117      	asrs	r7, r2
 8006312:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006316:	ea23 0107 	bic.w	r1, r3, r7
 800631a:	f1c2 0214 	rsb	r2, r2, #20
 800631e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006322:	fa4a fa02 	asr.w	sl, sl, r2
 8006326:	2e00      	cmp	r6, #0
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	bfb8      	it	lt
 8006332:	f1ca 0a00 	rsblt	sl, sl, #0
 8006336:	f7f9 ff19 	bl	800016c <__aeabi_dsub>
 800633a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800633e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006342:	4642      	mov	r2, r8
 8006344:	464b      	mov	r3, r9
 8006346:	f7f9 ff13 	bl	8000170 <__adddf3>
 800634a:	a379      	add	r3, pc, #484	; (adr r3, 8006530 <__ieee754_pow+0x988>)
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	2000      	movs	r0, #0
 8006352:	460d      	mov	r5, r1
 8006354:	4604      	mov	r4, r0
 8006356:	f7fa f8bd 	bl	80004d4 <__aeabi_dmul>
 800635a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	4620      	mov	r0, r4
 8006364:	4629      	mov	r1, r5
 8006366:	f7f9 ff01 	bl	800016c <__aeabi_dsub>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4640      	mov	r0, r8
 8006370:	4649      	mov	r1, r9
 8006372:	f7f9 fefb 	bl	800016c <__aeabi_dsub>
 8006376:	a370      	add	r3, pc, #448	; (adr r3, 8006538 <__ieee754_pow+0x990>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f8aa 	bl	80004d4 <__aeabi_dmul>
 8006380:	a36f      	add	r3, pc, #444	; (adr r3, 8006540 <__ieee754_pow+0x998>)
 8006382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006386:	4680      	mov	r8, r0
 8006388:	4689      	mov	r9, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa f8a1 	bl	80004d4 <__aeabi_dmul>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4640      	mov	r0, r8
 8006398:	4649      	mov	r1, r9
 800639a:	f7f9 fee9 	bl	8000170 <__adddf3>
 800639e:	4604      	mov	r4, r0
 80063a0:	460d      	mov	r5, r1
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4630      	mov	r0, r6
 80063a8:	4639      	mov	r1, r7
 80063aa:	f7f9 fee1 	bl	8000170 <__adddf3>
 80063ae:	4632      	mov	r2, r6
 80063b0:	463b      	mov	r3, r7
 80063b2:	4680      	mov	r8, r0
 80063b4:	4689      	mov	r9, r1
 80063b6:	f7f9 fed9 	bl	800016c <__aeabi_dsub>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4620      	mov	r0, r4
 80063c0:	4629      	mov	r1, r5
 80063c2:	f7f9 fed3 	bl	800016c <__aeabi_dsub>
 80063c6:	4642      	mov	r2, r8
 80063c8:	4606      	mov	r6, r0
 80063ca:	460f      	mov	r7, r1
 80063cc:	464b      	mov	r3, r9
 80063ce:	4640      	mov	r0, r8
 80063d0:	4649      	mov	r1, r9
 80063d2:	f7fa f87f 	bl	80004d4 <__aeabi_dmul>
 80063d6:	a35c      	add	r3, pc, #368	; (adr r3, 8006548 <__ieee754_pow+0x9a0>)
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	4604      	mov	r4, r0
 80063de:	460d      	mov	r5, r1
 80063e0:	f7fa f878 	bl	80004d4 <__aeabi_dmul>
 80063e4:	a35a      	add	r3, pc, #360	; (adr r3, 8006550 <__ieee754_pow+0x9a8>)
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f7f9 febf 	bl	800016c <__aeabi_dsub>
 80063ee:	4622      	mov	r2, r4
 80063f0:	462b      	mov	r3, r5
 80063f2:	f7fa f86f 	bl	80004d4 <__aeabi_dmul>
 80063f6:	a358      	add	r3, pc, #352	; (adr r3, 8006558 <__ieee754_pow+0x9b0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7f9 feb8 	bl	8000170 <__adddf3>
 8006400:	4622      	mov	r2, r4
 8006402:	462b      	mov	r3, r5
 8006404:	f7fa f866 	bl	80004d4 <__aeabi_dmul>
 8006408:	a355      	add	r3, pc, #340	; (adr r3, 8006560 <__ieee754_pow+0x9b8>)
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	f7f9 fead 	bl	800016c <__aeabi_dsub>
 8006412:	4622      	mov	r2, r4
 8006414:	462b      	mov	r3, r5
 8006416:	f7fa f85d 	bl	80004d4 <__aeabi_dmul>
 800641a:	a353      	add	r3, pc, #332	; (adr r3, 8006568 <__ieee754_pow+0x9c0>)
 800641c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006420:	f7f9 fea6 	bl	8000170 <__adddf3>
 8006424:	4622      	mov	r2, r4
 8006426:	462b      	mov	r3, r5
 8006428:	f7fa f854 	bl	80004d4 <__aeabi_dmul>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4640      	mov	r0, r8
 8006432:	4649      	mov	r1, r9
 8006434:	f7f9 fe9a 	bl	800016c <__aeabi_dsub>
 8006438:	4604      	mov	r4, r0
 800643a:	460d      	mov	r5, r1
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7fa f846 	bl	80004d4 <__aeabi_dmul>
 8006448:	2200      	movs	r2, #0
 800644a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800644e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	f7f9 fe89 	bl	800016c <__aeabi_dsub>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006462:	f7fa f961 	bl	8000728 <__aeabi_ddiv>
 8006466:	4632      	mov	r2, r6
 8006468:	4604      	mov	r4, r0
 800646a:	460d      	mov	r5, r1
 800646c:	463b      	mov	r3, r7
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	f7fa f82f 	bl	80004d4 <__aeabi_dmul>
 8006476:	4632      	mov	r2, r6
 8006478:	463b      	mov	r3, r7
 800647a:	f7f9 fe79 	bl	8000170 <__adddf3>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4620      	mov	r0, r4
 8006484:	4629      	mov	r1, r5
 8006486:	f7f9 fe71 	bl	800016c <__aeabi_dsub>
 800648a:	4642      	mov	r2, r8
 800648c:	464b      	mov	r3, r9
 800648e:	f7f9 fe6d 	bl	800016c <__aeabi_dsub>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	2000      	movs	r0, #0
 8006498:	4939      	ldr	r1, [pc, #228]	; (8006580 <__ieee754_pow+0x9d8>)
 800649a:	f7f9 fe67 	bl	800016c <__aeabi_dsub>
 800649e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80064a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80064a6:	da2c      	bge.n	8006502 <__ieee754_pow+0x95a>
 80064a8:	4652      	mov	r2, sl
 80064aa:	f000 f9b5 	bl	8006818 <scalbn>
 80064ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064b2:	e40a      	b.n	8005cca <__ieee754_pow+0x122>
 80064b4:	4b33      	ldr	r3, [pc, #204]	; (8006584 <__ieee754_pow+0x9dc>)
 80064b6:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80064ba:	429f      	cmp	r7, r3
 80064bc:	f77f af14 	ble.w	80062e8 <__ieee754_pow+0x740>
 80064c0:	4b31      	ldr	r3, [pc, #196]	; (8006588 <__ieee754_pow+0x9e0>)
 80064c2:	440b      	add	r3, r1
 80064c4:	4303      	orrs	r3, r0
 80064c6:	d00b      	beq.n	80064e0 <__ieee754_pow+0x938>
 80064c8:	a329      	add	r3, pc, #164	; (adr r3, 8006570 <__ieee754_pow+0x9c8>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064d2:	f7f9 ffff 	bl	80004d4 <__aeabi_dmul>
 80064d6:	a326      	add	r3, pc, #152	; (adr r3, 8006570 <__ieee754_pow+0x9c8>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7ff bbf5 	b.w	8005cca <__ieee754_pow+0x122>
 80064e0:	4622      	mov	r2, r4
 80064e2:	462b      	mov	r3, r5
 80064e4:	f7f9 fe42 	bl	800016c <__aeabi_dsub>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4640      	mov	r0, r8
 80064ee:	4649      	mov	r1, r9
 80064f0:	f7fa fa6c 	bl	80009cc <__aeabi_dcmple>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f43f aef7 	beq.w	80062e8 <__ieee754_pow+0x740>
 80064fa:	e7e5      	b.n	80064c8 <__ieee754_pow+0x920>
 80064fc:	f04f 0a00 	mov.w	sl, #0
 8006500:	e71d      	b.n	800633e <__ieee754_pow+0x796>
 8006502:	4621      	mov	r1, r4
 8006504:	e7d3      	b.n	80064ae <__ieee754_pow+0x906>
 8006506:	2000      	movs	r0, #0
 8006508:	491d      	ldr	r1, [pc, #116]	; (8006580 <__ieee754_pow+0x9d8>)
 800650a:	f7ff bbac 	b.w	8005c66 <__ieee754_pow+0xbe>
 800650e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006512:	f7ff bba8 	b.w	8005c66 <__ieee754_pow+0xbe>
 8006516:	4638      	mov	r0, r7
 8006518:	4641      	mov	r1, r8
 800651a:	f7ff bba4 	b.w	8005c66 <__ieee754_pow+0xbe>
 800651e:	9200      	str	r2, [sp, #0]
 8006520:	f7ff bbb4 	b.w	8005c8c <__ieee754_pow+0xe4>
 8006524:	f3af 8000 	nop.w
 8006528:	652b82fe 	.word	0x652b82fe
 800652c:	3c971547 	.word	0x3c971547
 8006530:	00000000 	.word	0x00000000
 8006534:	3fe62e43 	.word	0x3fe62e43
 8006538:	fefa39ef 	.word	0xfefa39ef
 800653c:	3fe62e42 	.word	0x3fe62e42
 8006540:	0ca86c39 	.word	0x0ca86c39
 8006544:	be205c61 	.word	0xbe205c61
 8006548:	72bea4d0 	.word	0x72bea4d0
 800654c:	3e663769 	.word	0x3e663769
 8006550:	c5d26bf1 	.word	0xc5d26bf1
 8006554:	3ebbbd41 	.word	0x3ebbbd41
 8006558:	af25de2c 	.word	0xaf25de2c
 800655c:	3f11566a 	.word	0x3f11566a
 8006560:	16bebd93 	.word	0x16bebd93
 8006564:	3f66c16c 	.word	0x3f66c16c
 8006568:	5555553e 	.word	0x5555553e
 800656c:	3fc55555 	.word	0x3fc55555
 8006570:	c2f8f359 	.word	0xc2f8f359
 8006574:	01a56e1f 	.word	0x01a56e1f
 8006578:	3fe00000 	.word	0x3fe00000
 800657c:	000fffff 	.word	0x000fffff
 8006580:	3ff00000 	.word	0x3ff00000
 8006584:	4090cbff 	.word	0x4090cbff
 8006588:	3f6f3400 	.word	0x3f6f3400

0800658c <__ieee754_sqrt>:
 800658c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006590:	f8df e14c 	ldr.w	lr, [pc, #332]	; 80066e0 <__ieee754_sqrt+0x154>
 8006594:	4606      	mov	r6, r0
 8006596:	ea3e 0e01 	bics.w	lr, lr, r1
 800659a:	460d      	mov	r5, r1
 800659c:	4607      	mov	r7, r0
 800659e:	460a      	mov	r2, r1
 80065a0:	460c      	mov	r4, r1
 80065a2:	4603      	mov	r3, r0
 80065a4:	d10f      	bne.n	80065c6 <__ieee754_sqrt+0x3a>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	f7f9 ff93 	bl	80004d4 <__aeabi_dmul>
 80065ae:	4602      	mov	r2, r0
 80065b0:	460b      	mov	r3, r1
 80065b2:	4630      	mov	r0, r6
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7f9 fddb 	bl	8000170 <__adddf3>
 80065ba:	4606      	mov	r6, r0
 80065bc:	460d      	mov	r5, r1
 80065be:	4630      	mov	r0, r6
 80065c0:	4629      	mov	r1, r5
 80065c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c6:	2900      	cmp	r1, #0
 80065c8:	dc0e      	bgt.n	80065e8 <__ieee754_sqrt+0x5c>
 80065ca:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 80065ce:	ea5e 0707 	orrs.w	r7, lr, r7
 80065d2:	d0f4      	beq.n	80065be <__ieee754_sqrt+0x32>
 80065d4:	b141      	cbz	r1, 80065e8 <__ieee754_sqrt+0x5c>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	f7f9 fdc7 	bl	800016c <__aeabi_dsub>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	f7fa f8a1 	bl	8000728 <__aeabi_ddiv>
 80065e6:	e7e8      	b.n	80065ba <__ieee754_sqrt+0x2e>
 80065e8:	1512      	asrs	r2, r2, #20
 80065ea:	d10c      	bne.n	8006606 <__ieee754_sqrt+0x7a>
 80065ec:	2c00      	cmp	r4, #0
 80065ee:	d06e      	beq.n	80066ce <__ieee754_sqrt+0x142>
 80065f0:	2100      	movs	r1, #0
 80065f2:	02e6      	lsls	r6, r4, #11
 80065f4:	d56f      	bpl.n	80066d6 <__ieee754_sqrt+0x14a>
 80065f6:	1e48      	subs	r0, r1, #1
 80065f8:	1a12      	subs	r2, r2, r0
 80065fa:	f1c1 0020 	rsb	r0, r1, #32
 80065fe:	fa23 f000 	lsr.w	r0, r3, r0
 8006602:	4304      	orrs	r4, r0
 8006604:	408b      	lsls	r3, r1
 8006606:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800660a:	07d5      	lsls	r5, r2, #31
 800660c:	f04f 0500 	mov.w	r5, #0
 8006610:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006614:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8006618:	bf42      	ittt	mi
 800661a:	0064      	lslmi	r4, r4, #1
 800661c:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 8006620:	005b      	lslmi	r3, r3, #1
 8006622:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8006626:	1050      	asrs	r0, r2, #1
 8006628:	4421      	add	r1, r4
 800662a:	2216      	movs	r2, #22
 800662c:	462c      	mov	r4, r5
 800662e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006632:	005b      	lsls	r3, r3, #1
 8006634:	19a7      	adds	r7, r4, r6
 8006636:	428f      	cmp	r7, r1
 8006638:	bfde      	ittt	le
 800663a:	1bc9      	suble	r1, r1, r7
 800663c:	19bc      	addle	r4, r7, r6
 800663e:	19ad      	addle	r5, r5, r6
 8006640:	0049      	lsls	r1, r1, #1
 8006642:	3a01      	subs	r2, #1
 8006644:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006648:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800664c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006650:	d1f0      	bne.n	8006634 <__ieee754_sqrt+0xa8>
 8006652:	f04f 0e20 	mov.w	lr, #32
 8006656:	4694      	mov	ip, r2
 8006658:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800665c:	42a1      	cmp	r1, r4
 800665e:	eb06 070c 	add.w	r7, r6, ip
 8006662:	dc02      	bgt.n	800666a <__ieee754_sqrt+0xde>
 8006664:	d112      	bne.n	800668c <__ieee754_sqrt+0x100>
 8006666:	429f      	cmp	r7, r3
 8006668:	d810      	bhi.n	800668c <__ieee754_sqrt+0x100>
 800666a:	2f00      	cmp	r7, #0
 800666c:	eb07 0c06 	add.w	ip, r7, r6
 8006670:	da34      	bge.n	80066dc <__ieee754_sqrt+0x150>
 8006672:	f1bc 0f00 	cmp.w	ip, #0
 8006676:	db31      	blt.n	80066dc <__ieee754_sqrt+0x150>
 8006678:	f104 0801 	add.w	r8, r4, #1
 800667c:	1b09      	subs	r1, r1, r4
 800667e:	4644      	mov	r4, r8
 8006680:	429f      	cmp	r7, r3
 8006682:	bf88      	it	hi
 8006684:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006688:	1bdb      	subs	r3, r3, r7
 800668a:	4432      	add	r2, r6
 800668c:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006690:	f1be 0e01 	subs.w	lr, lr, #1
 8006694:	4439      	add	r1, r7
 8006696:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800669a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800669e:	d1dd      	bne.n	800665c <__ieee754_sqrt+0xd0>
 80066a0:	430b      	orrs	r3, r1
 80066a2:	d006      	beq.n	80066b2 <__ieee754_sqrt+0x126>
 80066a4:	1c54      	adds	r4, r2, #1
 80066a6:	bf0b      	itete	eq
 80066a8:	4672      	moveq	r2, lr
 80066aa:	3201      	addne	r2, #1
 80066ac:	3501      	addeq	r5, #1
 80066ae:	f022 0201 	bicne.w	r2, r2, #1
 80066b2:	106b      	asrs	r3, r5, #1
 80066b4:	0852      	lsrs	r2, r2, #1
 80066b6:	07e9      	lsls	r1, r5, #31
 80066b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80066bc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80066c0:	bf48      	it	mi
 80066c2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80066c6:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 80066ca:	4616      	mov	r6, r2
 80066cc:	e777      	b.n	80065be <__ieee754_sqrt+0x32>
 80066ce:	0adc      	lsrs	r4, r3, #11
 80066d0:	3a15      	subs	r2, #21
 80066d2:	055b      	lsls	r3, r3, #21
 80066d4:	e78a      	b.n	80065ec <__ieee754_sqrt+0x60>
 80066d6:	0064      	lsls	r4, r4, #1
 80066d8:	3101      	adds	r1, #1
 80066da:	e78a      	b.n	80065f2 <__ieee754_sqrt+0x66>
 80066dc:	46a0      	mov	r8, r4
 80066de:	e7cd      	b.n	800667c <__ieee754_sqrt+0xf0>
 80066e0:	7ff00000 	.word	0x7ff00000

080066e4 <fabs>:
 80066e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80066e8:	4770      	bx	lr

080066ea <finite>:
 80066ea:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80066ee:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 80066f2:	0fc0      	lsrs	r0, r0, #31
 80066f4:	4770      	bx	lr

080066f6 <matherr>:
 80066f6:	2000      	movs	r0, #0
 80066f8:	4770      	bx	lr
	...

080066fc <nan>:
 80066fc:	2000      	movs	r0, #0
 80066fe:	4901      	ldr	r1, [pc, #4]	; (8006704 <nan+0x8>)
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	7ff80000 	.word	0x7ff80000

08006708 <rint>:
 8006708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800670a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800670e:	f2ae 37ff 	subw	r7, lr, #1023	; 0x3ff
 8006712:	2f13      	cmp	r7, #19
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4684      	mov	ip, r0
 800671a:	460c      	mov	r4, r1
 800671c:	4605      	mov	r5, r0
 800671e:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8006722:	dc56      	bgt.n	80067d2 <rint+0xca>
 8006724:	2f00      	cmp	r7, #0
 8006726:	da29      	bge.n	800677c <rint+0x74>
 8006728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800672c:	4301      	orrs	r1, r0
 800672e:	d021      	beq.n	8006774 <rint+0x6c>
 8006730:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8006734:	4305      	orrs	r5, r0
 8006736:	426b      	negs	r3, r5
 8006738:	432b      	orrs	r3, r5
 800673a:	0b1b      	lsrs	r3, r3, #12
 800673c:	0c64      	lsrs	r4, r4, #17
 800673e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006742:	0464      	lsls	r4, r4, #17
 8006744:	ea43 0104 	orr.w	r1, r3, r4
 8006748:	4b31      	ldr	r3, [pc, #196]	; (8006810 <rint+0x108>)
 800674a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800674e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006752:	4622      	mov	r2, r4
 8006754:	462b      	mov	r3, r5
 8006756:	f7f9 fd0b 	bl	8000170 <__adddf3>
 800675a:	e9cd 0100 	strd	r0, r1, [sp]
 800675e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006762:	4622      	mov	r2, r4
 8006764:	462b      	mov	r3, r5
 8006766:	f7f9 fd01 	bl	800016c <__aeabi_dsub>
 800676a:	4602      	mov	r2, r0
 800676c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006770:	ea41 73c6 	orr.w	r3, r1, r6, lsl #31
 8006774:	4610      	mov	r0, r2
 8006776:	4619      	mov	r1, r3
 8006778:	b003      	add	sp, #12
 800677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677c:	4925      	ldr	r1, [pc, #148]	; (8006814 <rint+0x10c>)
 800677e:	4139      	asrs	r1, r7
 8006780:	ea03 0001 	and.w	r0, r3, r1
 8006784:	4310      	orrs	r0, r2
 8006786:	d0f5      	beq.n	8006774 <rint+0x6c>
 8006788:	084b      	lsrs	r3, r1, #1
 800678a:	ea04 0203 	and.w	r2, r4, r3
 800678e:	ea52 050c 	orrs.w	r5, r2, ip
 8006792:	d00a      	beq.n	80067aa <rint+0xa2>
 8006794:	ea24 0303 	bic.w	r3, r4, r3
 8006798:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 800679c:	2f13      	cmp	r7, #19
 800679e:	bf0c      	ite	eq
 80067a0:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80067a4:	2500      	movne	r5, #0
 80067a6:	413c      	asrs	r4, r7
 80067a8:	431c      	orrs	r4, r3
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <rint+0x108>)
 80067ac:	4621      	mov	r1, r4
 80067ae:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80067b2:	4628      	mov	r0, r5
 80067b4:	e9d6 4500 	ldrd	r4, r5, [r6]
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	f7f9 fcd8 	bl	8000170 <__adddf3>
 80067c0:	e9cd 0100 	strd	r0, r1, [sp]
 80067c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067c8:	4622      	mov	r2, r4
 80067ca:	462b      	mov	r3, r5
 80067cc:	f7f9 fcce 	bl	800016c <__aeabi_dsub>
 80067d0:	e006      	b.n	80067e0 <rint+0xd8>
 80067d2:	2f33      	cmp	r7, #51	; 0x33
 80067d4:	dd07      	ble.n	80067e6 <rint+0xde>
 80067d6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80067da:	d1cb      	bne.n	8006774 <rint+0x6c>
 80067dc:	f7f9 fcc8 	bl	8000170 <__adddf3>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	e7c6      	b.n	8006774 <rint+0x6c>
 80067e6:	f04f 31ff 	mov.w	r1, #4294967295
 80067ea:	f2ae 4e13 	subw	lr, lr, #1043	; 0x413
 80067ee:	fa21 f10e 	lsr.w	r1, r1, lr
 80067f2:	4208      	tst	r0, r1
 80067f4:	d0be      	beq.n	8006774 <rint+0x6c>
 80067f6:	084b      	lsrs	r3, r1, #1
 80067f8:	4218      	tst	r0, r3
 80067fa:	bf1f      	itttt	ne
 80067fc:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8006800:	ea20 0303 	bicne.w	r3, r0, r3
 8006804:	fa45 fe0e 	asrne.w	lr, r5, lr
 8006808:	ea4e 0503 	orrne.w	r5, lr, r3
 800680c:	e7cd      	b.n	80067aa <rint+0xa2>
 800680e:	bf00      	nop
 8006810:	08006e68 	.word	0x08006e68
 8006814:	000fffff 	.word	0x000fffff

08006818 <scalbn>:
 8006818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681a:	4616      	mov	r6, r2
 800681c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006820:	4604      	mov	r4, r0
 8006822:	460d      	mov	r5, r1
 8006824:	460b      	mov	r3, r1
 8006826:	b98a      	cbnz	r2, 800684c <scalbn+0x34>
 8006828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800682c:	4303      	orrs	r3, r0
 800682e:	d035      	beq.n	800689c <scalbn+0x84>
 8006830:	2200      	movs	r2, #0
 8006832:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <scalbn+0xd0>)
 8006834:	f7f9 fe4e 	bl	80004d4 <__aeabi_dmul>
 8006838:	4a2c      	ldr	r2, [pc, #176]	; (80068ec <scalbn+0xd4>)
 800683a:	4604      	mov	r4, r0
 800683c:	4296      	cmp	r6, r2
 800683e:	460d      	mov	r5, r1
 8006840:	460b      	mov	r3, r1
 8006842:	da0e      	bge.n	8006862 <scalbn+0x4a>
 8006844:	a324      	add	r3, pc, #144	; (adr r3, 80068d8 <scalbn+0xc0>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	e01c      	b.n	8006886 <scalbn+0x6e>
 800684c:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8006850:	42ba      	cmp	r2, r7
 8006852:	d109      	bne.n	8006868 <scalbn+0x50>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	f7f9 fc8a 	bl	8000170 <__adddf3>
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	e01c      	b.n	800689c <scalbn+0x84>
 8006862:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006866:	3a36      	subs	r2, #54	; 0x36
 8006868:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800686c:	4432      	add	r2, r6
 800686e:	428a      	cmp	r2, r1
 8006870:	dd0c      	ble.n	800688c <scalbn+0x74>
 8006872:	4622      	mov	r2, r4
 8006874:	462b      	mov	r3, r5
 8006876:	a11a      	add	r1, pc, #104	; (adr r1, 80068e0 <scalbn+0xc8>)
 8006878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800687c:	f000 f83a 	bl	80068f4 <copysign>
 8006880:	a317      	add	r3, pc, #92	; (adr r3, 80068e0 <scalbn+0xc8>)
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f7f9 fe25 	bl	80004d4 <__aeabi_dmul>
 800688a:	e7e7      	b.n	800685c <scalbn+0x44>
 800688c:	2a00      	cmp	r2, #0
 800688e:	dd08      	ble.n	80068a2 <scalbn+0x8a>
 8006890:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006894:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006898:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800689c:	4620      	mov	r0, r4
 800689e:	4629      	mov	r1, r5
 80068a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068a2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80068a6:	da0b      	bge.n	80068c0 <scalbn+0xa8>
 80068a8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80068ac:	429e      	cmp	r6, r3
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	dce0      	bgt.n	8006876 <scalbn+0x5e>
 80068b4:	a108      	add	r1, pc, #32	; (adr r1, 80068d8 <scalbn+0xc0>)
 80068b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80068ba:	f000 f81b 	bl	80068f4 <copysign>
 80068be:	e7c1      	b.n	8006844 <scalbn+0x2c>
 80068c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80068c4:	3236      	adds	r2, #54	; 0x36
 80068c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80068ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80068ce:	4620      	mov	r0, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	2200      	movs	r2, #0
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <scalbn+0xd8>)
 80068d6:	e7d6      	b.n	8006886 <scalbn+0x6e>
 80068d8:	c2f8f359 	.word	0xc2f8f359
 80068dc:	01a56e1f 	.word	0x01a56e1f
 80068e0:	8800759c 	.word	0x8800759c
 80068e4:	7e37e43c 	.word	0x7e37e43c
 80068e8:	43500000 	.word	0x43500000
 80068ec:	ffff3cb0 	.word	0xffff3cb0
 80068f0:	3c900000 	.word	0x3c900000

080068f4 <copysign>:
 80068f4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80068f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068fc:	ea42 0103 	orr.w	r1, r2, r3
 8006900:	4770      	bx	lr

08006902 <abort>:
 8006902:	b508      	push	{r3, lr}
 8006904:	2006      	movs	r0, #6
 8006906:	f000 f943 	bl	8006b90 <raise>
 800690a:	2001      	movs	r0, #1
 800690c:	f7fd f874 	bl	80039f8 <_exit>

08006910 <calloc>:
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <calloc+0xc>)
 8006912:	460a      	mov	r2, r1
 8006914:	4601      	mov	r1, r0
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	f000 b84a 	b.w	80069b0 <_calloc_r>
 800691c:	20000020 	.word	0x20000020

08006920 <__cxa_atexit>:
 8006920:	b510      	push	{r4, lr}
 8006922:	4c05      	ldr	r4, [pc, #20]	; (8006938 <__cxa_atexit+0x18>)
 8006924:	4613      	mov	r3, r2
 8006926:	b12c      	cbz	r4, 8006934 <__cxa_atexit+0x14>
 8006928:	460a      	mov	r2, r1
 800692a:	4601      	mov	r1, r0
 800692c:	2002      	movs	r0, #2
 800692e:	f3af 8000 	nop.w
 8006932:	bd10      	pop	{r4, pc}
 8006934:	4620      	mov	r0, r4
 8006936:	bd10      	pop	{r4, pc}
 8006938:	00000000 	.word	0x00000000

0800693c <__errno>:
 800693c:	4b01      	ldr	r3, [pc, #4]	; (8006944 <__errno+0x8>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	20000020 	.word	0x20000020

08006948 <__libc_init_array>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	2500      	movs	r5, #0
 800694c:	4e0c      	ldr	r6, [pc, #48]	; (8006980 <__libc_init_array+0x38>)
 800694e:	4c0d      	ldr	r4, [pc, #52]	; (8006984 <__libc_init_array+0x3c>)
 8006950:	1ba4      	subs	r4, r4, r6
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	42a5      	cmp	r5, r4
 8006956:	d109      	bne.n	800696c <__libc_init_array+0x24>
 8006958:	f000 f944 	bl	8006be4 <_init>
 800695c:	2500      	movs	r5, #0
 800695e:	4e0a      	ldr	r6, [pc, #40]	; (8006988 <__libc_init_array+0x40>)
 8006960:	4c0a      	ldr	r4, [pc, #40]	; (800698c <__libc_init_array+0x44>)
 8006962:	1ba4      	subs	r4, r4, r6
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	42a5      	cmp	r5, r4
 8006968:	d105      	bne.n	8006976 <__libc_init_array+0x2e>
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006970:	4798      	blx	r3
 8006972:	3501      	adds	r5, #1
 8006974:	e7ee      	b.n	8006954 <__libc_init_array+0xc>
 8006976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800697a:	4798      	blx	r3
 800697c:	3501      	adds	r5, #1
 800697e:	e7f2      	b.n	8006966 <__libc_init_array+0x1e>
 8006980:	080070e4 	.word	0x080070e4
 8006984:	080070e4 	.word	0x080070e4
 8006988:	080070e4 	.word	0x080070e4
 800698c:	08007100 	.word	0x08007100

08006990 <free>:
 8006990:	4b02      	ldr	r3, [pc, #8]	; (800699c <free+0xc>)
 8006992:	4601      	mov	r1, r0
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f000 b819 	b.w	80069cc <_free_r>
 800699a:	bf00      	nop
 800699c:	20000020 	.word	0x20000020

080069a0 <memset>:
 80069a0:	4603      	mov	r3, r0
 80069a2:	4402      	add	r2, r0
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d100      	bne.n	80069aa <memset+0xa>
 80069a8:	4770      	bx	lr
 80069aa:	f803 1b01 	strb.w	r1, [r3], #1
 80069ae:	e7f9      	b.n	80069a4 <memset+0x4>

080069b0 <_calloc_r>:
 80069b0:	b538      	push	{r3, r4, r5, lr}
 80069b2:	fb02 f401 	mul.w	r4, r2, r1
 80069b6:	4621      	mov	r1, r4
 80069b8:	f000 f854 	bl	8006a64 <_malloc_r>
 80069bc:	4605      	mov	r5, r0
 80069be:	b118      	cbz	r0, 80069c8 <_calloc_r+0x18>
 80069c0:	4622      	mov	r2, r4
 80069c2:	2100      	movs	r1, #0
 80069c4:	f7ff ffec 	bl	80069a0 <memset>
 80069c8:	4628      	mov	r0, r5
 80069ca:	bd38      	pop	{r3, r4, r5, pc}

080069cc <_free_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d043      	beq.n	8006a5c <_free_r+0x90>
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f0c      	subs	r4, r1, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	18e4      	addlt	r4, r4, r3
 80069e0:	f000 f8f2 	bl	8006bc8 <__malloc_lock>
 80069e4:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <_free_r+0x94>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	4610      	mov	r0, r2
 80069ea:	b933      	cbnz	r3, 80069fa <_free_r+0x2e>
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6014      	str	r4, [r2, #0]
 80069f0:	4628      	mov	r0, r5
 80069f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f6:	f000 b8e8 	b.w	8006bca <__malloc_unlock>
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	d90b      	bls.n	8006a16 <_free_r+0x4a>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	1862      	adds	r2, r4, r1
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf01      	itttt	eq
 8006a06:	681a      	ldreq	r2, [r3, #0]
 8006a08:	685b      	ldreq	r3, [r3, #4]
 8006a0a:	1852      	addeq	r2, r2, r1
 8006a0c:	6022      	streq	r2, [r4, #0]
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6004      	str	r4, [r0, #0]
 8006a12:	e7ed      	b.n	80069f0 <_free_r+0x24>
 8006a14:	4613      	mov	r3, r2
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	b10a      	cbz	r2, 8006a1e <_free_r+0x52>
 8006a1a:	42a2      	cmp	r2, r4
 8006a1c:	d9fa      	bls.n	8006a14 <_free_r+0x48>
 8006a1e:	6819      	ldr	r1, [r3, #0]
 8006a20:	1858      	adds	r0, r3, r1
 8006a22:	42a0      	cmp	r0, r4
 8006a24:	d10b      	bne.n	8006a3e <_free_r+0x72>
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	4401      	add	r1, r0
 8006a2a:	1858      	adds	r0, r3, r1
 8006a2c:	4282      	cmp	r2, r0
 8006a2e:	6019      	str	r1, [r3, #0]
 8006a30:	d1de      	bne.n	80069f0 <_free_r+0x24>
 8006a32:	6810      	ldr	r0, [r2, #0]
 8006a34:	6852      	ldr	r2, [r2, #4]
 8006a36:	4401      	add	r1, r0
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	e7d8      	b.n	80069f0 <_free_r+0x24>
 8006a3e:	d902      	bls.n	8006a46 <_free_r+0x7a>
 8006a40:	230c      	movs	r3, #12
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	e7d4      	b.n	80069f0 <_free_r+0x24>
 8006a46:	6820      	ldr	r0, [r4, #0]
 8006a48:	1821      	adds	r1, r4, r0
 8006a4a:	428a      	cmp	r2, r1
 8006a4c:	bf01      	itttt	eq
 8006a4e:	6811      	ldreq	r1, [r2, #0]
 8006a50:	6852      	ldreq	r2, [r2, #4]
 8006a52:	1809      	addeq	r1, r1, r0
 8006a54:	6021      	streq	r1, [r4, #0]
 8006a56:	6062      	str	r2, [r4, #4]
 8006a58:	605c      	str	r4, [r3, #4]
 8006a5a:	e7c9      	b.n	80069f0 <_free_r+0x24>
 8006a5c:	bd38      	pop	{r3, r4, r5, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000194 	.word	0x20000194

08006a64 <_malloc_r>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	1ccd      	adds	r5, r1, #3
 8006a68:	f025 0503 	bic.w	r5, r5, #3
 8006a6c:	3508      	adds	r5, #8
 8006a6e:	2d0c      	cmp	r5, #12
 8006a70:	bf38      	it	cc
 8006a72:	250c      	movcc	r5, #12
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	4606      	mov	r6, r0
 8006a78:	db01      	blt.n	8006a7e <_malloc_r+0x1a>
 8006a7a:	42a9      	cmp	r1, r5
 8006a7c:	d903      	bls.n	8006a86 <_malloc_r+0x22>
 8006a7e:	230c      	movs	r3, #12
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	2000      	movs	r0, #0
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	f000 f89f 	bl	8006bc8 <__malloc_lock>
 8006a8a:	4a23      	ldr	r2, [pc, #140]	; (8006b18 <_malloc_r+0xb4>)
 8006a8c:	6814      	ldr	r4, [r2, #0]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	b991      	cbnz	r1, 8006ab8 <_malloc_r+0x54>
 8006a92:	4c22      	ldr	r4, [pc, #136]	; (8006b1c <_malloc_r+0xb8>)
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	b91b      	cbnz	r3, 8006aa0 <_malloc_r+0x3c>
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 f841 	bl	8006b20 <_sbrk_r>
 8006a9e:	6020      	str	r0, [r4, #0]
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f83c 	bl	8006b20 <_sbrk_r>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d126      	bne.n	8006afa <_malloc_r+0x96>
 8006aac:	230c      	movs	r3, #12
 8006aae:	4630      	mov	r0, r6
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	f000 f88a 	bl	8006bca <__malloc_unlock>
 8006ab6:	e7e4      	b.n	8006a82 <_malloc_r+0x1e>
 8006ab8:	680b      	ldr	r3, [r1, #0]
 8006aba:	1b5b      	subs	r3, r3, r5
 8006abc:	d41a      	bmi.n	8006af4 <_malloc_r+0x90>
 8006abe:	2b0b      	cmp	r3, #11
 8006ac0:	d90f      	bls.n	8006ae2 <_malloc_r+0x7e>
 8006ac2:	600b      	str	r3, [r1, #0]
 8006ac4:	18cc      	adds	r4, r1, r3
 8006ac6:	50cd      	str	r5, [r1, r3]
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f000 f87e 	bl	8006bca <__malloc_unlock>
 8006ace:	f104 000b 	add.w	r0, r4, #11
 8006ad2:	1d23      	adds	r3, r4, #4
 8006ad4:	f020 0007 	bic.w	r0, r0, #7
 8006ad8:	1ac3      	subs	r3, r0, r3
 8006ada:	d01b      	beq.n	8006b14 <_malloc_r+0xb0>
 8006adc:	425a      	negs	r2, r3
 8006ade:	50e2      	str	r2, [r4, r3]
 8006ae0:	bd70      	pop	{r4, r5, r6, pc}
 8006ae2:	428c      	cmp	r4, r1
 8006ae4:	bf0b      	itete	eq
 8006ae6:	6863      	ldreq	r3, [r4, #4]
 8006ae8:	684b      	ldrne	r3, [r1, #4]
 8006aea:	6013      	streq	r3, [r2, #0]
 8006aec:	6063      	strne	r3, [r4, #4]
 8006aee:	bf18      	it	ne
 8006af0:	460c      	movne	r4, r1
 8006af2:	e7e9      	b.n	8006ac8 <_malloc_r+0x64>
 8006af4:	460c      	mov	r4, r1
 8006af6:	6849      	ldr	r1, [r1, #4]
 8006af8:	e7ca      	b.n	8006a90 <_malloc_r+0x2c>
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d005      	beq.n	8006b10 <_malloc_r+0xac>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 f80a 	bl	8006b20 <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0cd      	beq.n	8006aac <_malloc_r+0x48>
 8006b10:	6025      	str	r5, [r4, #0]
 8006b12:	e7d9      	b.n	8006ac8 <_malloc_r+0x64>
 8006b14:	bd70      	pop	{r4, r5, r6, pc}
 8006b16:	bf00      	nop
 8006b18:	20000194 	.word	0x20000194
 8006b1c:	20000198 	.word	0x20000198

08006b20 <_sbrk_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	2300      	movs	r3, #0
 8006b24:	4c05      	ldr	r4, [pc, #20]	; (8006b3c <_sbrk_r+0x1c>)
 8006b26:	4605      	mov	r5, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	f7fc ff6a 	bl	8003a04 <_sbrk>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_sbrk_r+0x1a>
 8006b34:	6823      	ldr	r3, [r4, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_sbrk_r+0x1a>
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200002c0 	.word	0x200002c0

08006b40 <_raise_r>:
 8006b40:	291f      	cmp	r1, #31
 8006b42:	b538      	push	{r3, r4, r5, lr}
 8006b44:	4604      	mov	r4, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	d904      	bls.n	8006b54 <_raise_r+0x14>
 8006b4a:	2316      	movs	r3, #22
 8006b4c:	6003      	str	r3, [r0, #0]
 8006b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b56:	b112      	cbz	r2, 8006b5e <_raise_r+0x1e>
 8006b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b5c:	b94b      	cbnz	r3, 8006b72 <_raise_r+0x32>
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 f830 	bl	8006bc4 <_getpid_r>
 8006b64:	462a      	mov	r2, r5
 8006b66:	4601      	mov	r1, r0
 8006b68:	4620      	mov	r0, r4
 8006b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6e:	f000 b817 	b.w	8006ba0 <_kill_r>
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d00a      	beq.n	8006b8c <_raise_r+0x4c>
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	d103      	bne.n	8006b82 <_raise_r+0x42>
 8006b7a:	2316      	movs	r3, #22
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	2001      	movs	r0, #1
 8006b80:	bd38      	pop	{r3, r4, r5, pc}
 8006b82:	2400      	movs	r4, #0
 8006b84:	4628      	mov	r0, r5
 8006b86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b8a:	4798      	blx	r3
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}

08006b90 <raise>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <raise+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f7ff bfd3 	b.w	8006b40 <_raise_r>
 8006b9a:	bf00      	nop
 8006b9c:	20000020 	.word	0x20000020

08006ba0 <_kill_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4c06      	ldr	r4, [pc, #24]	; (8006bc0 <_kill_r+0x20>)
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	f7fc ff1b 	bl	80039e8 <_kill>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d102      	bne.n	8006bbc <_kill_r+0x1c>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	b103      	cbz	r3, 8006bbc <_kill_r+0x1c>
 8006bba:	602b      	str	r3, [r5, #0]
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200002c0 	.word	0x200002c0

08006bc4 <_getpid_r>:
 8006bc4:	f7fc bf0e 	b.w	80039e4 <_getpid>

08006bc8 <__malloc_lock>:
 8006bc8:	4770      	bx	lr

08006bca <__malloc_unlock>:
 8006bca:	4770      	bx	lr

08006bcc <memcpy>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	1e43      	subs	r3, r0, #1
 8006bd0:	440a      	add	r2, r1
 8006bd2:	4291      	cmp	r1, r2
 8006bd4:	d100      	bne.n	8006bd8 <memcpy+0xc>
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006be0:	e7f7      	b.n	8006bd2 <memcpy+0x6>
	...

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
